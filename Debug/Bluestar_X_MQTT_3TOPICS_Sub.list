
Bluestar_X_MQTT_3TOPICS_Sub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018664  080041b0  080041b0  000041b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002320  0801c818  0801c818  0001c818  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801eb38  0801eb38  0001eb38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0801eb40  0801eb40  0001eb40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801eb48  0801eb48  0001eb48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00004234  20000000  0801eb4c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00024234  2**0
                  CONTENTS
  8 .bss          0000ce84  20004234  20004234  00024234  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200110b8  200110b8  00024234  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00024234  2**0
                  CONTENTS, READONLY
 11 .debug_info   00082cf9  00000000  00000000  00024264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000ca90  00000000  00000000  000a6f5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    000204ed  00000000  00000000  000b39ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002330  00000000  00000000  000d3ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002690  00000000  00000000  000d6210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a796  00000000  00000000  000d88a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005362e  00000000  00000000  00113036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f684  00000000  00000000  00166664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00275ce8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a60  00000000  00000000  00275d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080041b0 <__do_global_dtors_aux>:
 80041b0:	b510      	push	{r4, lr}
 80041b2:	4c05      	ldr	r4, [pc, #20]	; (80041c8 <__do_global_dtors_aux+0x18>)
 80041b4:	7823      	ldrb	r3, [r4, #0]
 80041b6:	b933      	cbnz	r3, 80041c6 <__do_global_dtors_aux+0x16>
 80041b8:	4b04      	ldr	r3, [pc, #16]	; (80041cc <__do_global_dtors_aux+0x1c>)
 80041ba:	b113      	cbz	r3, 80041c2 <__do_global_dtors_aux+0x12>
 80041bc:	4804      	ldr	r0, [pc, #16]	; (80041d0 <__do_global_dtors_aux+0x20>)
 80041be:	f3af 8000 	nop.w
 80041c2:	2301      	movs	r3, #1
 80041c4:	7023      	strb	r3, [r4, #0]
 80041c6:	bd10      	pop	{r4, pc}
 80041c8:	20004234 	.word	0x20004234
 80041cc:	00000000 	.word	0x00000000
 80041d0:	0801c7fc 	.word	0x0801c7fc

080041d4 <frame_dummy>:
 80041d4:	b508      	push	{r3, lr}
 80041d6:	4b03      	ldr	r3, [pc, #12]	; (80041e4 <frame_dummy+0x10>)
 80041d8:	b11b      	cbz	r3, 80041e2 <frame_dummy+0xe>
 80041da:	4903      	ldr	r1, [pc, #12]	; (80041e8 <frame_dummy+0x14>)
 80041dc:	4803      	ldr	r0, [pc, #12]	; (80041ec <frame_dummy+0x18>)
 80041de:	f3af 8000 	nop.w
 80041e2:	bd08      	pop	{r3, pc}
 80041e4:	00000000 	.word	0x00000000
 80041e8:	20004238 	.word	0x20004238
 80041ec:	0801c7fc 	.word	0x0801c7fc

080041f0 <strlen>:
 80041f0:	4603      	mov	r3, r0
 80041f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041f6:	2a00      	cmp	r2, #0
 80041f8:	d1fb      	bne.n	80041f2 <strlen+0x2>
 80041fa:	1a18      	subs	r0, r3, r0
 80041fc:	3801      	subs	r0, #1
 80041fe:	4770      	bx	lr

08004200 <memchr>:
 8004200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8004204:	2a10      	cmp	r2, #16
 8004206:	db2b      	blt.n	8004260 <memchr+0x60>
 8004208:	f010 0f07 	tst.w	r0, #7
 800420c:	d008      	beq.n	8004220 <memchr+0x20>
 800420e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004212:	3a01      	subs	r2, #1
 8004214:	428b      	cmp	r3, r1
 8004216:	d02d      	beq.n	8004274 <memchr+0x74>
 8004218:	f010 0f07 	tst.w	r0, #7
 800421c:	b342      	cbz	r2, 8004270 <memchr+0x70>
 800421e:	d1f6      	bne.n	800420e <memchr+0xe>
 8004220:	b4f0      	push	{r4, r5, r6, r7}
 8004222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8004226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800422a:	f022 0407 	bic.w	r4, r2, #7
 800422e:	f07f 0700 	mvns.w	r7, #0
 8004232:	2300      	movs	r3, #0
 8004234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004238:	3c08      	subs	r4, #8
 800423a:	ea85 0501 	eor.w	r5, r5, r1
 800423e:	ea86 0601 	eor.w	r6, r6, r1
 8004242:	fa85 f547 	uadd8	r5, r5, r7
 8004246:	faa3 f587 	sel	r5, r3, r7
 800424a:	fa86 f647 	uadd8	r6, r6, r7
 800424e:	faa5 f687 	sel	r6, r5, r7
 8004252:	b98e      	cbnz	r6, 8004278 <memchr+0x78>
 8004254:	d1ee      	bne.n	8004234 <memchr+0x34>
 8004256:	bcf0      	pop	{r4, r5, r6, r7}
 8004258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800425c:	f002 0207 	and.w	r2, r2, #7
 8004260:	b132      	cbz	r2, 8004270 <memchr+0x70>
 8004262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004266:	3a01      	subs	r2, #1
 8004268:	ea83 0301 	eor.w	r3, r3, r1
 800426c:	b113      	cbz	r3, 8004274 <memchr+0x74>
 800426e:	d1f8      	bne.n	8004262 <memchr+0x62>
 8004270:	2000      	movs	r0, #0
 8004272:	4770      	bx	lr
 8004274:	3801      	subs	r0, #1
 8004276:	4770      	bx	lr
 8004278:	2d00      	cmp	r5, #0
 800427a:	bf06      	itte	eq
 800427c:	4635      	moveq	r5, r6
 800427e:	3803      	subeq	r0, #3
 8004280:	3807      	subne	r0, #7
 8004282:	f015 0f01 	tst.w	r5, #1
 8004286:	d107      	bne.n	8004298 <memchr+0x98>
 8004288:	3001      	adds	r0, #1
 800428a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800428e:	bf02      	ittt	eq
 8004290:	3001      	addeq	r0, #1
 8004292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8004296:	3001      	addeq	r0, #1
 8004298:	bcf0      	pop	{r4, r5, r6, r7}
 800429a:	3801      	subs	r0, #1
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop

080042a0 <__aeabi_drsub>:
 80042a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80042a4:	e002      	b.n	80042ac <__adddf3>
 80042a6:	bf00      	nop

080042a8 <__aeabi_dsub>:
 80042a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080042ac <__adddf3>:
 80042ac:	b530      	push	{r4, r5, lr}
 80042ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80042b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80042b6:	ea94 0f05 	teq	r4, r5
 80042ba:	bf08      	it	eq
 80042bc:	ea90 0f02 	teqeq	r0, r2
 80042c0:	bf1f      	itttt	ne
 80042c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80042c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80042ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80042ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80042d2:	f000 80e2 	beq.w	800449a <__adddf3+0x1ee>
 80042d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80042da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80042de:	bfb8      	it	lt
 80042e0:	426d      	neglt	r5, r5
 80042e2:	dd0c      	ble.n	80042fe <__adddf3+0x52>
 80042e4:	442c      	add	r4, r5
 80042e6:	ea80 0202 	eor.w	r2, r0, r2
 80042ea:	ea81 0303 	eor.w	r3, r1, r3
 80042ee:	ea82 0000 	eor.w	r0, r2, r0
 80042f2:	ea83 0101 	eor.w	r1, r3, r1
 80042f6:	ea80 0202 	eor.w	r2, r0, r2
 80042fa:	ea81 0303 	eor.w	r3, r1, r3
 80042fe:	2d36      	cmp	r5, #54	; 0x36
 8004300:	bf88      	it	hi
 8004302:	bd30      	pophi	{r4, r5, pc}
 8004304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800430c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8004310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8004314:	d002      	beq.n	800431c <__adddf3+0x70>
 8004316:	4240      	negs	r0, r0
 8004318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800431c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8004320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8004328:	d002      	beq.n	8004330 <__adddf3+0x84>
 800432a:	4252      	negs	r2, r2
 800432c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004330:	ea94 0f05 	teq	r4, r5
 8004334:	f000 80a7 	beq.w	8004486 <__adddf3+0x1da>
 8004338:	f1a4 0401 	sub.w	r4, r4, #1
 800433c:	f1d5 0e20 	rsbs	lr, r5, #32
 8004340:	db0d      	blt.n	800435e <__adddf3+0xb2>
 8004342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004346:	fa22 f205 	lsr.w	r2, r2, r5
 800434a:	1880      	adds	r0, r0, r2
 800434c:	f141 0100 	adc.w	r1, r1, #0
 8004350:	fa03 f20e 	lsl.w	r2, r3, lr
 8004354:	1880      	adds	r0, r0, r2
 8004356:	fa43 f305 	asr.w	r3, r3, r5
 800435a:	4159      	adcs	r1, r3
 800435c:	e00e      	b.n	800437c <__adddf3+0xd0>
 800435e:	f1a5 0520 	sub.w	r5, r5, #32
 8004362:	f10e 0e20 	add.w	lr, lr, #32
 8004366:	2a01      	cmp	r2, #1
 8004368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800436c:	bf28      	it	cs
 800436e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004372:	fa43 f305 	asr.w	r3, r3, r5
 8004376:	18c0      	adds	r0, r0, r3
 8004378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800437c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004380:	d507      	bpl.n	8004392 <__adddf3+0xe6>
 8004382:	f04f 0e00 	mov.w	lr, #0
 8004386:	f1dc 0c00 	rsbs	ip, ip, #0
 800438a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800438e:	eb6e 0101 	sbc.w	r1, lr, r1
 8004392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004396:	d31b      	bcc.n	80043d0 <__adddf3+0x124>
 8004398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800439c:	d30c      	bcc.n	80043b8 <__adddf3+0x10c>
 800439e:	0849      	lsrs	r1, r1, #1
 80043a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80043a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80043a8:	f104 0401 	add.w	r4, r4, #1
 80043ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80043b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80043b4:	f080 809a 	bcs.w	80044ec <__adddf3+0x240>
 80043b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80043bc:	bf08      	it	eq
 80043be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80043c2:	f150 0000 	adcs.w	r0, r0, #0
 80043c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80043ca:	ea41 0105 	orr.w	r1, r1, r5
 80043ce:	bd30      	pop	{r4, r5, pc}
 80043d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80043d4:	4140      	adcs	r0, r0
 80043d6:	eb41 0101 	adc.w	r1, r1, r1
 80043da:	3c01      	subs	r4, #1
 80043dc:	bf28      	it	cs
 80043de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80043e2:	d2e9      	bcs.n	80043b8 <__adddf3+0x10c>
 80043e4:	f091 0f00 	teq	r1, #0
 80043e8:	bf04      	itt	eq
 80043ea:	4601      	moveq	r1, r0
 80043ec:	2000      	moveq	r0, #0
 80043ee:	fab1 f381 	clz	r3, r1
 80043f2:	bf08      	it	eq
 80043f4:	3320      	addeq	r3, #32
 80043f6:	f1a3 030b 	sub.w	r3, r3, #11
 80043fa:	f1b3 0220 	subs.w	r2, r3, #32
 80043fe:	da0c      	bge.n	800441a <__adddf3+0x16e>
 8004400:	320c      	adds	r2, #12
 8004402:	dd08      	ble.n	8004416 <__adddf3+0x16a>
 8004404:	f102 0c14 	add.w	ip, r2, #20
 8004408:	f1c2 020c 	rsb	r2, r2, #12
 800440c:	fa01 f00c 	lsl.w	r0, r1, ip
 8004410:	fa21 f102 	lsr.w	r1, r1, r2
 8004414:	e00c      	b.n	8004430 <__adddf3+0x184>
 8004416:	f102 0214 	add.w	r2, r2, #20
 800441a:	bfd8      	it	le
 800441c:	f1c2 0c20 	rsble	ip, r2, #32
 8004420:	fa01 f102 	lsl.w	r1, r1, r2
 8004424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8004428:	bfdc      	itt	le
 800442a:	ea41 010c 	orrle.w	r1, r1, ip
 800442e:	4090      	lslle	r0, r2
 8004430:	1ae4      	subs	r4, r4, r3
 8004432:	bfa2      	ittt	ge
 8004434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8004438:	4329      	orrge	r1, r5
 800443a:	bd30      	popge	{r4, r5, pc}
 800443c:	ea6f 0404 	mvn.w	r4, r4
 8004440:	3c1f      	subs	r4, #31
 8004442:	da1c      	bge.n	800447e <__adddf3+0x1d2>
 8004444:	340c      	adds	r4, #12
 8004446:	dc0e      	bgt.n	8004466 <__adddf3+0x1ba>
 8004448:	f104 0414 	add.w	r4, r4, #20
 800444c:	f1c4 0220 	rsb	r2, r4, #32
 8004450:	fa20 f004 	lsr.w	r0, r0, r4
 8004454:	fa01 f302 	lsl.w	r3, r1, r2
 8004458:	ea40 0003 	orr.w	r0, r0, r3
 800445c:	fa21 f304 	lsr.w	r3, r1, r4
 8004460:	ea45 0103 	orr.w	r1, r5, r3
 8004464:	bd30      	pop	{r4, r5, pc}
 8004466:	f1c4 040c 	rsb	r4, r4, #12
 800446a:	f1c4 0220 	rsb	r2, r4, #32
 800446e:	fa20 f002 	lsr.w	r0, r0, r2
 8004472:	fa01 f304 	lsl.w	r3, r1, r4
 8004476:	ea40 0003 	orr.w	r0, r0, r3
 800447a:	4629      	mov	r1, r5
 800447c:	bd30      	pop	{r4, r5, pc}
 800447e:	fa21 f004 	lsr.w	r0, r1, r4
 8004482:	4629      	mov	r1, r5
 8004484:	bd30      	pop	{r4, r5, pc}
 8004486:	f094 0f00 	teq	r4, #0
 800448a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800448e:	bf06      	itte	eq
 8004490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004494:	3401      	addeq	r4, #1
 8004496:	3d01      	subne	r5, #1
 8004498:	e74e      	b.n	8004338 <__adddf3+0x8c>
 800449a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800449e:	bf18      	it	ne
 80044a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80044a4:	d029      	beq.n	80044fa <__adddf3+0x24e>
 80044a6:	ea94 0f05 	teq	r4, r5
 80044aa:	bf08      	it	eq
 80044ac:	ea90 0f02 	teqeq	r0, r2
 80044b0:	d005      	beq.n	80044be <__adddf3+0x212>
 80044b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80044b6:	bf04      	itt	eq
 80044b8:	4619      	moveq	r1, r3
 80044ba:	4610      	moveq	r0, r2
 80044bc:	bd30      	pop	{r4, r5, pc}
 80044be:	ea91 0f03 	teq	r1, r3
 80044c2:	bf1e      	ittt	ne
 80044c4:	2100      	movne	r1, #0
 80044c6:	2000      	movne	r0, #0
 80044c8:	bd30      	popne	{r4, r5, pc}
 80044ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80044ce:	d105      	bne.n	80044dc <__adddf3+0x230>
 80044d0:	0040      	lsls	r0, r0, #1
 80044d2:	4149      	adcs	r1, r1
 80044d4:	bf28      	it	cs
 80044d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80044da:	bd30      	pop	{r4, r5, pc}
 80044dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80044e0:	bf3c      	itt	cc
 80044e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80044e6:	bd30      	popcc	{r4, r5, pc}
 80044e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80044ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80044f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80044f4:	f04f 0000 	mov.w	r0, #0
 80044f8:	bd30      	pop	{r4, r5, pc}
 80044fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80044fe:	bf1a      	itte	ne
 8004500:	4619      	movne	r1, r3
 8004502:	4610      	movne	r0, r2
 8004504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8004508:	bf1c      	itt	ne
 800450a:	460b      	movne	r3, r1
 800450c:	4602      	movne	r2, r0
 800450e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004512:	bf06      	itte	eq
 8004514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8004518:	ea91 0f03 	teqeq	r1, r3
 800451c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8004520:	bd30      	pop	{r4, r5, pc}
 8004522:	bf00      	nop

08004524 <__aeabi_ui2d>:
 8004524:	f090 0f00 	teq	r0, #0
 8004528:	bf04      	itt	eq
 800452a:	2100      	moveq	r1, #0
 800452c:	4770      	bxeq	lr
 800452e:	b530      	push	{r4, r5, lr}
 8004530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004538:	f04f 0500 	mov.w	r5, #0
 800453c:	f04f 0100 	mov.w	r1, #0
 8004540:	e750      	b.n	80043e4 <__adddf3+0x138>
 8004542:	bf00      	nop

08004544 <__aeabi_i2d>:
 8004544:	f090 0f00 	teq	r0, #0
 8004548:	bf04      	itt	eq
 800454a:	2100      	moveq	r1, #0
 800454c:	4770      	bxeq	lr
 800454e:	b530      	push	{r4, r5, lr}
 8004550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800455c:	bf48      	it	mi
 800455e:	4240      	negmi	r0, r0
 8004560:	f04f 0100 	mov.w	r1, #0
 8004564:	e73e      	b.n	80043e4 <__adddf3+0x138>
 8004566:	bf00      	nop

08004568 <__aeabi_f2d>:
 8004568:	0042      	lsls	r2, r0, #1
 800456a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800456e:	ea4f 0131 	mov.w	r1, r1, rrx
 8004572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004576:	bf1f      	itttt	ne
 8004578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800457c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004584:	4770      	bxne	lr
 8004586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800458a:	bf08      	it	eq
 800458c:	4770      	bxeq	lr
 800458e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8004592:	bf04      	itt	eq
 8004594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8004598:	4770      	bxeq	lr
 800459a:	b530      	push	{r4, r5, lr}
 800459c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80045a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80045a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80045a8:	e71c      	b.n	80043e4 <__adddf3+0x138>
 80045aa:	bf00      	nop

080045ac <__aeabi_ul2d>:
 80045ac:	ea50 0201 	orrs.w	r2, r0, r1
 80045b0:	bf08      	it	eq
 80045b2:	4770      	bxeq	lr
 80045b4:	b530      	push	{r4, r5, lr}
 80045b6:	f04f 0500 	mov.w	r5, #0
 80045ba:	e00a      	b.n	80045d2 <__aeabi_l2d+0x16>

080045bc <__aeabi_l2d>:
 80045bc:	ea50 0201 	orrs.w	r2, r0, r1
 80045c0:	bf08      	it	eq
 80045c2:	4770      	bxeq	lr
 80045c4:	b530      	push	{r4, r5, lr}
 80045c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80045ca:	d502      	bpl.n	80045d2 <__aeabi_l2d+0x16>
 80045cc:	4240      	negs	r0, r0
 80045ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80045d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80045d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80045da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80045de:	f43f aed8 	beq.w	8004392 <__adddf3+0xe6>
 80045e2:	f04f 0203 	mov.w	r2, #3
 80045e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80045ea:	bf18      	it	ne
 80045ec:	3203      	addne	r2, #3
 80045ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80045f2:	bf18      	it	ne
 80045f4:	3203      	addne	r2, #3
 80045f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80045fa:	f1c2 0320 	rsb	r3, r2, #32
 80045fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8004602:	fa20 f002 	lsr.w	r0, r0, r2
 8004606:	fa01 fe03 	lsl.w	lr, r1, r3
 800460a:	ea40 000e 	orr.w	r0, r0, lr
 800460e:	fa21 f102 	lsr.w	r1, r1, r2
 8004612:	4414      	add	r4, r2
 8004614:	e6bd      	b.n	8004392 <__adddf3+0xe6>
 8004616:	bf00      	nop

08004618 <__aeabi_dmul>:
 8004618:	b570      	push	{r4, r5, r6, lr}
 800461a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800461e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8004622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8004626:	bf1d      	ittte	ne
 8004628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800462c:	ea94 0f0c 	teqne	r4, ip
 8004630:	ea95 0f0c 	teqne	r5, ip
 8004634:	f000 f8de 	bleq	80047f4 <__aeabi_dmul+0x1dc>
 8004638:	442c      	add	r4, r5
 800463a:	ea81 0603 	eor.w	r6, r1, r3
 800463e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8004642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8004646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800464a:	bf18      	it	ne
 800464c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8004650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004658:	d038      	beq.n	80046cc <__aeabi_dmul+0xb4>
 800465a:	fba0 ce02 	umull	ip, lr, r0, r2
 800465e:	f04f 0500 	mov.w	r5, #0
 8004662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8004666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800466a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800466e:	f04f 0600 	mov.w	r6, #0
 8004672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8004676:	f09c 0f00 	teq	ip, #0
 800467a:	bf18      	it	ne
 800467c:	f04e 0e01 	orrne.w	lr, lr, #1
 8004680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8004684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8004688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800468c:	d204      	bcs.n	8004698 <__aeabi_dmul+0x80>
 800468e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004692:	416d      	adcs	r5, r5
 8004694:	eb46 0606 	adc.w	r6, r6, r6
 8004698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800469c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80046a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80046a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80046a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80046ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80046b0:	bf88      	it	hi
 80046b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80046b6:	d81e      	bhi.n	80046f6 <__aeabi_dmul+0xde>
 80046b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80046bc:	bf08      	it	eq
 80046be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80046c2:	f150 0000 	adcs.w	r0, r0, #0
 80046c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80046ca:	bd70      	pop	{r4, r5, r6, pc}
 80046cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80046d0:	ea46 0101 	orr.w	r1, r6, r1
 80046d4:	ea40 0002 	orr.w	r0, r0, r2
 80046d8:	ea81 0103 	eor.w	r1, r1, r3
 80046dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80046e0:	bfc2      	ittt	gt
 80046e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80046e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80046ea:	bd70      	popgt	{r4, r5, r6, pc}
 80046ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80046f0:	f04f 0e00 	mov.w	lr, #0
 80046f4:	3c01      	subs	r4, #1
 80046f6:	f300 80ab 	bgt.w	8004850 <__aeabi_dmul+0x238>
 80046fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80046fe:	bfde      	ittt	le
 8004700:	2000      	movle	r0, #0
 8004702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8004706:	bd70      	pople	{r4, r5, r6, pc}
 8004708:	f1c4 0400 	rsb	r4, r4, #0
 800470c:	3c20      	subs	r4, #32
 800470e:	da35      	bge.n	800477c <__aeabi_dmul+0x164>
 8004710:	340c      	adds	r4, #12
 8004712:	dc1b      	bgt.n	800474c <__aeabi_dmul+0x134>
 8004714:	f104 0414 	add.w	r4, r4, #20
 8004718:	f1c4 0520 	rsb	r5, r4, #32
 800471c:	fa00 f305 	lsl.w	r3, r0, r5
 8004720:	fa20 f004 	lsr.w	r0, r0, r4
 8004724:	fa01 f205 	lsl.w	r2, r1, r5
 8004728:	ea40 0002 	orr.w	r0, r0, r2
 800472c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8004730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004738:	fa21 f604 	lsr.w	r6, r1, r4
 800473c:	eb42 0106 	adc.w	r1, r2, r6
 8004740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004744:	bf08      	it	eq
 8004746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800474a:	bd70      	pop	{r4, r5, r6, pc}
 800474c:	f1c4 040c 	rsb	r4, r4, #12
 8004750:	f1c4 0520 	rsb	r5, r4, #32
 8004754:	fa00 f304 	lsl.w	r3, r0, r4
 8004758:	fa20 f005 	lsr.w	r0, r0, r5
 800475c:	fa01 f204 	lsl.w	r2, r1, r4
 8004760:	ea40 0002 	orr.w	r0, r0, r2
 8004764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800476c:	f141 0100 	adc.w	r1, r1, #0
 8004770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004774:	bf08      	it	eq
 8004776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800477a:	bd70      	pop	{r4, r5, r6, pc}
 800477c:	f1c4 0520 	rsb	r5, r4, #32
 8004780:	fa00 f205 	lsl.w	r2, r0, r5
 8004784:	ea4e 0e02 	orr.w	lr, lr, r2
 8004788:	fa20 f304 	lsr.w	r3, r0, r4
 800478c:	fa01 f205 	lsl.w	r2, r1, r5
 8004790:	ea43 0302 	orr.w	r3, r3, r2
 8004794:	fa21 f004 	lsr.w	r0, r1, r4
 8004798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800479c:	fa21 f204 	lsr.w	r2, r1, r4
 80047a0:	ea20 0002 	bic.w	r0, r0, r2
 80047a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80047a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80047ac:	bf08      	it	eq
 80047ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80047b2:	bd70      	pop	{r4, r5, r6, pc}
 80047b4:	f094 0f00 	teq	r4, #0
 80047b8:	d10f      	bne.n	80047da <__aeabi_dmul+0x1c2>
 80047ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80047be:	0040      	lsls	r0, r0, #1
 80047c0:	eb41 0101 	adc.w	r1, r1, r1
 80047c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80047c8:	bf08      	it	eq
 80047ca:	3c01      	subeq	r4, #1
 80047cc:	d0f7      	beq.n	80047be <__aeabi_dmul+0x1a6>
 80047ce:	ea41 0106 	orr.w	r1, r1, r6
 80047d2:	f095 0f00 	teq	r5, #0
 80047d6:	bf18      	it	ne
 80047d8:	4770      	bxne	lr
 80047da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80047de:	0052      	lsls	r2, r2, #1
 80047e0:	eb43 0303 	adc.w	r3, r3, r3
 80047e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80047e8:	bf08      	it	eq
 80047ea:	3d01      	subeq	r5, #1
 80047ec:	d0f7      	beq.n	80047de <__aeabi_dmul+0x1c6>
 80047ee:	ea43 0306 	orr.w	r3, r3, r6
 80047f2:	4770      	bx	lr
 80047f4:	ea94 0f0c 	teq	r4, ip
 80047f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80047fc:	bf18      	it	ne
 80047fe:	ea95 0f0c 	teqne	r5, ip
 8004802:	d00c      	beq.n	800481e <__aeabi_dmul+0x206>
 8004804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004808:	bf18      	it	ne
 800480a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800480e:	d1d1      	bne.n	80047b4 <__aeabi_dmul+0x19c>
 8004810:	ea81 0103 	eor.w	r1, r1, r3
 8004814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004818:	f04f 0000 	mov.w	r0, #0
 800481c:	bd70      	pop	{r4, r5, r6, pc}
 800481e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004822:	bf06      	itte	eq
 8004824:	4610      	moveq	r0, r2
 8004826:	4619      	moveq	r1, r3
 8004828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800482c:	d019      	beq.n	8004862 <__aeabi_dmul+0x24a>
 800482e:	ea94 0f0c 	teq	r4, ip
 8004832:	d102      	bne.n	800483a <__aeabi_dmul+0x222>
 8004834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8004838:	d113      	bne.n	8004862 <__aeabi_dmul+0x24a>
 800483a:	ea95 0f0c 	teq	r5, ip
 800483e:	d105      	bne.n	800484c <__aeabi_dmul+0x234>
 8004840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8004844:	bf1c      	itt	ne
 8004846:	4610      	movne	r0, r2
 8004848:	4619      	movne	r1, r3
 800484a:	d10a      	bne.n	8004862 <__aeabi_dmul+0x24a>
 800484c:	ea81 0103 	eor.w	r1, r1, r3
 8004850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8004858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800485c:	f04f 0000 	mov.w	r0, #0
 8004860:	bd70      	pop	{r4, r5, r6, pc}
 8004862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8004866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800486a:	bd70      	pop	{r4, r5, r6, pc}

0800486c <__aeabi_ddiv>:
 800486c:	b570      	push	{r4, r5, r6, lr}
 800486e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8004876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800487a:	bf1d      	ittte	ne
 800487c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004880:	ea94 0f0c 	teqne	r4, ip
 8004884:	ea95 0f0c 	teqne	r5, ip
 8004888:	f000 f8a7 	bleq	80049da <__aeabi_ddiv+0x16e>
 800488c:	eba4 0405 	sub.w	r4, r4, r5
 8004890:	ea81 0e03 	eor.w	lr, r1, r3
 8004894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800489c:	f000 8088 	beq.w	80049b0 <__aeabi_ddiv+0x144>
 80048a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80048a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80048a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80048ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80048b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80048b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80048b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80048bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80048c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80048c4:	429d      	cmp	r5, r3
 80048c6:	bf08      	it	eq
 80048c8:	4296      	cmpeq	r6, r2
 80048ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80048ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80048d2:	d202      	bcs.n	80048da <__aeabi_ddiv+0x6e>
 80048d4:	085b      	lsrs	r3, r3, #1
 80048d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80048da:	1ab6      	subs	r6, r6, r2
 80048dc:	eb65 0503 	sbc.w	r5, r5, r3
 80048e0:	085b      	lsrs	r3, r3, #1
 80048e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80048e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80048ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80048ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80048f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048f6:	bf22      	ittt	cs
 80048f8:	1ab6      	subcs	r6, r6, r2
 80048fa:	4675      	movcs	r5, lr
 80048fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8004900:	085b      	lsrs	r3, r3, #1
 8004902:	ea4f 0232 	mov.w	r2, r2, rrx
 8004906:	ebb6 0e02 	subs.w	lr, r6, r2
 800490a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800490e:	bf22      	ittt	cs
 8004910:	1ab6      	subcs	r6, r6, r2
 8004912:	4675      	movcs	r5, lr
 8004914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8004918:	085b      	lsrs	r3, r3, #1
 800491a:	ea4f 0232 	mov.w	r2, r2, rrx
 800491e:	ebb6 0e02 	subs.w	lr, r6, r2
 8004922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004926:	bf22      	ittt	cs
 8004928:	1ab6      	subcs	r6, r6, r2
 800492a:	4675      	movcs	r5, lr
 800492c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8004930:	085b      	lsrs	r3, r3, #1
 8004932:	ea4f 0232 	mov.w	r2, r2, rrx
 8004936:	ebb6 0e02 	subs.w	lr, r6, r2
 800493a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800493e:	bf22      	ittt	cs
 8004940:	1ab6      	subcs	r6, r6, r2
 8004942:	4675      	movcs	r5, lr
 8004944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8004948:	ea55 0e06 	orrs.w	lr, r5, r6
 800494c:	d018      	beq.n	8004980 <__aeabi_ddiv+0x114>
 800494e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8004952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8004956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800495a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800495e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8004962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8004966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800496a:	d1c0      	bne.n	80048ee <__aeabi_ddiv+0x82>
 800496c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004970:	d10b      	bne.n	800498a <__aeabi_ddiv+0x11e>
 8004972:	ea41 0100 	orr.w	r1, r1, r0
 8004976:	f04f 0000 	mov.w	r0, #0
 800497a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800497e:	e7b6      	b.n	80048ee <__aeabi_ddiv+0x82>
 8004980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004984:	bf04      	itt	eq
 8004986:	4301      	orreq	r1, r0
 8004988:	2000      	moveq	r0, #0
 800498a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800498e:	bf88      	it	hi
 8004990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004994:	f63f aeaf 	bhi.w	80046f6 <__aeabi_dmul+0xde>
 8004998:	ebb5 0c03 	subs.w	ip, r5, r3
 800499c:	bf04      	itt	eq
 800499e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80049a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80049a6:	f150 0000 	adcs.w	r0, r0, #0
 80049aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80049ae:	bd70      	pop	{r4, r5, r6, pc}
 80049b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80049b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80049b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80049bc:	bfc2      	ittt	gt
 80049be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80049c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80049c6:	bd70      	popgt	{r4, r5, r6, pc}
 80049c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80049cc:	f04f 0e00 	mov.w	lr, #0
 80049d0:	3c01      	subs	r4, #1
 80049d2:	e690      	b.n	80046f6 <__aeabi_dmul+0xde>
 80049d4:	ea45 0e06 	orr.w	lr, r5, r6
 80049d8:	e68d      	b.n	80046f6 <__aeabi_dmul+0xde>
 80049da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80049de:	ea94 0f0c 	teq	r4, ip
 80049e2:	bf08      	it	eq
 80049e4:	ea95 0f0c 	teqeq	r5, ip
 80049e8:	f43f af3b 	beq.w	8004862 <__aeabi_dmul+0x24a>
 80049ec:	ea94 0f0c 	teq	r4, ip
 80049f0:	d10a      	bne.n	8004a08 <__aeabi_ddiv+0x19c>
 80049f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80049f6:	f47f af34 	bne.w	8004862 <__aeabi_dmul+0x24a>
 80049fa:	ea95 0f0c 	teq	r5, ip
 80049fe:	f47f af25 	bne.w	800484c <__aeabi_dmul+0x234>
 8004a02:	4610      	mov	r0, r2
 8004a04:	4619      	mov	r1, r3
 8004a06:	e72c      	b.n	8004862 <__aeabi_dmul+0x24a>
 8004a08:	ea95 0f0c 	teq	r5, ip
 8004a0c:	d106      	bne.n	8004a1c <__aeabi_ddiv+0x1b0>
 8004a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004a12:	f43f aefd 	beq.w	8004810 <__aeabi_dmul+0x1f8>
 8004a16:	4610      	mov	r0, r2
 8004a18:	4619      	mov	r1, r3
 8004a1a:	e722      	b.n	8004862 <__aeabi_dmul+0x24a>
 8004a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004a20:	bf18      	it	ne
 8004a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8004a26:	f47f aec5 	bne.w	80047b4 <__aeabi_dmul+0x19c>
 8004a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8004a2e:	f47f af0d 	bne.w	800484c <__aeabi_dmul+0x234>
 8004a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8004a36:	f47f aeeb 	bne.w	8004810 <__aeabi_dmul+0x1f8>
 8004a3a:	e712      	b.n	8004862 <__aeabi_dmul+0x24a>

08004a3c <__gedf2>:
 8004a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8004a40:	e006      	b.n	8004a50 <__cmpdf2+0x4>
 8004a42:	bf00      	nop

08004a44 <__ledf2>:
 8004a44:	f04f 0c01 	mov.w	ip, #1
 8004a48:	e002      	b.n	8004a50 <__cmpdf2+0x4>
 8004a4a:	bf00      	nop

08004a4c <__cmpdf2>:
 8004a4c:	f04f 0c01 	mov.w	ip, #1
 8004a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8004a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004a60:	bf18      	it	ne
 8004a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8004a66:	d01b      	beq.n	8004aa0 <__cmpdf2+0x54>
 8004a68:	b001      	add	sp, #4
 8004a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8004a6e:	bf0c      	ite	eq
 8004a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8004a74:	ea91 0f03 	teqne	r1, r3
 8004a78:	bf02      	ittt	eq
 8004a7a:	ea90 0f02 	teqeq	r0, r2
 8004a7e:	2000      	moveq	r0, #0
 8004a80:	4770      	bxeq	lr
 8004a82:	f110 0f00 	cmn.w	r0, #0
 8004a86:	ea91 0f03 	teq	r1, r3
 8004a8a:	bf58      	it	pl
 8004a8c:	4299      	cmppl	r1, r3
 8004a8e:	bf08      	it	eq
 8004a90:	4290      	cmpeq	r0, r2
 8004a92:	bf2c      	ite	cs
 8004a94:	17d8      	asrcs	r0, r3, #31
 8004a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8004a9a:	f040 0001 	orr.w	r0, r0, #1
 8004a9e:	4770      	bx	lr
 8004aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004aa8:	d102      	bne.n	8004ab0 <__cmpdf2+0x64>
 8004aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004aae:	d107      	bne.n	8004ac0 <__cmpdf2+0x74>
 8004ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004ab8:	d1d6      	bne.n	8004a68 <__cmpdf2+0x1c>
 8004aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004abe:	d0d3      	beq.n	8004a68 <__cmpdf2+0x1c>
 8004ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop

08004ac8 <__aeabi_cdrcmple>:
 8004ac8:	4684      	mov	ip, r0
 8004aca:	4610      	mov	r0, r2
 8004acc:	4662      	mov	r2, ip
 8004ace:	468c      	mov	ip, r1
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	4663      	mov	r3, ip
 8004ad4:	e000      	b.n	8004ad8 <__aeabi_cdcmpeq>
 8004ad6:	bf00      	nop

08004ad8 <__aeabi_cdcmpeq>:
 8004ad8:	b501      	push	{r0, lr}
 8004ada:	f7ff ffb7 	bl	8004a4c <__cmpdf2>
 8004ade:	2800      	cmp	r0, #0
 8004ae0:	bf48      	it	mi
 8004ae2:	f110 0f00 	cmnmi.w	r0, #0
 8004ae6:	bd01      	pop	{r0, pc}

08004ae8 <__aeabi_dcmpeq>:
 8004ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004aec:	f7ff fff4 	bl	8004ad8 <__aeabi_cdcmpeq>
 8004af0:	bf0c      	ite	eq
 8004af2:	2001      	moveq	r0, #1
 8004af4:	2000      	movne	r0, #0
 8004af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8004afa:	bf00      	nop

08004afc <__aeabi_dcmplt>:
 8004afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004b00:	f7ff ffea 	bl	8004ad8 <__aeabi_cdcmpeq>
 8004b04:	bf34      	ite	cc
 8004b06:	2001      	movcc	r0, #1
 8004b08:	2000      	movcs	r0, #0
 8004b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8004b0e:	bf00      	nop

08004b10 <__aeabi_dcmple>:
 8004b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004b14:	f7ff ffe0 	bl	8004ad8 <__aeabi_cdcmpeq>
 8004b18:	bf94      	ite	ls
 8004b1a:	2001      	movls	r0, #1
 8004b1c:	2000      	movhi	r0, #0
 8004b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8004b22:	bf00      	nop

08004b24 <__aeabi_dcmpge>:
 8004b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004b28:	f7ff ffce 	bl	8004ac8 <__aeabi_cdrcmple>
 8004b2c:	bf94      	ite	ls
 8004b2e:	2001      	movls	r0, #1
 8004b30:	2000      	movhi	r0, #0
 8004b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8004b36:	bf00      	nop

08004b38 <__aeabi_dcmpgt>:
 8004b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004b3c:	f7ff ffc4 	bl	8004ac8 <__aeabi_cdrcmple>
 8004b40:	bf34      	ite	cc
 8004b42:	2001      	movcc	r0, #1
 8004b44:	2000      	movcs	r0, #0
 8004b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8004b4a:	bf00      	nop

08004b4c <__aeabi_dcmpun>:
 8004b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004b54:	d102      	bne.n	8004b5c <__aeabi_dcmpun+0x10>
 8004b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004b5a:	d10a      	bne.n	8004b72 <__aeabi_dcmpun+0x26>
 8004b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004b64:	d102      	bne.n	8004b6c <__aeabi_dcmpun+0x20>
 8004b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004b6a:	d102      	bne.n	8004b72 <__aeabi_dcmpun+0x26>
 8004b6c:	f04f 0000 	mov.w	r0, #0
 8004b70:	4770      	bx	lr
 8004b72:	f04f 0001 	mov.w	r0, #1
 8004b76:	4770      	bx	lr

08004b78 <__aeabi_d2iz>:
 8004b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8004b80:	d215      	bcs.n	8004bae <__aeabi_d2iz+0x36>
 8004b82:	d511      	bpl.n	8004ba8 <__aeabi_d2iz+0x30>
 8004b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004b8c:	d912      	bls.n	8004bb4 <__aeabi_d2iz+0x3c>
 8004b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8004ba2:	bf18      	it	ne
 8004ba4:	4240      	negne	r0, r0
 8004ba6:	4770      	bx	lr
 8004ba8:	f04f 0000 	mov.w	r0, #0
 8004bac:	4770      	bx	lr
 8004bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8004bb2:	d105      	bne.n	8004bc0 <__aeabi_d2iz+0x48>
 8004bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8004bb8:	bf08      	it	eq
 8004bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8004bbe:	4770      	bx	lr
 8004bc0:	f04f 0000 	mov.w	r0, #0
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop

08004bc8 <__aeabi_d2uiz>:
 8004bc8:	004a      	lsls	r2, r1, #1
 8004bca:	d211      	bcs.n	8004bf0 <__aeabi_d2uiz+0x28>
 8004bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8004bd0:	d211      	bcs.n	8004bf6 <__aeabi_d2uiz+0x2e>
 8004bd2:	d50d      	bpl.n	8004bf0 <__aeabi_d2uiz+0x28>
 8004bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004bdc:	d40e      	bmi.n	8004bfc <__aeabi_d2uiz+0x34>
 8004bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004bea:	fa23 f002 	lsr.w	r0, r3, r2
 8004bee:	4770      	bx	lr
 8004bf0:	f04f 0000 	mov.w	r0, #0
 8004bf4:	4770      	bx	lr
 8004bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8004bfa:	d102      	bne.n	8004c02 <__aeabi_d2uiz+0x3a>
 8004bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8004c00:	4770      	bx	lr
 8004c02:	f04f 0000 	mov.w	r0, #0
 8004c06:	4770      	bx	lr

08004c08 <__aeabi_d2f>:
 8004c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8004c10:	bf24      	itt	cs
 8004c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8004c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8004c1a:	d90d      	bls.n	8004c38 <__aeabi_d2f+0x30>
 8004c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8004c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8004c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8004c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8004c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8004c30:	bf08      	it	eq
 8004c32:	f020 0001 	biceq.w	r0, r0, #1
 8004c36:	4770      	bx	lr
 8004c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8004c3c:	d121      	bne.n	8004c82 <__aeabi_d2f+0x7a>
 8004c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8004c42:	bfbc      	itt	lt
 8004c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8004c48:	4770      	bxlt	lr
 8004c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8004c52:	f1c2 0218 	rsb	r2, r2, #24
 8004c56:	f1c2 0c20 	rsb	ip, r2, #32
 8004c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8004c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8004c62:	bf18      	it	ne
 8004c64:	f040 0001 	orrne.w	r0, r0, #1
 8004c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8004c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8004c74:	ea40 000c 	orr.w	r0, r0, ip
 8004c78:	fa23 f302 	lsr.w	r3, r3, r2
 8004c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004c80:	e7cc      	b.n	8004c1c <__aeabi_d2f+0x14>
 8004c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8004c86:	d107      	bne.n	8004c98 <__aeabi_d2f+0x90>
 8004c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8004c8c:	bf1e      	ittt	ne
 8004c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8004c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8004c96:	4770      	bxne	lr
 8004c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8004c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8004ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop

08004ca8 <__aeabi_uldivmod>:
 8004ca8:	b953      	cbnz	r3, 8004cc0 <__aeabi_uldivmod+0x18>
 8004caa:	b94a      	cbnz	r2, 8004cc0 <__aeabi_uldivmod+0x18>
 8004cac:	2900      	cmp	r1, #0
 8004cae:	bf08      	it	eq
 8004cb0:	2800      	cmpeq	r0, #0
 8004cb2:	bf1c      	itt	ne
 8004cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8004cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8004cbc:	f000 b9a4 	b.w	8005008 <__aeabi_idiv0>
 8004cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8004cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8004cc8:	f000 f83c 	bl	8004d44 <__udivmoddi4>
 8004ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004cd4:	b004      	add	sp, #16
 8004cd6:	4770      	bx	lr

08004cd8 <__aeabi_d2lz>:
 8004cd8:	b538      	push	{r3, r4, r5, lr}
 8004cda:	2200      	movs	r2, #0
 8004cdc:	2300      	movs	r3, #0
 8004cde:	4604      	mov	r4, r0
 8004ce0:	460d      	mov	r5, r1
 8004ce2:	f7ff ff0b 	bl	8004afc <__aeabi_dcmplt>
 8004ce6:	b928      	cbnz	r0, 8004cf4 <__aeabi_d2lz+0x1c>
 8004ce8:	4620      	mov	r0, r4
 8004cea:	4629      	mov	r1, r5
 8004cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cf0:	f000 b80a 	b.w	8004d08 <__aeabi_d2ulz>
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8004cfa:	f000 f805 	bl	8004d08 <__aeabi_d2ulz>
 8004cfe:	4240      	negs	r0, r0
 8004d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004d04:	bd38      	pop	{r3, r4, r5, pc}
 8004d06:	bf00      	nop

08004d08 <__aeabi_d2ulz>:
 8004d08:	b5d0      	push	{r4, r6, r7, lr}
 8004d0a:	4b0c      	ldr	r3, [pc, #48]	; (8004d3c <__aeabi_d2ulz+0x34>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	4606      	mov	r6, r0
 8004d10:	460f      	mov	r7, r1
 8004d12:	f7ff fc81 	bl	8004618 <__aeabi_dmul>
 8004d16:	f7ff ff57 	bl	8004bc8 <__aeabi_d2uiz>
 8004d1a:	4604      	mov	r4, r0
 8004d1c:	f7ff fc02 	bl	8004524 <__aeabi_ui2d>
 8004d20:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <__aeabi_d2ulz+0x38>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	f7ff fc78 	bl	8004618 <__aeabi_dmul>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4630      	mov	r0, r6
 8004d2e:	4639      	mov	r1, r7
 8004d30:	f7ff faba 	bl	80042a8 <__aeabi_dsub>
 8004d34:	f7ff ff48 	bl	8004bc8 <__aeabi_d2uiz>
 8004d38:	4621      	mov	r1, r4
 8004d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8004d3c:	3df00000 	.word	0x3df00000
 8004d40:	41f00000 	.word	0x41f00000

08004d44 <__udivmoddi4>:
 8004d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d48:	9d08      	ldr	r5, [sp, #32]
 8004d4a:	4604      	mov	r4, r0
 8004d4c:	468c      	mov	ip, r1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f040 8083 	bne.w	8004e5a <__udivmoddi4+0x116>
 8004d54:	428a      	cmp	r2, r1
 8004d56:	4617      	mov	r7, r2
 8004d58:	d947      	bls.n	8004dea <__udivmoddi4+0xa6>
 8004d5a:	fab2 f282 	clz	r2, r2
 8004d5e:	b142      	cbz	r2, 8004d72 <__udivmoddi4+0x2e>
 8004d60:	f1c2 0020 	rsb	r0, r2, #32
 8004d64:	fa24 f000 	lsr.w	r0, r4, r0
 8004d68:	4091      	lsls	r1, r2
 8004d6a:	4097      	lsls	r7, r2
 8004d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8004d70:	4094      	lsls	r4, r2
 8004d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8004d76:	0c23      	lsrs	r3, r4, #16
 8004d78:	fbbc f6f8 	udiv	r6, ip, r8
 8004d7c:	fa1f fe87 	uxth.w	lr, r7
 8004d80:	fb08 c116 	mls	r1, r8, r6, ip
 8004d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004d88:	fb06 f10e 	mul.w	r1, r6, lr
 8004d8c:	4299      	cmp	r1, r3
 8004d8e:	d909      	bls.n	8004da4 <__udivmoddi4+0x60>
 8004d90:	18fb      	adds	r3, r7, r3
 8004d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8004d96:	f080 8119 	bcs.w	8004fcc <__udivmoddi4+0x288>
 8004d9a:	4299      	cmp	r1, r3
 8004d9c:	f240 8116 	bls.w	8004fcc <__udivmoddi4+0x288>
 8004da0:	3e02      	subs	r6, #2
 8004da2:	443b      	add	r3, r7
 8004da4:	1a5b      	subs	r3, r3, r1
 8004da6:	b2a4      	uxth	r4, r4
 8004da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8004dac:	fb08 3310 	mls	r3, r8, r0, r3
 8004db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8004db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8004db8:	45a6      	cmp	lr, r4
 8004dba:	d909      	bls.n	8004dd0 <__udivmoddi4+0x8c>
 8004dbc:	193c      	adds	r4, r7, r4
 8004dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8004dc2:	f080 8105 	bcs.w	8004fd0 <__udivmoddi4+0x28c>
 8004dc6:	45a6      	cmp	lr, r4
 8004dc8:	f240 8102 	bls.w	8004fd0 <__udivmoddi4+0x28c>
 8004dcc:	3802      	subs	r0, #2
 8004dce:	443c      	add	r4, r7
 8004dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8004dd4:	eba4 040e 	sub.w	r4, r4, lr
 8004dd8:	2600      	movs	r6, #0
 8004dda:	b11d      	cbz	r5, 8004de4 <__udivmoddi4+0xa0>
 8004ddc:	40d4      	lsrs	r4, r2
 8004dde:	2300      	movs	r3, #0
 8004de0:	e9c5 4300 	strd	r4, r3, [r5]
 8004de4:	4631      	mov	r1, r6
 8004de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dea:	b902      	cbnz	r2, 8004dee <__udivmoddi4+0xaa>
 8004dec:	deff      	udf	#255	; 0xff
 8004dee:	fab2 f282 	clz	r2, r2
 8004df2:	2a00      	cmp	r2, #0
 8004df4:	d150      	bne.n	8004e98 <__udivmoddi4+0x154>
 8004df6:	1bcb      	subs	r3, r1, r7
 8004df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8004dfc:	fa1f f887 	uxth.w	r8, r7
 8004e00:	2601      	movs	r6, #1
 8004e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8004e06:	0c21      	lsrs	r1, r4, #16
 8004e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8004e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004e10:	fb08 f30c 	mul.w	r3, r8, ip
 8004e14:	428b      	cmp	r3, r1
 8004e16:	d907      	bls.n	8004e28 <__udivmoddi4+0xe4>
 8004e18:	1879      	adds	r1, r7, r1
 8004e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8004e1e:	d202      	bcs.n	8004e26 <__udivmoddi4+0xe2>
 8004e20:	428b      	cmp	r3, r1
 8004e22:	f200 80e9 	bhi.w	8004ff8 <__udivmoddi4+0x2b4>
 8004e26:	4684      	mov	ip, r0
 8004e28:	1ac9      	subs	r1, r1, r3
 8004e2a:	b2a3      	uxth	r3, r4
 8004e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8004e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8004e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8004e38:	fb08 f800 	mul.w	r8, r8, r0
 8004e3c:	45a0      	cmp	r8, r4
 8004e3e:	d907      	bls.n	8004e50 <__udivmoddi4+0x10c>
 8004e40:	193c      	adds	r4, r7, r4
 8004e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e46:	d202      	bcs.n	8004e4e <__udivmoddi4+0x10a>
 8004e48:	45a0      	cmp	r8, r4
 8004e4a:	f200 80d9 	bhi.w	8005000 <__udivmoddi4+0x2bc>
 8004e4e:	4618      	mov	r0, r3
 8004e50:	eba4 0408 	sub.w	r4, r4, r8
 8004e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8004e58:	e7bf      	b.n	8004dda <__udivmoddi4+0x96>
 8004e5a:	428b      	cmp	r3, r1
 8004e5c:	d909      	bls.n	8004e72 <__udivmoddi4+0x12e>
 8004e5e:	2d00      	cmp	r5, #0
 8004e60:	f000 80b1 	beq.w	8004fc6 <__udivmoddi4+0x282>
 8004e64:	2600      	movs	r6, #0
 8004e66:	e9c5 0100 	strd	r0, r1, [r5]
 8004e6a:	4630      	mov	r0, r6
 8004e6c:	4631      	mov	r1, r6
 8004e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e72:	fab3 f683 	clz	r6, r3
 8004e76:	2e00      	cmp	r6, #0
 8004e78:	d14a      	bne.n	8004f10 <__udivmoddi4+0x1cc>
 8004e7a:	428b      	cmp	r3, r1
 8004e7c:	d302      	bcc.n	8004e84 <__udivmoddi4+0x140>
 8004e7e:	4282      	cmp	r2, r0
 8004e80:	f200 80b8 	bhi.w	8004ff4 <__udivmoddi4+0x2b0>
 8004e84:	1a84      	subs	r4, r0, r2
 8004e86:	eb61 0103 	sbc.w	r1, r1, r3
 8004e8a:	2001      	movs	r0, #1
 8004e8c:	468c      	mov	ip, r1
 8004e8e:	2d00      	cmp	r5, #0
 8004e90:	d0a8      	beq.n	8004de4 <__udivmoddi4+0xa0>
 8004e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8004e96:	e7a5      	b.n	8004de4 <__udivmoddi4+0xa0>
 8004e98:	f1c2 0320 	rsb	r3, r2, #32
 8004e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8004ea0:	4097      	lsls	r7, r2
 8004ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8004ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8004eaa:	40d9      	lsrs	r1, r3
 8004eac:	4330      	orrs	r0, r6
 8004eae:	0c03      	lsrs	r3, r0, #16
 8004eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8004eb4:	fa1f f887 	uxth.w	r8, r7
 8004eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8004ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004ec0:	fb06 f108 	mul.w	r1, r6, r8
 8004ec4:	4299      	cmp	r1, r3
 8004ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8004eca:	d909      	bls.n	8004ee0 <__udivmoddi4+0x19c>
 8004ecc:	18fb      	adds	r3, r7, r3
 8004ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8004ed2:	f080 808d 	bcs.w	8004ff0 <__udivmoddi4+0x2ac>
 8004ed6:	4299      	cmp	r1, r3
 8004ed8:	f240 808a 	bls.w	8004ff0 <__udivmoddi4+0x2ac>
 8004edc:	3e02      	subs	r6, #2
 8004ede:	443b      	add	r3, r7
 8004ee0:	1a5b      	subs	r3, r3, r1
 8004ee2:	b281      	uxth	r1, r0
 8004ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8004ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8004eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004ef0:	fb00 f308 	mul.w	r3, r0, r8
 8004ef4:	428b      	cmp	r3, r1
 8004ef6:	d907      	bls.n	8004f08 <__udivmoddi4+0x1c4>
 8004ef8:	1879      	adds	r1, r7, r1
 8004efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8004efe:	d273      	bcs.n	8004fe8 <__udivmoddi4+0x2a4>
 8004f00:	428b      	cmp	r3, r1
 8004f02:	d971      	bls.n	8004fe8 <__udivmoddi4+0x2a4>
 8004f04:	3802      	subs	r0, #2
 8004f06:	4439      	add	r1, r7
 8004f08:	1acb      	subs	r3, r1, r3
 8004f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8004f0e:	e778      	b.n	8004e02 <__udivmoddi4+0xbe>
 8004f10:	f1c6 0c20 	rsb	ip, r6, #32
 8004f14:	fa03 f406 	lsl.w	r4, r3, r6
 8004f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8004f1c:	431c      	orrs	r4, r3
 8004f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8004f22:	fa01 f306 	lsl.w	r3, r1, r6
 8004f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8004f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8004f2e:	431f      	orrs	r7, r3
 8004f30:	0c3b      	lsrs	r3, r7, #16
 8004f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8004f36:	fa1f f884 	uxth.w	r8, r4
 8004f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8004f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8004f42:	fb09 fa08 	mul.w	sl, r9, r8
 8004f46:	458a      	cmp	sl, r1
 8004f48:	fa02 f206 	lsl.w	r2, r2, r6
 8004f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8004f50:	d908      	bls.n	8004f64 <__udivmoddi4+0x220>
 8004f52:	1861      	adds	r1, r4, r1
 8004f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8004f58:	d248      	bcs.n	8004fec <__udivmoddi4+0x2a8>
 8004f5a:	458a      	cmp	sl, r1
 8004f5c:	d946      	bls.n	8004fec <__udivmoddi4+0x2a8>
 8004f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8004f62:	4421      	add	r1, r4
 8004f64:	eba1 010a 	sub.w	r1, r1, sl
 8004f68:	b2bf      	uxth	r7, r7
 8004f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8004f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8004f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8004f76:	fb00 f808 	mul.w	r8, r0, r8
 8004f7a:	45b8      	cmp	r8, r7
 8004f7c:	d907      	bls.n	8004f8e <__udivmoddi4+0x24a>
 8004f7e:	19e7      	adds	r7, r4, r7
 8004f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8004f84:	d22e      	bcs.n	8004fe4 <__udivmoddi4+0x2a0>
 8004f86:	45b8      	cmp	r8, r7
 8004f88:	d92c      	bls.n	8004fe4 <__udivmoddi4+0x2a0>
 8004f8a:	3802      	subs	r0, #2
 8004f8c:	4427      	add	r7, r4
 8004f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8004f92:	eba7 0708 	sub.w	r7, r7, r8
 8004f96:	fba0 8902 	umull	r8, r9, r0, r2
 8004f9a:	454f      	cmp	r7, r9
 8004f9c:	46c6      	mov	lr, r8
 8004f9e:	4649      	mov	r1, r9
 8004fa0:	d31a      	bcc.n	8004fd8 <__udivmoddi4+0x294>
 8004fa2:	d017      	beq.n	8004fd4 <__udivmoddi4+0x290>
 8004fa4:	b15d      	cbz	r5, 8004fbe <__udivmoddi4+0x27a>
 8004fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8004faa:	eb67 0701 	sbc.w	r7, r7, r1
 8004fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8004fb2:	40f2      	lsrs	r2, r6
 8004fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8004fb8:	40f7      	lsrs	r7, r6
 8004fba:	e9c5 2700 	strd	r2, r7, [r5]
 8004fbe:	2600      	movs	r6, #0
 8004fc0:	4631      	mov	r1, r6
 8004fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc6:	462e      	mov	r6, r5
 8004fc8:	4628      	mov	r0, r5
 8004fca:	e70b      	b.n	8004de4 <__udivmoddi4+0xa0>
 8004fcc:	4606      	mov	r6, r0
 8004fce:	e6e9      	b.n	8004da4 <__udivmoddi4+0x60>
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	e6fd      	b.n	8004dd0 <__udivmoddi4+0x8c>
 8004fd4:	4543      	cmp	r3, r8
 8004fd6:	d2e5      	bcs.n	8004fa4 <__udivmoddi4+0x260>
 8004fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8004fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8004fe0:	3801      	subs	r0, #1
 8004fe2:	e7df      	b.n	8004fa4 <__udivmoddi4+0x260>
 8004fe4:	4608      	mov	r0, r1
 8004fe6:	e7d2      	b.n	8004f8e <__udivmoddi4+0x24a>
 8004fe8:	4660      	mov	r0, ip
 8004fea:	e78d      	b.n	8004f08 <__udivmoddi4+0x1c4>
 8004fec:	4681      	mov	r9, r0
 8004fee:	e7b9      	b.n	8004f64 <__udivmoddi4+0x220>
 8004ff0:	4666      	mov	r6, ip
 8004ff2:	e775      	b.n	8004ee0 <__udivmoddi4+0x19c>
 8004ff4:	4630      	mov	r0, r6
 8004ff6:	e74a      	b.n	8004e8e <__udivmoddi4+0x14a>
 8004ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8004ffc:	4439      	add	r1, r7
 8004ffe:	e713      	b.n	8004e28 <__udivmoddi4+0xe4>
 8005000:	3802      	subs	r0, #2
 8005002:	443c      	add	r4, r7
 8005004:	e724      	b.n	8004e50 <__udivmoddi4+0x10c>
 8005006:	bf00      	nop

08005008 <__aeabi_idiv0>:
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop

0800500c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800500c:	b510      	push	{r4, lr}
 800500e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005010:	4b0e      	ldr	r3, [pc, #56]	; (800504c <HAL_InitTick+0x40>)
 8005012:	7818      	ldrb	r0, [r3, #0]
 8005014:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005018:	fbb3 f3f0 	udiv	r3, r3, r0
 800501c:	4a0c      	ldr	r2, [pc, #48]	; (8005050 <HAL_InitTick+0x44>)
 800501e:	6810      	ldr	r0, [r2, #0]
 8005020:	fbb0 f0f3 	udiv	r0, r0, r3
 8005024:	f000 fc96 	bl	8005954 <HAL_SYSTICK_Config>
 8005028:	b968      	cbnz	r0, 8005046 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800502a:	2c0f      	cmp	r4, #15
 800502c:	d901      	bls.n	8005032 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800502e:	2001      	movs	r0, #1
 8005030:	e00a      	b.n	8005048 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005032:	2200      	movs	r2, #0
 8005034:	4621      	mov	r1, r4
 8005036:	f04f 30ff 	mov.w	r0, #4294967295
 800503a:	f000 fc49 	bl	80058d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800503e:	4b03      	ldr	r3, [pc, #12]	; (800504c <HAL_InitTick+0x40>)
 8005040:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8005042:	2000      	movs	r0, #0
 8005044:	e000      	b.n	8005048 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8005046:	2001      	movs	r0, #1
}
 8005048:	bd10      	pop	{r4, pc}
 800504a:	bf00      	nop
 800504c:	20000000 	.word	0x20000000
 8005050:	2000382c 	.word	0x2000382c

08005054 <HAL_Init>:
{
 8005054:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005056:	4b0b      	ldr	r3, [pc, #44]	; (8005084 <HAL_Init+0x30>)
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800505e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005066:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800506e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005070:	2003      	movs	r0, #3
 8005072:	f000 fc1b 	bl	80058ac <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8005076:	2000      	movs	r0, #0
 8005078:	f7ff ffc8 	bl	800500c <HAL_InitTick>
  HAL_MspInit();
 800507c:	f00e ff40 	bl	8013f00 <HAL_MspInit>
}
 8005080:	2000      	movs	r0, #0
 8005082:	bd08      	pop	{r3, pc}
 8005084:	40023c00 	.word	0x40023c00

08005088 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005088:	4a03      	ldr	r2, [pc, #12]	; (8005098 <HAL_IncTick+0x10>)
 800508a:	6811      	ldr	r1, [r2, #0]
 800508c:	4b03      	ldr	r3, [pc, #12]	; (800509c <HAL_IncTick+0x14>)
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	440b      	add	r3, r1
 8005092:	6013      	str	r3, [r2, #0]
}
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	200061bc 	.word	0x200061bc
 800509c:	20000000 	.word	0x20000000

080050a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80050a0:	4b01      	ldr	r3, [pc, #4]	; (80050a8 <HAL_GetTick+0x8>)
 80050a2:	6818      	ldr	r0, [r3, #0]
}
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	200061bc 	.word	0x200061bc

080050ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050ac:	b538      	push	{r3, r4, r5, lr}
 80050ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80050b0:	f7ff fff6 	bl	80050a0 <HAL_GetTick>
 80050b4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050b6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80050ba:	d002      	beq.n	80050c2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80050bc:	4b04      	ldr	r3, [pc, #16]	; (80050d0 <HAL_Delay+0x24>)
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80050c2:	f7ff ffed 	bl	80050a0 <HAL_GetTick>
 80050c6:	1b40      	subs	r0, r0, r5
 80050c8:	42a0      	cmp	r0, r4
 80050ca:	d3fa      	bcc.n	80050c2 <HAL_Delay+0x16>
  {
  }
}
 80050cc:	bd38      	pop	{r3, r4, r5, pc}
 80050ce:	bf00      	nop
 80050d0:	20000000 	.word	0x20000000

080050d4 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80050d4:	4b4a      	ldr	r3, [pc, #296]	; (8005200 <ADC_Init+0x12c>)
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80050dc:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	6841      	ldr	r1, [r0, #4]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80050e6:	6802      	ldr	r2, [r0, #0]
 80050e8:	6853      	ldr	r3, [r2, #4]
 80050ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050ee:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80050f0:	6802      	ldr	r2, [r0, #0]
 80050f2:	6853      	ldr	r3, [r2, #4]
 80050f4:	6901      	ldr	r1, [r0, #16]
 80050f6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80050fa:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80050fc:	6802      	ldr	r2, [r0, #0]
 80050fe:	6853      	ldr	r3, [r2, #4]
 8005100:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8005104:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005106:	6802      	ldr	r2, [r0, #0]
 8005108:	6853      	ldr	r3, [r2, #4]
 800510a:	6881      	ldr	r1, [r0, #8]
 800510c:	430b      	orrs	r3, r1
 800510e:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005110:	6802      	ldr	r2, [r0, #0]
 8005112:	6893      	ldr	r3, [r2, #8]
 8005114:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005118:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800511a:	6802      	ldr	r2, [r0, #0]
 800511c:	6893      	ldr	r3, [r2, #8]
 800511e:	68c1      	ldr	r1, [r0, #12]
 8005120:	430b      	orrs	r3, r1
 8005122:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005124:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8005126:	4b37      	ldr	r3, [pc, #220]	; (8005204 <ADC_Init+0x130>)
 8005128:	429a      	cmp	r2, r3
 800512a:	d057      	beq.n	80051dc <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800512c:	6802      	ldr	r2, [r0, #0]
 800512e:	6893      	ldr	r3, [r2, #8]
 8005130:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005134:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005136:	6802      	ldr	r2, [r0, #0]
 8005138:	6893      	ldr	r3, [r2, #8]
 800513a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800513c:	430b      	orrs	r3, r1
 800513e:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005140:	6802      	ldr	r2, [r0, #0]
 8005142:	6893      	ldr	r3, [r2, #8]
 8005144:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005148:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800514a:	6802      	ldr	r2, [r0, #0]
 800514c:	6893      	ldr	r3, [r2, #8]
 800514e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005150:	430b      	orrs	r3, r1
 8005152:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005154:	6802      	ldr	r2, [r0, #0]
 8005156:	6893      	ldr	r3, [r2, #8]
 8005158:	f023 0302 	bic.w	r3, r3, #2
 800515c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800515e:	6802      	ldr	r2, [r0, #0]
 8005160:	6893      	ldr	r3, [r2, #8]
 8005162:	7e01      	ldrb	r1, [r0, #24]
 8005164:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8005168:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800516a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d03f      	beq.n	80051f2 <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005172:	6802      	ldr	r2, [r0, #0]
 8005174:	6853      	ldr	r3, [r2, #4]
 8005176:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800517a:	6053      	str	r3, [r2, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800517c:	6802      	ldr	r2, [r0, #0]
 800517e:	6853      	ldr	r3, [r2, #4]
 8005180:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005184:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005186:	6801      	ldr	r1, [r0, #0]
 8005188:	684b      	ldr	r3, [r1, #4]
 800518a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800518c:	3a01      	subs	r2, #1
 800518e:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8005192:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005194:	6802      	ldr	r2, [r0, #0]
 8005196:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005198:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800519c:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800519e:	6801      	ldr	r1, [r0, #0]
 80051a0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80051a2:	69c2      	ldr	r2, [r0, #28]
 80051a4:	3a01      	subs	r2, #1
 80051a6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80051aa:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80051ac:	6802      	ldr	r2, [r0, #0]
 80051ae:	6893      	ldr	r3, [r2, #8]
 80051b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051b4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80051b6:	6802      	ldr	r2, [r0, #0]
 80051b8:	6893      	ldr	r3, [r2, #8]
 80051ba:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 80051be:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 80051c2:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80051c4:	6802      	ldr	r2, [r0, #0]
 80051c6:	6893      	ldr	r3, [r2, #8]
 80051c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051cc:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80051ce:	6802      	ldr	r2, [r0, #0]
 80051d0:	6893      	ldr	r3, [r2, #8]
 80051d2:	6941      	ldr	r1, [r0, #20]
 80051d4:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80051d8:	6093      	str	r3, [r2, #8]
}
 80051da:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80051dc:	6802      	ldr	r2, [r0, #0]
 80051de:	6893      	ldr	r3, [r2, #8]
 80051e0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80051e4:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80051e6:	6802      	ldr	r2, [r0, #0]
 80051e8:	6893      	ldr	r3, [r2, #8]
 80051ea:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80051ee:	6093      	str	r3, [r2, #8]
 80051f0:	e7b0      	b.n	8005154 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80051f2:	6802      	ldr	r2, [r0, #0]
 80051f4:	6853      	ldr	r3, [r2, #4]
 80051f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051fa:	6053      	str	r3, [r2, #4]
 80051fc:	e7ca      	b.n	8005194 <ADC_Init+0xc0>
 80051fe:	bf00      	nop
 8005200:	40012300 	.word	0x40012300
 8005204:	0f000001 	.word	0x0f000001

08005208 <HAL_ADC_Init>:
  if(hadc == NULL)
 8005208:	b338      	cbz	r0, 800525a <HAL_ADC_Init+0x52>
{
 800520a:	b510      	push	{r4, lr}
 800520c:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 800520e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005210:	b143      	cbz	r3, 8005224 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005212:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005214:	f013 0f10 	tst.w	r3, #16
 8005218:	d00b      	beq.n	8005232 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 800521a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800521c:	2300      	movs	r3, #0
 800521e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005222:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8005224:	f00a fa74 	bl	800f710 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8005228:	2300      	movs	r3, #0
 800522a:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 800522c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8005230:	e7ef      	b.n	8005212 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8005232:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005234:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005238:	f023 0302 	bic.w	r3, r3, #2
 800523c:	f043 0302 	orr.w	r3, r3, #2
 8005240:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8005242:	4620      	mov	r0, r4
 8005244:	f7ff ff46 	bl	80050d4 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8005248:	2000      	movs	r0, #0
 800524a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800524c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800524e:	f023 0303 	bic.w	r3, r3, #3
 8005252:	f043 0301 	orr.w	r3, r3, #1
 8005256:	6423      	str	r3, [r4, #64]	; 0x40
 8005258:	e7e0      	b.n	800521c <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 800525a:	2001      	movs	r0, #1
}
 800525c:	4770      	bx	lr
	...

08005260 <HAL_ADC_Start_IT>:
{
 8005260:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8005262:	2300      	movs	r3, #0
 8005264:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8005266:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800526a:	2b01      	cmp	r3, #1
 800526c:	f000 8085 	beq.w	800537a <HAL_ADC_Start_IT+0x11a>
 8005270:	2301      	movs	r3, #1
 8005272:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005276:	6803      	ldr	r3, [r0, #0]
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	f012 0f01 	tst.w	r2, #1
 800527e:	d113      	bne.n	80052a8 <HAL_ADC_Start_IT+0x48>
    __HAL_ADC_ENABLE(hadc);
 8005280:	689a      	ldr	r2, [r3, #8]
 8005282:	f042 0201 	orr.w	r2, r2, #1
 8005286:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005288:	4b40      	ldr	r3, [pc, #256]	; (800538c <HAL_ADC_Start_IT+0x12c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a40      	ldr	r2, [pc, #256]	; (8005390 <HAL_ADC_Start_IT+0x130>)
 800528e:	fba2 2303 	umull	r2, r3, r2, r3
 8005292:	0c9b      	lsrs	r3, r3, #18
 8005294:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005298:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 800529a:	e002      	b.n	80052a2 <HAL_ADC_Start_IT+0x42>
      counter--;
 800529c:	9b01      	ldr	r3, [sp, #4]
 800529e:	3b01      	subs	r3, #1
 80052a0:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 80052a2:	9b01      	ldr	r3, [sp, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1f9      	bne.n	800529c <HAL_ADC_Start_IT+0x3c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80052a8:	6802      	ldr	r2, [r0, #0]
 80052aa:	6893      	ldr	r3, [r2, #8]
 80052ac:	f013 0f01 	tst.w	r3, #1
 80052b0:	d065      	beq.n	800537e <HAL_ADC_Start_IT+0x11e>
    ADC_STATE_CLR_SET(hadc->State,
 80052b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80052b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80052b8:	f023 0301 	bic.w	r3, r3, #1
 80052bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052c0:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80052c2:	6853      	ldr	r3, [r2, #4]
 80052c4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80052c8:	d005      	beq.n	80052d6 <HAL_ADC_Start_IT+0x76>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80052ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80052cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80052d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052d4:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80052d6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80052d8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80052dc:	d022      	beq.n	8005324 <HAL_ADC_Start_IT+0xc4>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80052de:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80052e0:	f023 0306 	bic.w	r3, r3, #6
 80052e4:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 80052e6:	2300      	movs	r3, #0
 80052e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80052ec:	f06f 0322 	mvn.w	r3, #34	; 0x22
 80052f0:	6013      	str	r3, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80052f2:	6802      	ldr	r2, [r0, #0]
 80052f4:	6853      	ldr	r3, [r2, #4]
 80052f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052fa:	f043 0320 	orr.w	r3, r3, #32
 80052fe:	6053      	str	r3, [r2, #4]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005300:	4b24      	ldr	r3, [pc, #144]	; (8005394 <HAL_ADC_Start_IT+0x134>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f013 0f1f 	tst.w	r3, #31
 8005308:	d127      	bne.n	800535a <HAL_ADC_Start_IT+0xfa>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800530a:	6803      	ldr	r3, [r0, #0]
 800530c:	4a22      	ldr	r2, [pc, #136]	; (8005398 <HAL_ADC_Start_IT+0x138>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d011      	beq.n	8005336 <HAL_ADC_Start_IT+0xd6>
 8005312:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005316:	4293      	cmp	r3, r2
 8005318:	d007      	beq.n	800532a <HAL_ADC_Start_IT+0xca>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800531a:	4a20      	ldr	r2, [pc, #128]	; (800539c <HAL_ADC_Start_IT+0x13c>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d014      	beq.n	800534a <HAL_ADC_Start_IT+0xea>
  return HAL_OK;
 8005320:	2000      	movs	r0, #0
 8005322:	e02d      	b.n	8005380 <HAL_ADC_Start_IT+0x120>
      ADC_CLEAR_ERRORCODE(hadc);
 8005324:	2300      	movs	r3, #0
 8005326:	6443      	str	r3, [r0, #68]	; 0x44
 8005328:	e7dd      	b.n	80052e6 <HAL_ADC_Start_IT+0x86>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800532a:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800532e:	6852      	ldr	r2, [r2, #4]
 8005330:	f012 0f1f 	tst.w	r2, #31
 8005334:	d1f1      	bne.n	800531a <HAL_ADC_Start_IT+0xba>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005336:	689a      	ldr	r2, [r3, #8]
 8005338:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800533c:	d122      	bne.n	8005384 <HAL_ADC_Start_IT+0x124>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800533e:	689a      	ldr	r2, [r3, #8]
 8005340:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005344:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005346:	2000      	movs	r0, #0
 8005348:	e01a      	b.n	8005380 <HAL_ADC_Start_IT+0x120>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800534a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800534e:	6852      	ldr	r2, [r2, #4]
 8005350:	f012 0f10 	tst.w	r2, #16
 8005354:	d0ef      	beq.n	8005336 <HAL_ADC_Start_IT+0xd6>
  return HAL_OK;
 8005356:	2000      	movs	r0, #0
 8005358:	e012      	b.n	8005380 <HAL_ADC_Start_IT+0x120>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800535a:	6803      	ldr	r3, [r0, #0]
 800535c:	4a0e      	ldr	r2, [pc, #56]	; (8005398 <HAL_ADC_Start_IT+0x138>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d001      	beq.n	8005366 <HAL_ADC_Start_IT+0x106>
  return HAL_OK;
 8005362:	2000      	movs	r0, #0
 8005364:	e00c      	b.n	8005380 <HAL_ADC_Start_IT+0x120>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800536c:	d10c      	bne.n	8005388 <HAL_ADC_Start_IT+0x128>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005374:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005376:	2000      	movs	r0, #0
 8005378:	e002      	b.n	8005380 <HAL_ADC_Start_IT+0x120>
  __HAL_LOCK(hadc);
 800537a:	2002      	movs	r0, #2
 800537c:	e000      	b.n	8005380 <HAL_ADC_Start_IT+0x120>
  return HAL_OK;
 800537e:	2000      	movs	r0, #0
}
 8005380:	b002      	add	sp, #8
 8005382:	4770      	bx	lr
  return HAL_OK;
 8005384:	2000      	movs	r0, #0
 8005386:	e7fb      	b.n	8005380 <HAL_ADC_Start_IT+0x120>
 8005388:	2000      	movs	r0, #0
 800538a:	e7f9      	b.n	8005380 <HAL_ADC_Start_IT+0x120>
 800538c:	2000382c 	.word	0x2000382c
 8005390:	431bde83 	.word	0x431bde83
 8005394:	40012300 	.word	0x40012300
 8005398:	40012000 	.word	0x40012000
 800539c:	40012200 	.word	0x40012200

080053a0 <HAL_ADC_Start_DMA>:
{
 80053a0:	b530      	push	{r4, r5, lr}
 80053a2:	b083      	sub	sp, #12
 80053a4:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 80053a6:	2200      	movs	r2, #0
 80053a8:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80053aa:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80053ae:	2a01      	cmp	r2, #1
 80053b0:	f000 809a 	beq.w	80054e8 <HAL_ADC_Start_DMA+0x148>
 80053b4:	4605      	mov	r5, r0
 80053b6:	2201      	movs	r2, #1
 80053b8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80053bc:	6802      	ldr	r2, [r0, #0]
 80053be:	6890      	ldr	r0, [r2, #8]
 80053c0:	f010 0f01 	tst.w	r0, #1
 80053c4:	d113      	bne.n	80053ee <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 80053c6:	6890      	ldr	r0, [r2, #8]
 80053c8:	f040 0001 	orr.w	r0, r0, #1
 80053cc:	6090      	str	r0, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80053ce:	4a4b      	ldr	r2, [pc, #300]	; (80054fc <HAL_ADC_Start_DMA+0x15c>)
 80053d0:	6810      	ldr	r0, [r2, #0]
 80053d2:	4a4b      	ldr	r2, [pc, #300]	; (8005500 <HAL_ADC_Start_DMA+0x160>)
 80053d4:	fba2 2000 	umull	r2, r0, r2, r0
 80053d8:	0c80      	lsrs	r0, r0, #18
 80053da:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80053de:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 80053e0:	e002      	b.n	80053e8 <HAL_ADC_Start_DMA+0x48>
      counter--;
 80053e2:	9c01      	ldr	r4, [sp, #4]
 80053e4:	3c01      	subs	r4, #1
 80053e6:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 80053e8:	9801      	ldr	r0, [sp, #4]
 80053ea:	2800      	cmp	r0, #0
 80053ec:	d1f9      	bne.n	80053e2 <HAL_ADC_Start_DMA+0x42>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80053ee:	682a      	ldr	r2, [r5, #0]
 80053f0:	6890      	ldr	r0, [r2, #8]
 80053f2:	f010 0f01 	tst.w	r0, #1
 80053f6:	d079      	beq.n	80054ec <HAL_ADC_Start_DMA+0x14c>
    ADC_STATE_CLR_SET(hadc->State,
 80053f8:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80053fa:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80053fe:	f020 0001 	bic.w	r0, r0, #1
 8005402:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8005406:	6428      	str	r0, [r5, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005408:	6852      	ldr	r2, [r2, #4]
 800540a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800540e:	d005      	beq.n	800541c <HAL_ADC_Start_DMA+0x7c>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005410:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8005412:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005416:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800541a:	642a      	str	r2, [r5, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800541c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800541e:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8005422:	d036      	beq.n	8005492 <HAL_ADC_Start_DMA+0xf2>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005424:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8005426:	f022 0206 	bic.w	r2, r2, #6
 800542a:	646a      	str	r2, [r5, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 800542c:	2200      	movs	r2, #0
 800542e:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005432:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8005434:	4833      	ldr	r0, [pc, #204]	; (8005504 <HAL_ADC_Start_DMA+0x164>)
 8005436:	63d0      	str	r0, [r2, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005438:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800543a:	4833      	ldr	r0, [pc, #204]	; (8005508 <HAL_ADC_Start_DMA+0x168>)
 800543c:	6410      	str	r0, [r2, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800543e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8005440:	4832      	ldr	r0, [pc, #200]	; (800550c <HAL_ADC_Start_DMA+0x16c>)
 8005442:	64d0      	str	r0, [r2, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005444:	682a      	ldr	r2, [r5, #0]
 8005446:	f06f 0022 	mvn.w	r0, #34	; 0x22
 800544a:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800544c:	6828      	ldr	r0, [r5, #0]
 800544e:	6842      	ldr	r2, [r0, #4]
 8005450:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005454:	6042      	str	r2, [r0, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005456:	6828      	ldr	r0, [r5, #0]
 8005458:	6882      	ldr	r2, [r0, #8]
 800545a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800545e:	6082      	str	r2, [r0, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005460:	6828      	ldr	r0, [r5, #0]
 8005462:	460a      	mov	r2, r1
 8005464:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 8005468:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800546a:	f000 fb6f 	bl	8005b4c <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800546e:	4b28      	ldr	r3, [pc, #160]	; (8005510 <HAL_ADC_Start_DMA+0x170>)
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f013 0f1f 	tst.w	r3, #31
 8005476:	d127      	bne.n	80054c8 <HAL_ADC_Start_DMA+0x128>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005478:	682b      	ldr	r3, [r5, #0]
 800547a:	4a26      	ldr	r2, [pc, #152]	; (8005514 <HAL_ADC_Start_DMA+0x174>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d011      	beq.n	80054a4 <HAL_ADC_Start_DMA+0x104>
 8005480:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005484:	4293      	cmp	r3, r2
 8005486:	d007      	beq.n	8005498 <HAL_ADC_Start_DMA+0xf8>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005488:	4a23      	ldr	r2, [pc, #140]	; (8005518 <HAL_ADC_Start_DMA+0x178>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d014      	beq.n	80054b8 <HAL_ADC_Start_DMA+0x118>
  return HAL_OK;
 800548e:	2000      	movs	r0, #0
 8005490:	e02d      	b.n	80054ee <HAL_ADC_Start_DMA+0x14e>
      ADC_CLEAR_ERRORCODE(hadc);
 8005492:	2200      	movs	r2, #0
 8005494:	646a      	str	r2, [r5, #68]	; 0x44
 8005496:	e7c9      	b.n	800542c <HAL_ADC_Start_DMA+0x8c>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005498:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800549c:	6852      	ldr	r2, [r2, #4]
 800549e:	f012 0f1f 	tst.w	r2, #31
 80054a2:	d1f1      	bne.n	8005488 <HAL_ADC_Start_DMA+0xe8>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80054aa:	d122      	bne.n	80054f2 <HAL_ADC_Start_DMA+0x152>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80054ac:	689a      	ldr	r2, [r3, #8]
 80054ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80054b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054b4:	2000      	movs	r0, #0
 80054b6:	e01a      	b.n	80054ee <HAL_ADC_Start_DMA+0x14e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80054b8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80054bc:	6852      	ldr	r2, [r2, #4]
 80054be:	f012 0f10 	tst.w	r2, #16
 80054c2:	d0ef      	beq.n	80054a4 <HAL_ADC_Start_DMA+0x104>
  return HAL_OK;
 80054c4:	2000      	movs	r0, #0
 80054c6:	e012      	b.n	80054ee <HAL_ADC_Start_DMA+0x14e>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80054c8:	682b      	ldr	r3, [r5, #0]
 80054ca:	4a12      	ldr	r2, [pc, #72]	; (8005514 <HAL_ADC_Start_DMA+0x174>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d001      	beq.n	80054d4 <HAL_ADC_Start_DMA+0x134>
  return HAL_OK;
 80054d0:	2000      	movs	r0, #0
 80054d2:	e00c      	b.n	80054ee <HAL_ADC_Start_DMA+0x14e>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80054d4:	689a      	ldr	r2, [r3, #8]
 80054d6:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80054da:	d10c      	bne.n	80054f6 <HAL_ADC_Start_DMA+0x156>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80054dc:	689a      	ldr	r2, [r3, #8]
 80054de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80054e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054e4:	2000      	movs	r0, #0
 80054e6:	e002      	b.n	80054ee <HAL_ADC_Start_DMA+0x14e>
  __HAL_LOCK(hadc);
 80054e8:	2002      	movs	r0, #2
 80054ea:	e000      	b.n	80054ee <HAL_ADC_Start_DMA+0x14e>
  return HAL_OK;
 80054ec:	2000      	movs	r0, #0
}
 80054ee:	b003      	add	sp, #12
 80054f0:	bd30      	pop	{r4, r5, pc}
  return HAL_OK;
 80054f2:	2000      	movs	r0, #0
 80054f4:	e7fb      	b.n	80054ee <HAL_ADC_Start_DMA+0x14e>
 80054f6:	2000      	movs	r0, #0
 80054f8:	e7f9      	b.n	80054ee <HAL_ADC_Start_DMA+0x14e>
 80054fa:	bf00      	nop
 80054fc:	2000382c 	.word	0x2000382c
 8005500:	431bde83 	.word	0x431bde83
 8005504:	08005691 	.word	0x08005691
 8005508:	0800551f 	.word	0x0800551f
 800550c:	0800567b 	.word	0x0800567b
 8005510:	40012300 	.word	0x40012300
 8005514:	40012000 	.word	0x40012000
 8005518:	40012200 	.word	0x40012200

0800551c <HAL_ADC_ConvHalfCpltCallback>:
}
 800551c:	4770      	bx	lr

0800551e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800551e:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005520:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005522:	f7ff fffb 	bl	800551c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005526:	bd08      	pop	{r3, pc}

08005528 <HAL_ADC_LevelOutOfWindowCallback>:
}
 8005528:	4770      	bx	lr

0800552a <HAL_ADC_ErrorCallback>:
}
 800552a:	4770      	bx	lr

0800552c <HAL_ADC_IRQHandler>:
{
 800552c:	b538      	push	{r3, r4, r5, lr}
 800552e:	4604      	mov	r4, r0
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8005530:	6802      	ldr	r2, [r0, #0]
 8005532:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8005534:	6853      	ldr	r3, [r2, #4]
  if(tmp1 && tmp2)
 8005536:	f011 0f02 	tst.w	r1, #2
 800553a:	d02f      	beq.n	800559c <HAL_ADC_IRQHandler+0x70>
 800553c:	f003 0320 	and.w	r3, r3, #32
 8005540:	b363      	cbz	r3, 800559c <HAL_ADC_IRQHandler+0x70>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005542:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005544:	f013 0f10 	tst.w	r3, #16
 8005548:	d103      	bne.n	8005552 <HAL_ADC_IRQHandler+0x26>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800554a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800554c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005550:	6403      	str	r3, [r0, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005552:	6893      	ldr	r3, [r2, #8]
 8005554:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 8005558:	d119      	bne.n	800558e <HAL_ADC_IRQHandler+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800555a:	7e23      	ldrb	r3, [r4, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800555c:	b9bb      	cbnz	r3, 800558e <HAL_ADC_IRQHandler+0x62>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800555e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005560:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 8005564:	d003      	beq.n	800556e <HAL_ADC_IRQHandler+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005566:	6893      	ldr	r3, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005568:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800556c:	d10f      	bne.n	800558e <HAL_ADC_IRQHandler+0x62>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800556e:	6853      	ldr	r3, [r2, #4]
 8005570:	f023 0320 	bic.w	r3, r3, #32
 8005574:	6053      	str	r3, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005576:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005578:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800557c:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800557e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005580:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8005584:	d103      	bne.n	800558e <HAL_ADC_IRQHandler+0x62>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005586:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005588:	f043 0301 	orr.w	r3, r3, #1
 800558c:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800558e:	4620      	mov	r0, r4
 8005590:	f00f f844 	bl	801461c <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005594:	6823      	ldr	r3, [r4, #0]
 8005596:	f06f 0212 	mvn.w	r2, #18
 800559a:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if(tmp1 && tmp2)
 80055a6:	f011 0f04 	tst.w	r1, #4
 80055aa:	d036      	beq.n	800561a <HAL_ADC_IRQHandler+0xee>
 80055ac:	2a00      	cmp	r2, #0
 80055ae:	d034      	beq.n	800561a <HAL_ADC_IRQHandler+0xee>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80055b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80055b2:	f012 0f10 	tst.w	r2, #16
 80055b6:	d103      	bne.n	80055c0 <HAL_ADC_IRQHandler+0x94>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80055b8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80055ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055be:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80055c6:	d121      	bne.n	800560c <HAL_ADC_IRQHandler+0xe0>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80055c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80055ca:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80055ce:	d003      	beq.n	80055d8 <HAL_ADC_IRQHandler+0xac>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80055d0:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80055d2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80055d6:	d119      	bne.n	800560c <HAL_ADC_IRQHandler+0xe0>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80055d8:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80055da:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80055de:	d115      	bne.n	800560c <HAL_ADC_IRQHandler+0xe0>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80055e0:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80055e2:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80055e6:	d111      	bne.n	800560c <HAL_ADC_IRQHandler+0xe0>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80055e8:	7e22      	ldrb	r2, [r4, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80055ea:	b97a      	cbnz	r2, 800560c <HAL_ADC_IRQHandler+0xe0>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055f2:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80055f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055fa:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80055fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055fe:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005602:	d103      	bne.n	800560c <HAL_ADC_IRQHandler+0xe0>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005604:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005606:	f043 0301 	orr.w	r3, r3, #1
 800560a:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800560c:	4620      	mov	r0, r4
 800560e:	f000 f94b 	bl	80058a8 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005612:	6823      	ldr	r3, [r4, #0]
 8005614:	f06f 020c 	mvn.w	r2, #12
 8005618:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800561a:	6822      	ldr	r2, [r4, #0]
 800561c:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800561e:	6853      	ldr	r3, [r2, #4]
 8005620:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if(tmp1 && tmp2)
 8005624:	f011 0f01 	tst.w	r1, #1
 8005628:	d004      	beq.n	8005634 <HAL_ADC_IRQHandler+0x108>
 800562a:	b11b      	cbz	r3, 8005634 <HAL_ADC_IRQHandler+0x108>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800562c:	6813      	ldr	r3, [r2, #0]
 800562e:	f013 0f01 	tst.w	r3, #1
 8005632:	d109      	bne.n	8005648 <HAL_ADC_IRQHandler+0x11c>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8005634:	6822      	ldr	r2, [r4, #0]
 8005636:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8005638:	6853      	ldr	r3, [r2, #4]
 800563a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
  if(tmp1 && tmp2)
 800563e:	f011 0f20 	tst.w	r1, #32
 8005642:	d000      	beq.n	8005646 <HAL_ADC_IRQHandler+0x11a>
 8005644:	b963      	cbnz	r3, 8005660 <HAL_ADC_IRQHandler+0x134>
}
 8005646:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005648:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800564a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800564e:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005650:	4620      	mov	r0, r4
 8005652:	f7ff ff69 	bl	8005528 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	f06f 0201 	mvn.w	r2, #1
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	e7e9      	b.n	8005634 <HAL_ADC_IRQHandler+0x108>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005660:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005662:	f043 0302 	orr.w	r3, r3, #2
 8005666:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005668:	f06f 0520 	mvn.w	r5, #32
 800566c:	6015      	str	r5, [r2, #0]
      HAL_ADC_ErrorCallback(hadc);
 800566e:	4620      	mov	r0, r4
 8005670:	f7ff ff5b 	bl	800552a <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	601d      	str	r5, [r3, #0]
}
 8005678:	e7e5      	b.n	8005646 <HAL_ADC_IRQHandler+0x11a>

0800567a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800567a:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800567c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800567e:	2340      	movs	r3, #64	; 0x40
 8005680:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005682:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005684:	f043 0304 	orr.w	r3, r3, #4
 8005688:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800568a:	f7ff ff4e 	bl	800552a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800568e:	bd08      	pop	{r3, pc}

08005690 <ADC_DMAConvCplt>:
{
 8005690:	b508      	push	{r3, lr}
 8005692:	4603      	mov	r3, r0
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005694:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005696:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005698:	f012 0f50 	tst.w	r2, #80	; 0x50
 800569c:	d125      	bne.n	80056ea <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800569e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80056a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056a4:	6403      	str	r3, [r0, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80056a6:	6803      	ldr	r3, [r0, #0]
 80056a8:	689a      	ldr	r2, [r3, #8]
 80056aa:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80056ae:	d119      	bne.n	80056e4 <ADC_DMAConvCplt+0x54>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80056b0:	7e02      	ldrb	r2, [r0, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80056b2:	b9ba      	cbnz	r2, 80056e4 <ADC_DMAConvCplt+0x54>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80056b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80056b6:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80056ba:	d003      	beq.n	80056c4 <ADC_DMAConvCplt+0x34>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80056bc:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80056be:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80056c2:	d10f      	bne.n	80056e4 <ADC_DMAConvCplt+0x54>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	f022 0220 	bic.w	r2, r2, #32
 80056ca:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80056cc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80056ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056d2:	6403      	str	r3, [r0, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80056d4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80056d6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80056da:	d103      	bne.n	80056e4 <ADC_DMAConvCplt+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80056dc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80056de:	f043 0301 	orr.w	r3, r3, #1
 80056e2:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80056e4:	f00e ff9a 	bl	801461c <HAL_ADC_ConvCpltCallback>
}
 80056e8:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80056ea:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80056ec:	f012 0f10 	tst.w	r2, #16
 80056f0:	d104      	bne.n	80056fc <ADC_DMAConvCplt+0x6c>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80056f2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80056f4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80056f6:	4618      	mov	r0, r3
 80056f8:	4790      	blx	r2
}
 80056fa:	e7f5      	b.n	80056e8 <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 80056fc:	f7ff ff15 	bl	800552a <HAL_ADC_ErrorCallback>
 8005700:	e7f2      	b.n	80056e8 <ADC_DMAConvCplt+0x58>
	...

08005704 <HAL_ADC_ConfigChannel>:
{
 8005704:	b430      	push	{r4, r5}
 8005706:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800570c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005710:	2b01      	cmp	r3, #1
 8005712:	f000 80bd 	beq.w	8005890 <HAL_ADC_ConfigChannel+0x18c>
 8005716:	2301      	movs	r3, #1
 8005718:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 800571c:	680b      	ldr	r3, [r1, #0]
 800571e:	2b09      	cmp	r3, #9
 8005720:	d93e      	bls.n	80057a0 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005722:	6805      	ldr	r5, [r0, #0]
 8005724:	68ea      	ldr	r2, [r5, #12]
 8005726:	b29b      	uxth	r3, r3
 8005728:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800572c:	3b1e      	subs	r3, #30
 800572e:	2407      	movs	r4, #7
 8005730:	fa04 f303 	lsl.w	r3, r4, r3
 8005734:	ea22 0303 	bic.w	r3, r2, r3
 8005738:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800573a:	6805      	ldr	r5, [r0, #0]
 800573c:	68ea      	ldr	r2, [r5, #12]
 800573e:	688c      	ldr	r4, [r1, #8]
 8005740:	880b      	ldrh	r3, [r1, #0]
 8005742:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005746:	3b1e      	subs	r3, #30
 8005748:	fa04 f303 	lsl.w	r3, r4, r3
 800574c:	4313      	orrs	r3, r2
 800574e:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 8005750:	684b      	ldr	r3, [r1, #4]
 8005752:	2b06      	cmp	r3, #6
 8005754:	d83a      	bhi.n	80057cc <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005756:	6805      	ldr	r5, [r0, #0]
 8005758:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800575a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800575e:	3b05      	subs	r3, #5
 8005760:	241f      	movs	r4, #31
 8005762:	fa04 f303 	lsl.w	r3, r4, r3
 8005766:	ea22 0303 	bic.w	r3, r2, r3
 800576a:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800576c:	6805      	ldr	r5, [r0, #0]
 800576e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005770:	684b      	ldr	r3, [r1, #4]
 8005772:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005776:	3b05      	subs	r3, #5
 8005778:	880c      	ldrh	r4, [r1, #0]
 800577a:	fa04 f303 	lsl.w	r3, r4, r3
 800577e:	4313      	orrs	r3, r2
 8005780:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005782:	6802      	ldr	r2, [r0, #0]
 8005784:	4b43      	ldr	r3, [pc, #268]	; (8005894 <HAL_ADC_ConfigChannel+0x190>)
 8005786:	429a      	cmp	r2, r3
 8005788:	d050      	beq.n	800582c <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800578a:	6802      	ldr	r2, [r0, #0]
 800578c:	4b41      	ldr	r3, [pc, #260]	; (8005894 <HAL_ADC_ConfigChannel+0x190>)
 800578e:	429a      	cmp	r2, r3
 8005790:	d059      	beq.n	8005846 <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 8005792:	2300      	movs	r3, #0
 8005794:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8005798:	4618      	mov	r0, r3
}
 800579a:	b002      	add	sp, #8
 800579c:	bc30      	pop	{r4, r5}
 800579e:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80057a0:	6805      	ldr	r5, [r0, #0]
 80057a2:	692a      	ldr	r2, [r5, #16]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80057aa:	2407      	movs	r4, #7
 80057ac:	fa04 f303 	lsl.w	r3, r4, r3
 80057b0:	ea22 0303 	bic.w	r3, r2, r3
 80057b4:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80057b6:	6805      	ldr	r5, [r0, #0]
 80057b8:	692a      	ldr	r2, [r5, #16]
 80057ba:	688c      	ldr	r4, [r1, #8]
 80057bc:	880b      	ldrh	r3, [r1, #0]
 80057be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80057c2:	fa04 f303 	lsl.w	r3, r4, r3
 80057c6:	4313      	orrs	r3, r2
 80057c8:	612b      	str	r3, [r5, #16]
 80057ca:	e7c1      	b.n	8005750 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 80057cc:	2b0c      	cmp	r3, #12
 80057ce:	d816      	bhi.n	80057fe <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80057d0:	6805      	ldr	r5, [r0, #0]
 80057d2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80057d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80057d8:	3b23      	subs	r3, #35	; 0x23
 80057da:	241f      	movs	r4, #31
 80057dc:	fa04 f303 	lsl.w	r3, r4, r3
 80057e0:	ea22 0303 	bic.w	r3, r2, r3
 80057e4:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80057e6:	6805      	ldr	r5, [r0, #0]
 80057e8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80057ea:	684b      	ldr	r3, [r1, #4]
 80057ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80057f0:	3b23      	subs	r3, #35	; 0x23
 80057f2:	880c      	ldrh	r4, [r1, #0]
 80057f4:	fa04 f303 	lsl.w	r3, r4, r3
 80057f8:	4313      	orrs	r3, r2
 80057fa:	632b      	str	r3, [r5, #48]	; 0x30
 80057fc:	e7c1      	b.n	8005782 <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80057fe:	6805      	ldr	r5, [r0, #0]
 8005800:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8005802:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005806:	3b41      	subs	r3, #65	; 0x41
 8005808:	241f      	movs	r4, #31
 800580a:	fa04 f303 	lsl.w	r3, r4, r3
 800580e:	ea22 0303 	bic.w	r3, r2, r3
 8005812:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005814:	6805      	ldr	r5, [r0, #0]
 8005816:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8005818:	684b      	ldr	r3, [r1, #4]
 800581a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800581e:	3b41      	subs	r3, #65	; 0x41
 8005820:	880c      	ldrh	r4, [r1, #0]
 8005822:	fa04 f303 	lsl.w	r3, r4, r3
 8005826:	4313      	orrs	r3, r2
 8005828:	62eb      	str	r3, [r5, #44]	; 0x2c
 800582a:	e7aa      	b.n	8005782 <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800582c:	680b      	ldr	r3, [r1, #0]
 800582e:	2b12      	cmp	r3, #18
 8005830:	d1ab      	bne.n	800578a <HAL_ADC_ConfigChannel+0x86>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005832:	4b19      	ldr	r3, [pc, #100]	; (8005898 <HAL_ADC_ConfigChannel+0x194>)
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800583a:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005842:	605a      	str	r2, [r3, #4]
 8005844:	e7a1      	b.n	800578a <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005846:	680b      	ldr	r3, [r1, #0]
 8005848:	4a14      	ldr	r2, [pc, #80]	; (800589c <HAL_ADC_ConfigChannel+0x198>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d001      	beq.n	8005852 <HAL_ADC_ConfigChannel+0x14e>
 800584e:	2b11      	cmp	r3, #17
 8005850:	d19f      	bne.n	8005792 <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005852:	4b11      	ldr	r3, [pc, #68]	; (8005898 <HAL_ADC_ConfigChannel+0x194>)
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800585a:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005862:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005864:	680a      	ldr	r2, [r1, #0]
 8005866:	4b0d      	ldr	r3, [pc, #52]	; (800589c <HAL_ADC_ConfigChannel+0x198>)
 8005868:	429a      	cmp	r2, r3
 800586a:	d192      	bne.n	8005792 <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800586c:	4b0c      	ldr	r3, [pc, #48]	; (80058a0 <HAL_ADC_ConfigChannel+0x19c>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a0c      	ldr	r2, [pc, #48]	; (80058a4 <HAL_ADC_ConfigChannel+0x1a0>)
 8005872:	fba2 2303 	umull	r2, r3, r2, r3
 8005876:	0c9b      	lsrs	r3, r3, #18
 8005878:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8005880:	e002      	b.n	8005888 <HAL_ADC_ConfigChannel+0x184>
        counter--;
 8005882:	9b01      	ldr	r3, [sp, #4]
 8005884:	3b01      	subs	r3, #1
 8005886:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8005888:	9b01      	ldr	r3, [sp, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1f9      	bne.n	8005882 <HAL_ADC_ConfigChannel+0x17e>
 800588e:	e780      	b.n	8005792 <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 8005890:	2002      	movs	r0, #2
 8005892:	e782      	b.n	800579a <HAL_ADC_ConfigChannel+0x96>
 8005894:	40012000 	.word	0x40012000
 8005898:	40012300 	.word	0x40012300
 800589c:	10000012 	.word	0x10000012
 80058a0:	2000382c 	.word	0x2000382c
 80058a4:	431bde83 	.word	0x431bde83

080058a8 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80058a8:	4770      	bx	lr
	...

080058ac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058ac:	4a07      	ldr	r2, [pc, #28]	; (80058cc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80058ae:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80058b4:	041b      	lsls	r3, r3, #16
 80058b6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058b8:	0200      	lsls	r0, r0, #8
 80058ba:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058be:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80058c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80058c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80058c8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80058ca:	4770      	bx	lr
 80058cc:	e000ed00 	.word	0xe000ed00

080058d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058d0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058d2:	4b17      	ldr	r3, [pc, #92]	; (8005930 <HAL_NVIC_SetPriority+0x60>)
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058da:	f1c3 0407 	rsb	r4, r3, #7
 80058de:	2c04      	cmp	r4, #4
 80058e0:	bf28      	it	cs
 80058e2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058e4:	1d1d      	adds	r5, r3, #4
 80058e6:	2d06      	cmp	r5, #6
 80058e8:	d918      	bls.n	800591c <HAL_NVIC_SetPriority+0x4c>
 80058ea:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058ec:	f04f 35ff 	mov.w	r5, #4294967295
 80058f0:	fa05 f404 	lsl.w	r4, r5, r4
 80058f4:	ea21 0104 	bic.w	r1, r1, r4
 80058f8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058fa:	fa05 f303 	lsl.w	r3, r5, r3
 80058fe:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005902:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8005904:	2800      	cmp	r0, #0
 8005906:	db0b      	blt.n	8005920 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005908:	0109      	lsls	r1, r1, #4
 800590a:	b2c9      	uxtb	r1, r1
 800590c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005910:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005914:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005918:	bc30      	pop	{r4, r5}
 800591a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800591c:	2300      	movs	r3, #0
 800591e:	e7e5      	b.n	80058ec <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005920:	f000 000f 	and.w	r0, r0, #15
 8005924:	0109      	lsls	r1, r1, #4
 8005926:	b2c9      	uxtb	r1, r1
 8005928:	4b02      	ldr	r3, [pc, #8]	; (8005934 <HAL_NVIC_SetPriority+0x64>)
 800592a:	5419      	strb	r1, [r3, r0]
 800592c:	e7f4      	b.n	8005918 <HAL_NVIC_SetPriority+0x48>
 800592e:	bf00      	nop
 8005930:	e000ed00 	.word	0xe000ed00
 8005934:	e000ed14 	.word	0xe000ed14

08005938 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005938:	2800      	cmp	r0, #0
 800593a:	db07      	blt.n	800594c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800593c:	f000 021f 	and.w	r2, r0, #31
 8005940:	0940      	lsrs	r0, r0, #5
 8005942:	2301      	movs	r3, #1
 8005944:	4093      	lsls	r3, r2
 8005946:	4a02      	ldr	r2, [pc, #8]	; (8005950 <HAL_NVIC_EnableIRQ+0x18>)
 8005948:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	e000e100 	.word	0xe000e100

08005954 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005954:	3801      	subs	r0, #1
 8005956:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800595a:	d20a      	bcs.n	8005972 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800595c:	4b06      	ldr	r3, [pc, #24]	; (8005978 <HAL_SYSTICK_Config+0x24>)
 800595e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005960:	4a06      	ldr	r2, [pc, #24]	; (800597c <HAL_SYSTICK_Config+0x28>)
 8005962:	21f0      	movs	r1, #240	; 0xf0
 8005964:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005968:	2000      	movs	r0, #0
 800596a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800596c:	2207      	movs	r2, #7
 800596e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005970:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005972:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	e000e010 	.word	0xe000e010
 800597c:	e000ed00 	.word	0xe000ed00

08005980 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005980:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005982:	6805      	ldr	r5, [r0, #0]
 8005984:	682c      	ldr	r4, [r5, #0]
 8005986:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 800598a:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800598c:	6804      	ldr	r4, [r0, #0]
 800598e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005990:	6883      	ldr	r3, [r0, #8]
 8005992:	2b40      	cmp	r3, #64	; 0x40
 8005994:	d005      	beq.n	80059a2 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8005996:	6803      	ldr	r3, [r0, #0]
 8005998:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800599a:	6803      	ldr	r3, [r0, #0]
 800599c:	60da      	str	r2, [r3, #12]
  }
}
 800599e:	bc30      	pop	{r4, r5}
 80059a0:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80059a2:	6803      	ldr	r3, [r0, #0]
 80059a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80059a6:	6803      	ldr	r3, [r0, #0]
 80059a8:	60d9      	str	r1, [r3, #12]
 80059aa:	e7f8      	b.n	800599e <DMA_SetConfig+0x1e>

080059ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80059ac:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80059ae:	6803      	ldr	r3, [r0, #0]
 80059b0:	b2d9      	uxtb	r1, r3
 80059b2:	3910      	subs	r1, #16
 80059b4:	4a0c      	ldr	r2, [pc, #48]	; (80059e8 <DMA_CalcBaseAndBitshift+0x3c>)
 80059b6:	fba2 4201 	umull	r4, r2, r2, r1
 80059ba:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80059bc:	4c0b      	ldr	r4, [pc, #44]	; (80059ec <DMA_CalcBaseAndBitshift+0x40>)
 80059be:	5ca2      	ldrb	r2, [r4, r2]
 80059c0:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80059c2:	295f      	cmp	r1, #95	; 0x5f
 80059c4:	d909      	bls.n	80059da <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80059c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80059ca:	f023 0303 	bic.w	r3, r3, #3
 80059ce:	3304      	adds	r3, #4
 80059d0:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80059d2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80059d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059d8:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80059da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80059de:	f023 0303 	bic.w	r3, r3, #3
 80059e2:	6583      	str	r3, [r0, #88]	; 0x58
 80059e4:	e7f5      	b.n	80059d2 <DMA_CalcBaseAndBitshift+0x26>
 80059e6:	bf00      	nop
 80059e8:	aaaaaaab 	.word	0xaaaaaaab
 80059ec:	0801c818 	.word	0x0801c818

080059f0 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80059f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80059f2:	6982      	ldr	r2, [r0, #24]
 80059f4:	b992      	cbnz	r2, 8005a1c <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d00a      	beq.n	8005a10 <DMA_CheckFifoParam+0x20>
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d002      	beq.n	8005a04 <DMA_CheckFifoParam+0x14>
 80059fe:	b10b      	cbz	r3, 8005a04 <DMA_CheckFifoParam+0x14>
 8005a00:	2000      	movs	r0, #0
 8005a02:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a04:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005a06:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005a0a:	d128      	bne.n	8005a5e <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a10:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005a12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a16:	d024      	beq.n	8005a62 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8005a18:	2000      	movs	r0, #0
 8005a1a:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a1c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005a20:	d009      	beq.n	8005a36 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d925      	bls.n	8005a72 <DMA_CheckFifoParam+0x82>
 8005a26:	2b03      	cmp	r3, #3
 8005a28:	d125      	bne.n	8005a76 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a2a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005a2c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005a30:	d123      	bne.n	8005a7a <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8005a32:	2000      	movs	r0, #0
 8005a34:	4770      	bx	lr
    switch (tmp)
 8005a36:	2b03      	cmp	r3, #3
 8005a38:	d803      	bhi.n	8005a42 <DMA_CheckFifoParam+0x52>
 8005a3a:	e8df f003 	tbb	[pc, r3]
 8005a3e:	0414      	.short	0x0414
 8005a40:	0a14      	.short	0x0a14
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a42:	2000      	movs	r0, #0
 8005a44:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a46:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005a48:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005a4c:	d10d      	bne.n	8005a6a <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8005a4e:	2000      	movs	r0, #0
 8005a50:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a52:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005a54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a58:	d009      	beq.n	8005a6e <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	4770      	bx	lr
        status = HAL_ERROR;
 8005a5e:	2001      	movs	r0, #1
 8005a60:	4770      	bx	lr
        status = HAL_ERROR;
 8005a62:	2001      	movs	r0, #1
 8005a64:	4770      	bx	lr
      status = HAL_ERROR;
 8005a66:	2001      	movs	r0, #1
 8005a68:	4770      	bx	lr
        status = HAL_ERROR;
 8005a6a:	2001      	movs	r0, #1
 8005a6c:	4770      	bx	lr
        status = HAL_ERROR;
 8005a6e:	2001      	movs	r0, #1
 8005a70:	4770      	bx	lr
      status = HAL_ERROR;
 8005a72:	2001      	movs	r0, #1
 8005a74:	4770      	bx	lr
    switch (tmp)
 8005a76:	2000      	movs	r0, #0
 8005a78:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8005a7a:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8005a7c:	4770      	bx	lr
	...

08005a80 <HAL_DMA_Init>:
{
 8005a80:	b570      	push	{r4, r5, r6, lr}
 8005a82:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005a84:	f7ff fb0c 	bl	80050a0 <HAL_GetTick>
  if(hdma == NULL)
 8005a88:	2c00      	cmp	r4, #0
 8005a8a:	d05b      	beq.n	8005b44 <HAL_DMA_Init+0xc4>
 8005a8c:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8005a8e:	2300      	movs	r3, #0
 8005a90:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a94:	2302      	movs	r3, #2
 8005a96:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8005a9a:	6822      	ldr	r2, [r4, #0]
 8005a9c:	6813      	ldr	r3, [r2, #0]
 8005a9e:	f023 0301 	bic.w	r3, r3, #1
 8005aa2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005aa4:	6823      	ldr	r3, [r4, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	f012 0f01 	tst.w	r2, #1
 8005aac:	d00a      	beq.n	8005ac4 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005aae:	f7ff faf7 	bl	80050a0 <HAL_GetTick>
 8005ab2:	1b43      	subs	r3, r0, r5
 8005ab4:	2b05      	cmp	r3, #5
 8005ab6:	d9f5      	bls.n	8005aa4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ab8:	2320      	movs	r3, #32
 8005aba:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005abc:	2003      	movs	r0, #3
 8005abe:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8005ac2:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8005ac4:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005ac6:	4820      	ldr	r0, [pc, #128]	; (8005b48 <HAL_DMA_Init+0xc8>)
 8005ac8:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005aca:	6861      	ldr	r1, [r4, #4]
 8005acc:	68a2      	ldr	r2, [r4, #8]
 8005ace:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ad0:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ad2:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ad4:	6921      	ldr	r1, [r4, #16]
 8005ad6:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ad8:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ada:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005adc:	69a1      	ldr	r1, [r4, #24]
 8005ade:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ae0:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ae2:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ae4:	6a21      	ldr	r1, [r4, #32]
 8005ae6:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ae8:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005aea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005aec:	2904      	cmp	r1, #4
 8005aee:	d01e      	beq.n	8005b2e <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8005af0:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8005af2:	6826      	ldr	r6, [r4, #0]
 8005af4:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005af6:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8005afa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005afc:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d107      	bne.n	8005b12 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8005b02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005b04:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005b08:	b11b      	cbz	r3, 8005b12 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	f7ff ff70 	bl	80059f0 <DMA_CheckFifoParam>
 8005b10:	b990      	cbnz	r0, 8005b38 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8005b12:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b14:	4620      	mov	r0, r4
 8005b16:	f7ff ff49 	bl	80059ac <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b1a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005b1c:	233f      	movs	r3, #63	; 0x3f
 8005b1e:	4093      	lsls	r3, r2
 8005b20:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b22:	2000      	movs	r0, #0
 8005b24:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8005b26:	2301      	movs	r3, #1
 8005b28:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8005b2c:	e7c9      	b.n	8005ac2 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005b2e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005b30:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005b32:	4301      	orrs	r1, r0
 8005b34:	430a      	orrs	r2, r1
 8005b36:	e7db      	b.n	8005af0 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b38:	2340      	movs	r3, #64	; 0x40
 8005b3a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8005b3c:	2001      	movs	r0, #1
 8005b3e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8005b42:	e7be      	b.n	8005ac2 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8005b44:	2001      	movs	r0, #1
 8005b46:	e7bc      	b.n	8005ac2 <HAL_DMA_Init+0x42>
 8005b48:	f010803f 	.word	0xf010803f

08005b4c <HAL_DMA_Start_IT>:
{
 8005b4c:	b538      	push	{r3, r4, r5, lr}
 8005b4e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b50:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8005b52:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8005b56:	2801      	cmp	r0, #1
 8005b58:	d030      	beq.n	8005bbc <HAL_DMA_Start_IT+0x70>
 8005b5a:	2001      	movs	r0, #1
 8005b5c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8005b60:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8005b64:	b2c0      	uxtb	r0, r0
 8005b66:	2801      	cmp	r0, #1
 8005b68:	d004      	beq.n	8005b74 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 8005b70:	2002      	movs	r0, #2
}
 8005b72:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b74:	2002      	movs	r0, #2
 8005b76:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b7a:	2000      	movs	r0, #0
 8005b7c:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b7e:	4620      	mov	r0, r4
 8005b80:	f7ff fefe 	bl	8005980 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b84:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005b86:	233f      	movs	r3, #63	; 0x3f
 8005b88:	4093      	lsls	r3, r2
 8005b8a:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005b8c:	6822      	ldr	r2, [r4, #0]
 8005b8e:	6813      	ldr	r3, [r2, #0]
 8005b90:	f043 0316 	orr.w	r3, r3, #22
 8005b94:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005b96:	6822      	ldr	r2, [r4, #0]
 8005b98:	6953      	ldr	r3, [r2, #20]
 8005b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b9e:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8005ba0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ba2:	b123      	cbz	r3, 8005bae <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 8005ba4:	6822      	ldr	r2, [r4, #0]
 8005ba6:	6813      	ldr	r3, [r2, #0]
 8005ba8:	f043 0308 	orr.w	r3, r3, #8
 8005bac:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8005bae:	6822      	ldr	r2, [r4, #0]
 8005bb0:	6813      	ldr	r3, [r2, #0]
 8005bb2:	f043 0301 	orr.w	r3, r3, #1
 8005bb6:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb8:	2000      	movs	r0, #0
 8005bba:	e7da      	b.n	8005b72 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8005bbc:	2002      	movs	r0, #2
 8005bbe:	e7d8      	b.n	8005b72 <HAL_DMA_Start_IT+0x26>

08005bc0 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005bc0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d003      	beq.n	8005bd2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bca:	2380      	movs	r3, #128	; 0x80
 8005bcc:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8005bce:	2001      	movs	r0, #1
 8005bd0:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8005bd2:	2305      	movs	r3, #5
 8005bd4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8005bd8:	6802      	ldr	r2, [r0, #0]
 8005bda:	6813      	ldr	r3, [r2, #0]
 8005bdc:	f023 0301 	bic.w	r3, r3, #1
 8005be0:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005be2:	2000      	movs	r0, #0
}
 8005be4:	4770      	bx	lr
	...

08005be8 <HAL_DMA_IRQHandler>:
{
 8005be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bea:	b083      	sub	sp, #12
 8005bec:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005bf2:	4b72      	ldr	r3, [pc, #456]	; (8005dbc <HAL_DMA_IRQHandler+0x1d4>)
 8005bf4:	681d      	ldr	r5, [r3, #0]
 8005bf6:	4b72      	ldr	r3, [pc, #456]	; (8005dc0 <HAL_DMA_IRQHandler+0x1d8>)
 8005bf8:	fba3 3505 	umull	r3, r5, r3, r5
 8005bfc:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bfe:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8005c00:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c02:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005c04:	2308      	movs	r3, #8
 8005c06:	4093      	lsls	r3, r2
 8005c08:	4233      	tst	r3, r6
 8005c0a:	d010      	beq.n	8005c2e <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005c0c:	6803      	ldr	r3, [r0, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	f012 0f04 	tst.w	r2, #4
 8005c14:	d00b      	beq.n	8005c2e <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	f022 0204 	bic.w	r2, r2, #4
 8005c1c:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005c1e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005c20:	2308      	movs	r3, #8
 8005c22:	4093      	lsls	r3, r2
 8005c24:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005c26:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005c28:	f043 0301 	orr.w	r3, r3, #1
 8005c2c:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c2e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005c30:	2301      	movs	r3, #1
 8005c32:	4093      	lsls	r3, r2
 8005c34:	4233      	tst	r3, r6
 8005c36:	d009      	beq.n	8005c4c <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005c38:	6822      	ldr	r2, [r4, #0]
 8005c3a:	6952      	ldr	r2, [r2, #20]
 8005c3c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005c40:	d004      	beq.n	8005c4c <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005c42:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005c44:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005c46:	f043 0302 	orr.w	r3, r3, #2
 8005c4a:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c4c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005c4e:	2304      	movs	r3, #4
 8005c50:	4093      	lsls	r3, r2
 8005c52:	4233      	tst	r3, r6
 8005c54:	d009      	beq.n	8005c6a <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005c56:	6822      	ldr	r2, [r4, #0]
 8005c58:	6812      	ldr	r2, [r2, #0]
 8005c5a:	f012 0f02 	tst.w	r2, #2
 8005c5e:	d004      	beq.n	8005c6a <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005c60:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c62:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005c64:	f043 0304 	orr.w	r3, r3, #4
 8005c68:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005c6a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005c6c:	2310      	movs	r3, #16
 8005c6e:	4093      	lsls	r3, r2
 8005c70:	4233      	tst	r3, r6
 8005c72:	d024      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005c74:	6822      	ldr	r2, [r4, #0]
 8005c76:	6812      	ldr	r2, [r2, #0]
 8005c78:	f012 0f08 	tst.w	r2, #8
 8005c7c:	d01f      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005c7e:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8005c88:	d00d      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005c90:	d104      	bne.n	8005c9c <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8005c92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c94:	b19b      	cbz	r3, 8005cbe <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8005c96:	4620      	mov	r0, r4
 8005c98:	4798      	blx	r3
 8005c9a:	e010      	b.n	8005cbe <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005c9c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005c9e:	b173      	cbz	r3, 8005cbe <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	4798      	blx	r3
 8005ca4:	e00b      	b.n	8005cbe <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005cac:	d103      	bne.n	8005cb6 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	f022 0208 	bic.w	r2, r2, #8
 8005cb4:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8005cb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cb8:	b10b      	cbz	r3, 8005cbe <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8005cba:	4620      	mov	r0, r4
 8005cbc:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005cbe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005cc0:	2320      	movs	r3, #32
 8005cc2:	4093      	lsls	r3, r2
 8005cc4:	4233      	tst	r3, r6
 8005cc6:	d055      	beq.n	8005d74 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005cc8:	6822      	ldr	r2, [r4, #0]
 8005cca:	6812      	ldr	r2, [r2, #0]
 8005ccc:	f012 0f10 	tst.w	r2, #16
 8005cd0:	d050      	beq.n	8005d74 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005cd2:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005cd4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b05      	cmp	r3, #5
 8005cdc:	d00e      	beq.n	8005cfc <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8005ce6:	d033      	beq.n	8005d50 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005cee:	d12a      	bne.n	8005d46 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8005cf0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d03e      	beq.n	8005d74 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	4798      	blx	r3
 8005cfa:	e03b      	b.n	8005d74 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005cfc:	6822      	ldr	r2, [r4, #0]
 8005cfe:	6813      	ldr	r3, [r2, #0]
 8005d00:	f023 0316 	bic.w	r3, r3, #22
 8005d04:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d06:	6822      	ldr	r2, [r4, #0]
 8005d08:	6953      	ldr	r3, [r2, #20]
 8005d0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d0e:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d12:	b1a3      	cbz	r3, 8005d3e <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d14:	6822      	ldr	r2, [r4, #0]
 8005d16:	6813      	ldr	r3, [r2, #0]
 8005d18:	f023 0308 	bic.w	r3, r3, #8
 8005d1c:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d1e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005d20:	233f      	movs	r3, #63	; 0x3f
 8005d22:	4093      	lsls	r3, r2
 8005d24:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8005d26:	2300      	movs	r3, #0
 8005d28:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8005d32:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d03f      	beq.n	8005db8 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8005d38:	4620      	mov	r0, r4
 8005d3a:	4798      	blx	r3
        return;
 8005d3c:	e03c      	b.n	8005db8 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d3e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1e7      	bne.n	8005d14 <HAL_DMA_IRQHandler+0x12c>
 8005d44:	e7eb      	b.n	8005d1e <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8005d46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005d48:	b1a3      	cbz	r3, 8005d74 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	4798      	blx	r3
 8005d4e:	e011      	b.n	8005d74 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005d56:	d109      	bne.n	8005d6c <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	f022 0210 	bic.w	r2, r2, #16
 8005d5e:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8005d60:	2300      	movs	r3, #0
 8005d62:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8005d66:	2301      	movs	r3, #1
 8005d68:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8005d6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005d6e:	b10b      	cbz	r3, 8005d74 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8005d70:	4620      	mov	r0, r4
 8005d72:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d74:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005d76:	b1fb      	cbz	r3, 8005db8 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005d78:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005d7a:	f013 0f01 	tst.w	r3, #1
 8005d7e:	d017      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d80:	2305      	movs	r3, #5
 8005d82:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8005d86:	6822      	ldr	r2, [r4, #0]
 8005d88:	6813      	ldr	r3, [r2, #0]
 8005d8a:	f023 0301 	bic.w	r3, r3, #1
 8005d8e:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8005d90:	9b01      	ldr	r3, [sp, #4]
 8005d92:	3301      	adds	r3, #1
 8005d94:	9301      	str	r3, [sp, #4]
 8005d96:	42ab      	cmp	r3, r5
 8005d98:	d804      	bhi.n	8005da4 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005d9a:	6823      	ldr	r3, [r4, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f013 0f01 	tst.w	r3, #1
 8005da2:	d1f5      	bne.n	8005d90 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8005da4:	2300      	movs	r3, #0
 8005da6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8005daa:	2301      	movs	r3, #1
 8005dac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8005db0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005db2:	b10b      	cbz	r3, 8005db8 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8005db4:	4620      	mov	r0, r4
 8005db6:	4798      	blx	r3
}
 8005db8:	b003      	add	sp, #12
 8005dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dbc:	2000382c 	.word	0x2000382c
 8005dc0:	1b4e81b5 	.word	0x1b4e81b5

08005dc4 <HAL_DMA_GetState>:
  return hdma->State;
 8005dc4:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8005dc8:	4770      	bx	lr
	...

08005dcc <ETH_MACAddressConfig>:

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005dcc:	7950      	ldrb	r0, [r2, #5]
 8005dce:	7913      	ldrb	r3, [r2, #4]
 8005dd0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005dd4:	4807      	ldr	r0, [pc, #28]	; (8005df4 <ETH_MACAddressConfig+0x28>)
 8005dd6:	500b      	str	r3, [r1, r0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005dd8:	78d0      	ldrb	r0, [r2, #3]
 8005dda:	7893      	ldrb	r3, [r2, #2]
 8005ddc:	041b      	lsls	r3, r3, #16
 8005dde:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005de2:	7850      	ldrb	r0, [r2, #1]
 8005de4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005de8:	7812      	ldrb	r2, [r2, #0]
 8005dea:	4313      	orrs	r3, r2
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005dec:	4a02      	ldr	r2, [pc, #8]	; (8005df8 <ETH_MACAddressConfig+0x2c>)
 8005dee:	508b      	str	r3, [r1, r2]
}
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	40028040 	.word	0x40028040
 8005df8:	40028044 	.word	0x40028044

08005dfc <ETH_DMATransmissionEnable>:
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8005dfc:	6801      	ldr	r1, [r0, #0]
 8005dfe:	f241 0218 	movw	r2, #4120	; 0x1018
 8005e02:	588b      	ldr	r3, [r1, r2]
 8005e04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005e08:	508b      	str	r3, [r1, r2]
}
 8005e0a:	4770      	bx	lr

08005e0c <ETH_DMAReceptionEnable>:
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8005e0c:	6801      	ldr	r1, [r0, #0]
 8005e0e:	f241 0218 	movw	r2, #4120	; 0x1018
 8005e12:	588b      	ldr	r3, [r1, r2]
 8005e14:	f043 0302 	orr.w	r3, r3, #2
 8005e18:	508b      	str	r3, [r1, r2]
}
 8005e1a:	4770      	bx	lr

08005e1c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8005e1c:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005e1e:	4b08      	ldr	r3, [pc, #32]	; (8005e40 <ETH_Delay+0x24>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a08      	ldr	r2, [pc, #32]	; (8005e44 <ETH_Delay+0x28>)
 8005e24:	fba2 2303 	umull	r2, r3, r2, r3
 8005e28:	0a5b      	lsrs	r3, r3, #9
 8005e2a:	fb00 f303 	mul.w	r3, r0, r3
 8005e2e:	9301      	str	r3, [sp, #4]
  do 
  {
    __NOP();
 8005e30:	bf00      	nop
  } 
  while (Delay --);
 8005e32:	9b01      	ldr	r3, [sp, #4]
 8005e34:	1e5a      	subs	r2, r3, #1
 8005e36:	9201      	str	r2, [sp, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1f9      	bne.n	8005e30 <ETH_Delay+0x14>
}
 8005e3c:	b002      	add	sp, #8
 8005e3e:	4770      	bx	lr
 8005e40:	2000382c 	.word	0x2000382c
 8005e44:	10624dd3 	.word	0x10624dd3

08005e48 <ETH_MACTransmissionEnable>:
{ 
 8005e48:	b510      	push	{r4, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8005e52:	6802      	ldr	r2, [r0, #0]
 8005e54:	6813      	ldr	r3, [r2, #0]
 8005e56:	f043 0308 	orr.w	r3, r3, #8
 8005e5a:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8005e5c:	6803      	ldr	r3, [r0, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005e62:	2001      	movs	r0, #1
 8005e64:	f7ff ffda 	bl	8005e1c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	9a01      	ldr	r2, [sp, #4]
 8005e6c:	601a      	str	r2, [r3, #0]
}
 8005e6e:	b002      	add	sp, #8
 8005e70:	bd10      	pop	{r4, pc}

08005e72 <ETH_MACReceptionEnable>:
{ 
 8005e72:	b510      	push	{r4, lr}
 8005e74:	b082      	sub	sp, #8
 8005e76:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8005e7c:	6802      	ldr	r2, [r0, #0]
 8005e7e:	6813      	ldr	r3, [r2, #0]
 8005e80:	f043 0304 	orr.w	r3, r3, #4
 8005e84:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8005e86:	6803      	ldr	r3, [r0, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005e8c:	2001      	movs	r0, #1
 8005e8e:	f7ff ffc5 	bl	8005e1c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	9a01      	ldr	r2, [sp, #4]
 8005e96:	601a      	str	r2, [r3, #0]
}
 8005e98:	b002      	add	sp, #8
 8005e9a:	bd10      	pop	{r4, pc}

08005e9c <ETH_FlushTransmitFIFO>:
{
 8005e9c:	b530      	push	{r4, r5, lr}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005ea6:	6802      	ldr	r2, [r0, #0]
 8005ea8:	f241 0518 	movw	r5, #4120	; 0x1018
 8005eac:	5953      	ldr	r3, [r2, r5]
 8005eae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eb2:	5153      	str	r3, [r2, r5]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005eb4:	6803      	ldr	r3, [r0, #0]
 8005eb6:	595b      	ldr	r3, [r3, r5]
 8005eb8:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005eba:	2001      	movs	r0, #1
 8005ebc:	f7ff ffae 	bl	8005e1c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005ec0:	6823      	ldr	r3, [r4, #0]
 8005ec2:	9a01      	ldr	r2, [sp, #4]
 8005ec4:	515a      	str	r2, [r3, r5]
}
 8005ec6:	b003      	add	sp, #12
 8005ec8:	bd30      	pop	{r4, r5, pc}
	...

08005ecc <ETH_MACDMAConfig>:
{
 8005ecc:	b570      	push	{r4, r5, r6, lr}
 8005ece:	b09e      	sub	sp, #120	; 0x78
 8005ed0:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8005ed2:	b129      	cbz	r1, 8005ee0 <ETH_MACDMAConfig+0x14>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8005ed4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ed8:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8005eda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005ede:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8005ee0:	69e3      	ldr	r3, [r4, #28]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d16a      	bne.n	8005fbc <ETH_MACDMAConfig+0xf0>
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8005ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005eea:	9307      	str	r3, [sp, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8005eec:	6821      	ldr	r1, [r4, #0]
 8005eee:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005ef0:	4a39      	ldr	r2, [pc, #228]	; (8005fd8 <ETH_MACDMAConfig+0x10c>)
 8005ef2:	401a      	ands	r2, r3
                       (heth->Init).Speed | 
 8005ef4:	68a3      	ldr	r3, [r4, #8]
                       (heth->Init).DuplexMode | 
 8005ef6:	68e0      	ldr	r0, [r4, #12]
                       macinit.LoopbackMode |
 8005ef8:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8005efa:	9807      	ldr	r0, [sp, #28]
                       (heth->Init).DuplexMode | 
 8005efc:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8005efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8005f02:	4313      	orrs	r3, r2
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005f04:	600b      	str	r3, [r1, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8005f06:	6823      	ldr	r3, [r4, #0]
 8005f08:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005f0a:	2001      	movs	r0, #1
 8005f0c:	f7ff f8ce 	bl	80050ac <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005f14:	6823      	ldr	r3, [r4, #0]
 8005f16:	2240      	movs	r2, #64	; 0x40
 8005f18:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 8005f1a:	6823      	ldr	r3, [r4, #0]
 8005f1c:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005f1e:	2001      	movs	r0, #1
 8005f20:	f7ff f8c4 	bl	80050ac <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8005f24:	6823      	ldr	r3, [r4, #0]
 8005f26:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	2500      	movs	r5, #0
 8005f2c:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8005f2e:	6823      	ldr	r3, [r4, #0]
 8005f30:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 8005f32:	6822      	ldr	r2, [r4, #0]
 8005f34:	6993      	ldr	r3, [r2, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005f36:	f023 03be 	bic.w	r3, r3, #190	; 0xbe
 8005f3a:	041b      	lsls	r3, r3, #16
 8005f3c:	0c1b      	lsrs	r3, r3, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005f42:	6193      	str	r3, [r2, #24]
   tmpreg1 = (heth->Instance)->MACFCR;
 8005f44:	6823      	ldr	r3, [r4, #0]
 8005f46:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005f48:	2001      	movs	r0, #1
 8005f4a:	f7ff f8af 	bl	80050ac <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8005f4e:	6823      	ldr	r3, [r4, #0]
 8005f50:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005f5a:	2001      	movs	r0, #1
 8005f5c:	f7ff f8a6 	bl	80050ac <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8005f60:	6823      	ldr	r3, [r4, #0]
 8005f62:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8005f64:	6822      	ldr	r2, [r4, #0]
 8005f66:	f241 0518 	movw	r5, #4120	; 0x1018
 8005f6a:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005f6c:	4b1b      	ldr	r3, [pc, #108]	; (8005fdc <ETH_MACDMAConfig+0x110>)
 8005f6e:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005f70:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8005f74:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005f78:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8005f7a:	6823      	ldr	r3, [r4, #0]
 8005f7c:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005f7e:	2001      	movs	r0, #1
 8005f80:	f7ff f894 	bl	80050ac <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8005f84:	6823      	ldr	r3, [r4, #0]
 8005f86:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005f88:	6823      	ldr	r3, [r4, #0]
 8005f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f8e:	4a14      	ldr	r2, [pc, #80]	; (8005fe0 <ETH_MACDMAConfig+0x114>)
 8005f90:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f98:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005f9a:	2001      	movs	r0, #1
 8005f9c:	f7ff f886 	bl	80050ac <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8005fa0:	6823      	ldr	r3, [r4, #0]
 8005fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fa6:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005fa8:	69a3      	ldr	r3, [r4, #24]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d009      	beq.n	8005fc2 <ETH_MACDMAConfig+0xf6>
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005fae:	6962      	ldr	r2, [r4, #20]
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f7ff ff0a 	bl	8005dcc <ETH_MACAddressConfig>
}
 8005fb8:	b01e      	add	sp, #120	; 0x78
 8005fba:	bd70      	pop	{r4, r5, r6, pc}
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	9307      	str	r3, [sp, #28]
 8005fc0:	e794      	b.n	8005eec <ETH_MACDMAConfig+0x20>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8005fc2:	6821      	ldr	r1, [r4, #0]
 8005fc4:	f241 021c 	movw	r2, #4124	; 0x101c
 8005fc8:	588b      	ldr	r3, [r1, r2]
 8005fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fd2:	508b      	str	r3, [r1, r2]
 8005fd4:	e7eb      	b.n	8005fae <ETH_MACDMAConfig+0xe2>
 8005fd6:	bf00      	nop
 8005fd8:	ff20810f 	.word	0xff20810f
 8005fdc:	f8de3f23 	.word	0xf8de3f23
 8005fe0:	02c12080 	.word	0x02c12080

08005fe4 <HAL_ETH_DMATxDescListInit>:
{
 8005fe4:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 8005fe6:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8005fea:	2c01      	cmp	r4, #1
 8005fec:	d032      	beq.n	8006054 <HAL_ETH_DMATxDescListInit+0x70>
 8005fee:	2401      	movs	r4, #1
 8005ff0:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8005ff4:	2402      	movs	r4, #2
 8005ff6:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 8005ffa:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0U; i < TxBuffCount; i++)
 8005ffc:	2400      	movs	r4, #0
 8005ffe:	e001      	b.n	8006004 <HAL_ETH_DMATxDescListInit+0x20>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8006000:	60f1      	str	r1, [r6, #12]
  for(i=0U; i < TxBuffCount; i++)
 8006002:	3401      	adds	r4, #1
 8006004:	429c      	cmp	r4, r3
 8006006:	d218      	bcs.n	800603a <HAL_ETH_DMATxDescListInit+0x56>
    dmatxdesc = DMATxDescTab + i;
 8006008:	0167      	lsls	r7, r4, #5
 800600a:	eb01 1644 	add.w	r6, r1, r4, lsl #5
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800600e:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
 8006012:	51cd      	str	r5, [r1, r7]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8006014:	f240 55f4 	movw	r5, #1524	; 0x5f4
 8006018:	fb05 2504 	mla	r5, r5, r4, r2
 800601c:	60b5      	str	r5, [r6, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800601e:	69c5      	ldr	r5, [r0, #28]
 8006020:	b91d      	cbnz	r5, 800602a <HAL_ETH_DMATxDescListInit+0x46>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8006022:	59cd      	ldr	r5, [r1, r7]
 8006024:	f445 0540 	orr.w	r5, r5, #12582912	; 0xc00000
 8006028:	51cd      	str	r5, [r1, r7]
    if(i < (TxBuffCount-1U))
 800602a:	1e5d      	subs	r5, r3, #1
 800602c:	42a5      	cmp	r5, r4
 800602e:	d9e7      	bls.n	8006000 <HAL_ETH_DMATxDescListInit+0x1c>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8006030:	1c65      	adds	r5, r4, #1
 8006032:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8006036:	60f5      	str	r5, [r6, #12]
 8006038:	e7e3      	b.n	8006002 <HAL_ETH_DMATxDescListInit+0x1e>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800603a:	6802      	ldr	r2, [r0, #0]
 800603c:	f241 0310 	movw	r3, #4112	; 0x1010
 8006040:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8006042:	2301      	movs	r3, #1
 8006044:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8006048:	2300      	movs	r3, #0
 800604a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 800604e:	4618      	mov	r0, r3
}
 8006050:	bcf0      	pop	{r4, r5, r6, r7}
 8006052:	4770      	bx	lr
  __HAL_LOCK(heth);
 8006054:	2002      	movs	r0, #2
 8006056:	e7fb      	b.n	8006050 <HAL_ETH_DMATxDescListInit+0x6c>

08006058 <HAL_ETH_DMARxDescListInit>:
{
 8006058:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 800605a:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 800605e:	2c01      	cmp	r4, #1
 8006060:	d02f      	beq.n	80060c2 <HAL_ETH_DMARxDescListInit+0x6a>
 8006062:	2401      	movs	r4, #1
 8006064:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8006068:	2402      	movs	r4, #2
 800606a:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 800606e:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0U; i < RxBuffCount; i++)
 8006070:	2400      	movs	r4, #0
 8006072:	e001      	b.n	8006078 <HAL_ETH_DMARxDescListInit+0x20>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8006074:	60e9      	str	r1, [r5, #12]
  for(i=0U; i < RxBuffCount; i++)
 8006076:	3401      	adds	r4, #1
 8006078:	429c      	cmp	r4, r3
 800607a:	d215      	bcs.n	80060a8 <HAL_ETH_DMARxDescListInit+0x50>
    DMARxDesc = DMARxDescTab+i;
 800607c:	0166      	lsls	r6, r4, #5
 800607e:	eb01 1544 	add.w	r5, r1, r4, lsl #5
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8006082:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8006086:	518f      	str	r7, [r1, r6]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8006088:	f244 56f4 	movw	r6, #17908	; 0x45f4
 800608c:	606e      	str	r6, [r5, #4]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800608e:	f240 56f4 	movw	r6, #1524	; 0x5f4
 8006092:	fb06 2604 	mla	r6, r6, r4, r2
 8006096:	60ae      	str	r6, [r5, #8]
    if(i < (RxBuffCount-1U))
 8006098:	1e5e      	subs	r6, r3, #1
 800609a:	42a6      	cmp	r6, r4
 800609c:	d9ea      	bls.n	8006074 <HAL_ETH_DMARxDescListInit+0x1c>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800609e:	1c66      	adds	r6, r4, #1
 80060a0:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 80060a4:	60ee      	str	r6, [r5, #12]
 80060a6:	e7e6      	b.n	8006076 <HAL_ETH_DMARxDescListInit+0x1e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80060a8:	6802      	ldr	r2, [r0, #0]
 80060aa:	f241 030c 	movw	r3, #4108	; 0x100c
 80060ae:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80060b0:	2301      	movs	r3, #1
 80060b2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80060b6:	2300      	movs	r3, #0
 80060b8:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80060bc:	4618      	mov	r0, r3
}
 80060be:	bcf0      	pop	{r4, r5, r6, r7}
 80060c0:	4770      	bx	lr
  __HAL_LOCK(heth);
 80060c2:	2002      	movs	r0, #2
 80060c4:	e7fb      	b.n	80060be <HAL_ETH_DMARxDescListInit+0x66>
	...

080060c8 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 80060c8:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	f000 8085 	beq.w	80061dc <HAL_ETH_TransmitFrame+0x114>
 80060d2:	2301      	movs	r3, #1
 80060d4:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80060d8:	2302      	movs	r3, #2
 80060da:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 80060de:	b1b1      	cbz	r1, 800610e <HAL_ETH_TransmitFrame+0x46>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80060e0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	2a00      	cmp	r2, #0
 80060e6:	db1a      	blt.n	800611e <HAL_ETH_TransmitFrame+0x56>
{
 80060e8:	b430      	push	{r4, r5}
  if (FrameLength > ETH_TX_BUF_SIZE)
 80060ea:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80060ee:	4291      	cmp	r1, r2
 80060f0:	d91d      	bls.n	800612e <HAL_ETH_TransmitFrame+0x66>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80060f2:	4c3b      	ldr	r4, [pc, #236]	; (80061e0 <HAL_ETH_TransmitFrame+0x118>)
 80060f4:	fba4 2401 	umull	r2, r4, r4, r1
 80060f8:	0aa4      	lsrs	r4, r4, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80060fa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80060fe:	fb02 1214 	mls	r2, r2, r4, r1
 8006102:	b102      	cbz	r2, 8006106 <HAL_ETH_TransmitFrame+0x3e>
      bufcount++;
 8006104:	3401      	adds	r4, #1
  if (bufcount == 1U)
 8006106:	2c01      	cmp	r4, #1
 8006108:	d011      	beq.n	800612e <HAL_ETH_TransmitFrame+0x66>
    for (i=0U; i< bufcount; i++)
 800610a:	2300      	movs	r3, #0
 800610c:	e048      	b.n	80061a0 <HAL_ETH_TransmitFrame+0xd8>
    heth->State = HAL_ETH_STATE_READY;
 800610e:	2301      	movs	r3, #1
 8006110:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8006114:	2200      	movs	r2, #0
 8006116:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    return  HAL_ERROR;                                    
 800611a:	4618      	mov	r0, r3
 800611c:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800611e:	2312      	movs	r3, #18
 8006120:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8006124:	2300      	movs	r3, #0
 8006126:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    return HAL_ERROR;
 800612a:	2001      	movs	r0, #1
 800612c:	4770      	bx	lr
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8006134:	601a      	str	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8006136:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006138:	f3c1 010c 	ubfx	r1, r1, #0, #13
 800613c:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800613e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8006140:	6813      	ldr	r3, [r2, #0]
 8006142:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006146:	6013      	str	r3, [r2, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8006148:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800614e:	6803      	ldr	r3, [r0, #0]
 8006150:	f241 0214 	movw	r2, #4116	; 0x1014
 8006154:	589a      	ldr	r2, [r3, r2]
 8006156:	f012 0f04 	tst.w	r2, #4
 800615a:	d008      	beq.n	800616e <HAL_ETH_TransmitFrame+0xa6>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800615c:	f241 0214 	movw	r2, #4116	; 0x1014
 8006160:	2104      	movs	r1, #4
 8006162:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 8006164:	6802      	ldr	r2, [r0, #0]
 8006166:	f241 0304 	movw	r3, #4100	; 0x1004
 800616a:	2100      	movs	r1, #0
 800616c:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 800616e:	2301      	movs	r3, #1
 8006170:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8006174:	2300      	movs	r3, #0
 8006176:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 800617a:	4618      	mov	r0, r3
}
 800617c:	bc30      	pop	{r4, r5}
 800617e:	4770      	bx	lr
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8006180:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8006182:	f240 55f4 	movw	r5, #1524	; 0x5f4
 8006186:	6055      	str	r5, [r2, #4]
      if (i == (bufcount-1U))
 8006188:	1e62      	subs	r2, r4, #1
 800618a:	429a      	cmp	r2, r3
 800618c:	d017      	beq.n	80061be <HAL_ETH_TransmitFrame+0xf6>
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800618e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8006190:	682a      	ldr	r2, [r5, #0]
 8006192:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006196:	602a      	str	r2, [r5, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8006198:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800619a:	68d2      	ldr	r2, [r2, #12]
 800619c:	62c2      	str	r2, [r0, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 800619e:	3301      	adds	r3, #1
 80061a0:	429c      	cmp	r4, r3
 80061a2:	d9d4      	bls.n	800614e <HAL_ETH_TransmitFrame+0x86>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80061a4:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80061a6:	682a      	ldr	r2, [r5, #0]
 80061a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80061ac:	602a      	str	r2, [r5, #0]
      if (i == 0U) 
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1e6      	bne.n	8006180 <HAL_ETH_TransmitFrame+0xb8>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80061b2:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80061b4:	682a      	ldr	r2, [r5, #0]
 80061b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80061ba:	602a      	str	r2, [r5, #0]
 80061bc:	e7e0      	b.n	8006180 <HAL_ETH_TransmitFrame+0xb8>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80061be:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80061c0:	682a      	ldr	r2, [r5, #0]
 80061c2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80061c6:	602a      	str	r2, [r5, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80061c8:	4a06      	ldr	r2, [pc, #24]	; (80061e4 <HAL_ETH_TransmitFrame+0x11c>)
 80061ca:	fb02 1204 	mla	r2, r2, r4, r1
 80061ce:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80061d2:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80061d4:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80061d8:	606a      	str	r2, [r5, #4]
 80061da:	e7d8      	b.n	800618e <HAL_ETH_TransmitFrame+0xc6>
  __HAL_LOCK(heth);
 80061dc:	2002      	movs	r0, #2
}
 80061de:	4770      	bx	lr
 80061e0:	ac02b00b 	.word	0xac02b00b
 80061e4:	fffffa0c 	.word	0xfffffa0c

080061e8 <HAL_ETH_GetReceivedFrame>:
  __HAL_LOCK(heth);
 80061e8:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d040      	beq.n	8006272 <HAL_ETH_GetReceivedFrame+0x8a>
 80061f0:	2301      	movs	r3, #1
 80061f2:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80061f6:	2302      	movs	r3, #2
 80061f8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80061fc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	2a00      	cmp	r2, #0
 8006202:	db0e      	blt.n	8006222 <HAL_ETH_GetReceivedFrame+0x3a>
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	f412 7f80 	tst.w	r2, #256	; 0x100
 800620a:	d112      	bne.n	8006232 <HAL_ETH_GetReceivedFrame+0x4a>
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006212:	d028      	beq.n	8006266 <HAL_ETH_GetReceivedFrame+0x7e>
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8006214:	6303      	str	r3, [r0, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8006216:	2200      	movs	r2, #0
 8006218:	6342      	str	r2, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 800621a:	2201      	movs	r2, #1
 800621c:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	6283      	str	r3, [r0, #40]	; 0x28
  heth->State = HAL_ETH_STATE_READY;
 8006222:	2301      	movs	r3, #1
 8006224:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8006228:	2200      	movs	r2, #0
 800622a:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 800622e:	4618      	mov	r0, r3
 8006230:	4770      	bx	lr
      (heth->RxFrameInfos).SegCount++;
 8006232:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8006234:	3201      	adds	r2, #1
 8006236:	6382      	str	r2, [r0, #56]	; 0x38
      if ((heth->RxFrameInfos).SegCount == 1U)
 8006238:	2a01      	cmp	r2, #1
 800623a:	d012      	beq.n	8006262 <HAL_ETH_GetReceivedFrame+0x7a>
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800623c:	6343      	str	r3, [r0, #52]	; 0x34
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	f3c2 420d 	ubfx	r2, r2, #16, #14
 8006244:	3a04      	subs	r2, #4
      heth->RxFrameInfos.length = framelength;
 8006246:	63c2      	str	r2, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8006248:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800624a:	6892      	ldr	r2, [r2, #8]
 800624c:	6402      	str	r2, [r0, #64]	; 0x40
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	6283      	str	r3, [r0, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 8006252:	2301      	movs	r3, #1
 8006254:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8006258:	2300      	movs	r3, #0
 800625a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      return HAL_OK;
 800625e:	4618      	mov	r0, r3
 8006260:	4770      	bx	lr
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8006262:	6303      	str	r3, [r0, #48]	; 0x30
 8006264:	e7ea      	b.n	800623c <HAL_ETH_GetReceivedFrame+0x54>
      (heth->RxFrameInfos).SegCount++;
 8006266:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8006268:	3201      	adds	r2, #1
 800626a:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	6283      	str	r3, [r0, #40]	; 0x28
 8006270:	e7d7      	b.n	8006222 <HAL_ETH_GetReceivedFrame+0x3a>
  __HAL_LOCK(heth);
 8006272:	2002      	movs	r0, #2
}
 8006274:	4770      	bx	lr

08006276 <HAL_ETH_ReadPHYRegister>:
{
 8006276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8006278:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b82      	cmp	r3, #130	; 0x82
 8006280:	d033      	beq.n	80062ea <HAL_ETH_ReadPHYRegister+0x74>
 8006282:	4605      	mov	r5, r0
 8006284:	4616      	mov	r6, r2
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8006286:	2382      	movs	r3, #130	; 0x82
 8006288:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 800628c:	6800      	ldr	r0, [r0, #0]
 800628e:	6902      	ldr	r2, [r0, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8006290:	f002 021c 	and.w	r2, r2, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8006294:	8a2b      	ldrh	r3, [r5, #16]
 8006296:	02db      	lsls	r3, r3, #11
 8006298:	b29b      	uxth	r3, r3
 800629a:	4313      	orrs	r3, r2
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800629c:	018c      	lsls	r4, r1, #6
 800629e:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80062a2:	431c      	orrs	r4, r3
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80062a4:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 80062a8:	6104      	str	r4, [r0, #16]
  tickstart = HAL_GetTick();
 80062aa:	f7fe fef9 	bl	80050a0 <HAL_GetTick>
 80062ae:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80062b0:	f014 0f01 	tst.w	r4, #1
 80062b4:	d010      	beq.n	80062d8 <HAL_ETH_ReadPHYRegister+0x62>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80062b6:	f7fe fef3 	bl	80050a0 <HAL_GetTick>
 80062ba:	1bc3      	subs	r3, r0, r7
 80062bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062c0:	d202      	bcs.n	80062c8 <HAL_ETH_ReadPHYRegister+0x52>
    tmpreg1 = heth->Instance->MACMIIAR;
 80062c2:	682b      	ldr	r3, [r5, #0]
 80062c4:	691c      	ldr	r4, [r3, #16]
 80062c6:	e7f3      	b.n	80062b0 <HAL_ETH_ReadPHYRegister+0x3a>
      heth->State= HAL_ETH_STATE_READY;
 80062c8:	2301      	movs	r3, #1
 80062ca:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80062ce:	2300      	movs	r3, #0
 80062d0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 80062d4:	2003      	movs	r0, #3
 80062d6:	e007      	b.n	80062e8 <HAL_ETH_ReadPHYRegister+0x72>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80062d8:	682b      	ldr	r3, [r5, #0]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	b29b      	uxth	r3, r3
 80062de:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 80062e0:	2301      	movs	r3, #1
 80062e2:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK;
 80062e6:	2000      	movs	r0, #0
}
 80062e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80062ea:	2002      	movs	r0, #2
 80062ec:	e7fc      	b.n	80062e8 <HAL_ETH_ReadPHYRegister+0x72>

080062ee <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80062ee:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	2b42      	cmp	r3, #66	; 0x42
 80062f6:	d032      	beq.n	800635e <HAL_ETH_WritePHYRegister+0x70>
{
 80062f8:	b570      	push	{r4, r5, r6, lr}
 80062fa:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80062fc:	2342      	movs	r3, #66	; 0x42
 80062fe:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8006302:	6806      	ldr	r6, [r0, #0]
 8006304:	6930      	ldr	r0, [r6, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8006306:	f000 001c 	and.w	r0, r0, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800630a:	8a2b      	ldrh	r3, [r5, #16]
 800630c:	02db      	lsls	r3, r3, #11
 800630e:	b29b      	uxth	r3, r3
 8006310:	4303      	orrs	r3, r0
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8006312:	018c      	lsls	r4, r1, #6
 8006314:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 8006318:	431c      	orrs	r4, r3
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800631a:	f044 0403 	orr.w	r4, r4, #3
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800631e:	b292      	uxth	r2, r2
 8006320:	6172      	str	r2, [r6, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8006322:	682b      	ldr	r3, [r5, #0]
 8006324:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8006326:	f7fe febb 	bl	80050a0 <HAL_GetTick>
 800632a:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800632c:	f014 0f01 	tst.w	r4, #1
 8006330:	d010      	beq.n	8006354 <HAL_ETH_WritePHYRegister+0x66>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8006332:	f7fe feb5 	bl	80050a0 <HAL_GetTick>
 8006336:	1b83      	subs	r3, r0, r6
 8006338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800633c:	d202      	bcs.n	8006344 <HAL_ETH_WritePHYRegister+0x56>
    tmpreg1 = heth->Instance->MACMIIAR;
 800633e:	682b      	ldr	r3, [r5, #0]
 8006340:	691c      	ldr	r4, [r3, #16]
 8006342:	e7f3      	b.n	800632c <HAL_ETH_WritePHYRegister+0x3e>
      heth->State= HAL_ETH_STATE_READY;
 8006344:	2301      	movs	r3, #1
 8006346:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800634a:	2300      	movs	r3, #0
 800634c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8006350:	2003      	movs	r0, #3
 8006352:	e003      	b.n	800635c <HAL_ETH_WritePHYRegister+0x6e>
  heth->State = HAL_ETH_STATE_READY;
 8006354:	2301      	movs	r3, #1
 8006356:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 800635a:	2000      	movs	r0, #0
}
 800635c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800635e:	2002      	movs	r0, #2
}
 8006360:	4770      	bx	lr
	...

08006364 <HAL_ETH_Init>:
{
 8006364:	b570      	push	{r4, r5, r6, lr}
 8006366:	b082      	sub	sp, #8
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8006368:	2300      	movs	r3, #0
 800636a:	9301      	str	r3, [sp, #4]
  if(heth == NULL)
 800636c:	2800      	cmp	r0, #0
 800636e:	f000 810e 	beq.w	800658e <HAL_ETH_Init+0x22a>
 8006372:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 8006374:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8006378:	2b00      	cmp	r3, #0
 800637a:	d034      	beq.n	80063e6 <HAL_ETH_Init+0x82>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800637c:	2300      	movs	r3, #0
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	4b84      	ldr	r3, [pc, #528]	; (8006594 <HAL_ETH_Init+0x230>)
 8006382:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006384:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006388:	645a      	str	r2, [r3, #68]	; 0x44
 800638a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800638c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	9b00      	ldr	r3, [sp, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8006394:	4b80      	ldr	r3, [pc, #512]	; (8006598 <HAL_ETH_Init+0x234>)
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800639c:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	6a21      	ldr	r1, [r4, #32]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80063a6:	6823      	ldr	r3, [r4, #0]
 80063a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	f042 0201 	orr.w	r2, r2, #1
 80063b2:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80063b4:	f7fe fe74 	bl	80050a0 <HAL_GetTick>
 80063b8:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80063c0:	6812      	ldr	r2, [r2, #0]
 80063c2:	f012 0f01 	tst.w	r2, #1
 80063c6:	d013      	beq.n	80063f0 <HAL_ETH_Init+0x8c>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80063c8:	f7fe fe6a 	bl	80050a0 <HAL_GetTick>
 80063cc:	1b40      	subs	r0, r0, r5
 80063ce:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80063d2:	d9f2      	bls.n	80063ba <HAL_ETH_Init+0x56>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80063d4:	2503      	movs	r5, #3
 80063d6:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80063da:	2300      	movs	r3, #0
 80063dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 80063e0:	4628      	mov	r0, r5
 80063e2:	b002      	add	sp, #8
 80063e4:	bd70      	pop	{r4, r5, r6, pc}
    heth->Lock = HAL_UNLOCKED;
 80063e6:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 80063ea:	f009 fba7 	bl	800fb3c <HAL_ETH_MspInit>
 80063ee:	e7c5      	b.n	800637c <HAL_ETH_Init+0x18>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80063f0:	691d      	ldr	r5, [r3, #16]
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80063f2:	f025 051c 	bic.w	r5, r5, #28
  hclk = HAL_RCC_GetHCLKFreq();
 80063f6:	f001 fffd 	bl	80083f4 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80063fa:	4b68      	ldr	r3, [pc, #416]	; (800659c <HAL_ETH_Init+0x238>)
 80063fc:	4403      	add	r3, r0
 80063fe:	4a68      	ldr	r2, [pc, #416]	; (80065a0 <HAL_ETH_Init+0x23c>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d255      	bcs.n	80064b0 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8006404:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8006408:	6823      	ldr	r3, [r4, #0]
 800640a:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800640c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006410:	2100      	movs	r1, #0
 8006412:	4620      	mov	r0, r4
 8006414:	f7ff ff6b 	bl	80062ee <HAL_ETH_WritePHYRegister>
 8006418:	4605      	mov	r5, r0
 800641a:	2800      	cmp	r0, #0
 800641c:	d160      	bne.n	80064e0 <HAL_ETH_Init+0x17c>
  HAL_Delay(PHY_RESET_DELAY);
 800641e:	20ff      	movs	r0, #255	; 0xff
 8006420:	f7fe fe44 	bl	80050ac <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8006424:	6863      	ldr	r3, [r4, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	f000 8091 	beq.w	800654e <HAL_ETH_Init+0x1ea>
    tickstart = HAL_GetTick();
 800642c:	f7fe fe38 	bl	80050a0 <HAL_GetTick>
 8006430:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8006432:	aa01      	add	r2, sp, #4
 8006434:	2101      	movs	r1, #1
 8006436:	4620      	mov	r0, r4
 8006438:	f7ff ff1d 	bl	8006276 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800643c:	f7fe fe30 	bl	80050a0 <HAL_GetTick>
 8006440:	1b80      	subs	r0, r0, r6
 8006442:	f241 3388 	movw	r3, #5000	; 0x1388
 8006446:	4298      	cmp	r0, r3
 8006448:	d852      	bhi.n	80064f0 <HAL_ETH_Init+0x18c>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800644a:	9b01      	ldr	r3, [sp, #4]
 800644c:	f013 0f04 	tst.w	r3, #4
 8006450:	d0ef      	beq.n	8006432 <HAL_ETH_Init+0xce>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8006452:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006456:	2100      	movs	r1, #0
 8006458:	4620      	mov	r0, r4
 800645a:	f7ff ff48 	bl	80062ee <HAL_ETH_WritePHYRegister>
 800645e:	2800      	cmp	r0, #0
 8006460:	d152      	bne.n	8006508 <HAL_ETH_Init+0x1a4>
    tickstart = HAL_GetTick();
 8006462:	f7fe fe1d 	bl	80050a0 <HAL_GetTick>
 8006466:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8006468:	aa01      	add	r2, sp, #4
 800646a:	2101      	movs	r1, #1
 800646c:	4620      	mov	r0, r4
 800646e:	f7ff ff02 	bl	8006276 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8006472:	f7fe fe15 	bl	80050a0 <HAL_GetTick>
 8006476:	1b80      	subs	r0, r0, r6
 8006478:	f241 3388 	movw	r3, #5000	; 0x1388
 800647c:	4298      	cmp	r0, r3
 800647e:	d84b      	bhi.n	8006518 <HAL_ETH_Init+0x1b4>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006480:	9b01      	ldr	r3, [sp, #4]
 8006482:	f013 0f20 	tst.w	r3, #32
 8006486:	d0ef      	beq.n	8006468 <HAL_ETH_Init+0x104>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8006488:	aa01      	add	r2, sp, #4
 800648a:	211f      	movs	r1, #31
 800648c:	4620      	mov	r0, r4
 800648e:	f7ff fef2 	bl	8006276 <HAL_ETH_ReadPHYRegister>
 8006492:	2800      	cmp	r0, #0
 8006494:	d14c      	bne.n	8006530 <HAL_ETH_Init+0x1cc>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006496:	9b01      	ldr	r3, [sp, #4]
 8006498:	f013 0f10 	tst.w	r3, #16
 800649c:	d050      	beq.n	8006540 <HAL_ETH_Init+0x1dc>
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800649e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064a2:	60e2      	str	r2, [r4, #12]
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80064a4:	f013 0f04 	tst.w	r3, #4
 80064a8:	d04d      	beq.n	8006546 <HAL_ETH_Init+0x1e2>
      (heth->Init).Speed = ETH_SPEED_10M; 
 80064aa:	2300      	movs	r3, #0
 80064ac:	60a3      	str	r3, [r4, #8]
 80064ae:	e05e      	b.n	800656e <HAL_ETH_Init+0x20a>
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80064b0:	4b3c      	ldr	r3, [pc, #240]	; (80065a4 <HAL_ETH_Init+0x240>)
 80064b2:	4403      	add	r3, r0
 80064b4:	4a3c      	ldr	r2, [pc, #240]	; (80065a8 <HAL_ETH_Init+0x244>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d802      	bhi.n	80064c0 <HAL_ETH_Init+0x15c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80064ba:	f045 050c 	orr.w	r5, r5, #12
 80064be:	e7a3      	b.n	8006408 <HAL_ETH_Init+0xa4>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80064c0:	4b3a      	ldr	r3, [pc, #232]	; (80065ac <HAL_ETH_Init+0x248>)
 80064c2:	4403      	add	r3, r0
 80064c4:	4a3a      	ldr	r2, [pc, #232]	; (80065b0 <HAL_ETH_Init+0x24c>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d39e      	bcc.n	8006408 <HAL_ETH_Init+0xa4>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80064ca:	4b3a      	ldr	r3, [pc, #232]	; (80065b4 <HAL_ETH_Init+0x250>)
 80064cc:	4403      	add	r3, r0
 80064ce:	4a3a      	ldr	r2, [pc, #232]	; (80065b8 <HAL_ETH_Init+0x254>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d802      	bhi.n	80064da <HAL_ETH_Init+0x176>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80064d4:	f045 0504 	orr.w	r5, r5, #4
 80064d8:	e796      	b.n	8006408 <HAL_ETH_Init+0xa4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80064da:	f045 0510 	orr.w	r5, r5, #16
 80064de:	e793      	b.n	8006408 <HAL_ETH_Init+0xa4>
    ETH_MACDMAConfig(heth, err);
 80064e0:	2101      	movs	r1, #1
 80064e2:	4620      	mov	r0, r4
 80064e4:	f7ff fcf2 	bl	8005ecc <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 80064e8:	2501      	movs	r5, #1
 80064ea:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
    return HAL_ERROR;
 80064ee:	e777      	b.n	80063e0 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 80064f0:	2101      	movs	r1, #1
 80064f2:	4620      	mov	r0, r4
 80064f4:	f7ff fcea 	bl	8005ecc <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 80064f8:	2301      	movs	r3, #1
 80064fa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 80064fe:	2300      	movs	r3, #0
 8006500:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8006504:	2503      	movs	r5, #3
 8006506:	e76b      	b.n	80063e0 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8006508:	2101      	movs	r1, #1
 800650a:	4620      	mov	r0, r4
 800650c:	f7ff fcde 	bl	8005ecc <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8006510:	2501      	movs	r5, #1
 8006512:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8006516:	e763      	b.n	80063e0 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 8006518:	2101      	movs	r1, #1
 800651a:	4620      	mov	r0, r4
 800651c:	f7ff fcd6 	bl	8005ecc <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8006520:	2301      	movs	r3, #1
 8006522:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8006526:	2300      	movs	r3, #0
 8006528:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 800652c:	2503      	movs	r5, #3
 800652e:	e757      	b.n	80063e0 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8006530:	2101      	movs	r1, #1
 8006532:	4620      	mov	r0, r4
 8006534:	f7ff fcca 	bl	8005ecc <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8006538:	2501      	movs	r5, #1
 800653a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 800653e:	e74f      	b.n	80063e0 <HAL_ETH_Init+0x7c>
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8006540:	2200      	movs	r2, #0
 8006542:	60e2      	str	r2, [r4, #12]
 8006544:	e7ae      	b.n	80064a4 <HAL_ETH_Init+0x140>
      (heth->Init).Speed = ETH_SPEED_100M;
 8006546:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800654a:	60a3      	str	r3, [r4, #8]
 800654c:	e00f      	b.n	800656e <HAL_ETH_Init+0x20a>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800654e:	68e2      	ldr	r2, [r4, #12]
 8006550:	f3c2 02cf 	ubfx	r2, r2, #3, #16
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8006554:	68a3      	ldr	r3, [r4, #8]
 8006556:	f3c3 034f 	ubfx	r3, r3, #1, #16
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800655a:	431a      	orrs	r2, r3
 800655c:	2100      	movs	r1, #0
 800655e:	4620      	mov	r0, r4
 8006560:	f7ff fec5 	bl	80062ee <HAL_ETH_WritePHYRegister>
 8006564:	b958      	cbnz	r0, 800657e <HAL_ETH_Init+0x21a>
    HAL_Delay(PHY_CONFIG_DELAY);
 8006566:	f640 70ff 	movw	r0, #4095	; 0xfff
 800656a:	f7fe fd9f 	bl	80050ac <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 800656e:	2100      	movs	r1, #0
 8006570:	4620      	mov	r0, r4
 8006572:	f7ff fcab 	bl	8005ecc <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8006576:	2301      	movs	r3, #1
 8006578:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 800657c:	e730      	b.n	80063e0 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 800657e:	2101      	movs	r1, #1
 8006580:	4620      	mov	r0, r4
 8006582:	f7ff fca3 	bl	8005ecc <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8006586:	2501      	movs	r5, #1
 8006588:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 800658c:	e728      	b.n	80063e0 <HAL_ETH_Init+0x7c>
    return HAL_ERROR;
 800658e:	2501      	movs	r5, #1
 8006590:	e726      	b.n	80063e0 <HAL_ETH_Init+0x7c>
 8006592:	bf00      	nop
 8006594:	40023800 	.word	0x40023800
 8006598:	40013800 	.word	0x40013800
 800659c:	feced300 	.word	0xfeced300
 80065a0:	00e4e1c0 	.word	0x00e4e1c0
 80065a4:	fde9f140 	.word	0xfde9f140
 80065a8:	017d783f 	.word	0x017d783f
 80065ac:	fc6c7900 	.word	0xfc6c7900
 80065b0:	02625a00 	.word	0x02625a00
 80065b4:	fa0a1f00 	.word	0xfa0a1f00
 80065b8:	02faf07f 	.word	0x02faf07f

080065bc <HAL_ETH_Start>:
{  
 80065bc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(heth);
 80065be:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d01a      	beq.n	80065fc <HAL_ETH_Start+0x40>
 80065c6:	4604      	mov	r4, r0
 80065c8:	2501      	movs	r5, #1
 80065ca:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80065ce:	2302      	movs	r3, #2
 80065d0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  ETH_MACTransmissionEnable(heth);
 80065d4:	f7ff fc38 	bl	8005e48 <ETH_MACTransmissionEnable>
  ETH_MACReceptionEnable(heth);
 80065d8:	4620      	mov	r0, r4
 80065da:	f7ff fc4a 	bl	8005e72 <ETH_MACReceptionEnable>
  ETH_FlushTransmitFIFO(heth);
 80065de:	4620      	mov	r0, r4
 80065e0:	f7ff fc5c 	bl	8005e9c <ETH_FlushTransmitFIFO>
  ETH_DMATransmissionEnable(heth);
 80065e4:	4620      	mov	r0, r4
 80065e6:	f7ff fc09 	bl	8005dfc <ETH_DMATransmissionEnable>
  ETH_DMAReceptionEnable(heth);
 80065ea:	4620      	mov	r0, r4
 80065ec:	f7ff fc0e 	bl	8005e0c <ETH_DMAReceptionEnable>
  heth->State= HAL_ETH_STATE_READY;
 80065f0:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80065f4:	2000      	movs	r0, #0
 80065f6:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
}
 80065fa:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(heth);
 80065fc:	2002      	movs	r0, #2
 80065fe:	e7fc      	b.n	80065fa <HAL_ETH_Start+0x3e>

08006600 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006600:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006602:	4909      	ldr	r1, [pc, #36]	; (8006628 <FLASH_Program_DoubleWord+0x28>)
 8006604:	690c      	ldr	r4, [r1, #16]
 8006606:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 800660a:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800660c:	690c      	ldr	r4, [r1, #16]
 800660e:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8006612:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006614:	690c      	ldr	r4, [r1, #16]
 8006616:	f044 0401 	orr.w	r4, r4, #1
 800661a:	610c      	str	r4, [r1, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800661c:	6002      	str	r2, [r0, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800661e:	6043      	str	r3, [r0, #4]
}
 8006620:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	40023c00 	.word	0x40023c00

0800662c <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800662c:	4b07      	ldr	r3, [pc, #28]	; (800664c <FLASH_Program_Word+0x20>)
 800662e:	691a      	ldr	r2, [r3, #16]
 8006630:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006634:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8006636:	691a      	ldr	r2, [r3, #16]
 8006638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800663c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800663e:	691a      	ldr	r2, [r3, #16]
 8006640:	f042 0201 	orr.w	r2, r2, #1
 8006644:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8006646:	6001      	str	r1, [r0, #0]
}
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	40023c00 	.word	0x40023c00

08006650 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006650:	4b07      	ldr	r3, [pc, #28]	; (8006670 <FLASH_Program_HalfWord+0x20>)
 8006652:	691a      	ldr	r2, [r3, #16]
 8006654:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006658:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800665a:	691a      	ldr	r2, [r3, #16]
 800665c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006660:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006662:	691a      	ldr	r2, [r3, #16]
 8006664:	f042 0201 	orr.w	r2, r2, #1
 8006668:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 800666a:	8001      	strh	r1, [r0, #0]
}
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	40023c00 	.word	0x40023c00

08006674 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006674:	4b06      	ldr	r3, [pc, #24]	; (8006690 <FLASH_Program_Byte+0x1c>)
 8006676:	691a      	ldr	r2, [r3, #16]
 8006678:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800667c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800667e:	691a      	ldr	r2, [r3, #16]
 8006680:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006682:	691a      	ldr	r2, [r3, #16]
 8006684:	f042 0201 	orr.w	r2, r2, #1
 8006688:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 800668a:	7001      	strb	r1, [r0, #0]
}
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	40023c00 	.word	0x40023c00

08006694 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8006694:	4b27      	ldr	r3, [pc, #156]	; (8006734 <FLASH_SetErrorCode+0xa0>)
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	f013 0f10 	tst.w	r3, #16
 800669c:	d007      	beq.n	80066ae <FLASH_SetErrorCode+0x1a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800669e:	4a26      	ldr	r2, [pc, #152]	; (8006738 <FLASH_SetErrorCode+0xa4>)
 80066a0:	69d3      	ldr	r3, [r2, #28]
 80066a2:	f043 0310 	orr.w	r3, r3, #16
 80066a6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80066a8:	4b22      	ldr	r3, [pc, #136]	; (8006734 <FLASH_SetErrorCode+0xa0>)
 80066aa:	2210      	movs	r2, #16
 80066ac:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80066ae:	4b21      	ldr	r3, [pc, #132]	; (8006734 <FLASH_SetErrorCode+0xa0>)
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	f013 0f20 	tst.w	r3, #32
 80066b6:	d007      	beq.n	80066c8 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80066b8:	4a1f      	ldr	r2, [pc, #124]	; (8006738 <FLASH_SetErrorCode+0xa4>)
 80066ba:	69d3      	ldr	r3, [r2, #28]
 80066bc:	f043 0308 	orr.w	r3, r3, #8
 80066c0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80066c2:	4b1c      	ldr	r3, [pc, #112]	; (8006734 <FLASH_SetErrorCode+0xa0>)
 80066c4:	2220      	movs	r2, #32
 80066c6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80066c8:	4b1a      	ldr	r3, [pc, #104]	; (8006734 <FLASH_SetErrorCode+0xa0>)
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80066d0:	d007      	beq.n	80066e2 <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80066d2:	4a19      	ldr	r2, [pc, #100]	; (8006738 <FLASH_SetErrorCode+0xa4>)
 80066d4:	69d3      	ldr	r3, [r2, #28]
 80066d6:	f043 0304 	orr.w	r3, r3, #4
 80066da:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80066dc:	4b15      	ldr	r3, [pc, #84]	; (8006734 <FLASH_SetErrorCode+0xa0>)
 80066de:	2240      	movs	r2, #64	; 0x40
 80066e0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80066e2:	4b14      	ldr	r3, [pc, #80]	; (8006734 <FLASH_SetErrorCode+0xa0>)
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80066ea:	d007      	beq.n	80066fc <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80066ec:	4a12      	ldr	r2, [pc, #72]	; (8006738 <FLASH_SetErrorCode+0xa4>)
 80066ee:	69d3      	ldr	r3, [r2, #28]
 80066f0:	f043 0302 	orr.w	r3, r3, #2
 80066f4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80066f6:	4b0f      	ldr	r3, [pc, #60]	; (8006734 <FLASH_SetErrorCode+0xa0>)
 80066f8:	2280      	movs	r2, #128	; 0x80
 80066fa:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80066fc:	4b0d      	ldr	r3, [pc, #52]	; (8006734 <FLASH_SetErrorCode+0xa0>)
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006704:	d008      	beq.n	8006718 <FLASH_SetErrorCode+0x84>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8006706:	4a0c      	ldr	r2, [pc, #48]	; (8006738 <FLASH_SetErrorCode+0xa4>)
 8006708:	69d3      	ldr	r3, [r2, #28]
 800670a:	f043 0301 	orr.w	r3, r3, #1
 800670e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8006710:	4b08      	ldr	r3, [pc, #32]	; (8006734 <FLASH_SetErrorCode+0xa0>)
 8006712:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006716:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8006718:	4b06      	ldr	r3, [pc, #24]	; (8006734 <FLASH_SetErrorCode+0xa0>)
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	f013 0f02 	tst.w	r3, #2
 8006720:	d007      	beq.n	8006732 <FLASH_SetErrorCode+0x9e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006722:	4a05      	ldr	r2, [pc, #20]	; (8006738 <FLASH_SetErrorCode+0xa4>)
 8006724:	69d3      	ldr	r3, [r2, #28]
 8006726:	f043 0320 	orr.w	r3, r3, #32
 800672a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800672c:	4b01      	ldr	r3, [pc, #4]	; (8006734 <FLASH_SetErrorCode+0xa0>)
 800672e:	2202      	movs	r2, #2
 8006730:	60da      	str	r2, [r3, #12]
  }
}
 8006732:	4770      	bx	lr
 8006734:	40023c00 	.word	0x40023c00
 8006738:	200061c0 	.word	0x200061c0

0800673c <HAL_FLASH_EndOfOperationCallback>:
}
 800673c:	4770      	bx	lr

0800673e <HAL_FLASH_OperationErrorCallback>:
}
 800673e:	4770      	bx	lr

08006740 <HAL_FLASH_IRQHandler>:
{
 8006740:	b510      	push	{r4, lr}
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8006742:	4b3b      	ldr	r3, [pc, #236]	; (8006830 <HAL_FLASH_IRQHandler+0xf0>)
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	f413 7ff9 	tst.w	r3, #498	; 0x1f2
 800674a:	d013      	beq.n	8006774 <HAL_FLASH_IRQHandler+0x34>
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800674c:	4b39      	ldr	r3, [pc, #228]	; (8006834 <HAL_FLASH_IRQHandler+0xf4>)
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b01      	cmp	r3, #1
 8006754:	d03d      	beq.n	80067d2 <HAL_FLASH_IRQHandler+0x92>
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8006756:	4b37      	ldr	r3, [pc, #220]	; (8006834 <HAL_FLASH_IRQHandler+0xf4>)
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b02      	cmp	r3, #2
 800675e:	d03e      	beq.n	80067de <HAL_FLASH_IRQHandler+0x9e>
      addresstmp = pFlash.Address;
 8006760:	4b34      	ldr	r3, [pc, #208]	; (8006834 <HAL_FLASH_IRQHandler+0xf4>)
 8006762:	695c      	ldr	r4, [r3, #20]
    FLASH_SetErrorCode();
 8006764:	f7ff ff96 	bl	8006694 <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8006768:	4620      	mov	r0, r4
 800676a:	f7ff ffe8 	bl	800673e <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800676e:	4b31      	ldr	r3, [pc, #196]	; (8006834 <HAL_FLASH_IRQHandler+0xf4>)
 8006770:	2200      	movs	r2, #0
 8006772:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8006774:	4b2e      	ldr	r3, [pc, #184]	; (8006830 <HAL_FLASH_IRQHandler+0xf0>)
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	f013 0f01 	tst.w	r3, #1
 800677c:	d013      	beq.n	80067a6 <HAL_FLASH_IRQHandler+0x66>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800677e:	4b2c      	ldr	r3, [pc, #176]	; (8006830 <HAL_FLASH_IRQHandler+0xf0>)
 8006780:	2201      	movs	r2, #1
 8006782:	60da      	str	r2, [r3, #12]
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8006784:	4b2b      	ldr	r3, [pc, #172]	; (8006834 <HAL_FLASH_IRQHandler+0xf4>)
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	b2db      	uxtb	r3, r3
 800678a:	4293      	cmp	r3, r2
 800678c:	d02a      	beq.n	80067e4 <HAL_FLASH_IRQHandler+0xa4>
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 800678e:	4b29      	ldr	r3, [pc, #164]	; (8006834 <HAL_FLASH_IRQHandler+0xf4>)
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b02      	cmp	r3, #2
 8006796:	d043      	beq.n	8006820 <HAL_FLASH_IRQHandler+0xe0>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8006798:	4b26      	ldr	r3, [pc, #152]	; (8006834 <HAL_FLASH_IRQHandler+0xf4>)
 800679a:	6958      	ldr	r0, [r3, #20]
 800679c:	f7ff ffce 	bl	800673c <HAL_FLASH_EndOfOperationCallback>
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80067a0:	4b24      	ldr	r3, [pc, #144]	; (8006834 <HAL_FLASH_IRQHandler+0xf4>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	701a      	strb	r2, [r3, #0]
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80067a6:	4b23      	ldr	r3, [pc, #140]	; (8006834 <HAL_FLASH_IRQHandler+0xf4>)
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	b98b      	cbnz	r3, 80067d0 <HAL_FLASH_IRQHandler+0x90>
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 80067ac:	4b20      	ldr	r3, [pc, #128]	; (8006830 <HAL_FLASH_IRQHandler+0xf0>)
 80067ae:	691a      	ldr	r2, [r3, #16]
 80067b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067b4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80067b8:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 80067ba:	691a      	ldr	r2, [r3, #16]
 80067bc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80067c0:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 80067c2:	691a      	ldr	r2, [r3, #16]
 80067c4:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80067c8:	611a      	str	r2, [r3, #16]
    __HAL_UNLOCK(&pFlash);
 80067ca:	4b1a      	ldr	r3, [pc, #104]	; (8006834 <HAL_FLASH_IRQHandler+0xf4>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	761a      	strb	r2, [r3, #24]
}
 80067d0:	bd10      	pop	{r4, pc}
      addresstmp = pFlash.Sector;
 80067d2:	4b18      	ldr	r3, [pc, #96]	; (8006834 <HAL_FLASH_IRQHandler+0xf4>)
 80067d4:	68dc      	ldr	r4, [r3, #12]
      pFlash.Sector = 0xFFFFFFFFU;
 80067d6:	f04f 32ff 	mov.w	r2, #4294967295
 80067da:	60da      	str	r2, [r3, #12]
 80067dc:	e7c2      	b.n	8006764 <HAL_FLASH_IRQHandler+0x24>
      addresstmp = pFlash.Bank;
 80067de:	4b15      	ldr	r3, [pc, #84]	; (8006834 <HAL_FLASH_IRQHandler+0xf4>)
 80067e0:	691c      	ldr	r4, [r3, #16]
 80067e2:	e7bf      	b.n	8006764 <HAL_FLASH_IRQHandler+0x24>
      pFlash.NbSectorsToErase--;
 80067e4:	4b13      	ldr	r3, [pc, #76]	; (8006834 <HAL_FLASH_IRQHandler+0xf4>)
 80067e6:	685a      	ldr	r2, [r3, #4]
 80067e8:	3a01      	subs	r2, #1
 80067ea:	605a      	str	r2, [r3, #4]
      if(pFlash.NbSectorsToErase != 0U)
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	b15b      	cbz	r3, 8006808 <HAL_FLASH_IRQHandler+0xc8>
        addresstmp = pFlash.Sector;
 80067f0:	4c10      	ldr	r4, [pc, #64]	; (8006834 <HAL_FLASH_IRQHandler+0xf4>)
 80067f2:	68e0      	ldr	r0, [r4, #12]
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80067f4:	f7ff ffa2 	bl	800673c <HAL_FLASH_EndOfOperationCallback>
        pFlash.Sector++;
 80067f8:	68e3      	ldr	r3, [r4, #12]
 80067fa:	3301      	adds	r3, #1
 80067fc:	60e3      	str	r3, [r4, #12]
        addresstmp = pFlash.Sector;
 80067fe:	68e0      	ldr	r0, [r4, #12]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8006800:	7a21      	ldrb	r1, [r4, #8]
 8006802:	f000 f8cf 	bl	80069a4 <FLASH_Erase_Sector>
 8006806:	e7ce      	b.n	80067a6 <HAL_FLASH_IRQHandler+0x66>
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8006808:	4b0a      	ldr	r3, [pc, #40]	; (8006834 <HAL_FLASH_IRQHandler+0xf4>)
 800680a:	f04f 34ff 	mov.w	r4, #4294967295
 800680e:	60dc      	str	r4, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8006810:	2200      	movs	r2, #0
 8006812:	701a      	strb	r2, [r3, #0]
        FLASH_FlushCaches() ;
 8006814:	f000 f8f4 	bl	8006a00 <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8006818:	4620      	mov	r0, r4
 800681a:	f7ff ff8f 	bl	800673c <HAL_FLASH_EndOfOperationCallback>
 800681e:	e7c2      	b.n	80067a6 <HAL_FLASH_IRQHandler+0x66>
        FLASH_FlushCaches() ;
 8006820:	f000 f8ee 	bl	8006a00 <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8006824:	4b03      	ldr	r3, [pc, #12]	; (8006834 <HAL_FLASH_IRQHandler+0xf4>)
 8006826:	6918      	ldr	r0, [r3, #16]
 8006828:	f7ff ff88 	bl	800673c <HAL_FLASH_EndOfOperationCallback>
 800682c:	e7b8      	b.n	80067a0 <HAL_FLASH_IRQHandler+0x60>
 800682e:	bf00      	nop
 8006830:	40023c00 	.word	0x40023c00
 8006834:	200061c0 	.word	0x200061c0

08006838 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006838:	4b09      	ldr	r3, [pc, #36]	; (8006860 <HAL_FLASH_Unlock+0x28>)
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	db01      	blt.n	8006844 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8006840:	2000      	movs	r0, #0
 8006842:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006844:	4b06      	ldr	r3, [pc, #24]	; (8006860 <HAL_FLASH_Unlock+0x28>)
 8006846:	4a07      	ldr	r2, [pc, #28]	; (8006864 <HAL_FLASH_Unlock+0x2c>)
 8006848:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800684a:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800684e:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	2b00      	cmp	r3, #0
 8006854:	db01      	blt.n	800685a <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8006856:	2000      	movs	r0, #0
 8006858:	4770      	bx	lr
      status = HAL_ERROR;
 800685a:	2001      	movs	r0, #1
}
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	40023c00 	.word	0x40023c00
 8006864:	45670123 	.word	0x45670123

08006868 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8006868:	4a03      	ldr	r2, [pc, #12]	; (8006878 <HAL_FLASH_Lock+0x10>)
 800686a:	6913      	ldr	r3, [r2, #16]
 800686c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006870:	6113      	str	r3, [r2, #16]
}
 8006872:	2000      	movs	r0, #0
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	40023c00 	.word	0x40023c00

0800687c <FLASH_WaitForLastOperation>:
{ 
 800687c:	b538      	push	{r3, r4, r5, lr}
 800687e:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006880:	4b14      	ldr	r3, [pc, #80]	; (80068d4 <FLASH_WaitForLastOperation+0x58>)
 8006882:	2200      	movs	r2, #0
 8006884:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8006886:	f7fe fc0b 	bl	80050a0 <HAL_GetTick>
 800688a:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800688c:	4b12      	ldr	r3, [pc, #72]	; (80068d8 <FLASH_WaitForLastOperation+0x5c>)
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006894:	d00a      	beq.n	80068ac <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 8006896:	f1b4 3fff 	cmp.w	r4, #4294967295
 800689a:	d0f7      	beq.n	800688c <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800689c:	b124      	cbz	r4, 80068a8 <FLASH_WaitForLastOperation+0x2c>
 800689e:	f7fe fbff 	bl	80050a0 <HAL_GetTick>
 80068a2:	1b40      	subs	r0, r0, r5
 80068a4:	42a0      	cmp	r0, r4
 80068a6:	d9f1      	bls.n	800688c <FLASH_WaitForLastOperation+0x10>
        return HAL_TIMEOUT;
 80068a8:	2003      	movs	r0, #3
 80068aa:	e00d      	b.n	80068c8 <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80068ac:	4b0a      	ldr	r3, [pc, #40]	; (80068d8 <FLASH_WaitForLastOperation+0x5c>)
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	f013 0f01 	tst.w	r3, #1
 80068b4:	d002      	beq.n	80068bc <FLASH_WaitForLastOperation+0x40>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80068b6:	4b08      	ldr	r3, [pc, #32]	; (80068d8 <FLASH_WaitForLastOperation+0x5c>)
 80068b8:	2201      	movs	r2, #1
 80068ba:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80068bc:	4b06      	ldr	r3, [pc, #24]	; (80068d8 <FLASH_WaitForLastOperation+0x5c>)
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	f413 7ff9 	tst.w	r3, #498	; 0x1f2
 80068c4:	d101      	bne.n	80068ca <FLASH_WaitForLastOperation+0x4e>
  return HAL_OK;
 80068c6:	2000      	movs	r0, #0
}  
 80068c8:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 80068ca:	f7ff fee3 	bl	8006694 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80068ce:	2001      	movs	r0, #1
 80068d0:	e7fa      	b.n	80068c8 <FLASH_WaitForLastOperation+0x4c>
 80068d2:	bf00      	nop
 80068d4:	200061c0 	.word	0x200061c0
 80068d8:	40023c00 	.word	0x40023c00

080068dc <HAL_FLASH_Program>:
{
 80068dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068de:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 80068e0:	4a1b      	ldr	r2, [pc, #108]	; (8006950 <HAL_FLASH_Program+0x74>)
 80068e2:	7e12      	ldrb	r2, [r2, #24]
 80068e4:	2a01      	cmp	r2, #1
 80068e6:	d030      	beq.n	800694a <HAL_FLASH_Program+0x6e>
 80068e8:	4604      	mov	r4, r0
 80068ea:	460d      	mov	r5, r1
 80068ec:	461f      	mov	r7, r3
 80068ee:	4b18      	ldr	r3, [pc, #96]	; (8006950 <HAL_FLASH_Program+0x74>)
 80068f0:	2201      	movs	r2, #1
 80068f2:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80068f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80068f8:	f7ff ffc0 	bl	800687c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80068fc:	b990      	cbnz	r0, 8006924 <HAL_FLASH_Program+0x48>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80068fe:	b1ac      	cbz	r4, 800692c <HAL_FLASH_Program+0x50>
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006900:	2c01      	cmp	r4, #1
 8006902:	d018      	beq.n	8006936 <HAL_FLASH_Program+0x5a>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006904:	2c02      	cmp	r4, #2
 8006906:	d01b      	beq.n	8006940 <HAL_FLASH_Program+0x64>
      FLASH_Program_DoubleWord(Address, Data);
 8006908:	4632      	mov	r2, r6
 800690a:	463b      	mov	r3, r7
 800690c:	4628      	mov	r0, r5
 800690e:	f7ff fe77 	bl	8006600 <FLASH_Program_DoubleWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006912:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006916:	f7ff ffb1 	bl	800687c <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 800691a:	4a0e      	ldr	r2, [pc, #56]	; (8006954 <HAL_FLASH_Program+0x78>)
 800691c:	6913      	ldr	r3, [r2, #16]
 800691e:	f023 0301 	bic.w	r3, r3, #1
 8006922:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8006924:	4b0a      	ldr	r3, [pc, #40]	; (8006950 <HAL_FLASH_Program+0x74>)
 8006926:	2200      	movs	r2, #0
 8006928:	761a      	strb	r2, [r3, #24]
}
 800692a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800692c:	b2f1      	uxtb	r1, r6
 800692e:	4628      	mov	r0, r5
 8006930:	f7ff fea0 	bl	8006674 <FLASH_Program_Byte>
 8006934:	e7ed      	b.n	8006912 <HAL_FLASH_Program+0x36>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8006936:	b2b1      	uxth	r1, r6
 8006938:	4628      	mov	r0, r5
 800693a:	f7ff fe89 	bl	8006650 <FLASH_Program_HalfWord>
 800693e:	e7e8      	b.n	8006912 <HAL_FLASH_Program+0x36>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8006940:	4631      	mov	r1, r6
 8006942:	4628      	mov	r0, r5
 8006944:	f7ff fe72 	bl	800662c <FLASH_Program_Word>
 8006948:	e7e3      	b.n	8006912 <HAL_FLASH_Program+0x36>
  __HAL_LOCK(&pFlash);
 800694a:	2002      	movs	r0, #2
 800694c:	e7ed      	b.n	800692a <HAL_FLASH_Program+0x4e>
 800694e:	bf00      	nop
 8006950:	200061c0 	.word	0x200061c0
 8006954:	40023c00 	.word	0x40023c00

08006958 <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006958:	4a11      	ldr	r2, [pc, #68]	; (80069a0 <FLASH_MassErase+0x48>)
 800695a:	6913      	ldr	r3, [r2, #16]
 800695c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006960:	6113      	str	r3, [r2, #16]

  if(Banks == FLASH_BANK_BOTH)
 8006962:	2903      	cmp	r1, #3
 8006964:	d00e      	beq.n	8006984 <FLASH_MassErase+0x2c>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
  }
  else if(Banks == FLASH_BANK_1)
 8006966:	2901      	cmp	r1, #1
 8006968:	d013      	beq.n	8006992 <FLASH_MassErase+0x3a>
    FLASH->CR |= FLASH_CR_MER1;
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 800696a:	4a0d      	ldr	r2, [pc, #52]	; (80069a0 <FLASH_MassErase+0x48>)
 800696c:	6913      	ldr	r3, [r2, #16]
 800696e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006972:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8006974:	4a0a      	ldr	r2, [pc, #40]	; (80069a0 <FLASH_MassErase+0x48>)
 8006976:	6913      	ldr	r3, [r2, #16]
 8006978:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 800697c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8006980:	6110      	str	r0, [r2, #16]
}
 8006982:	4770      	bx	lr
    FLASH->CR |= FLASH_MER_BIT;
 8006984:	6913      	ldr	r3, [r2, #16]
 8006986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800698a:	f043 0304 	orr.w	r3, r3, #4
 800698e:	6113      	str	r3, [r2, #16]
 8006990:	e7f0      	b.n	8006974 <FLASH_MassErase+0x1c>
    FLASH->CR |= FLASH_CR_MER1;
 8006992:	4a03      	ldr	r2, [pc, #12]	; (80069a0 <FLASH_MassErase+0x48>)
 8006994:	6913      	ldr	r3, [r2, #16]
 8006996:	f043 0304 	orr.w	r3, r3, #4
 800699a:	6113      	str	r3, [r2, #16]
 800699c:	e7ea      	b.n	8006974 <FLASH_MassErase+0x1c>
 800699e:	bf00      	nop
 80069a0:	40023c00 	.word	0x40023c00

080069a4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80069a4:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80069a6:	b149      	cbz	r1, 80069bc <FLASH_Erase_Sector+0x18>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80069a8:	2901      	cmp	r1, #1
 80069aa:	d024      	beq.n	80069f6 <FLASH_Erase_Sector+0x52>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80069ac:	2902      	cmp	r1, #2
 80069ae:	d002      	beq.n	80069b6 <FLASH_Erase_Sector+0x12>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80069b0:	f44f 7440 	mov.w	r4, #768	; 0x300
 80069b4:	e003      	b.n	80069be <FLASH_Erase_Sector+0x1a>
    tmp_psize = FLASH_PSIZE_WORD;
 80069b6:	f44f 7400 	mov.w	r4, #512	; 0x200
 80069ba:	e000      	b.n	80069be <FLASH_Erase_Sector+0x1a>
     tmp_psize = FLASH_PSIZE_BYTE;
 80069bc:	2400      	movs	r4, #0
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 80069be:	280b      	cmp	r0, #11
 80069c0:	d900      	bls.n	80069c4 <FLASH_Erase_Sector+0x20>
  {
    Sector += 4U;
 80069c2:	3004      	adds	r0, #4
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80069c4:	4b0d      	ldr	r3, [pc, #52]	; (80069fc <FLASH_Erase_Sector+0x58>)
 80069c6:	6919      	ldr	r1, [r3, #16]
 80069c8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80069cc:	6119      	str	r1, [r3, #16]
  FLASH->CR |= tmp_psize;
 80069ce:	691a      	ldr	r2, [r3, #16]
 80069d0:	4322      	orrs	r2, r4
 80069d2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80069d4:	691a      	ldr	r2, [r3, #16]
 80069d6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80069da:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80069dc:	691a      	ldr	r2, [r3, #16]
 80069de:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 80069e2:	f040 0002 	orr.w	r0, r0, #2
 80069e6:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80069e8:	691a      	ldr	r2, [r3, #16]
 80069ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80069ee:	611a      	str	r2, [r3, #16]
}
 80069f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069f4:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80069f6:	f44f 7480 	mov.w	r4, #256	; 0x100
 80069fa:	e7e0      	b.n	80069be <FLASH_Erase_Sector+0x1a>
 80069fc:	40023c00 	.word	0x40023c00

08006a00 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8006a00:	4b16      	ldr	r3, [pc, #88]	; (8006a5c <FLASH_FlushCaches+0x5c>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006a08:	d010      	beq.n	8006a2c <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006a0a:	4b14      	ldr	r3, [pc, #80]	; (8006a5c <FLASH_FlushCaches+0x5c>)
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006a12:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a1a:	601a      	str	r2, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a22:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a2a:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8006a2c:	4b0b      	ldr	r3, [pc, #44]	; (8006a5c <FLASH_FlushCaches+0x5c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006a34:	d010      	beq.n	8006a58 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8006a36:	4b09      	ldr	r3, [pc, #36]	; (8006a5c <FLASH_FlushCaches+0x5c>)
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a3e:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a46:	601a      	str	r2, [r3, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a4e:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a56:	601a      	str	r2, [r3, #0]
  }
}
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	40023c00 	.word	0x40023c00

08006a60 <HAL_FLASHEx_Erase>:
{
 8006a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8006a62:	4b23      	ldr	r3, [pc, #140]	; (8006af0 <HAL_FLASHEx_Erase+0x90>)
 8006a64:	7e1b      	ldrb	r3, [r3, #24]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d040      	beq.n	8006aec <HAL_FLASHEx_Erase+0x8c>
 8006a6a:	4604      	mov	r4, r0
 8006a6c:	460e      	mov	r6, r1
 8006a6e:	4b20      	ldr	r3, [pc, #128]	; (8006af0 <HAL_FLASHEx_Erase+0x90>)
 8006a70:	2201      	movs	r2, #1
 8006a72:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006a74:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006a78:	f7ff ff00 	bl	800687c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8006a7c:	4607      	mov	r7, r0
 8006a7e:	bb80      	cbnz	r0, 8006ae2 <HAL_FLASHEx_Erase+0x82>
    *SectorError = 0xFFFFFFFFU;
 8006a80:	f04f 33ff 	mov.w	r3, #4294967295
 8006a84:	6033      	str	r3, [r6, #0]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006a86:	6823      	ldr	r3, [r4, #0]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d016      	beq.n	8006aba <HAL_FLASHEx_Erase+0x5a>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006a8c:	68a5      	ldr	r5, [r4, #8]
 8006a8e:	68e3      	ldr	r3, [r4, #12]
 8006a90:	68a2      	ldr	r2, [r4, #8]
 8006a92:	4413      	add	r3, r2
 8006a94:	42ab      	cmp	r3, r5
 8006a96:	d922      	bls.n	8006ade <HAL_FLASHEx_Erase+0x7e>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8006a98:	7c21      	ldrb	r1, [r4, #16]
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	f7ff ff82 	bl	80069a4 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006aa0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006aa4:	f7ff feea 	bl	800687c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8006aa8:	4a12      	ldr	r2, [pc, #72]	; (8006af4 <HAL_FLASHEx_Erase+0x94>)
 8006aaa:	6913      	ldr	r3, [r2, #16]
 8006aac:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8006ab0:	6113      	str	r3, [r2, #16]
        if(status != HAL_OK) 
 8006ab2:	4607      	mov	r7, r0
 8006ab4:	b990      	cbnz	r0, 8006adc <HAL_FLASHEx_Erase+0x7c>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006ab6:	3501      	adds	r5, #1
 8006ab8:	e7e9      	b.n	8006a8e <HAL_FLASHEx_Erase+0x2e>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8006aba:	6861      	ldr	r1, [r4, #4]
 8006abc:	7c20      	ldrb	r0, [r4, #16]
 8006abe:	f7ff ff4b 	bl	8006958 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006ac2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006ac6:	f7ff fed9 	bl	800687c <FLASH_WaitForLastOperation>
 8006aca:	4607      	mov	r7, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8006acc:	4a09      	ldr	r2, [pc, #36]	; (8006af4 <HAL_FLASHEx_Erase+0x94>)
 8006ace:	6913      	ldr	r3, [r2, #16]
 8006ad0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ad4:	f023 0304 	bic.w	r3, r3, #4
 8006ad8:	6113      	str	r3, [r2, #16]
 8006ada:	e000      	b.n	8006ade <HAL_FLASHEx_Erase+0x7e>
          *SectorError = index;
 8006adc:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();    
 8006ade:	f7ff ff8f 	bl	8006a00 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8006ae2:	4b03      	ldr	r3, [pc, #12]	; (8006af0 <HAL_FLASHEx_Erase+0x90>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	761a      	strb	r2, [r3, #24]
}
 8006ae8:	4638      	mov	r0, r7
 8006aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8006aec:	2702      	movs	r7, #2
 8006aee:	e7fb      	b.n	8006ae8 <HAL_FLASHEx_Erase+0x88>
 8006af0:	200061c0 	.word	0x200061c0
 8006af4:	40023c00 	.word	0x40023c00

08006af8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006af8:	2300      	movs	r3, #0
 8006afa:	2b0f      	cmp	r3, #15
 8006afc:	f200 80e5 	bhi.w	8006cca <HAL_GPIO_Init+0x1d2>
{
 8006b00:	b4f0      	push	{r4, r5, r6, r7}
 8006b02:	b082      	sub	sp, #8
 8006b04:	e039      	b.n	8006b7a <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006b06:	2209      	movs	r2, #9
 8006b08:	e000      	b.n	8006b0c <HAL_GPIO_Init+0x14>
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	40b2      	lsls	r2, r6
 8006b0e:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b10:	3402      	adds	r4, #2
 8006b12:	4e6e      	ldr	r6, [pc, #440]	; (8006ccc <HAL_GPIO_Init+0x1d4>)
 8006b14:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006b18:	4a6d      	ldr	r2, [pc, #436]	; (8006cd0 <HAL_GPIO_Init+0x1d8>)
 8006b1a:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8006b1c:	43ea      	mvns	r2, r5
 8006b1e:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006b22:	684f      	ldr	r7, [r1, #4]
 8006b24:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8006b28:	d001      	beq.n	8006b2e <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8006b2a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8006b2e:	4c68      	ldr	r4, [pc, #416]	; (8006cd0 <HAL_GPIO_Init+0x1d8>)
 8006b30:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8006b32:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8006b34:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006b38:	684f      	ldr	r7, [r1, #4]
 8006b3a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8006b3e:	d001      	beq.n	8006b44 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8006b40:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8006b44:	4c62      	ldr	r4, [pc, #392]	; (8006cd0 <HAL_GPIO_Init+0x1d8>)
 8006b46:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006b48:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8006b4a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006b4e:	684f      	ldr	r7, [r1, #4]
 8006b50:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8006b54:	d001      	beq.n	8006b5a <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8006b56:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8006b5a:	4c5d      	ldr	r4, [pc, #372]	; (8006cd0 <HAL_GPIO_Init+0x1d8>)
 8006b5c:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8006b5e:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8006b60:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006b62:	684e      	ldr	r6, [r1, #4]
 8006b64:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8006b68:	d001      	beq.n	8006b6e <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8006b6a:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8006b6e:	4c58      	ldr	r4, [pc, #352]	; (8006cd0 <HAL_GPIO_Init+0x1d8>)
 8006b70:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b72:	3301      	adds	r3, #1
 8006b74:	2b0f      	cmp	r3, #15
 8006b76:	f200 80a5 	bhi.w	8006cc4 <HAL_GPIO_Init+0x1cc>
    ioposition = 0x01U << position;
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006b7e:	680c      	ldr	r4, [r1, #0]
 8006b80:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8006b84:	ea32 0404 	bics.w	r4, r2, r4
 8006b88:	d1f3      	bne.n	8006b72 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006b8a:	684c      	ldr	r4, [r1, #4]
 8006b8c:	2c02      	cmp	r4, #2
 8006b8e:	d001      	beq.n	8006b94 <HAL_GPIO_Init+0x9c>
 8006b90:	2c12      	cmp	r4, #18
 8006b92:	d110      	bne.n	8006bb6 <HAL_GPIO_Init+0xbe>
        temp = GPIOx->AFR[position >> 3U];
 8006b94:	08de      	lsrs	r6, r3, #3
 8006b96:	3608      	adds	r6, #8
 8006b98:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006b9c:	f003 0407 	and.w	r4, r3, #7
 8006ba0:	00a7      	lsls	r7, r4, #2
 8006ba2:	240f      	movs	r4, #15
 8006ba4:	40bc      	lsls	r4, r7
 8006ba6:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006baa:	690c      	ldr	r4, [r1, #16]
 8006bac:	40bc      	lsls	r4, r7
 8006bae:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 8006bb2:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8006bb6:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006bba:	005e      	lsls	r6, r3, #1
 8006bbc:	2403      	movs	r4, #3
 8006bbe:	40b4      	lsls	r4, r6
 8006bc0:	43e7      	mvns	r7, r4
 8006bc2:	ea2c 0c04 	bic.w	ip, ip, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006bc6:	684c      	ldr	r4, [r1, #4]
 8006bc8:	f004 0403 	and.w	r4, r4, #3
 8006bcc:	40b4      	lsls	r4, r6
 8006bce:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8006bd2:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006bd4:	684c      	ldr	r4, [r1, #4]
 8006bd6:	f104 3cff 	add.w	ip, r4, #4294967295
 8006bda:	f1bc 0f01 	cmp.w	ip, #1
 8006bde:	d903      	bls.n	8006be8 <HAL_GPIO_Init+0xf0>
 8006be0:	2c11      	cmp	r4, #17
 8006be2:	d001      	beq.n	8006be8 <HAL_GPIO_Init+0xf0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006be4:	2c12      	cmp	r4, #18
 8006be6:	d110      	bne.n	8006c0a <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 8006be8:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006bea:	ea07 0c04 	and.w	ip, r7, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006bee:	68cc      	ldr	r4, [r1, #12]
 8006bf0:	40b4      	lsls	r4, r6
 8006bf2:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8006bf6:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8006bf8:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006bfa:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006bfe:	684c      	ldr	r4, [r1, #4]
 8006c00:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8006c04:	409c      	lsls	r4, r3
 8006c06:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8006c08:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8006c0a:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006c0c:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c0e:	688a      	ldr	r2, [r1, #8]
 8006c10:	40b2      	lsls	r2, r6
 8006c12:	433a      	orrs	r2, r7
      GPIOx->PUPDR = temp;
 8006c14:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006c16:	684a      	ldr	r2, [r1, #4]
 8006c18:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8006c1c:	d0a9      	beq.n	8006b72 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c1e:	2200      	movs	r2, #0
 8006c20:	9201      	str	r2, [sp, #4]
 8006c22:	4a2c      	ldr	r2, [pc, #176]	; (8006cd4 <HAL_GPIO_Init+0x1dc>)
 8006c24:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8006c26:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8006c2a:	6454      	str	r4, [r2, #68]	; 0x44
 8006c2c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006c2e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8006c32:	9201      	str	r2, [sp, #4]
 8006c34:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006c36:	089c      	lsrs	r4, r3, #2
 8006c38:	1ca6      	adds	r6, r4, #2
 8006c3a:	4a24      	ldr	r2, [pc, #144]	; (8006ccc <HAL_GPIO_Init+0x1d4>)
 8006c3c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006c40:	f003 0203 	and.w	r2, r3, #3
 8006c44:	0096      	lsls	r6, r2, #2
 8006c46:	220f      	movs	r2, #15
 8006c48:	40b2      	lsls	r2, r6
 8006c4a:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006c4e:	4a22      	ldr	r2, [pc, #136]	; (8006cd8 <HAL_GPIO_Init+0x1e0>)
 8006c50:	4290      	cmp	r0, r2
 8006c52:	f43f af5a 	beq.w	8006b0a <HAL_GPIO_Init+0x12>
 8006c56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c5a:	4290      	cmp	r0, r2
 8006c5c:	d022      	beq.n	8006ca4 <HAL_GPIO_Init+0x1ac>
 8006c5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c62:	4290      	cmp	r0, r2
 8006c64:	d020      	beq.n	8006ca8 <HAL_GPIO_Init+0x1b0>
 8006c66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c6a:	4290      	cmp	r0, r2
 8006c6c:	d01e      	beq.n	8006cac <HAL_GPIO_Init+0x1b4>
 8006c6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c72:	4290      	cmp	r0, r2
 8006c74:	d01c      	beq.n	8006cb0 <HAL_GPIO_Init+0x1b8>
 8006c76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c7a:	4290      	cmp	r0, r2
 8006c7c:	d01a      	beq.n	8006cb4 <HAL_GPIO_Init+0x1bc>
 8006c7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c82:	4290      	cmp	r0, r2
 8006c84:	d018      	beq.n	8006cb8 <HAL_GPIO_Init+0x1c0>
 8006c86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c8a:	4290      	cmp	r0, r2
 8006c8c:	d016      	beq.n	8006cbc <HAL_GPIO_Init+0x1c4>
 8006c8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c92:	4290      	cmp	r0, r2
 8006c94:	d014      	beq.n	8006cc0 <HAL_GPIO_Init+0x1c8>
 8006c96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c9a:	4290      	cmp	r0, r2
 8006c9c:	f43f af33 	beq.w	8006b06 <HAL_GPIO_Init+0xe>
 8006ca0:	220a      	movs	r2, #10
 8006ca2:	e733      	b.n	8006b0c <HAL_GPIO_Init+0x14>
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	e731      	b.n	8006b0c <HAL_GPIO_Init+0x14>
 8006ca8:	2202      	movs	r2, #2
 8006caa:	e72f      	b.n	8006b0c <HAL_GPIO_Init+0x14>
 8006cac:	2203      	movs	r2, #3
 8006cae:	e72d      	b.n	8006b0c <HAL_GPIO_Init+0x14>
 8006cb0:	2204      	movs	r2, #4
 8006cb2:	e72b      	b.n	8006b0c <HAL_GPIO_Init+0x14>
 8006cb4:	2205      	movs	r2, #5
 8006cb6:	e729      	b.n	8006b0c <HAL_GPIO_Init+0x14>
 8006cb8:	2206      	movs	r2, #6
 8006cba:	e727      	b.n	8006b0c <HAL_GPIO_Init+0x14>
 8006cbc:	2207      	movs	r2, #7
 8006cbe:	e725      	b.n	8006b0c <HAL_GPIO_Init+0x14>
 8006cc0:	2208      	movs	r2, #8
 8006cc2:	e723      	b.n	8006b0c <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8006cc4:	b002      	add	sp, #8
 8006cc6:	bcf0      	pop	{r4, r5, r6, r7}
 8006cc8:	4770      	bx	lr
 8006cca:	4770      	bx	lr
 8006ccc:	40013800 	.word	0x40013800
 8006cd0:	40013c00 	.word	0x40013c00
 8006cd4:	40023800 	.word	0x40023800
 8006cd8:	40020000 	.word	0x40020000

08006cdc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006cdc:	b10a      	cbz	r2, 8006ce2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006cde:	6181      	str	r1, [r0, #24]
 8006ce0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006ce2:	0409      	lsls	r1, r1, #16
 8006ce4:	6181      	str	r1, [r0, #24]
  }
}
 8006ce6:	4770      	bx	lr

08006ce8 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8006ce8:	6943      	ldr	r3, [r0, #20]
 8006cea:	ea31 0303 	bics.w	r3, r1, r3
 8006cee:	d001      	beq.n	8006cf4 <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8006cf0:	6181      	str	r1, [r0, #24]
  }
}
 8006cf2:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006cf4:	0409      	lsls	r1, r1, #16
 8006cf6:	6181      	str	r1, [r0, #24]
 8006cf8:	4770      	bx	lr

08006cfa <I2C_Master_SB>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006cfa:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2b40      	cmp	r3, #64	; 0x40
 8006d02:	d010      	beq.n	8006d26 <I2C_Master_SB+0x2c>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
    }
  }
  else
  {
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d04:	6903      	ldr	r3, [r0, #16]
 8006d06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d0a:	d01b      	beq.n	8006d44 <I2C_Master_SB+0x4a>
        }
      }
    }
    else
    {
      if (hi2c->EventCount == 0U)
 8006d0c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d13c      	bne.n	8006d8c <I2C_Master_SB+0x92>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006d12:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006d14:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8006d18:	6802      	ldr	r2, [r0, #0]
 8006d1a:	f003 0306 	and.w	r3, r3, #6
 8006d1e:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8006d22:	6113      	str	r3, [r2, #16]
 8006d24:	4770      	bx	lr
    if (hi2c->EventCount == 0U)
 8006d26:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006d28:	b92b      	cbnz	r3, 8006d36 <I2C_Master_SB+0x3c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006d2a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006d2c:	6802      	ldr	r2, [r0, #0]
 8006d2e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006d32:	6113      	str	r3, [r2, #16]
 8006d34:	4770      	bx	lr
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006d36:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006d38:	6802      	ldr	r2, [r0, #0]
 8006d3a:	f043 0301 	orr.w	r3, r3, #1
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	6113      	str	r3, [r2, #16]
 8006d42:	4770      	bx	lr
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006d44:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b21      	cmp	r3, #33	; 0x21
 8006d4c:	d00f      	beq.n	8006d6e <I2C_Master_SB+0x74>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006d4e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006d50:	6802      	ldr	r2, [r0, #0]
 8006d52:	f043 0301 	orr.w	r3, r3, #1
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	6113      	str	r3, [r2, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8006d5a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006d5c:	b16b      	cbz	r3, 8006d7a <I2C_Master_SB+0x80>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8006d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d60:	b17b      	cbz	r3, 8006d82 <I2C_Master_SB+0x88>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006d62:	6802      	ldr	r2, [r0, #0]
 8006d64:	6853      	ldr	r3, [r2, #4]
 8006d66:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d6a:	6053      	str	r3, [r2, #4]
 8006d6c:	4770      	bx	lr
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006d6e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006d70:	6802      	ldr	r2, [r0, #0]
 8006d72:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006d76:	6113      	str	r3, [r2, #16]
 8006d78:	e7ef      	b.n	8006d5a <I2C_Master_SB+0x60>
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8006d7a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8006d7c:	2a00      	cmp	r2, #0
 8006d7e:	d1ee      	bne.n	8006d5e <I2C_Master_SB+0x64>
 8006d80:	e007      	b.n	8006d92 <I2C_Master_SB+0x98>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8006d82:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1eb      	bne.n	8006d62 <I2C_Master_SB+0x68>
 8006d8a:	e002      	b.n	8006d92 <I2C_Master_SB+0x98>
      }
      else if (hi2c->EventCount == 1U)
 8006d8c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d000      	beq.n	8006d94 <I2C_Master_SB+0x9a>
      {
        /* Do nothing */
      }
    }
  }
}
 8006d92:	4770      	bx	lr
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006d94:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006d96:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8006d9a:	6802      	ldr	r2, [r0, #0]
 8006d9c:	f003 0306 	and.w	r3, r3, #6
 8006da0:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
 8006da4:	6113      	str	r3, [r2, #16]
}
 8006da6:	e7f4      	b.n	8006d92 <I2C_Master_SB+0x98>

08006da8 <I2C_Master_ADD10>:
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006da8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006daa:	6802      	ldr	r2, [r0, #0]
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	6113      	str	r3, [r2, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8006db0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006db2:	b13b      	cbz	r3, 8006dc4 <I2C_Master_ADD10+0x1c>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8006db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db6:	b14b      	cbz	r3, 8006dcc <I2C_Master_ADD10+0x24>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006db8:	6802      	ldr	r2, [r0, #0]
 8006dba:	6853      	ldr	r3, [r2, #4]
 8006dbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006dc0:	6053      	str	r3, [r2, #4]
    }
  }
}
 8006dc2:	4770      	bx	lr
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8006dc4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8006dc6:	2a00      	cmp	r2, #0
 8006dc8:	d1f4      	bne.n	8006db4 <I2C_Master_ADD10+0xc>
 8006dca:	e7fa      	b.n	8006dc2 <I2C_Master_ADD10+0x1a>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8006dcc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1f1      	bne.n	8006db8 <I2C_Master_ADD10+0x10>
 8006dd4:	e7f5      	b.n	8006dc2 <I2C_Master_ADD10+0x1a>

08006dd6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006dd6:	b410      	push	{r4}
 8006dd8:	b08b      	sub	sp, #44	; 0x2c
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006dda:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8006dde:	b2da      	uxtb	r2, r3
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006de0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006de2:	6b04      	ldr	r4, [r0, #48]	; 0x30

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006de4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b22      	cmp	r3, #34	; 0x22
 8006dec:	d00b      	beq.n	8006e06 <I2C_Master_ADDR+0x30>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dee:	2300      	movs	r3, #0
 8006df0:	9309      	str	r3, [sp, #36]	; 0x24
 8006df2:	6803      	ldr	r3, [r0, #0]
 8006df4:	695a      	ldr	r2, [r3, #20]
 8006df6:	9209      	str	r2, [sp, #36]	; 0x24
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8006dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }
}
 8006dfe:	b00b      	add	sp, #44	; 0x2c
 8006e00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e04:	4770      	bx	lr
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006e06:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006e08:	b90b      	cbnz	r3, 8006e0e <I2C_Master_ADDR+0x38>
 8006e0a:	2a40      	cmp	r2, #64	; 0x40
 8006e0c:	d017      	beq.n	8006e3e <I2C_Master_ADDR+0x68>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006e0e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006e10:	b91b      	cbnz	r3, 8006e1a <I2C_Master_ADDR+0x44>
 8006e12:	6903      	ldr	r3, [r0, #16]
 8006e14:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006e18:	d019      	beq.n	8006e4e <I2C_Master_ADDR+0x78>
      if (hi2c->XferCount == 0U)
 8006e1a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d125      	bne.n	8006e6e <I2C_Master_ADDR+0x98>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e22:	9302      	str	r3, [sp, #8]
 8006e24:	6803      	ldr	r3, [r0, #0]
 8006e26:	695a      	ldr	r2, [r3, #20]
 8006e28:	9202      	str	r2, [sp, #8]
 8006e2a:	699a      	ldr	r2, [r3, #24]
 8006e2c:	9202      	str	r2, [sp, #8]
 8006e2e:	9a02      	ldr	r2, [sp, #8]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e36:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	6503      	str	r3, [r0, #80]	; 0x50
 8006e3c:	e7df      	b.n	8006dfe <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	6803      	ldr	r3, [r0, #0]
 8006e42:	695a      	ldr	r2, [r3, #20]
 8006e44:	9200      	str	r2, [sp, #0]
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	9b00      	ldr	r3, [sp, #0]
 8006e4c:	e7d7      	b.n	8006dfe <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e4e:	2300      	movs	r3, #0
 8006e50:	9301      	str	r3, [sp, #4]
 8006e52:	6803      	ldr	r3, [r0, #0]
 8006e54:	695a      	ldr	r2, [r3, #20]
 8006e56:	9201      	str	r2, [sp, #4]
 8006e58:	699a      	ldr	r2, [r3, #24]
 8006e5a:	9201      	str	r2, [sp, #4]
 8006e5c:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e64:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006e66:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006e68:	3301      	adds	r3, #1
 8006e6a:	6503      	str	r3, [r0, #80]	; 0x50
 8006e6c:	e7c7      	b.n	8006dfe <I2C_Master_ADDR+0x28>
      else if (hi2c->XferCount == 1U)
 8006e6e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d025      	beq.n	8006ec2 <I2C_Master_ADDR+0xec>
      else if (hi2c->XferCount == 2U)
 8006e76:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d07b      	beq.n	8006f76 <I2C_Master_ADDR+0x1a0>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e7e:	6802      	ldr	r2, [r0, #0]
 8006e80:	6813      	ldr	r3, [r2, #0]
 8006e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e86:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006e88:	6803      	ldr	r3, [r0, #0]
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8006e90:	d00e      	beq.n	8006eb0 <I2C_Master_ADDR+0xda>
 8006e92:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8006e96:	d007      	beq.n	8006ea8 <I2C_Master_ADDR+0xd2>
 8006e98:	2901      	cmp	r1, #1
 8006e9a:	d005      	beq.n	8006ea8 <I2C_Master_ADDR+0xd2>
 8006e9c:	2908      	cmp	r1, #8
 8006e9e:	d003      	beq.n	8006ea8 <I2C_Master_ADDR+0xd2>
 8006ea0:	2910      	cmp	r1, #16
 8006ea2:	d001      	beq.n	8006ea8 <I2C_Master_ADDR+0xd2>
 8006ea4:	2920      	cmp	r1, #32
 8006ea6:	d103      	bne.n	8006eb0 <I2C_Master_ADDR+0xda>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006ea8:	685a      	ldr	r2, [r3, #4]
 8006eaa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006eae:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	9308      	str	r3, [sp, #32]
 8006eb4:	6803      	ldr	r3, [r0, #0]
 8006eb6:	695a      	ldr	r2, [r3, #20]
 8006eb8:	9208      	str	r2, [sp, #32]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	9308      	str	r3, [sp, #32]
 8006ebe:	9b08      	ldr	r3, [sp, #32]
 8006ec0:	e7ba      	b.n	8006e38 <I2C_Master_ADDR+0x62>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006ec2:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8006ec6:	d011      	beq.n	8006eec <I2C_Master_ADDR+0x116>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006ec8:	2908      	cmp	r1, #8
 8006eca:	d034      	beq.n	8006f36 <I2C_Master_ADDR+0x160>
 8006ecc:	2920      	cmp	r1, #32
 8006ece:	d032      	beq.n	8006f36 <I2C_Master_ADDR+0x160>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006ed0:	2c12      	cmp	r4, #18
 8006ed2:	d02e      	beq.n	8006f32 <I2C_Master_ADDR+0x15c>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006ed4:	2904      	cmp	r1, #4
 8006ed6:	d040      	beq.n	8006f5a <I2C_Master_ADDR+0x184>
 8006ed8:	2902      	cmp	r1, #2
 8006eda:	d03e      	beq.n	8006f5a <I2C_Master_ADDR+0x184>
 8006edc:	2910      	cmp	r1, #16
 8006ede:	d03c      	beq.n	8006f5a <I2C_Master_ADDR+0x184>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ee0:	6802      	ldr	r2, [r0, #0]
 8006ee2:	6813      	ldr	r3, [r2, #0]
 8006ee4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ee8:	6013      	str	r3, [r2, #0]
 8006eea:	e03b      	b.n	8006f64 <I2C_Master_ADDR+0x18e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eec:	6802      	ldr	r2, [r0, #0]
 8006eee:	6813      	ldr	r3, [r2, #0]
 8006ef0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ef4:	6013      	str	r3, [r2, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006ef6:	6803      	ldr	r3, [r0, #0]
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8006efe:	d00c      	beq.n	8006f1a <I2C_Master_ADDR+0x144>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f06:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f08:	2300      	movs	r3, #0
 8006f0a:	9303      	str	r3, [sp, #12]
 8006f0c:	6803      	ldr	r3, [r0, #0]
 8006f0e:	695a      	ldr	r2, [r3, #20]
 8006f10:	9203      	str	r2, [sp, #12]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	9303      	str	r3, [sp, #12]
 8006f16:	9b03      	ldr	r3, [sp, #12]
 8006f18:	e78e      	b.n	8006e38 <I2C_Master_ADDR+0x62>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	9204      	str	r2, [sp, #16]
 8006f1e:	695a      	ldr	r2, [r3, #20]
 8006f20:	9204      	str	r2, [sp, #16]
 8006f22:	699a      	ldr	r2, [r3, #24]
 8006f24:	9204      	str	r2, [sp, #16]
 8006f26:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f2e:	601a      	str	r2, [r3, #0]
 8006f30:	e782      	b.n	8006e38 <I2C_Master_ADDR+0x62>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006f32:	2901      	cmp	r1, #1
 8006f34:	d0ce      	beq.n	8006ed4 <I2C_Master_ADDR+0xfe>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f36:	6802      	ldr	r2, [r0, #0]
 8006f38:	6813      	ldr	r3, [r2, #0]
 8006f3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f3e:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f40:	2300      	movs	r3, #0
 8006f42:	9306      	str	r3, [sp, #24]
 8006f44:	6803      	ldr	r3, [r0, #0]
 8006f46:	695a      	ldr	r2, [r3, #20]
 8006f48:	9206      	str	r2, [sp, #24]
 8006f4a:	699a      	ldr	r2, [r3, #24]
 8006f4c:	9206      	str	r2, [sp, #24]
 8006f4e:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f56:	601a      	str	r2, [r3, #0]
 8006f58:	e76e      	b.n	8006e38 <I2C_Master_ADDR+0x62>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f5a:	6802      	ldr	r2, [r0, #0]
 8006f5c:	6813      	ldr	r3, [r2, #0]
 8006f5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f62:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f64:	2300      	movs	r3, #0
 8006f66:	9305      	str	r3, [sp, #20]
 8006f68:	6803      	ldr	r3, [r0, #0]
 8006f6a:	695a      	ldr	r2, [r3, #20]
 8006f6c:	9205      	str	r2, [sp, #20]
 8006f6e:	699b      	ldr	r3, [r3, #24]
 8006f70:	9305      	str	r3, [sp, #20]
 8006f72:	9b05      	ldr	r3, [sp, #20]
 8006f74:	e760      	b.n	8006e38 <I2C_Master_ADDR+0x62>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006f76:	2904      	cmp	r1, #4
 8006f78:	d00e      	beq.n	8006f98 <I2C_Master_ADDR+0x1c2>
 8006f7a:	2902      	cmp	r1, #2
 8006f7c:	d00c      	beq.n	8006f98 <I2C_Master_ADDR+0x1c2>
 8006f7e:	2910      	cmp	r1, #16
 8006f80:	d00a      	beq.n	8006f98 <I2C_Master_ADDR+0x1c2>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f82:	6802      	ldr	r2, [r0, #0]
 8006f84:	6813      	ldr	r3, [r2, #0]
 8006f86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f8a:	6013      	str	r3, [r2, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f8c:	6802      	ldr	r2, [r0, #0]
 8006f8e:	6813      	ldr	r3, [r2, #0]
 8006f90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	e004      	b.n	8006fa2 <I2C_Master_ADDR+0x1cc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f98:	6802      	ldr	r2, [r0, #0]
 8006f9a:	6813      	ldr	r3, [r2, #0]
 8006f9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006fa0:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006fa2:	6803      	ldr	r3, [r0, #0]
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8006faa:	d00e      	beq.n	8006fca <I2C_Master_ADDR+0x1f4>
 8006fac:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8006fb0:	d007      	beq.n	8006fc2 <I2C_Master_ADDR+0x1ec>
 8006fb2:	2901      	cmp	r1, #1
 8006fb4:	d005      	beq.n	8006fc2 <I2C_Master_ADDR+0x1ec>
 8006fb6:	2908      	cmp	r1, #8
 8006fb8:	d003      	beq.n	8006fc2 <I2C_Master_ADDR+0x1ec>
 8006fba:	2910      	cmp	r1, #16
 8006fbc:	d001      	beq.n	8006fc2 <I2C_Master_ADDR+0x1ec>
 8006fbe:	2920      	cmp	r1, #32
 8006fc0:	d103      	bne.n	8006fca <I2C_Master_ADDR+0x1f4>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006fc2:	685a      	ldr	r2, [r3, #4]
 8006fc4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006fc8:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fca:	2300      	movs	r3, #0
 8006fcc:	9307      	str	r3, [sp, #28]
 8006fce:	6803      	ldr	r3, [r0, #0]
 8006fd0:	695a      	ldr	r2, [r3, #20]
 8006fd2:	9207      	str	r2, [sp, #28]
 8006fd4:	699b      	ldr	r3, [r3, #24]
 8006fd6:	9307      	str	r3, [sp, #28]
 8006fd8:	9b07      	ldr	r3, [sp, #28]
 8006fda:	e72d      	b.n	8006e38 <I2C_Master_ADDR+0x62>

08006fdc <I2C_SlaveTransmit_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 8006fdc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	b15b      	cbz	r3, 8006ffa <I2C_SlaveTransmit_BTF+0x1e>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fe2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8006fe4:	6803      	ldr	r3, [r0, #0]
 8006fe6:	7812      	ldrb	r2, [r2, #0]
 8006fe8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006fea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006fec:	3301      	adds	r3, #1
 8006fee:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006ff0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
}
 8006ffa:	4770      	bx	lr

08006ffc <I2C_SlaveReceive_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 8006ffc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	b15b      	cbz	r3, 800701a <I2C_SlaveReceive_BTF+0x1e>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007002:	6803      	ldr	r3, [r0, #0]
 8007004:	691a      	ldr	r2, [r3, #16]
 8007006:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007008:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800700a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800700c:	3301      	adds	r3, #1
 800700e:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007010:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007012:	b29b      	uxth	r3, r3
 8007014:	3b01      	subs	r3, #1
 8007016:	b29b      	uxth	r3, r3
 8007018:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
}
 800701a:	4770      	bx	lr

0800701c <I2C_ConvertOtherXferOptions>:
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800701c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800701e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007022:	d004      	beq.n	800702e <I2C_ConvertOtherXferOptions+0x12>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007024:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007026:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800702a:	d003      	beq.n	8007034 <I2C_ConvertOtherXferOptions+0x18>
  }
  else
  {
    /* Nothing to do */
  }
}
 800702c:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800702e:	2301      	movs	r3, #1
 8007030:	62c3      	str	r3, [r0, #44]	; 0x2c
 8007032:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007034:	2308      	movs	r3, #8
 8007036:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8007038:	e7f8      	b.n	800702c <I2C_ConvertOtherXferOptions+0x10>
	...

0800703c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800703c:	2800      	cmp	r0, #0
 800703e:	f000 80c2 	beq.w	80071c6 <HAL_I2C_Init+0x18a>
{
 8007042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007044:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007046:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800704a:	2b00      	cmp	r3, #0
 800704c:	d06d      	beq.n	800712a <HAL_I2C_Init+0xee>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800704e:	2324      	movs	r3, #36	; 0x24
 8007050:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8007054:	6822      	ldr	r2, [r4, #0]
 8007056:	6813      	ldr	r3, [r2, #0]
 8007058:	f023 0301 	bic.w	r3, r3, #1
 800705c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800705e:	f001 f9cf 	bl	8008400 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007062:	6862      	ldr	r2, [r4, #4]
 8007064:	4b5a      	ldr	r3, [pc, #360]	; (80071d0 <HAL_I2C_Init+0x194>)
 8007066:	429a      	cmp	r2, r3
 8007068:	d864      	bhi.n	8007134 <HAL_I2C_Init+0xf8>
 800706a:	4b5a      	ldr	r3, [pc, #360]	; (80071d4 <HAL_I2C_Init+0x198>)
 800706c:	4298      	cmp	r0, r3
 800706e:	bf8c      	ite	hi
 8007070:	2300      	movhi	r3, #0
 8007072:	2301      	movls	r3, #1
 8007074:	2b00      	cmp	r3, #0
 8007076:	f040 80a8 	bne.w	80071ca <HAL_I2C_Init+0x18e>
  freqrange = I2C_FREQRANGE(pclk1);
 800707a:	4d57      	ldr	r5, [pc, #348]	; (80071d8 <HAL_I2C_Init+0x19c>)
 800707c:	fba5 3500 	umull	r3, r5, r5, r0
 8007080:	0caf      	lsrs	r7, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007082:	6826      	ldr	r6, [r4, #0]
 8007084:	6871      	ldr	r1, [r6, #4]
 8007086:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800708a:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 800708e:	6071      	str	r1, [r6, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007090:	6821      	ldr	r1, [r4, #0]
 8007092:	6a0b      	ldr	r3, [r1, #32]
 8007094:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007098:	6865      	ldr	r5, [r4, #4]
 800709a:	4a4d      	ldr	r2, [pc, #308]	; (80071d0 <HAL_I2C_Init+0x194>)
 800709c:	4295      	cmp	r5, r2
 800709e:	d84f      	bhi.n	8007140 <HAL_I2C_Init+0x104>
 80070a0:	1c7a      	adds	r2, r7, #1
 80070a2:	4313      	orrs	r3, r2
 80070a4:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80070a6:	6825      	ldr	r5, [r4, #0]
 80070a8:	69e9      	ldr	r1, [r5, #28]
 80070aa:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80070ae:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80070b2:	6863      	ldr	r3, [r4, #4]
 80070b4:	4a46      	ldr	r2, [pc, #280]	; (80071d0 <HAL_I2C_Init+0x194>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d84c      	bhi.n	8007154 <HAL_I2C_Init+0x118>
 80070ba:	3801      	subs	r0, #1
 80070bc:	005b      	lsls	r3, r3, #1
 80070be:	fbb0 f0f3 	udiv	r0, r0, r3
 80070c2:	3001      	adds	r0, #1
 80070c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80070c8:	4218      	tst	r0, r3
 80070ca:	d078      	beq.n	80071be <HAL_I2C_Init+0x182>
 80070cc:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80070d0:	430b      	orrs	r3, r1
 80070d2:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80070d4:	6821      	ldr	r1, [r4, #0]
 80070d6:	680b      	ldr	r3, [r1, #0]
 80070d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80070dc:	69e2      	ldr	r2, [r4, #28]
 80070de:	6a20      	ldr	r0, [r4, #32]
 80070e0:	4302      	orrs	r2, r0
 80070e2:	4313      	orrs	r3, r2
 80070e4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80070e6:	6821      	ldr	r1, [r4, #0]
 80070e8:	688b      	ldr	r3, [r1, #8]
 80070ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80070ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80070f2:	6922      	ldr	r2, [r4, #16]
 80070f4:	68e0      	ldr	r0, [r4, #12]
 80070f6:	4302      	orrs	r2, r0
 80070f8:	4313      	orrs	r3, r2
 80070fa:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80070fc:	6821      	ldr	r1, [r4, #0]
 80070fe:	68cb      	ldr	r3, [r1, #12]
 8007100:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007104:	6962      	ldr	r2, [r4, #20]
 8007106:	69a0      	ldr	r0, [r4, #24]
 8007108:	4302      	orrs	r2, r0
 800710a:	4313      	orrs	r3, r2
 800710c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800710e:	6822      	ldr	r2, [r4, #0]
 8007110:	6813      	ldr	r3, [r2, #0]
 8007112:	f043 0301 	orr.w	r3, r3, #1
 8007116:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007118:	2000      	movs	r0, #0
 800711a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800711c:	2320      	movs	r3, #32
 800711e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007122:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007124:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8007128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800712a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800712e:	f00a f893 	bl	8011258 <HAL_I2C_MspInit>
 8007132:	e78c      	b.n	800704e <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007134:	4b29      	ldr	r3, [pc, #164]	; (80071dc <HAL_I2C_Init+0x1a0>)
 8007136:	4298      	cmp	r0, r3
 8007138:	bf8c      	ite	hi
 800713a:	2300      	movhi	r3, #0
 800713c:	2301      	movls	r3, #1
 800713e:	e799      	b.n	8007074 <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007140:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007144:	fb02 f207 	mul.w	r2, r2, r7
 8007148:	4d25      	ldr	r5, [pc, #148]	; (80071e0 <HAL_I2C_Init+0x1a4>)
 800714a:	fba5 5202 	umull	r5, r2, r5, r2
 800714e:	0992      	lsrs	r2, r2, #6
 8007150:	3201      	adds	r2, #1
 8007152:	e7a6      	b.n	80070a2 <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007154:	68a2      	ldr	r2, [r4, #8]
 8007156:	b9ba      	cbnz	r2, 8007188 <HAL_I2C_Init+0x14c>
 8007158:	1e46      	subs	r6, r0, #1
 800715a:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 800715e:	fbb6 f6f7 	udiv	r6, r6, r7
 8007162:	3601      	adds	r6, #1
 8007164:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8007168:	fab6 f686 	clz	r6, r6
 800716c:	0976      	lsrs	r6, r6, #5
 800716e:	bb46      	cbnz	r6, 80071c2 <HAL_I2C_Init+0x186>
 8007170:	b9c2      	cbnz	r2, 80071a4 <HAL_I2C_Init+0x168>
 8007172:	1e42      	subs	r2, r0, #1
 8007174:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007178:	fbb2 f2f3 	udiv	r2, r2, r3
 800717c:	3201      	adds	r2, #1
 800717e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007182:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8007186:	e7a3      	b.n	80070d0 <HAL_I2C_Init+0x94>
 8007188:	1e46      	subs	r6, r0, #1
 800718a:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800718e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8007192:	fbb6 f6f7 	udiv	r6, r6, r7
 8007196:	3601      	adds	r6, #1
 8007198:	f3c6 060b 	ubfx	r6, r6, #0, #12
 800719c:	fab6 f686 	clz	r6, r6
 80071a0:	0976      	lsrs	r6, r6, #5
 80071a2:	e7e4      	b.n	800716e <HAL_I2C_Init+0x132>
 80071a4:	1e42      	subs	r2, r0, #1
 80071a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80071aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80071ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80071b2:	3201      	adds	r2, #1
 80071b4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80071b8:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 80071bc:	e788      	b.n	80070d0 <HAL_I2C_Init+0x94>
 80071be:	2304      	movs	r3, #4
 80071c0:	e786      	b.n	80070d0 <HAL_I2C_Init+0x94>
 80071c2:	2301      	movs	r3, #1
 80071c4:	e784      	b.n	80070d0 <HAL_I2C_Init+0x94>
    return HAL_ERROR;
 80071c6:	2001      	movs	r0, #1
}
 80071c8:	4770      	bx	lr
    return HAL_ERROR;
 80071ca:	2001      	movs	r0, #1
 80071cc:	e7ac      	b.n	8007128 <HAL_I2C_Init+0xec>
 80071ce:	bf00      	nop
 80071d0:	000186a0 	.word	0x000186a0
 80071d4:	001e847f 	.word	0x001e847f
 80071d8:	431bde83 	.word	0x431bde83
 80071dc:	003d08ff 	.word	0x003d08ff
 80071e0:	10624dd3 	.word	0x10624dd3

080071e4 <HAL_I2C_MasterTxCpltCallback>:
}
 80071e4:	4770      	bx	lr

080071e6 <HAL_I2C_MasterRxCpltCallback>:
}
 80071e6:	4770      	bx	lr

080071e8 <HAL_I2C_SlaveTxCpltCallback>:
}
 80071e8:	4770      	bx	lr

080071ea <I2C_SlaveTransmit_TXE>:
{
 80071ea:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80071ec:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80071f0:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 80071f2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	b183      	cbz	r3, 800721a <I2C_SlaveTransmit_TXE+0x30>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80071f8:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80071fa:	6803      	ldr	r3, [r0, #0]
 80071fc:	7809      	ldrb	r1, [r1, #0]
 80071fe:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 8007200:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007202:	3301      	adds	r3, #1
 8007204:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8007206:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007208:	b29b      	uxth	r3, r3
 800720a:	3b01      	subs	r3, #1
 800720c:	b29b      	uxth	r3, r3
 800720e:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007210:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007212:	b29b      	uxth	r3, r3
 8007214:	b90b      	cbnz	r3, 800721a <I2C_SlaveTransmit_TXE+0x30>
 8007216:	2a29      	cmp	r2, #41	; 0x29
 8007218:	d000      	beq.n	800721c <I2C_SlaveTransmit_TXE+0x32>
}
 800721a:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800721c:	6802      	ldr	r2, [r0, #0]
 800721e:	6853      	ldr	r3, [r2, #4]
 8007220:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007224:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007226:	2321      	movs	r3, #33	; 0x21
 8007228:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800722a:	2328      	movs	r3, #40	; 0x28
 800722c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007230:	f7ff ffda 	bl	80071e8 <HAL_I2C_SlaveTxCpltCallback>
}
 8007234:	e7f1      	b.n	800721a <I2C_SlaveTransmit_TXE+0x30>

08007236 <HAL_I2C_SlaveRxCpltCallback>:
}
 8007236:	4770      	bx	lr

08007238 <I2C_SlaveReceive_RXNE>:
{
 8007238:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800723a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800723e:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 8007240:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007242:	b29b      	uxth	r3, r3
 8007244:	b183      	cbz	r3, 8007268 <I2C_SlaveReceive_RXNE+0x30>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007246:	6803      	ldr	r3, [r0, #0]
 8007248:	6919      	ldr	r1, [r3, #16]
 800724a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800724c:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 800724e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007250:	3301      	adds	r3, #1
 8007252:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8007254:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007256:	b29b      	uxth	r3, r3
 8007258:	3b01      	subs	r3, #1
 800725a:	b29b      	uxth	r3, r3
 800725c:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800725e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007260:	b29b      	uxth	r3, r3
 8007262:	b90b      	cbnz	r3, 8007268 <I2C_SlaveReceive_RXNE+0x30>
 8007264:	2a2a      	cmp	r2, #42	; 0x2a
 8007266:	d000      	beq.n	800726a <I2C_SlaveReceive_RXNE+0x32>
}
 8007268:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800726a:	6802      	ldr	r2, [r0, #0]
 800726c:	6853      	ldr	r3, [r2, #4]
 800726e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007272:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007274:	2322      	movs	r3, #34	; 0x22
 8007276:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007278:	2328      	movs	r3, #40	; 0x28
 800727a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800727e:	f7ff ffda 	bl	8007236 <HAL_I2C_SlaveRxCpltCallback>
}
 8007282:	e7f1      	b.n	8007268 <I2C_SlaveReceive_RXNE+0x30>

08007284 <HAL_I2C_AddrCallback>:
}
 8007284:	4770      	bx	lr

08007286 <I2C_Slave_ADDR>:
{
 8007286:	b508      	push	{r3, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007288:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800728c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007290:	2b28      	cmp	r3, #40	; 0x28
 8007292:	d007      	beq.n	80072a4 <I2C_Slave_ADDR+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007294:	6803      	ldr	r3, [r0, #0]
 8007296:	f06f 0202 	mvn.w	r2, #2
 800729a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800729c:	2300      	movs	r3, #0
 800729e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80072a2:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80072a4:	6802      	ldr	r2, [r0, #0]
 80072a6:	6853      	ldr	r3, [r2, #4]
 80072a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072ac:	6053      	str	r3, [r2, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80072ae:	f011 0f04 	tst.w	r1, #4
 80072b2:	d00b      	beq.n	80072cc <I2C_Slave_ADDR+0x46>
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80072b4:	2300      	movs	r3, #0
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80072b6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80072ba:	d109      	bne.n	80072d0 <I2C_Slave_ADDR+0x4a>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80072bc:	8982      	ldrh	r2, [r0, #12]
    __HAL_UNLOCK(hi2c);
 80072be:	2100      	movs	r1, #0
 80072c0:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80072c4:	4619      	mov	r1, r3
 80072c6:	f7ff ffdd 	bl	8007284 <HAL_I2C_AddrCallback>
 80072ca:	e7ea      	b.n	80072a2 <I2C_Slave_ADDR+0x1c>
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e7f2      	b.n	80072b6 <I2C_Slave_ADDR+0x30>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80072d0:	8b02      	ldrh	r2, [r0, #24]
 80072d2:	e7f4      	b.n	80072be <I2C_Slave_ADDR+0x38>

080072d4 <HAL_I2C_ListenCpltCallback>:
}
 80072d4:	4770      	bx	lr
	...

080072d8 <I2C_Slave_AF>:
{
 80072d8:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80072da:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80072de:	b2db      	uxtb	r3, r3
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80072e0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80072e2:	2a08      	cmp	r2, #8
 80072e4:	d001      	beq.n	80072ea <I2C_Slave_AF+0x12>
 80072e6:	2a20      	cmp	r2, #32
 80072e8:	d101      	bne.n	80072ee <I2C_Slave_AF+0x16>
 80072ea:	2b28      	cmp	r3, #40	; 0x28
 80072ec:	d006      	beq.n	80072fc <I2C_Slave_AF+0x24>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80072ee:	2b21      	cmp	r3, #33	; 0x21
 80072f0:	d01e      	beq.n	8007330 <I2C_Slave_AF+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072f2:	6803      	ldr	r3, [r0, #0]
 80072f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80072f8:	615a      	str	r2, [r3, #20]
}
 80072fa:	bd08      	pop	{r3, pc}
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072fc:	4b1a      	ldr	r3, [pc, #104]	; (8007368 <I2C_Slave_AF+0x90>)
 80072fe:	62c3      	str	r3, [r0, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007300:	6802      	ldr	r2, [r0, #0]
 8007302:	6853      	ldr	r3, [r2, #4]
 8007304:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007308:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800730a:	6803      	ldr	r3, [r0, #0]
 800730c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007310:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007312:	6802      	ldr	r2, [r0, #0]
 8007314:	6813      	ldr	r3, [r2, #0]
 8007316:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800731a:	6013      	str	r3, [r2, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800731c:	2300      	movs	r3, #0
 800731e:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007320:	2220      	movs	r2, #32
 8007322:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007326:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 800732a:	f7ff ffd3 	bl	80072d4 <HAL_I2C_ListenCpltCallback>
 800732e:	e7e4      	b.n	80072fa <I2C_Slave_AF+0x22>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007330:	4b0d      	ldr	r3, [pc, #52]	; (8007368 <I2C_Slave_AF+0x90>)
 8007332:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007334:	2321      	movs	r3, #33	; 0x21
 8007336:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007338:	2320      	movs	r3, #32
 800733a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800733e:	2300      	movs	r3, #0
 8007340:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007344:	6802      	ldr	r2, [r0, #0]
 8007346:	6853      	ldr	r3, [r2, #4]
 8007348:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800734c:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800734e:	6803      	ldr	r3, [r0, #0]
 8007350:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007354:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007356:	6802      	ldr	r2, [r0, #0]
 8007358:	6813      	ldr	r3, [r2, #0]
 800735a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800735e:	6013      	str	r3, [r2, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007360:	f7ff ff42 	bl	80071e8 <HAL_I2C_SlaveTxCpltCallback>
 8007364:	e7c9      	b.n	80072fa <I2C_Slave_AF+0x22>
 8007366:	bf00      	nop
 8007368:	ffff0000 	.word	0xffff0000

0800736c <I2C_MasterTransmit_TXE>:
{
 800736c:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800736e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007372:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007374:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8007378:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800737a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800737c:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 800737e:	b909      	cbnz	r1, 8007384 <I2C_MasterTransmit_TXE+0x18>
 8007380:	2b21      	cmp	r3, #33	; 0x21
 8007382:	d004      	beq.n	800738e <I2C_MasterTransmit_TXE+0x22>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007384:	2b21      	cmp	r3, #33	; 0x21
 8007386:	d03b      	beq.n	8007400 <I2C_MasterTransmit_TXE+0x94>
 8007388:	2a40      	cmp	r2, #64	; 0x40
 800738a:	d037      	beq.n	80073fc <I2C_MasterTransmit_TXE+0x90>
}
 800738c:	bd10      	pop	{r4, pc}
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800738e:	2c08      	cmp	r4, #8
 8007390:	d004      	beq.n	800739c <I2C_MasterTransmit_TXE+0x30>
 8007392:	2c20      	cmp	r4, #32
 8007394:	d002      	beq.n	800739c <I2C_MasterTransmit_TXE+0x30>
 8007396:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 800739a:	d119      	bne.n	80073d0 <I2C_MasterTransmit_TXE+0x64>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800739c:	6802      	ldr	r2, [r0, #0]
 800739e:	6853      	ldr	r3, [r2, #4]
 80073a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80073a4:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073a6:	6802      	ldr	r2, [r0, #0]
 80073a8:	6813      	ldr	r3, [r2, #0]
 80073aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80073ae:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80073b0:	2300      	movs	r3, #0
 80073b2:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80073b4:	2320      	movs	r3, #32
 80073b6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80073ba:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	2b40      	cmp	r3, #64	; 0x40
 80073c2:	d015      	beq.n	80073f0 <I2C_MasterTransmit_TXE+0x84>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073c4:	2300      	movs	r3, #0
 80073c6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80073ca:	f7ff ff0b 	bl	80071e4 <HAL_I2C_MasterTxCpltCallback>
 80073ce:	e7dd      	b.n	800738c <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073d0:	6802      	ldr	r2, [r0, #0]
 80073d2:	6853      	ldr	r3, [r2, #4]
 80073d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80073d8:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80073da:	2311      	movs	r3, #17
 80073dc:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80073de:	2300      	movs	r3, #0
 80073e0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80073e4:	2320      	movs	r3, #32
 80073e6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80073ea:	f7ff fefb 	bl	80071e4 <HAL_I2C_MasterTxCpltCallback>
 80073ee:	e7cd      	b.n	800738c <I2C_MasterTransmit_TXE+0x20>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073f0:	2300      	movs	r3, #0
 80073f2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 80073f6:	f00d f9fb 	bl	80147f0 <HAL_I2C_MemTxCpltCallback>
 80073fa:	e7c7      	b.n	800738c <I2C_MasterTransmit_TXE+0x20>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80073fc:	2b22      	cmp	r3, #34	; 0x22
 80073fe:	d1c5      	bne.n	800738c <I2C_MasterTransmit_TXE+0x20>
    if (hi2c->XferCount == 0U)
 8007400:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007402:	b29b      	uxth	r3, r3
 8007404:	b92b      	cbnz	r3, 8007412 <I2C_MasterTransmit_TXE+0xa6>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007406:	6802      	ldr	r2, [r0, #0]
 8007408:	6853      	ldr	r3, [r2, #4]
 800740a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800740e:	6053      	str	r3, [r2, #4]
 8007410:	e7bc      	b.n	800738c <I2C_MasterTransmit_TXE+0x20>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007412:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8007416:	b2db      	uxtb	r3, r3
 8007418:	2b40      	cmp	r3, #64	; 0x40
 800741a:	d00c      	beq.n	8007436 <I2C_MasterTransmit_TXE+0xca>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800741c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800741e:	6803      	ldr	r3, [r0, #0]
 8007420:	7812      	ldrb	r2, [r2, #0]
 8007422:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007424:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007426:	3301      	adds	r3, #1
 8007428:	6243      	str	r3, [r0, #36]	; 0x24
        hi2c->XferCount--;
 800742a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800742c:	b29b      	uxth	r3, r3
 800742e:	3b01      	subs	r3, #1
 8007430:	b29b      	uxth	r3, r3
 8007432:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8007434:	e7aa      	b.n	800738c <I2C_MasterTransmit_TXE+0x20>
        if (hi2c->EventCount == 0U)
 8007436:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007438:	b99b      	cbnz	r3, 8007462 <I2C_MasterTransmit_TXE+0xf6>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800743a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800743c:	2b01      	cmp	r3, #1
 800743e:	d008      	beq.n	8007452 <I2C_MasterTransmit_TXE+0xe6>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007440:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8007442:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8007446:	6802      	ldr	r2, [r0, #0]
 8007448:	6113      	str	r3, [r2, #16]
            hi2c->EventCount++;
 800744a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800744c:	3301      	adds	r3, #1
 800744e:	6503      	str	r3, [r0, #80]	; 0x50
 8007450:	e79c      	b.n	800738c <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007452:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8007454:	6802      	ldr	r2, [r0, #0]
 8007456:	b2db      	uxtb	r3, r3
 8007458:	6113      	str	r3, [r2, #16]
            hi2c->EventCount += 2U;
 800745a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800745c:	3302      	adds	r3, #2
 800745e:	6503      	str	r3, [r0, #80]	; 0x50
 8007460:	e794      	b.n	800738c <I2C_MasterTransmit_TXE+0x20>
        else if (hi2c->EventCount == 1U)
 8007462:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007464:	2b01      	cmp	r3, #1
 8007466:	d019      	beq.n	800749c <I2C_MasterTransmit_TXE+0x130>
        else if (hi2c->EventCount == 2U)
 8007468:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800746a:	2b02      	cmp	r3, #2
 800746c:	d18e      	bne.n	800738c <I2C_MasterTransmit_TXE+0x20>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800746e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b22      	cmp	r3, #34	; 0x22
 8007476:	d019      	beq.n	80074ac <I2C_MasterTransmit_TXE+0x140>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007478:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800747c:	b2db      	uxtb	r3, r3
 800747e:	2b21      	cmp	r3, #33	; 0x21
 8007480:	d184      	bne.n	800738c <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007482:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8007484:	6803      	ldr	r3, [r0, #0]
 8007486:	7812      	ldrb	r2, [r2, #0]
 8007488:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 800748a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800748c:	3301      	adds	r3, #1
 800748e:	6243      	str	r3, [r0, #36]	; 0x24
            hi2c->XferCount--;
 8007490:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007492:	b29b      	uxth	r3, r3
 8007494:	3b01      	subs	r3, #1
 8007496:	b29b      	uxth	r3, r3
 8007498:	8543      	strh	r3, [r0, #42]	; 0x2a
 800749a:	e777      	b.n	800738c <I2C_MasterTransmit_TXE+0x20>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800749c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800749e:	6802      	ldr	r2, [r0, #0]
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	6113      	str	r3, [r2, #16]
          hi2c->EventCount++;
 80074a4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80074a6:	3301      	adds	r3, #1
 80074a8:	6503      	str	r3, [r0, #80]	; 0x50
 80074aa:	e76f      	b.n	800738c <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 80074ac:	6802      	ldr	r2, [r0, #0]
 80074ae:	6813      	ldr	r3, [r2, #0]
 80074b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074b4:	6013      	str	r3, [r2, #0]
 80074b6:	e769      	b.n	800738c <I2C_MasterTransmit_TXE+0x20>

080074b8 <I2C_MasterTransmit_BTF>:
{
 80074b8:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80074ba:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80074bc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b21      	cmp	r3, #33	; 0x21
 80074c4:	d000      	beq.n	80074c8 <I2C_MasterTransmit_BTF+0x10>
}
 80074c6:	bd08      	pop	{r3, pc}
    if (hi2c->XferCount != 0U)
 80074c8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	b163      	cbz	r3, 80074e8 <I2C_MasterTransmit_BTF+0x30>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074ce:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80074d0:	6803      	ldr	r3, [r0, #0]
 80074d2:	7812      	ldrb	r2, [r2, #0]
 80074d4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80074d6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80074d8:	3301      	adds	r3, #1
 80074da:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 80074dc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80074de:	b29b      	uxth	r3, r3
 80074e0:	3b01      	subs	r3, #1
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	8543      	strh	r3, [r0, #42]	; 0x2a
 80074e6:	e7ee      	b.n	80074c6 <I2C_MasterTransmit_BTF+0xe>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80074e8:	2a08      	cmp	r2, #8
 80074ea:	d004      	beq.n	80074f6 <I2C_MasterTransmit_BTF+0x3e>
 80074ec:	2a20      	cmp	r2, #32
 80074ee:	d002      	beq.n	80074f6 <I2C_MasterTransmit_BTF+0x3e>
 80074f0:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80074f4:	d119      	bne.n	800752a <I2C_MasterTransmit_BTF+0x72>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80074f6:	6802      	ldr	r2, [r0, #0]
 80074f8:	6853      	ldr	r3, [r2, #4]
 80074fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80074fe:	6053      	str	r3, [r2, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007500:	6802      	ldr	r2, [r0, #0]
 8007502:	6813      	ldr	r3, [r2, #0]
 8007504:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007508:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800750a:	2300      	movs	r3, #0
 800750c:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800750e:	2320      	movs	r3, #32
 8007510:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007514:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8007518:	b2db      	uxtb	r3, r3
 800751a:	2b40      	cmp	r3, #64	; 0x40
 800751c:	d015      	beq.n	800754a <I2C_MasterTransmit_BTF+0x92>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800751e:	2300      	movs	r3, #0
 8007520:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007524:	f7ff fe5e 	bl	80071e4 <HAL_I2C_MasterTxCpltCallback>
}
 8007528:	e7cd      	b.n	80074c6 <I2C_MasterTransmit_BTF+0xe>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800752a:	6802      	ldr	r2, [r0, #0]
 800752c:	6853      	ldr	r3, [r2, #4]
 800752e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007532:	6053      	str	r3, [r2, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007534:	2311      	movs	r3, #17
 8007536:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007538:	2300      	movs	r3, #0
 800753a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800753e:	2320      	movs	r3, #32
 8007540:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007544:	f7ff fe4e 	bl	80071e4 <HAL_I2C_MasterTxCpltCallback>
 8007548:	e7bd      	b.n	80074c6 <I2C_MasterTransmit_BTF+0xe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800754a:	2300      	movs	r3, #0
 800754c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007550:	f00d f94e 	bl	80147f0 <HAL_I2C_MemTxCpltCallback>
 8007554:	e7b7      	b.n	80074c6 <I2C_MasterTransmit_BTF+0xe>

08007556 <I2C_MasterReceive_RXNE>:
{
 8007556:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007558:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800755c:	b2db      	uxtb	r3, r3
 800755e:	2b22      	cmp	r3, #34	; 0x22
 8007560:	d000      	beq.n	8007564 <I2C_MasterReceive_RXNE+0xe>
}
 8007562:	bd08      	pop	{r3, pc}
    tmp = hi2c->XferCount;
 8007564:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007566:	b29b      	uxth	r3, r3
    if (tmp > 3U)
 8007568:	2b03      	cmp	r3, #3
 800756a:	d915      	bls.n	8007598 <I2C_MasterReceive_RXNE+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800756c:	6803      	ldr	r3, [r0, #0]
 800756e:	691a      	ldr	r2, [r3, #16]
 8007570:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007572:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8007574:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007576:	3301      	adds	r3, #1
 8007578:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 800757a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800757c:	b29b      	uxth	r3, r3
 800757e:	3b01      	subs	r3, #1
 8007580:	b29b      	uxth	r3, r3
 8007582:	8543      	strh	r3, [r0, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8007584:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007586:	b29b      	uxth	r3, r3
 8007588:	2b03      	cmp	r3, #3
 800758a:	d1ea      	bne.n	8007562 <I2C_MasterReceive_RXNE+0xc>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800758c:	6802      	ldr	r2, [r0, #0]
 800758e:	6853      	ldr	r3, [r2, #4]
 8007590:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007594:	6053      	str	r3, [r2, #4]
 8007596:	e7e4      	b.n	8007562 <I2C_MasterReceive_RXNE+0xc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007598:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800759a:	2a02      	cmp	r2, #2
 800759c:	d0e1      	beq.n	8007562 <I2C_MasterReceive_RXNE+0xc>
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d8df      	bhi.n	8007562 <I2C_MasterReceive_RXNE+0xc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075a2:	6802      	ldr	r2, [r0, #0]
 80075a4:	6813      	ldr	r3, [r2, #0]
 80075a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075aa:	6013      	str	r3, [r2, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80075ac:	6802      	ldr	r2, [r0, #0]
 80075ae:	6853      	ldr	r3, [r2, #4]
 80075b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80075b4:	6053      	str	r3, [r2, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075b6:	6803      	ldr	r3, [r0, #0]
 80075b8:	691a      	ldr	r2, [r3, #16]
 80075ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80075bc:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80075be:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80075c0:	3301      	adds	r3, #1
 80075c2:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 80075c4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	3b01      	subs	r3, #1
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80075ce:	2320      	movs	r3, #32
 80075d0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80075d4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b40      	cmp	r3, #64	; 0x40
 80075dc:	d007      	beq.n	80075ee <I2C_MasterReceive_RXNE+0x98>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80075de:	2300      	movs	r3, #0
 80075e0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80075e4:	2312      	movs	r3, #18
 80075e6:	6303      	str	r3, [r0, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80075e8:	f7ff fdfd 	bl	80071e6 <HAL_I2C_MasterRxCpltCallback>
}
 80075ec:	e7b9      	b.n	8007562 <I2C_MasterReceive_RXNE+0xc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80075ee:	2300      	movs	r3, #0
 80075f0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80075f4:	6303      	str	r3, [r0, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80075f6:	f00d f8b1 	bl	801475c <HAL_I2C_MemRxCpltCallback>
 80075fa:	e7b2      	b.n	8007562 <I2C_MasterReceive_RXNE+0xc>

080075fc <I2C_MasterReceive_BTF>:
{
 80075fc:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80075fe:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8007600:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007602:	b29b      	uxth	r3, r3
 8007604:	2b04      	cmp	r3, #4
 8007606:	d014      	beq.n	8007632 <I2C_MasterReceive_BTF+0x36>
  else if (hi2c->XferCount == 3U)
 8007608:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800760a:	b29b      	uxth	r3, r3
 800760c:	2b03      	cmp	r3, #3
 800760e:	d022      	beq.n	8007656 <I2C_MasterReceive_BTF+0x5a>
  else if (hi2c->XferCount == 2U)
 8007610:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007612:	b29b      	uxth	r3, r3
 8007614:	2b02      	cmp	r3, #2
 8007616:	d039      	beq.n	800768c <I2C_MasterReceive_BTF+0x90>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007618:	6803      	ldr	r3, [r0, #0]
 800761a:	691a      	ldr	r2, [r3, #16]
 800761c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800761e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007620:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007622:	3301      	adds	r3, #1
 8007624:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8007626:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007628:	b29b      	uxth	r3, r3
 800762a:	3b01      	subs	r3, #1
 800762c:	b29b      	uxth	r3, r3
 800762e:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8007630:	e010      	b.n	8007654 <I2C_MasterReceive_BTF+0x58>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007632:	6802      	ldr	r2, [r0, #0]
 8007634:	6853      	ldr	r3, [r2, #4]
 8007636:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800763a:	6053      	str	r3, [r2, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800763c:	6803      	ldr	r3, [r0, #0]
 800763e:	691a      	ldr	r2, [r3, #16]
 8007640:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007642:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007644:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007646:	3301      	adds	r3, #1
 8007648:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 800764a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800764c:	b29b      	uxth	r3, r3
 800764e:	3b01      	subs	r3, #1
 8007650:	b29b      	uxth	r3, r3
 8007652:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8007654:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007656:	6801      	ldr	r1, [r0, #0]
 8007658:	684b      	ldr	r3, [r1, #4]
 800765a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800765e:	604b      	str	r3, [r1, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007660:	2a04      	cmp	r2, #4
 8007662:	d006      	beq.n	8007672 <I2C_MasterReceive_BTF+0x76>
 8007664:	2a02      	cmp	r2, #2
 8007666:	d004      	beq.n	8007672 <I2C_MasterReceive_BTF+0x76>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007668:	6802      	ldr	r2, [r0, #0]
 800766a:	6813      	ldr	r3, [r2, #0]
 800766c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007670:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007672:	6803      	ldr	r3, [r0, #0]
 8007674:	691a      	ldr	r2, [r3, #16]
 8007676:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007678:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800767a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800767c:	3301      	adds	r3, #1
 800767e:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8007680:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007682:	b29b      	uxth	r3, r3
 8007684:	3b01      	subs	r3, #1
 8007686:	b29b      	uxth	r3, r3
 8007688:	8543      	strh	r3, [r0, #42]	; 0x2a
 800768a:	e7e3      	b.n	8007654 <I2C_MasterReceive_BTF+0x58>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800768c:	2a01      	cmp	r2, #1
 800768e:	d00b      	beq.n	80076a8 <I2C_MasterReceive_BTF+0xac>
 8007690:	2a10      	cmp	r2, #16
 8007692:	d009      	beq.n	80076a8 <I2C_MasterReceive_BTF+0xac>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007694:	2a04      	cmp	r2, #4
 8007696:	d038      	beq.n	800770a <I2C_MasterReceive_BTF+0x10e>
 8007698:	2a02      	cmp	r2, #2
 800769a:	d036      	beq.n	800770a <I2C_MasterReceive_BTF+0x10e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800769c:	6802      	ldr	r2, [r0, #0]
 800769e:	6813      	ldr	r3, [r2, #0]
 80076a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80076a4:	6013      	str	r3, [r2, #0]
 80076a6:	e004      	b.n	80076b2 <I2C_MasterReceive_BTF+0xb6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076a8:	6802      	ldr	r2, [r0, #0]
 80076aa:	6813      	ldr	r3, [r2, #0]
 80076ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076b0:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076b2:	6803      	ldr	r3, [r0, #0]
 80076b4:	691a      	ldr	r2, [r3, #16]
 80076b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80076b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80076ba:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80076bc:	1c53      	adds	r3, r2, #1
 80076be:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 80076c0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	3b01      	subs	r3, #1
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	8543      	strh	r3, [r0, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076ca:	6803      	ldr	r3, [r0, #0]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 80076d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80076d2:	3301      	adds	r3, #1
 80076d4:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 80076d6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80076d8:	b29b      	uxth	r3, r3
 80076da:	3b01      	subs	r3, #1
 80076dc:	b29b      	uxth	r3, r3
 80076de:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80076e0:	6802      	ldr	r2, [r0, #0]
 80076e2:	6853      	ldr	r3, [r2, #4]
 80076e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076e8:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80076ea:	2320      	movs	r3, #32
 80076ec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80076f0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b40      	cmp	r3, #64	; 0x40
 80076f8:	d00d      	beq.n	8007716 <I2C_MasterReceive_BTF+0x11a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80076fa:	2300      	movs	r3, #0
 80076fc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007700:	2312      	movs	r3, #18
 8007702:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007704:	f7ff fd6f 	bl	80071e6 <HAL_I2C_MasterRxCpltCallback>
 8007708:	e7a4      	b.n	8007654 <I2C_MasterReceive_BTF+0x58>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800770a:	6802      	ldr	r2, [r0, #0]
 800770c:	6813      	ldr	r3, [r2, #0]
 800770e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007712:	6013      	str	r3, [r2, #0]
 8007714:	e7cd      	b.n	80076b2 <I2C_MasterReceive_BTF+0xb6>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007716:	2300      	movs	r3, #0
 8007718:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800771c:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800771e:	f00d f81d 	bl	801475c <HAL_I2C_MemRxCpltCallback>
 8007722:	e797      	b.n	8007654 <I2C_MasterReceive_BTF+0x58>

08007724 <HAL_I2C_AbortCpltCallback>:
}
 8007724:	4770      	bx	lr

08007726 <I2C_DMAAbort>:
{
 8007726:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007728:	6b80      	ldr	r0, [r0, #56]	; 0x38
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800772a:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  hi2c->hdmatx->XferCpltCallback = NULL;
 800772e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007730:	2300      	movs	r3, #0
 8007732:	63cb      	str	r3, [r1, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 8007734:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8007736:	63cb      	str	r3, [r1, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007738:	6804      	ldr	r4, [r0, #0]
 800773a:	6821      	ldr	r1, [r4, #0]
 800773c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007740:	6021      	str	r1, [r4, #0]
  hi2c->XferCount = 0U;
 8007742:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2c->hdmatx->XferAbortCallback = NULL;
 8007744:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007746:	650b      	str	r3, [r1, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8007748:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800774a:	650b      	str	r3, [r1, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 800774c:	6801      	ldr	r1, [r0, #0]
 800774e:	680b      	ldr	r3, [r1, #0]
 8007750:	f023 0301 	bic.w	r3, r3, #1
 8007754:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007756:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800775a:	b2db      	uxtb	r3, r3
 800775c:	2b60      	cmp	r3, #96	; 0x60
 800775e:	d00d      	beq.n	800777c <I2C_DMAAbort+0x56>
 8007760:	b2d2      	uxtb	r2, r2
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007762:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8007766:	2a28      	cmp	r2, #40	; 0x28
 8007768:	d012      	beq.n	8007790 <I2C_DMAAbort+0x6a>
      hi2c->State = HAL_I2C_STATE_READY;
 800776a:	2320      	movs	r3, #32
 800776c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007770:	2300      	movs	r3, #0
 8007772:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007776:	f00c ff6f 	bl	8014658 <HAL_I2C_ErrorCallback>
}
 800777a:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_READY;
 800777c:	2320      	movs	r3, #32
 800777e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007782:	2300      	movs	r3, #0
 8007784:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007788:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800778a:	f7ff ffcb 	bl	8007724 <HAL_I2C_AbortCpltCallback>
 800778e:	e7f4      	b.n	800777a <I2C_DMAAbort+0x54>
      __HAL_I2C_ENABLE(hi2c);
 8007790:	6802      	ldr	r2, [r0, #0]
 8007792:	6813      	ldr	r3, [r2, #0]
 8007794:	f043 0301 	orr.w	r3, r3, #1
 8007798:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800779a:	6802      	ldr	r2, [r0, #0]
 800779c:	6813      	ldr	r3, [r2, #0]
 800779e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80077a2:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80077a4:	2300      	movs	r3, #0
 80077a6:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80077a8:	2328      	movs	r3, #40	; 0x28
 80077aa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80077ae:	e7e2      	b.n	8007776 <I2C_DMAAbort+0x50>

080077b0 <I2C_ITError>:
{
 80077b0:	b510      	push	{r4, lr}
 80077b2:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80077b4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80077b8:	b2db      	uxtb	r3, r3
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80077ba:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80077be:	b2d2      	uxtb	r2, r2
 80077c0:	2a10      	cmp	r2, #16
 80077c2:	d033      	beq.n	800782c <I2C_ITError+0x7c>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80077c4:	f003 0228 	and.w	r2, r3, #40	; 0x28
 80077c8:	2a28      	cmp	r2, #40	; 0x28
 80077ca:	d037      	beq.n	800783c <I2C_ITError+0x8c>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80077cc:	6822      	ldr	r2, [r4, #0]
 80077ce:	6852      	ldr	r2, [r2, #4]
 80077d0:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80077d4:	d104      	bne.n	80077e0 <I2C_ITError+0x30>
 80077d6:	2b60      	cmp	r3, #96	; 0x60
 80077d8:	d002      	beq.n	80077e0 <I2C_ITError+0x30>
      hi2c->State = HAL_I2C_STATE_READY;
 80077da:	2320      	movs	r3, #32
 80077dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 80077e0:	2300      	movs	r3, #0
 80077e2:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80077e4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80077e8:	6823      	ldr	r3, [r4, #0]
 80077ea:	685a      	ldr	r2, [r3, #4]
 80077ec:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80077f0:	d048      	beq.n	8007884 <I2C_ITError+0xd4>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80077f2:	685a      	ldr	r2, [r3, #4]
 80077f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077f8:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80077fa:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80077fc:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b01      	cmp	r3, #1
 8007804:	d020      	beq.n	8007848 <I2C_ITError+0x98>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007806:	4b42      	ldr	r3, [pc, #264]	; (8007910 <I2C_ITError+0x160>)
 8007808:	6513      	str	r3, [r2, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800780a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800780c:	f7fe f9d8 	bl	8005bc0 <HAL_DMA_Abort_IT>
 8007810:	2800      	cmp	r0, #0
 8007812:	d049      	beq.n	80078a8 <I2C_ITError+0xf8>
        __HAL_I2C_DISABLE(hi2c);
 8007814:	6822      	ldr	r2, [r4, #0]
 8007816:	6813      	ldr	r3, [r2, #0]
 8007818:	f023 0301 	bic.w	r3, r3, #1
 800781c:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800781e:	2320      	movs	r3, #32
 8007820:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007824:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007826:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007828:	4798      	blx	r3
 800782a:	e03d      	b.n	80078a8 <I2C_ITError+0xf8>
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800782c:	2b22      	cmp	r3, #34	; 0x22
 800782e:	d1c9      	bne.n	80077c4 <I2C_ITError+0x14>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007830:	6801      	ldr	r1, [r0, #0]
 8007832:	680a      	ldr	r2, [r1, #0]
 8007834:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007838:	600a      	str	r2, [r1, #0]
 800783a:	e7c3      	b.n	80077c4 <I2C_ITError+0x14>
    hi2c->PreviousState = I2C_STATE_NONE;
 800783c:	2300      	movs	r3, #0
 800783e:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007840:	2328      	movs	r3, #40	; 0x28
 8007842:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8007846:	e7cf      	b.n	80077e8 <I2C_ITError+0x38>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007848:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800784a:	4a31      	ldr	r2, [pc, #196]	; (8007910 <I2C_ITError+0x160>)
 800784c:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800784e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007850:	f7fe f9b6 	bl	8005bc0 <HAL_DMA_Abort_IT>
 8007854:	b340      	cbz	r0, 80078a8 <I2C_ITError+0xf8>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007856:	6823      	ldr	r3, [r4, #0]
 8007858:	695a      	ldr	r2, [r3, #20]
 800785a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800785e:	d005      	beq.n	800786c <I2C_ITError+0xbc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007860:	691a      	ldr	r2, [r3, #16]
 8007862:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007864:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8007866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007868:	3301      	adds	r3, #1
 800786a:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 800786c:	6822      	ldr	r2, [r4, #0]
 800786e:	6813      	ldr	r3, [r2, #0]
 8007870:	f023 0301 	bic.w	r3, r3, #1
 8007874:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8007876:	2320      	movs	r3, #32
 8007878:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800787c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800787e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007880:	4798      	blx	r3
 8007882:	e011      	b.n	80078a8 <I2C_ITError+0xf8>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007884:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8007888:	b2d2      	uxtb	r2, r2
 800788a:	2a60      	cmp	r2, #96	; 0x60
 800788c:	d016      	beq.n	80078bc <I2C_ITError+0x10c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800788e:	695a      	ldr	r2, [r3, #20]
 8007890:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007894:	d005      	beq.n	80078a2 <I2C_ITError+0xf2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007896:	691a      	ldr	r2, [r3, #16]
 8007898:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800789a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800789c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800789e:	3301      	adds	r3, #1
 80078a0:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 80078a2:	4620      	mov	r0, r4
 80078a4:	f00c fed8 	bl	8014658 <HAL_I2C_ErrorCallback>
  CurrentState = hi2c->State;
 80078a8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80078ac:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80078ae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80078b0:	f012 0f04 	tst.w	r2, #4
 80078b4:	d001      	beq.n	80078ba <I2C_ITError+0x10a>
 80078b6:	2b28      	cmp	r3, #40	; 0x28
 80078b8:	d018      	beq.n	80078ec <I2C_ITError+0x13c>
}
 80078ba:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80078bc:	2220      	movs	r2, #32
 80078be:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078c2:	2200      	movs	r2, #0
 80078c4:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80078c6:	695a      	ldr	r2, [r3, #20]
 80078c8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80078cc:	d005      	beq.n	80078da <I2C_ITError+0x12a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078ce:	691a      	ldr	r2, [r3, #16]
 80078d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078d2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80078d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078d6:	3301      	adds	r3, #1
 80078d8:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 80078da:	6822      	ldr	r2, [r4, #0]
 80078dc:	6813      	ldr	r3, [r2, #0]
 80078de:	f023 0301 	bic.w	r3, r3, #1
 80078e2:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80078e4:	4620      	mov	r0, r4
 80078e6:	f7ff ff1d 	bl	8007724 <HAL_I2C_AbortCpltCallback>
 80078ea:	e7dd      	b.n	80078a8 <I2C_ITError+0xf8>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80078ec:	6822      	ldr	r2, [r4, #0]
 80078ee:	6853      	ldr	r3, [r2, #4]
 80078f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80078f4:	6053      	str	r3, [r2, #4]
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80078f6:	4b07      	ldr	r3, [pc, #28]	; (8007914 <I2C_ITError+0x164>)
 80078f8:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80078fa:	2300      	movs	r3, #0
 80078fc:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80078fe:	2220      	movs	r2, #32
 8007900:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007904:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8007908:	4620      	mov	r0, r4
 800790a:	f7ff fce3 	bl	80072d4 <HAL_I2C_ListenCpltCallback>
}
 800790e:	e7d4      	b.n	80078ba <I2C_ITError+0x10a>
 8007910:	08007727 	.word	0x08007727
 8007914:	ffff0000 	.word	0xffff0000

08007918 <I2C_Slave_STOPF>:
{
 8007918:	b530      	push	{r4, r5, lr}
 800791a:	b083      	sub	sp, #12
 800791c:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800791e:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 8007922:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007924:	6802      	ldr	r2, [r0, #0]
 8007926:	6853      	ldr	r3, [r2, #4]
 8007928:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800792c:	6053      	str	r3, [r2, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800792e:	2300      	movs	r3, #0
 8007930:	9301      	str	r3, [sp, #4]
 8007932:	6803      	ldr	r3, [r0, #0]
 8007934:	695a      	ldr	r2, [r3, #20]
 8007936:	9201      	str	r2, [sp, #4]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	f042 0201 	orr.w	r2, r2, #1
 800793e:	601a      	str	r2, [r3, #0]
 8007940:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007942:	6802      	ldr	r2, [r0, #0]
 8007944:	6813      	ldr	r3, [r2, #0]
 8007946:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800794a:	6013      	str	r3, [r2, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800794c:	6803      	ldr	r3, [r0, #0]
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8007954:	d038      	beq.n	80079c8 <I2C_Slave_STOPF+0xb0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007956:	2d22      	cmp	r5, #34	; 0x22
 8007958:	d021      	beq.n	800799e <I2C_Slave_STOPF+0x86>
 800795a:	2d2a      	cmp	r5, #42	; 0x2a
 800795c:	d01f      	beq.n	800799e <I2C_Slave_STOPF+0x86>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800795e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007960:	6812      	ldr	r2, [r2, #0]
 8007962:	6852      	ldr	r2, [r2, #4]
 8007964:	b292      	uxth	r2, r2
 8007966:	8542      	strh	r2, [r0, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8007968:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800796a:	b292      	uxth	r2, r2
 800796c:	b11a      	cbz	r2, 8007976 <I2C_Slave_STOPF+0x5e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800796e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007970:	f042 0204 	orr.w	r2, r2, #4
 8007974:	6402      	str	r2, [r0, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800797c:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800797e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007980:	f7fe fa20 	bl	8005dc4 <HAL_DMA_GetState>
 8007984:	2801      	cmp	r0, #1
 8007986:	d01f      	beq.n	80079c8 <I2C_Slave_STOPF+0xb0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007988:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800798a:	4a44      	ldr	r2, [pc, #272]	; (8007a9c <I2C_Slave_STOPF+0x184>)
 800798c:	651a      	str	r2, [r3, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800798e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007990:	f7fe f916 	bl	8005bc0 <HAL_DMA_Abort_IT>
 8007994:	b1c0      	cbz	r0, 80079c8 <I2C_Slave_STOPF+0xb0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007996:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007998:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800799a:	4798      	blx	r3
 800799c:	e014      	b.n	80079c8 <I2C_Slave_STOPF+0xb0>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800799e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80079a0:	6812      	ldr	r2, [r2, #0]
 80079a2:	6852      	ldr	r2, [r2, #4]
 80079a4:	b292      	uxth	r2, r2
 80079a6:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80079a8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80079aa:	b292      	uxth	r2, r2
 80079ac:	b11a      	cbz	r2, 80079b6 <I2C_Slave_STOPF+0x9e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80079ae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80079b0:	f042 0204 	orr.w	r2, r2, #4
 80079b4:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80079b6:	685a      	ldr	r2, [r3, #4]
 80079b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079bc:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80079be:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80079c0:	f7fe fa00 	bl	8005dc4 <HAL_DMA_GetState>
 80079c4:	2801      	cmp	r0, #1
 80079c6:	d142      	bne.n	8007a4e <I2C_Slave_STOPF+0x136>
  if (hi2c->XferCount != 0U)
 80079c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	b333      	cbz	r3, 8007a1c <I2C_Slave_STOPF+0x104>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80079ce:	6823      	ldr	r3, [r4, #0]
 80079d0:	695a      	ldr	r2, [r3, #20]
 80079d2:	f012 0f04 	tst.w	r2, #4
 80079d6:	d00a      	beq.n	80079ee <I2C_Slave_STOPF+0xd6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079d8:	691a      	ldr	r2, [r3, #16]
 80079da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079dc:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80079de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079e0:	3301      	adds	r3, #1
 80079e2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80079e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	3b01      	subs	r3, #1
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80079ee:	6823      	ldr	r3, [r4, #0]
 80079f0:	695a      	ldr	r2, [r3, #20]
 80079f2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80079f6:	d00a      	beq.n	8007a0e <I2C_Slave_STOPF+0xf6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079f8:	691a      	ldr	r2, [r3, #16]
 80079fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079fc:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80079fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a00:	3301      	adds	r3, #1
 8007a02:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8007a04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 8007a0e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	b11b      	cbz	r3, 8007a1c <I2C_Slave_STOPF+0x104>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a16:	f043 0304 	orr.w	r3, r3, #4
 8007a1a:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007a1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a1e:	bb13      	cbnz	r3, 8007a66 <I2C_Slave_STOPF+0x14e>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007a20:	2d2a      	cmp	r5, #42	; 0x2a
 8007a22:	d025      	beq.n	8007a70 <I2C_Slave_STOPF+0x158>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007a24:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b28      	cmp	r3, #40	; 0x28
 8007a2c:	d029      	beq.n	8007a82 <I2C_Slave_STOPF+0x16a>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007a2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007a30:	2b22      	cmp	r3, #34	; 0x22
 8007a32:	d001      	beq.n	8007a38 <I2C_Slave_STOPF+0x120>
 8007a34:	2d22      	cmp	r5, #34	; 0x22
 8007a36:	d119      	bne.n	8007a6c <I2C_Slave_STOPF+0x154>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007a3c:	2220      	movs	r2, #32
 8007a3e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a42:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007a46:	4620      	mov	r0, r4
 8007a48:	f7ff fbf5 	bl	8007236 <HAL_I2C_SlaveRxCpltCallback>
}
 8007a4c:	e00e      	b.n	8007a6c <I2C_Slave_STOPF+0x154>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007a4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007a50:	4a12      	ldr	r2, [pc, #72]	; (8007a9c <I2C_Slave_STOPF+0x184>)
 8007a52:	651a      	str	r2, [r3, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007a54:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007a56:	f7fe f8b3 	bl	8005bc0 <HAL_DMA_Abort_IT>
 8007a5a:	2800      	cmp	r0, #0
 8007a5c:	d0b4      	beq.n	80079c8 <I2C_Slave_STOPF+0xb0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007a5e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007a60:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007a62:	4798      	blx	r3
 8007a64:	e7b0      	b.n	80079c8 <I2C_Slave_STOPF+0xb0>
    I2C_ITError(hi2c);
 8007a66:	4620      	mov	r0, r4
 8007a68:	f7ff fea2 	bl	80077b0 <I2C_ITError>
}
 8007a6c:	b003      	add	sp, #12
 8007a6e:	bd30      	pop	{r4, r5, pc}
      hi2c->PreviousState = I2C_STATE_NONE;
 8007a70:	2300      	movs	r3, #0
 8007a72:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a74:	2328      	movs	r3, #40	; 0x28
 8007a76:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f7ff fbdb 	bl	8007236 <HAL_I2C_SlaveRxCpltCallback>
 8007a80:	e7d0      	b.n	8007a24 <I2C_Slave_STOPF+0x10c>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a82:	4b07      	ldr	r3, [pc, #28]	; (8007aa0 <I2C_Slave_STOPF+0x188>)
 8007a84:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007a86:	2300      	movs	r3, #0
 8007a88:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007a8a:	2220      	movs	r2, #32
 8007a8c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a90:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007a94:	4620      	mov	r0, r4
 8007a96:	f7ff fc1d 	bl	80072d4 <HAL_I2C_ListenCpltCallback>
 8007a9a:	e7e7      	b.n	8007a6c <I2C_Slave_STOPF+0x154>
 8007a9c:	08007727 	.word	0x08007727
 8007aa0:	ffff0000 	.word	0xffff0000

08007aa4 <HAL_I2C_EV_IRQHandler>:
{
 8007aa4:	b570      	push	{r4, r5, r6, lr}
 8007aa6:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007aa8:	6802      	ldr	r2, [r0, #0]
 8007aaa:	6855      	ldr	r5, [r2, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007aac:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007aae:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8007ab2:	b2db      	uxtb	r3, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ab4:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007ab8:	2b10      	cmp	r3, #16
 8007aba:	d014      	beq.n	8007ae6 <HAL_I2C_EV_IRQHandler+0x42>
 8007abc:	b2c8      	uxtb	r0, r1
 8007abe:	2b40      	cmp	r3, #64	; 0x40
 8007ac0:	d011      	beq.n	8007ae6 <HAL_I2C_EV_IRQHandler+0x42>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007ac2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d071      	beq.n	8007bac <HAL_I2C_EV_IRQHandler+0x108>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007ac8:	6953      	ldr	r3, [r2, #20]
  uint32_t sr2itflags               = 0U;
 8007aca:	2100      	movs	r1, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007acc:	f013 0f02 	tst.w	r3, #2
 8007ad0:	d06f      	beq.n	8007bb2 <HAL_I2C_EV_IRQHandler+0x10e>
 8007ad2:	f415 7f00 	tst.w	r5, #512	; 0x200
 8007ad6:	d06c      	beq.n	8007bb2 <HAL_I2C_EV_IRQHandler+0x10e>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007ad8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ada:	b103      	cbz	r3, 8007ade <HAL_I2C_EV_IRQHandler+0x3a>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007adc:	6991      	ldr	r1, [r2, #24]
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f7ff fbd1 	bl	8007286 <I2C_Slave_ADDR>
}
 8007ae4:	bd70      	pop	{r4, r5, r6, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007ae6:	6990      	ldr	r0, [r2, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007ae8:	6953      	ldr	r3, [r2, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007aea:	f013 0101 	ands.w	r1, r3, #1
 8007aee:	d105      	bne.n	8007afc <HAL_I2C_EV_IRQHandler+0x58>
 8007af0:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 8007af4:	d0f6      	beq.n	8007ae4 <HAL_I2C_EV_IRQHandler+0x40>
 8007af6:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8007afa:	d0f3      	beq.n	8007ae4 <HAL_I2C_EV_IRQHandler+0x40>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007afc:	b111      	cbz	r1, 8007b04 <HAL_I2C_EV_IRQHandler+0x60>
 8007afe:	f415 7f00 	tst.w	r5, #512	; 0x200
 8007b02:	d125      	bne.n	8007b50 <HAL_I2C_EV_IRQHandler+0xac>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b04:	f013 0f08 	tst.w	r3, #8
 8007b08:	d002      	beq.n	8007b10 <HAL_I2C_EV_IRQHandler+0x6c>
 8007b0a:	f415 7f00 	tst.w	r5, #512	; 0x200
 8007b0e:	d126      	bne.n	8007b5e <HAL_I2C_EV_IRQHandler+0xba>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b10:	f013 0f02 	tst.w	r3, #2
 8007b14:	d002      	beq.n	8007b1c <HAL_I2C_EV_IRQHandler+0x78>
 8007b16:	f415 7f00 	tst.w	r5, #512	; 0x200
 8007b1a:	d124      	bne.n	8007b66 <HAL_I2C_EV_IRQHandler+0xc2>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007b1c:	f010 0f04 	tst.w	r0, #4
 8007b20:	d029      	beq.n	8007b76 <HAL_I2C_EV_IRQHandler+0xd2>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007b22:	6852      	ldr	r2, [r2, #4]
 8007b24:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8007b28:	d1dc      	bne.n	8007ae4 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007b2a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007b2e:	d005      	beq.n	8007b3c <HAL_I2C_EV_IRQHandler+0x98>
 8007b30:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8007b34:	d002      	beq.n	8007b3c <HAL_I2C_EV_IRQHandler+0x98>
 8007b36:	f013 0f04 	tst.w	r3, #4
 8007b3a:	d018      	beq.n	8007b6e <HAL_I2C_EV_IRQHandler+0xca>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b3c:	f013 0f04 	tst.w	r3, #4
 8007b40:	d0d0      	beq.n	8007ae4 <HAL_I2C_EV_IRQHandler+0x40>
 8007b42:	f415 7f00 	tst.w	r5, #512	; 0x200
 8007b46:	d0cd      	beq.n	8007ae4 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterTransmit_BTF(hi2c);
 8007b48:	4620      	mov	r0, r4
 8007b4a:	f7ff fcb5 	bl	80074b8 <I2C_MasterTransmit_BTF>
 8007b4e:	e7c9      	b.n	8007ae4 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_ConvertOtherXferOptions(hi2c);
 8007b50:	4620      	mov	r0, r4
 8007b52:	f7ff fa63 	bl	800701c <I2C_ConvertOtherXferOptions>
      I2C_Master_SB(hi2c);
 8007b56:	4620      	mov	r0, r4
 8007b58:	f7ff f8cf 	bl	8006cfa <I2C_Master_SB>
 8007b5c:	e7c2      	b.n	8007ae4 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADD10(hi2c);
 8007b5e:	4620      	mov	r0, r4
 8007b60:	f7ff f922 	bl	8006da8 <I2C_Master_ADD10>
 8007b64:	e7be      	b.n	8007ae4 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADDR(hi2c);
 8007b66:	4620      	mov	r0, r4
 8007b68:	f7ff f935 	bl	8006dd6 <I2C_Master_ADDR>
 8007b6c:	e7ba      	b.n	8007ae4 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterTransmit_TXE(hi2c);
 8007b6e:	4620      	mov	r0, r4
 8007b70:	f7ff fbfc 	bl	800736c <I2C_MasterTransmit_TXE>
 8007b74:	e7b6      	b.n	8007ae4 <HAL_I2C_EV_IRQHandler+0x40>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007b76:	6852      	ldr	r2, [r2, #4]
 8007b78:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8007b7c:	d1b2      	bne.n	8007ae4 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007b7e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007b82:	d005      	beq.n	8007b90 <HAL_I2C_EV_IRQHandler+0xec>
 8007b84:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8007b88:	d002      	beq.n	8007b90 <HAL_I2C_EV_IRQHandler+0xec>
 8007b8a:	f013 0f04 	tst.w	r3, #4
 8007b8e:	d009      	beq.n	8007ba4 <HAL_I2C_EV_IRQHandler+0x100>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b90:	f013 0f04 	tst.w	r3, #4
 8007b94:	d0a6      	beq.n	8007ae4 <HAL_I2C_EV_IRQHandler+0x40>
 8007b96:	f415 7f00 	tst.w	r5, #512	; 0x200
 8007b9a:	d0a3      	beq.n	8007ae4 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_BTF(hi2c);
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	f7ff fd2d 	bl	80075fc <I2C_MasterReceive_BTF>
 8007ba2:	e79f      	b.n	8007ae4 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_RXNE(hi2c);
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	f7ff fcd6 	bl	8007556 <I2C_MasterReceive_RXNE>
 8007baa:	e79b      	b.n	8007ae4 <HAL_I2C_EV_IRQHandler+0x40>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007bac:	6991      	ldr	r1, [r2, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007bae:	6953      	ldr	r3, [r2, #20]
 8007bb0:	e78c      	b.n	8007acc <HAL_I2C_EV_IRQHandler+0x28>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007bb2:	f013 0f10 	tst.w	r3, #16
 8007bb6:	d002      	beq.n	8007bbe <HAL_I2C_EV_IRQHandler+0x11a>
 8007bb8:	f415 7f00 	tst.w	r5, #512	; 0x200
 8007bbc:	d117      	bne.n	8007bee <HAL_I2C_EV_IRQHandler+0x14a>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007bbe:	2821      	cmp	r0, #33	; 0x21
 8007bc0:	d019      	beq.n	8007bf6 <HAL_I2C_EV_IRQHandler+0x152>
 8007bc2:	2829      	cmp	r0, #41	; 0x29
 8007bc4:	d017      	beq.n	8007bf6 <HAL_I2C_EV_IRQHandler+0x152>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007bc6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007bca:	d005      	beq.n	8007bd8 <HAL_I2C_EV_IRQHandler+0x134>
 8007bcc:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8007bd0:	d002      	beq.n	8007bd8 <HAL_I2C_EV_IRQHandler+0x134>
 8007bd2:	f013 0f04 	tst.w	r3, #4
 8007bd6:	d027      	beq.n	8007c28 <HAL_I2C_EV_IRQHandler+0x184>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007bd8:	f013 0f04 	tst.w	r3, #4
 8007bdc:	d082      	beq.n	8007ae4 <HAL_I2C_EV_IRQHandler+0x40>
 8007bde:	f415 7f00 	tst.w	r5, #512	; 0x200
 8007be2:	f43f af7f 	beq.w	8007ae4 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_BTF(hi2c);
 8007be6:	4620      	mov	r0, r4
 8007be8:	f7ff fa08 	bl	8006ffc <I2C_SlaveReceive_BTF>
      }
 8007bec:	e77a      	b.n	8007ae4 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Slave_STOPF(hi2c);
 8007bee:	4620      	mov	r0, r4
 8007bf0:	f7ff fe92 	bl	8007918 <I2C_Slave_STOPF>
 8007bf4:	e776      	b.n	8007ae4 <HAL_I2C_EV_IRQHandler+0x40>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007bf6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007bfa:	d005      	beq.n	8007c08 <HAL_I2C_EV_IRQHandler+0x164>
 8007bfc:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8007c00:	d002      	beq.n	8007c08 <HAL_I2C_EV_IRQHandler+0x164>
 8007c02:	f013 0f04 	tst.w	r3, #4
 8007c06:	d00b      	beq.n	8007c20 <HAL_I2C_EV_IRQHandler+0x17c>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c08:	f013 0f04 	tst.w	r3, #4
 8007c0c:	f43f af6a 	beq.w	8007ae4 <HAL_I2C_EV_IRQHandler+0x40>
 8007c10:	f415 7f00 	tst.w	r5, #512	; 0x200
 8007c14:	f43f af66 	beq.w	8007ae4 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_BTF(hi2c);
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f7ff f9df 	bl	8006fdc <I2C_SlaveTransmit_BTF>
 8007c1e:	e761      	b.n	8007ae4 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_TXE(hi2c);
 8007c20:	4620      	mov	r0, r4
 8007c22:	f7ff fae2 	bl	80071ea <I2C_SlaveTransmit_TXE>
 8007c26:	e75d      	b.n	8007ae4 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_RXNE(hi2c);
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f7ff fb05 	bl	8007238 <I2C_SlaveReceive_RXNE>
 8007c2e:	e759      	b.n	8007ae4 <HAL_I2C_EV_IRQHandler+0x40>

08007c30 <HAL_I2C_ER_IRQHandler>:
{
 8007c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c32:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007c34:	6803      	ldr	r3, [r0, #0]
 8007c36:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007c38:	685f      	ldr	r7, [r3, #4]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007c3a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8007c3e:	d007      	beq.n	8007c50 <HAL_I2C_ER_IRQHandler+0x20>
 8007c40:	f417 7f80 	tst.w	r7, #256	; 0x100
 8007c44:	d03b      	beq.n	8007cbe <HAL_I2C_ER_IRQHandler+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007c46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007c4a:	615a      	str	r2, [r3, #20]
    error |= HAL_I2C_ERROR_BERR;
 8007c4c:	2601      	movs	r6, #1
 8007c4e:	e000      	b.n	8007c52 <HAL_I2C_ER_IRQHandler+0x22>
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007c50:	2600      	movs	r6, #0
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007c52:	f415 7f00 	tst.w	r5, #512	; 0x200
 8007c56:	d008      	beq.n	8007c6a <HAL_I2C_ER_IRQHandler+0x3a>
 8007c58:	f417 7f80 	tst.w	r7, #256	; 0x100
 8007c5c:	d005      	beq.n	8007c6a <HAL_I2C_ER_IRQHandler+0x3a>
    error |= HAL_I2C_ERROR_ARLO;
 8007c5e:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007c62:	6823      	ldr	r3, [r4, #0]
 8007c64:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8007c68:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007c6a:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8007c6e:	d018      	beq.n	8007ca2 <HAL_I2C_ER_IRQHandler+0x72>
 8007c70:	f417 7f80 	tst.w	r7, #256	; 0x100
 8007c74:	d015      	beq.n	8007ca2 <HAL_I2C_ER_IRQHandler+0x72>
    tmp1 = hi2c->Mode;
 8007c76:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8007c7a:	b2db      	uxtb	r3, r3
    tmp2 = hi2c->XferCount;
 8007c7c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8007c7e:	b291      	uxth	r1, r2
    tmp3 = hi2c->State;
 8007c80:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8007c84:	b2d2      	uxtb	r2, r2
    tmp4 = hi2c->PreviousState;
 8007c86:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007c88:	2b20      	cmp	r3, #32
 8007c8a:	d01a      	beq.n	8007cc2 <HAL_I2C_ER_IRQHandler+0x92>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c8c:	6823      	ldr	r3, [r4, #0]
 8007c8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c92:	615a      	str	r2, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 8007c94:	f046 0604 	orr.w	r6, r6, #4
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8007c98:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b10      	cmp	r3, #16
 8007ca0:	d01d      	beq.n	8007cde <HAL_I2C_ER_IRQHandler+0xae>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007ca2:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8007ca6:	d008      	beq.n	8007cba <HAL_I2C_ER_IRQHandler+0x8a>
 8007ca8:	f417 7f80 	tst.w	r7, #256	; 0x100
 8007cac:	d005      	beq.n	8007cba <HAL_I2C_ER_IRQHandler+0x8a>
    error |= HAL_I2C_ERROR_OVR;
 8007cae:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007cb2:	6823      	ldr	r3, [r4, #0]
 8007cb4:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8007cb8:	615a      	str	r2, [r3, #20]
  if (error != HAL_I2C_ERROR_NONE)
 8007cba:	b9b6      	cbnz	r6, 8007cea <HAL_I2C_ER_IRQHandler+0xba>
}
 8007cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007cbe:	2600      	movs	r6, #0
 8007cc0:	e7c7      	b.n	8007c52 <HAL_I2C_ER_IRQHandler+0x22>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007cc2:	2900      	cmp	r1, #0
 8007cc4:	d1e2      	bne.n	8007c8c <HAL_I2C_ER_IRQHandler+0x5c>
 8007cc6:	2a21      	cmp	r2, #33	; 0x21
 8007cc8:	d005      	beq.n	8007cd6 <HAL_I2C_ER_IRQHandler+0xa6>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007cca:	2a29      	cmp	r2, #41	; 0x29
 8007ccc:	d003      	beq.n	8007cd6 <HAL_I2C_ER_IRQHandler+0xa6>
 8007cce:	2a28      	cmp	r2, #40	; 0x28
 8007cd0:	d1dc      	bne.n	8007c8c <HAL_I2C_ER_IRQHandler+0x5c>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007cd2:	2821      	cmp	r0, #33	; 0x21
 8007cd4:	d1da      	bne.n	8007c8c <HAL_I2C_ER_IRQHandler+0x5c>
      I2C_Slave_AF(hi2c);
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	f7ff fafe 	bl	80072d8 <I2C_Slave_AF>
 8007cdc:	e7e1      	b.n	8007ca2 <HAL_I2C_ER_IRQHandler+0x72>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cde:	6822      	ldr	r2, [r4, #0]
 8007ce0:	6813      	ldr	r3, [r2, #0]
 8007ce2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007ce6:	6013      	str	r3, [r2, #0]
 8007ce8:	e7db      	b.n	8007ca2 <HAL_I2C_ER_IRQHandler+0x72>
    hi2c->ErrorCode |= error;
 8007cea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007cec:	431e      	orrs	r6, r3
 8007cee:	6426      	str	r6, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f7ff fd5d 	bl	80077b0 <I2C_ITError>
}
 8007cf6:	e7e1      	b.n	8007cbc <HAL_I2C_ER_IRQHandler+0x8c>

08007cf8 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cf8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2b20      	cmp	r3, #32
 8007d00:	d001      	beq.n	8007d06 <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8007d02:	2002      	movs	r0, #2
  }
}
 8007d04:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d06:	2324      	movs	r3, #36	; 0x24
 8007d08:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8007d0c:	6802      	ldr	r2, [r0, #0]
 8007d0e:	6813      	ldr	r3, [r2, #0]
 8007d10:	f023 0301 	bic.w	r3, r3, #1
 8007d14:	6013      	str	r3, [r2, #0]
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007d16:	6802      	ldr	r2, [r0, #0]
 8007d18:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8007d1a:	f023 0310 	bic.w	r3, r3, #16
 8007d1e:	6253      	str	r3, [r2, #36]	; 0x24
    hi2c->Instance->FLTR |= AnalogFilter;
 8007d20:	6802      	ldr	r2, [r0, #0]
 8007d22:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8007d24:	4319      	orrs	r1, r3
 8007d26:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_I2C_ENABLE(hi2c);
 8007d28:	6802      	ldr	r2, [r0, #0]
 8007d2a:	6813      	ldr	r3, [r2, #0]
 8007d2c:	f043 0301 	orr.w	r3, r3, #1
 8007d30:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8007d32:	2320      	movs	r3, #32
 8007d34:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    return HAL_OK;
 8007d38:	2000      	movs	r0, #0
 8007d3a:	4770      	bx	lr

08007d3c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d3c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b20      	cmp	r3, #32
 8007d44:	d001      	beq.n	8007d4a <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8007d46:	2002      	movs	r0, #2
  }
}
 8007d48:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d4a:	2324      	movs	r3, #36	; 0x24
 8007d4c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8007d50:	6802      	ldr	r2, [r0, #0]
 8007d52:	6813      	ldr	r3, [r2, #0]
 8007d54:	f023 0301 	bic.w	r3, r3, #1
 8007d58:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->FLTR;
 8007d5a:	6802      	ldr	r2, [r0, #0]
 8007d5c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8007d5e:	b29b      	uxth	r3, r3
    tmpreg &= ~(I2C_FLTR_DNF);
 8007d60:	f023 030f 	bic.w	r3, r3, #15
    tmpreg |= DigitalFilter;
 8007d64:	4319      	orrs	r1, r3
 8007d66:	b289      	uxth	r1, r1
    hi2c->Instance->FLTR = tmpreg;
 8007d68:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_I2C_ENABLE(hi2c);
 8007d6a:	6802      	ldr	r2, [r0, #0]
 8007d6c:	6813      	ldr	r3, [r2, #0]
 8007d6e:	f043 0301 	orr.w	r3, r3, #1
 8007d72:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8007d74:	2320      	movs	r3, #32
 8007d76:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    return HAL_OK;
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	4770      	bx	lr

08007d7e <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8007d7e:	b308      	cbz	r0, 8007dc4 <HAL_IWDG_Init+0x46>
{
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8007d84:	6803      	ldr	r3, [r0, #0]
 8007d86:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8007d8a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8007d8c:	6803      	ldr	r3, [r0, #0]
 8007d8e:	f245 5255 	movw	r2, #21845	; 0x5555
 8007d92:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8007d94:	6803      	ldr	r3, [r0, #0]
 8007d96:	6842      	ldr	r2, [r0, #4]
 8007d98:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8007d9a:	6803      	ldr	r3, [r0, #0]
 8007d9c:	6882      	ldr	r2, [r0, #8]
 8007d9e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8007da0:	f7fd f97e 	bl	80050a0 <HAL_GetTick>
 8007da4:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8007da6:	6823      	ldr	r3, [r4, #0]
 8007da8:	68da      	ldr	r2, [r3, #12]
 8007daa:	b132      	cbz	r2, 8007dba <HAL_IWDG_Init+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8007dac:	f7fd f978 	bl	80050a0 <HAL_GetTick>
 8007db0:	1b40      	subs	r0, r0, r5
 8007db2:	2830      	cmp	r0, #48	; 0x30
 8007db4:	d9f7      	bls.n	8007da6 <HAL_IWDG_Init+0x28>
    {
      return HAL_TIMEOUT;
 8007db6:	2003      	movs	r0, #3
 8007db8:	e003      	b.n	8007dc2 <HAL_IWDG_Init+0x44>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007dba:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8007dbe:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007dc0:	2000      	movs	r0, #0
}
 8007dc2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007dc4:	2001      	movs	r0, #1
}
 8007dc6:	4770      	bx	lr

08007dc8 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007dc8:	6803      	ldr	r3, [r0, #0]
 8007dca:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8007dce:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8007dd0:	2000      	movs	r0, #0
 8007dd2:	4770      	bx	lr

08007dd4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007dd4:	b510      	push	{r4, lr}
 8007dd6:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8007dd8:	2300      	movs	r3, #0
 8007dda:	9301      	str	r3, [sp, #4]
 8007ddc:	4b19      	ldr	r3, [pc, #100]	; (8007e44 <HAL_PWREx_EnableOverDrive+0x70>)
 8007dde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007de0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007de4:	641a      	str	r2, [r3, #64]	; 0x40
 8007de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dec:	9301      	str	r3, [sp, #4]
 8007dee:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007df0:	4b15      	ldr	r3, [pc, #84]	; (8007e48 <HAL_PWREx_EnableOverDrive+0x74>)
 8007df2:	2201      	movs	r2, #1
 8007df4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007df6:	f7fd f953 	bl	80050a0 <HAL_GetTick>
 8007dfa:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007dfc:	4b13      	ldr	r3, [pc, #76]	; (8007e4c <HAL_PWREx_EnableOverDrive+0x78>)
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007e04:	d108      	bne.n	8007e18 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007e06:	f7fd f94b 	bl	80050a0 <HAL_GetTick>
 8007e0a:	1b00      	subs	r0, r0, r4
 8007e0c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007e10:	d9f4      	bls.n	8007dfc <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8007e12:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8007e14:	b002      	add	sp, #8
 8007e16:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007e18:	4b0d      	ldr	r3, [pc, #52]	; (8007e50 <HAL_PWREx_EnableOverDrive+0x7c>)
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8007e1e:	f7fd f93f 	bl	80050a0 <HAL_GetTick>
 8007e22:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007e24:	4b09      	ldr	r3, [pc, #36]	; (8007e4c <HAL_PWREx_EnableOverDrive+0x78>)
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007e2c:	d107      	bne.n	8007e3e <HAL_PWREx_EnableOverDrive+0x6a>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007e2e:	f7fd f937 	bl	80050a0 <HAL_GetTick>
 8007e32:	1b00      	subs	r0, r0, r4
 8007e34:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007e38:	d9f4      	bls.n	8007e24 <HAL_PWREx_EnableOverDrive+0x50>
      return HAL_TIMEOUT;
 8007e3a:	2003      	movs	r0, #3
 8007e3c:	e7ea      	b.n	8007e14 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8007e3e:	2000      	movs	r0, #0
 8007e40:	e7e8      	b.n	8007e14 <HAL_PWREx_EnableOverDrive+0x40>
 8007e42:	bf00      	nop
 8007e44:	40023800 	.word	0x40023800
 8007e48:	420e0040 	.word	0x420e0040
 8007e4c:	40007000 	.word	0x40007000
 8007e50:	420e0044 	.word	0x420e0044

08007e54 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007e54:	2800      	cmp	r0, #0
 8007e56:	f000 81b9 	beq.w	80081cc <HAL_RCC_OscConfig+0x378>
{
 8007e5a:	b570      	push	{r4, r5, r6, lr}
 8007e5c:	b082      	sub	sp, #8
 8007e5e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e60:	6803      	ldr	r3, [r0, #0]
 8007e62:	f013 0f01 	tst.w	r3, #1
 8007e66:	d03b      	beq.n	8007ee0 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007e68:	4ba6      	ldr	r3, [pc, #664]	; (8008104 <HAL_RCC_OscConfig+0x2b0>)
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f003 030c 	and.w	r3, r3, #12
 8007e70:	2b04      	cmp	r3, #4
 8007e72:	d02c      	beq.n	8007ece <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e74:	4ba3      	ldr	r3, [pc, #652]	; (8008104 <HAL_RCC_OscConfig+0x2b0>)
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007e7c:	2b08      	cmp	r3, #8
 8007e7e:	d021      	beq.n	8007ec4 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e80:	6863      	ldr	r3, [r4, #4]
 8007e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e86:	d04f      	beq.n	8007f28 <HAL_RCC_OscConfig+0xd4>
 8007e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e8c:	d052      	beq.n	8007f34 <HAL_RCC_OscConfig+0xe0>
 8007e8e:	4b9d      	ldr	r3, [pc, #628]	; (8008104 <HAL_RCC_OscConfig+0x2b0>)
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007e96:	601a      	str	r2, [r3, #0]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007e9e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007ea0:	6863      	ldr	r3, [r4, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d050      	beq.n	8007f48 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ea6:	f7fd f8fb 	bl	80050a0 <HAL_GetTick>
 8007eaa:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007eac:	4b95      	ldr	r3, [pc, #596]	; (8008104 <HAL_RCC_OscConfig+0x2b0>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007eb4:	d114      	bne.n	8007ee0 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007eb6:	f7fd f8f3 	bl	80050a0 <HAL_GetTick>
 8007eba:	1b40      	subs	r0, r0, r5
 8007ebc:	2864      	cmp	r0, #100	; 0x64
 8007ebe:	d9f5      	bls.n	8007eac <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8007ec0:	2003      	movs	r0, #3
 8007ec2:	e18a      	b.n	80081da <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ec4:	4b8f      	ldr	r3, [pc, #572]	; (8008104 <HAL_RCC_OscConfig+0x2b0>)
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8007ecc:	d0d8      	beq.n	8007e80 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ece:	4b8d      	ldr	r3, [pc, #564]	; (8008104 <HAL_RCC_OscConfig+0x2b0>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007ed6:	d003      	beq.n	8007ee0 <HAL_RCC_OscConfig+0x8c>
 8007ed8:	6863      	ldr	r3, [r4, #4]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f000 8178 	beq.w	80081d0 <HAL_RCC_OscConfig+0x37c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ee0:	6823      	ldr	r3, [r4, #0]
 8007ee2:	f013 0f02 	tst.w	r3, #2
 8007ee6:	d054      	beq.n	8007f92 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007ee8:	4b86      	ldr	r3, [pc, #536]	; (8008104 <HAL_RCC_OscConfig+0x2b0>)
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	f013 0f0c 	tst.w	r3, #12
 8007ef0:	d03e      	beq.n	8007f70 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ef2:	4b84      	ldr	r3, [pc, #528]	; (8008104 <HAL_RCC_OscConfig+0x2b0>)
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007efa:	2b08      	cmp	r3, #8
 8007efc:	d033      	beq.n	8007f66 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007efe:	68e3      	ldr	r3, [r4, #12]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d067      	beq.n	8007fd4 <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f04:	4b80      	ldr	r3, [pc, #512]	; (8008108 <HAL_RCC_OscConfig+0x2b4>)
 8007f06:	2201      	movs	r2, #1
 8007f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f0a:	f7fd f8c9 	bl	80050a0 <HAL_GetTick>
 8007f0e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f10:	4b7c      	ldr	r3, [pc, #496]	; (8008104 <HAL_RCC_OscConfig+0x2b0>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f013 0f02 	tst.w	r3, #2
 8007f18:	d153      	bne.n	8007fc2 <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f1a:	f7fd f8c1 	bl	80050a0 <HAL_GetTick>
 8007f1e:	1b40      	subs	r0, r0, r5
 8007f20:	2802      	cmp	r0, #2
 8007f22:	d9f5      	bls.n	8007f10 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8007f24:	2003      	movs	r0, #3
 8007f26:	e158      	b.n	80081da <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f28:	4a76      	ldr	r2, [pc, #472]	; (8008104 <HAL_RCC_OscConfig+0x2b0>)
 8007f2a:	6813      	ldr	r3, [r2, #0]
 8007f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f30:	6013      	str	r3, [r2, #0]
 8007f32:	e7b5      	b.n	8007ea0 <HAL_RCC_OscConfig+0x4c>
 8007f34:	4b73      	ldr	r3, [pc, #460]	; (8008104 <HAL_RCC_OscConfig+0x2b0>)
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007f3c:	601a      	str	r2, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007f44:	601a      	str	r2, [r3, #0]
 8007f46:	e7ab      	b.n	8007ea0 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8007f48:	f7fd f8aa 	bl	80050a0 <HAL_GetTick>
 8007f4c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f4e:	4b6d      	ldr	r3, [pc, #436]	; (8008104 <HAL_RCC_OscConfig+0x2b0>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007f56:	d0c3      	beq.n	8007ee0 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f58:	f7fd f8a2 	bl	80050a0 <HAL_GetTick>
 8007f5c:	1b40      	subs	r0, r0, r5
 8007f5e:	2864      	cmp	r0, #100	; 0x64
 8007f60:	d9f5      	bls.n	8007f4e <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8007f62:	2003      	movs	r0, #3
 8007f64:	e139      	b.n	80081da <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f66:	4b67      	ldr	r3, [pc, #412]	; (8008104 <HAL_RCC_OscConfig+0x2b0>)
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8007f6e:	d1c6      	bne.n	8007efe <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f70:	4b64      	ldr	r3, [pc, #400]	; (8008104 <HAL_RCC_OscConfig+0x2b0>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f013 0f02 	tst.w	r3, #2
 8007f78:	d003      	beq.n	8007f82 <HAL_RCC_OscConfig+0x12e>
 8007f7a:	68e3      	ldr	r3, [r4, #12]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	f040 8129 	bne.w	80081d4 <HAL_RCC_OscConfig+0x380>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f82:	4a60      	ldr	r2, [pc, #384]	; (8008104 <HAL_RCC_OscConfig+0x2b0>)
 8007f84:	6813      	ldr	r3, [r2, #0]
 8007f86:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007f8a:	6921      	ldr	r1, [r4, #16]
 8007f8c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007f90:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f92:	6823      	ldr	r3, [r4, #0]
 8007f94:	f013 0f08 	tst.w	r3, #8
 8007f98:	d040      	beq.n	800801c <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f9a:	6963      	ldr	r3, [r4, #20]
 8007f9c:	b363      	cbz	r3, 8007ff8 <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f9e:	4b5b      	ldr	r3, [pc, #364]	; (800810c <HAL_RCC_OscConfig+0x2b8>)
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fa4:	f7fd f87c 	bl	80050a0 <HAL_GetTick>
 8007fa8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007faa:	4b56      	ldr	r3, [pc, #344]	; (8008104 <HAL_RCC_OscConfig+0x2b0>)
 8007fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fae:	f013 0f02 	tst.w	r3, #2
 8007fb2:	d133      	bne.n	800801c <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007fb4:	f7fd f874 	bl	80050a0 <HAL_GetTick>
 8007fb8:	1b40      	subs	r0, r0, r5
 8007fba:	2802      	cmp	r0, #2
 8007fbc:	d9f5      	bls.n	8007faa <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 8007fbe:	2003      	movs	r0, #3
 8007fc0:	e10b      	b.n	80081da <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fc2:	4a50      	ldr	r2, [pc, #320]	; (8008104 <HAL_RCC_OscConfig+0x2b0>)
 8007fc4:	6813      	ldr	r3, [r2, #0]
 8007fc6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007fca:	6921      	ldr	r1, [r4, #16]
 8007fcc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007fd0:	6013      	str	r3, [r2, #0]
 8007fd2:	e7de      	b.n	8007f92 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8007fd4:	4b4c      	ldr	r3, [pc, #304]	; (8008108 <HAL_RCC_OscConfig+0x2b4>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007fda:	f7fd f861 	bl	80050a0 <HAL_GetTick>
 8007fde:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007fe0:	4b48      	ldr	r3, [pc, #288]	; (8008104 <HAL_RCC_OscConfig+0x2b0>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f013 0f02 	tst.w	r3, #2
 8007fe8:	d0d3      	beq.n	8007f92 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007fea:	f7fd f859 	bl	80050a0 <HAL_GetTick>
 8007fee:	1b40      	subs	r0, r0, r5
 8007ff0:	2802      	cmp	r0, #2
 8007ff2:	d9f5      	bls.n	8007fe0 <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 8007ff4:	2003      	movs	r0, #3
 8007ff6:	e0f0      	b.n	80081da <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ff8:	4b44      	ldr	r3, [pc, #272]	; (800810c <HAL_RCC_OscConfig+0x2b8>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ffe:	f7fd f84f 	bl	80050a0 <HAL_GetTick>
 8008002:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008004:	4b3f      	ldr	r3, [pc, #252]	; (8008104 <HAL_RCC_OscConfig+0x2b0>)
 8008006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008008:	f013 0f02 	tst.w	r3, #2
 800800c:	d006      	beq.n	800801c <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800800e:	f7fd f847 	bl	80050a0 <HAL_GetTick>
 8008012:	1b40      	subs	r0, r0, r5
 8008014:	2802      	cmp	r0, #2
 8008016:	d9f5      	bls.n	8008004 <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 8008018:	2003      	movs	r0, #3
 800801a:	e0de      	b.n	80081da <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800801c:	6823      	ldr	r3, [r4, #0]
 800801e:	f013 0f04 	tst.w	r3, #4
 8008022:	d078      	beq.n	8008116 <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008024:	4b37      	ldr	r3, [pc, #220]	; (8008104 <HAL_RCC_OscConfig+0x2b0>)
 8008026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008028:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800802c:	d10d      	bne.n	800804a <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800802e:	2300      	movs	r3, #0
 8008030:	9301      	str	r3, [sp, #4]
 8008032:	4b34      	ldr	r3, [pc, #208]	; (8008104 <HAL_RCC_OscConfig+0x2b0>)
 8008034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008036:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800803a:	641a      	str	r2, [r3, #64]	; 0x40
 800803c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008042:	9301      	str	r3, [sp, #4]
 8008044:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008046:	2501      	movs	r5, #1
 8008048:	e000      	b.n	800804c <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 800804a:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800804c:	4b30      	ldr	r3, [pc, #192]	; (8008110 <HAL_RCC_OscConfig+0x2bc>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008054:	d021      	beq.n	800809a <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008056:	68a3      	ldr	r3, [r4, #8]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d032      	beq.n	80080c2 <HAL_RCC_OscConfig+0x26e>
 800805c:	2b05      	cmp	r3, #5
 800805e:	d036      	beq.n	80080ce <HAL_RCC_OscConfig+0x27a>
 8008060:	4b28      	ldr	r3, [pc, #160]	; (8008104 <HAL_RCC_OscConfig+0x2b0>)
 8008062:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008064:	f022 0201 	bic.w	r2, r2, #1
 8008068:	671a      	str	r2, [r3, #112]	; 0x70
 800806a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800806c:	f022 0204 	bic.w	r2, r2, #4
 8008070:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008072:	68a3      	ldr	r3, [r4, #8]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d034      	beq.n	80080e2 <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008078:	f7fd f812 	bl	80050a0 <HAL_GetTick>
 800807c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800807e:	4b21      	ldr	r3, [pc, #132]	; (8008104 <HAL_RCC_OscConfig+0x2b0>)
 8008080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008082:	f013 0f02 	tst.w	r3, #2
 8008086:	d145      	bne.n	8008114 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008088:	f7fd f80a 	bl	80050a0 <HAL_GetTick>
 800808c:	1b80      	subs	r0, r0, r6
 800808e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008092:	4298      	cmp	r0, r3
 8008094:	d9f3      	bls.n	800807e <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8008096:	2003      	movs	r0, #3
 8008098:	e09f      	b.n	80081da <HAL_RCC_OscConfig+0x386>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800809a:	4a1d      	ldr	r2, [pc, #116]	; (8008110 <HAL_RCC_OscConfig+0x2bc>)
 800809c:	6813      	ldr	r3, [r2, #0]
 800809e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080a2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80080a4:	f7fc fffc 	bl	80050a0 <HAL_GetTick>
 80080a8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080aa:	4b19      	ldr	r3, [pc, #100]	; (8008110 <HAL_RCC_OscConfig+0x2bc>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f413 7f80 	tst.w	r3, #256	; 0x100
 80080b2:	d1d0      	bne.n	8008056 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080b4:	f7fc fff4 	bl	80050a0 <HAL_GetTick>
 80080b8:	1b80      	subs	r0, r0, r6
 80080ba:	2802      	cmp	r0, #2
 80080bc:	d9f5      	bls.n	80080aa <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 80080be:	2003      	movs	r0, #3
 80080c0:	e08b      	b.n	80081da <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80080c2:	4a10      	ldr	r2, [pc, #64]	; (8008104 <HAL_RCC_OscConfig+0x2b0>)
 80080c4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80080c6:	f043 0301 	orr.w	r3, r3, #1
 80080ca:	6713      	str	r3, [r2, #112]	; 0x70
 80080cc:	e7d1      	b.n	8008072 <HAL_RCC_OscConfig+0x21e>
 80080ce:	4b0d      	ldr	r3, [pc, #52]	; (8008104 <HAL_RCC_OscConfig+0x2b0>)
 80080d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80080d2:	f042 0204 	orr.w	r2, r2, #4
 80080d6:	671a      	str	r2, [r3, #112]	; 0x70
 80080d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80080da:	f042 0201 	orr.w	r2, r2, #1
 80080de:	671a      	str	r2, [r3, #112]	; 0x70
 80080e0:	e7c7      	b.n	8008072 <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080e2:	f7fc ffdd 	bl	80050a0 <HAL_GetTick>
 80080e6:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080e8:	4b06      	ldr	r3, [pc, #24]	; (8008104 <HAL_RCC_OscConfig+0x2b0>)
 80080ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ec:	f013 0f02 	tst.w	r3, #2
 80080f0:	d010      	beq.n	8008114 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080f2:	f7fc ffd5 	bl	80050a0 <HAL_GetTick>
 80080f6:	1b80      	subs	r0, r0, r6
 80080f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80080fc:	4298      	cmp	r0, r3
 80080fe:	d9f3      	bls.n	80080e8 <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 8008100:	2003      	movs	r0, #3
 8008102:	e06a      	b.n	80081da <HAL_RCC_OscConfig+0x386>
 8008104:	40023800 	.word	0x40023800
 8008108:	42470000 	.word	0x42470000
 800810c:	42470e80 	.word	0x42470e80
 8008110:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008114:	b9e5      	cbnz	r5, 8008150 <HAL_RCC_OscConfig+0x2fc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008116:	69a3      	ldr	r3, [r4, #24]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d05d      	beq.n	80081d8 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800811c:	4a31      	ldr	r2, [pc, #196]	; (80081e4 <HAL_RCC_OscConfig+0x390>)
 800811e:	6892      	ldr	r2, [r2, #8]
 8008120:	f002 020c 	and.w	r2, r2, #12
 8008124:	2a08      	cmp	r2, #8
 8008126:	d05a      	beq.n	80081de <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008128:	2b02      	cmp	r3, #2
 800812a:	d017      	beq.n	800815c <HAL_RCC_OscConfig+0x308>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800812c:	4b2e      	ldr	r3, [pc, #184]	; (80081e8 <HAL_RCC_OscConfig+0x394>)
 800812e:	2200      	movs	r2, #0
 8008130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008132:	f7fc ffb5 	bl	80050a0 <HAL_GetTick>
 8008136:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008138:	4b2a      	ldr	r3, [pc, #168]	; (80081e4 <HAL_RCC_OscConfig+0x390>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008140:	d042      	beq.n	80081c8 <HAL_RCC_OscConfig+0x374>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008142:	f7fc ffad 	bl	80050a0 <HAL_GetTick>
 8008146:	1b00      	subs	r0, r0, r4
 8008148:	2802      	cmp	r0, #2
 800814a:	d9f5      	bls.n	8008138 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 800814c:	2003      	movs	r0, #3
 800814e:	e044      	b.n	80081da <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008150:	4a24      	ldr	r2, [pc, #144]	; (80081e4 <HAL_RCC_OscConfig+0x390>)
 8008152:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008158:	6413      	str	r3, [r2, #64]	; 0x40
 800815a:	e7dc      	b.n	8008116 <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 800815c:	4b22      	ldr	r3, [pc, #136]	; (80081e8 <HAL_RCC_OscConfig+0x394>)
 800815e:	2200      	movs	r2, #0
 8008160:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008162:	f7fc ff9d 	bl	80050a0 <HAL_GetTick>
 8008166:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008168:	4b1e      	ldr	r3, [pc, #120]	; (80081e4 <HAL_RCC_OscConfig+0x390>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008170:	d006      	beq.n	8008180 <HAL_RCC_OscConfig+0x32c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008172:	f7fc ff95 	bl	80050a0 <HAL_GetTick>
 8008176:	1b40      	subs	r0, r0, r5
 8008178:	2802      	cmp	r0, #2
 800817a:	d9f5      	bls.n	8008168 <HAL_RCC_OscConfig+0x314>
            return HAL_TIMEOUT;
 800817c:	2003      	movs	r0, #3
 800817e:	e02c      	b.n	80081da <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008180:	69e3      	ldr	r3, [r4, #28]
 8008182:	6a22      	ldr	r2, [r4, #32]
 8008184:	4313      	orrs	r3, r2
 8008186:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008188:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800818c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800818e:	0852      	lsrs	r2, r2, #1
 8008190:	3a01      	subs	r2, #1
 8008192:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008196:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008198:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800819c:	4a11      	ldr	r2, [pc, #68]	; (80081e4 <HAL_RCC_OscConfig+0x390>)
 800819e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80081a0:	4b11      	ldr	r3, [pc, #68]	; (80081e8 <HAL_RCC_OscConfig+0x394>)
 80081a2:	2201      	movs	r2, #1
 80081a4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80081a6:	f7fc ff7b 	bl	80050a0 <HAL_GetTick>
 80081aa:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081ac:	4b0d      	ldr	r3, [pc, #52]	; (80081e4 <HAL_RCC_OscConfig+0x390>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80081b4:	d106      	bne.n	80081c4 <HAL_RCC_OscConfig+0x370>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081b6:	f7fc ff73 	bl	80050a0 <HAL_GetTick>
 80081ba:	1b00      	subs	r0, r0, r4
 80081bc:	2802      	cmp	r0, #2
 80081be:	d9f5      	bls.n	80081ac <HAL_RCC_OscConfig+0x358>
            return HAL_TIMEOUT;
 80081c0:	2003      	movs	r0, #3
 80081c2:	e00a      	b.n	80081da <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80081c4:	2000      	movs	r0, #0
 80081c6:	e008      	b.n	80081da <HAL_RCC_OscConfig+0x386>
 80081c8:	2000      	movs	r0, #0
 80081ca:	e006      	b.n	80081da <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 80081cc:	2001      	movs	r0, #1
}
 80081ce:	4770      	bx	lr
        return HAL_ERROR;
 80081d0:	2001      	movs	r0, #1
 80081d2:	e002      	b.n	80081da <HAL_RCC_OscConfig+0x386>
        return HAL_ERROR;
 80081d4:	2001      	movs	r0, #1
 80081d6:	e000      	b.n	80081da <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 80081d8:	2000      	movs	r0, #0
}
 80081da:	b002      	add	sp, #8
 80081dc:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80081de:	2001      	movs	r0, #1
 80081e0:	e7fb      	b.n	80081da <HAL_RCC_OscConfig+0x386>
 80081e2:	bf00      	nop
 80081e4:	40023800 	.word	0x40023800
 80081e8:	42470060 	.word	0x42470060

080081ec <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80081ec:	4b01      	ldr	r3, [pc, #4]	; (80081f4 <HAL_RCC_EnableCSS+0x8>)
 80081ee:	2201      	movs	r2, #1
 80081f0:	601a      	str	r2, [r3, #0]
}
 80081f2:	4770      	bx	lr
 80081f4:	4247004c 	.word	0x4247004c

080081f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80081fa:	4b24      	ldr	r3, [pc, #144]	; (800828c <HAL_RCC_GetSysClockFreq+0x94>)
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	f003 030c 	and.w	r3, r3, #12
 8008202:	2b04      	cmp	r3, #4
 8008204:	d03d      	beq.n	8008282 <HAL_RCC_GetSysClockFreq+0x8a>
 8008206:	2b08      	cmp	r3, #8
 8008208:	d13d      	bne.n	8008286 <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800820a:	4b20      	ldr	r3, [pc, #128]	; (800828c <HAL_RCC_GetSysClockFreq+0x94>)
 800820c:	685a      	ldr	r2, [r3, #4]
 800820e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8008218:	d012      	beq.n	8008240 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800821a:	4b1c      	ldr	r3, [pc, #112]	; (800828c <HAL_RCC_GetSysClockFreq+0x94>)
 800821c:	6859      	ldr	r1, [r3, #4]
 800821e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8008222:	2300      	movs	r3, #0
 8008224:	481a      	ldr	r0, [pc, #104]	; (8008290 <HAL_RCC_GetSysClockFreq+0x98>)
 8008226:	fba1 0100 	umull	r0, r1, r1, r0
 800822a:	f7fc fd3d 	bl	8004ca8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800822e:	4b17      	ldr	r3, [pc, #92]	; (800828c <HAL_RCC_GetSysClockFreq+0x94>)
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8008236:	3301      	adds	r3, #1
 8008238:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800823a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800823e:	e023      	b.n	8008288 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008240:	4b12      	ldr	r3, [pc, #72]	; (800828c <HAL_RCC_GetSysClockFreq+0x94>)
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8008248:	015c      	lsls	r4, r3, #5
 800824a:	2500      	movs	r5, #0
 800824c:	1ae4      	subs	r4, r4, r3
 800824e:	f165 0500 	sbc.w	r5, r5, #0
 8008252:	01ae      	lsls	r6, r5, #6
 8008254:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8008258:	01a7      	lsls	r7, r4, #6
 800825a:	1b38      	subs	r0, r7, r4
 800825c:	eb66 0105 	sbc.w	r1, r6, r5
 8008260:	00cc      	lsls	r4, r1, #3
 8008262:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8008266:	00c5      	lsls	r5, r0, #3
 8008268:	18e8      	adds	r0, r5, r3
 800826a:	f144 0100 	adc.w	r1, r4, #0
 800826e:	028b      	lsls	r3, r1, #10
 8008270:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8008274:	0284      	lsls	r4, r0, #10
 8008276:	4620      	mov	r0, r4
 8008278:	4619      	mov	r1, r3
 800827a:	2300      	movs	r3, #0
 800827c:	f7fc fd14 	bl	8004ca8 <__aeabi_uldivmod>
 8008280:	e7d5      	b.n	800822e <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8008282:	4803      	ldr	r0, [pc, #12]	; (8008290 <HAL_RCC_GetSysClockFreq+0x98>)
 8008284:	e000      	b.n	8008288 <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008286:	4803      	ldr	r0, [pc, #12]	; (8008294 <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8008288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800828a:	bf00      	nop
 800828c:	40023800 	.word	0x40023800
 8008290:	017d7840 	.word	0x017d7840
 8008294:	00f42400 	.word	0x00f42400

08008298 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8008298:	2800      	cmp	r0, #0
 800829a:	f000 809a 	beq.w	80083d2 <HAL_RCC_ClockConfig+0x13a>
{
 800829e:	b570      	push	{r4, r5, r6, lr}
 80082a0:	460d      	mov	r5, r1
 80082a2:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80082a4:	4b4f      	ldr	r3, [pc, #316]	; (80083e4 <HAL_RCC_ClockConfig+0x14c>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 030f 	and.w	r3, r3, #15
 80082ac:	428b      	cmp	r3, r1
 80082ae:	d208      	bcs.n	80082c2 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082b0:	b2cb      	uxtb	r3, r1
 80082b2:	4a4c      	ldr	r2, [pc, #304]	; (80083e4 <HAL_RCC_ClockConfig+0x14c>)
 80082b4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082b6:	6813      	ldr	r3, [r2, #0]
 80082b8:	f003 030f 	and.w	r3, r3, #15
 80082bc:	428b      	cmp	r3, r1
 80082be:	f040 808a 	bne.w	80083d6 <HAL_RCC_ClockConfig+0x13e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082c2:	6823      	ldr	r3, [r4, #0]
 80082c4:	f013 0f02 	tst.w	r3, #2
 80082c8:	d017      	beq.n	80082fa <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082ca:	f013 0f04 	tst.w	r3, #4
 80082ce:	d004      	beq.n	80082da <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80082d0:	4a45      	ldr	r2, [pc, #276]	; (80083e8 <HAL_RCC_ClockConfig+0x150>)
 80082d2:	6893      	ldr	r3, [r2, #8]
 80082d4:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80082d8:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082da:	6823      	ldr	r3, [r4, #0]
 80082dc:	f013 0f08 	tst.w	r3, #8
 80082e0:	d004      	beq.n	80082ec <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80082e2:	4a41      	ldr	r2, [pc, #260]	; (80083e8 <HAL_RCC_ClockConfig+0x150>)
 80082e4:	6893      	ldr	r3, [r2, #8]
 80082e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80082ea:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082ec:	4a3e      	ldr	r2, [pc, #248]	; (80083e8 <HAL_RCC_ClockConfig+0x150>)
 80082ee:	6893      	ldr	r3, [r2, #8]
 80082f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80082f4:	68a1      	ldr	r1, [r4, #8]
 80082f6:	430b      	orrs	r3, r1
 80082f8:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082fa:	6823      	ldr	r3, [r4, #0]
 80082fc:	f013 0f01 	tst.w	r3, #1
 8008300:	d032      	beq.n	8008368 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008302:	6863      	ldr	r3, [r4, #4]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d021      	beq.n	800834c <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008308:	1e9a      	subs	r2, r3, #2
 800830a:	2a01      	cmp	r2, #1
 800830c:	d925      	bls.n	800835a <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800830e:	4a36      	ldr	r2, [pc, #216]	; (80083e8 <HAL_RCC_ClockConfig+0x150>)
 8008310:	6812      	ldr	r2, [r2, #0]
 8008312:	f012 0f02 	tst.w	r2, #2
 8008316:	d060      	beq.n	80083da <HAL_RCC_ClockConfig+0x142>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008318:	4933      	ldr	r1, [pc, #204]	; (80083e8 <HAL_RCC_ClockConfig+0x150>)
 800831a:	688a      	ldr	r2, [r1, #8]
 800831c:	f022 0203 	bic.w	r2, r2, #3
 8008320:	4313      	orrs	r3, r2
 8008322:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8008324:	f7fc febc 	bl	80050a0 <HAL_GetTick>
 8008328:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800832a:	4b2f      	ldr	r3, [pc, #188]	; (80083e8 <HAL_RCC_ClockConfig+0x150>)
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	f003 030c 	and.w	r3, r3, #12
 8008332:	6862      	ldr	r2, [r4, #4]
 8008334:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008338:	d016      	beq.n	8008368 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800833a:	f7fc feb1 	bl	80050a0 <HAL_GetTick>
 800833e:	1b80      	subs	r0, r0, r6
 8008340:	f241 3388 	movw	r3, #5000	; 0x1388
 8008344:	4298      	cmp	r0, r3
 8008346:	d9f0      	bls.n	800832a <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8008348:	2003      	movs	r0, #3
 800834a:	e041      	b.n	80083d0 <HAL_RCC_ClockConfig+0x138>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800834c:	4a26      	ldr	r2, [pc, #152]	; (80083e8 <HAL_RCC_ClockConfig+0x150>)
 800834e:	6812      	ldr	r2, [r2, #0]
 8008350:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8008354:	d1e0      	bne.n	8008318 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8008356:	2001      	movs	r0, #1
 8008358:	e03a      	b.n	80083d0 <HAL_RCC_ClockConfig+0x138>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800835a:	4a23      	ldr	r2, [pc, #140]	; (80083e8 <HAL_RCC_ClockConfig+0x150>)
 800835c:	6812      	ldr	r2, [r2, #0]
 800835e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8008362:	d1d9      	bne.n	8008318 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8008364:	2001      	movs	r0, #1
 8008366:	e033      	b.n	80083d0 <HAL_RCC_ClockConfig+0x138>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008368:	4b1e      	ldr	r3, [pc, #120]	; (80083e4 <HAL_RCC_ClockConfig+0x14c>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 030f 	and.w	r3, r3, #15
 8008370:	42ab      	cmp	r3, r5
 8008372:	d907      	bls.n	8008384 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008374:	b2ea      	uxtb	r2, r5
 8008376:	4b1b      	ldr	r3, [pc, #108]	; (80083e4 <HAL_RCC_ClockConfig+0x14c>)
 8008378:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 030f 	and.w	r3, r3, #15
 8008380:	42ab      	cmp	r3, r5
 8008382:	d12c      	bne.n	80083de <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008384:	6823      	ldr	r3, [r4, #0]
 8008386:	f013 0f04 	tst.w	r3, #4
 800838a:	d006      	beq.n	800839a <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800838c:	4a16      	ldr	r2, [pc, #88]	; (80083e8 <HAL_RCC_ClockConfig+0x150>)
 800838e:	6893      	ldr	r3, [r2, #8]
 8008390:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8008394:	68e1      	ldr	r1, [r4, #12]
 8008396:	430b      	orrs	r3, r1
 8008398:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800839a:	6823      	ldr	r3, [r4, #0]
 800839c:	f013 0f08 	tst.w	r3, #8
 80083a0:	d007      	beq.n	80083b2 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80083a2:	4a11      	ldr	r2, [pc, #68]	; (80083e8 <HAL_RCC_ClockConfig+0x150>)
 80083a4:	6893      	ldr	r3, [r2, #8]
 80083a6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80083aa:	6921      	ldr	r1, [r4, #16]
 80083ac:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80083b0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80083b2:	f7ff ff21 	bl	80081f8 <HAL_RCC_GetSysClockFreq>
 80083b6:	4b0c      	ldr	r3, [pc, #48]	; (80083e8 <HAL_RCC_ClockConfig+0x150>)
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80083be:	4a0b      	ldr	r2, [pc, #44]	; (80083ec <HAL_RCC_ClockConfig+0x154>)
 80083c0:	5cd3      	ldrb	r3, [r2, r3]
 80083c2:	40d8      	lsrs	r0, r3
 80083c4:	4b0a      	ldr	r3, [pc, #40]	; (80083f0 <HAL_RCC_ClockConfig+0x158>)
 80083c6:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80083c8:	2000      	movs	r0, #0
 80083ca:	f7fc fe1f 	bl	800500c <HAL_InitTick>
  return HAL_OK;
 80083ce:	2000      	movs	r0, #0
}
 80083d0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80083d2:	2001      	movs	r0, #1
}
 80083d4:	4770      	bx	lr
      return HAL_ERROR;
 80083d6:	2001      	movs	r0, #1
 80083d8:	e7fa      	b.n	80083d0 <HAL_RCC_ClockConfig+0x138>
        return HAL_ERROR;
 80083da:	2001      	movs	r0, #1
 80083dc:	e7f8      	b.n	80083d0 <HAL_RCC_ClockConfig+0x138>
      return HAL_ERROR;
 80083de:	2001      	movs	r0, #1
 80083e0:	e7f6      	b.n	80083d0 <HAL_RCC_ClockConfig+0x138>
 80083e2:	bf00      	nop
 80083e4:	40023c00 	.word	0x40023c00
 80083e8:	40023800 	.word	0x40023800
 80083ec:	0801c934 	.word	0x0801c934
 80083f0:	2000382c 	.word	0x2000382c

080083f4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80083f4:	4b01      	ldr	r3, [pc, #4]	; (80083fc <HAL_RCC_GetHCLKFreq+0x8>)
 80083f6:	6818      	ldr	r0, [r3, #0]
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	2000382c 	.word	0x2000382c

08008400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008400:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008402:	f7ff fff7 	bl	80083f4 <HAL_RCC_GetHCLKFreq>
 8008406:	4b04      	ldr	r3, [pc, #16]	; (8008418 <HAL_RCC_GetPCLK1Freq+0x18>)
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800840e:	4a03      	ldr	r2, [pc, #12]	; (800841c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8008410:	5cd3      	ldrb	r3, [r2, r3]
}
 8008412:	40d8      	lsrs	r0, r3
 8008414:	bd08      	pop	{r3, pc}
 8008416:	bf00      	nop
 8008418:	40023800 	.word	0x40023800
 800841c:	0801c944 	.word	0x0801c944

08008420 <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8008420:	4770      	bx	lr
	...

08008424 <HAL_RCC_NMI_IRQHandler>:
{
 8008424:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008426:	4b06      	ldr	r3, [pc, #24]	; (8008440 <HAL_RCC_NMI_IRQHandler+0x1c>)
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800842e:	d100      	bne.n	8008432 <HAL_RCC_NMI_IRQHandler+0xe>
}
 8008430:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 8008432:	f7ff fff5 	bl	8008420 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008436:	4b03      	ldr	r3, [pc, #12]	; (8008444 <HAL_RCC_NMI_IRQHandler+0x20>)
 8008438:	2280      	movs	r2, #128	; 0x80
 800843a:	701a      	strb	r2, [r3, #0]
}
 800843c:	e7f8      	b.n	8008430 <HAL_RCC_NMI_IRQHandler+0xc>
 800843e:	bf00      	nop
 8008440:	40023800 	.word	0x40023800
 8008444:	4002380e 	.word	0x4002380e

08008448 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008448:	b530      	push	{r4, r5, lr}
 800844a:	b083      	sub	sp, #12
 800844c:	4604      	mov	r4, r0

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800844e:	6803      	ldr	r3, [r0, #0]
 8008450:	f013 0f03 	tst.w	r3, #3
 8008454:	d114      	bne.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x38>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008456:	6823      	ldr	r3, [r4, #0]
 8008458:	f013 0f0c 	tst.w	r3, #12
 800845c:	d15a      	bne.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800845e:	6823      	ldr	r3, [r4, #0]
 8008460:	f013 0f20 	tst.w	r3, #32
 8008464:	f040 80af 	bne.w	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008468:	6823      	ldr	r3, [r4, #0]
 800846a:	f013 0f10 	tst.w	r3, #16
 800846e:	f000 8111 	beq.w	8008694 <HAL_RCCEx_PeriphCLKConfig+0x24c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008472:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8008476:	4b88      	ldr	r3, [pc, #544]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008478:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800847a:	2000      	movs	r0, #0
}
 800847c:	b003      	add	sp, #12
 800847e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8008480:	4b86      	ldr	r3, [pc, #536]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008482:	2200      	movs	r2, #0
 8008484:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8008486:	f7fc fe0b 	bl	80050a0 <HAL_GetTick>
 800848a:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800848c:	4b84      	ldr	r3, [pc, #528]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8008494:	d006      	beq.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008496:	f7fc fe03 	bl	80050a0 <HAL_GetTick>
 800849a:	1b43      	subs	r3, r0, r5
 800849c:	2b02      	cmp	r3, #2
 800849e:	d9f5      	bls.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x44>
        return HAL_TIMEOUT;
 80084a0:	2003      	movs	r0, #3
 80084a2:	e7eb      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x34>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80084a4:	6823      	ldr	r3, [r4, #0]
 80084a6:	f013 0f01 	tst.w	r3, #1
 80084aa:	d007      	beq.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x74>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80084ac:	6862      	ldr	r2, [r4, #4]
 80084ae:	68a3      	ldr	r3, [r4, #8]
 80084b0:	071b      	lsls	r3, r3, #28
 80084b2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80084b6:	4a7a      	ldr	r2, [pc, #488]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80084b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80084bc:	6823      	ldr	r3, [r4, #0]
 80084be:	f013 0f02 	tst.w	r3, #2
 80084c2:	d015      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80084c4:	4a76      	ldr	r2, [pc, #472]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80084c6:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80084ca:	6860      	ldr	r0, [r4, #4]
 80084cc:	68e3      	ldr	r3, [r4, #12]
 80084ce:	061b      	lsls	r3, r3, #24
 80084d0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80084d4:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80084d8:	430b      	orrs	r3, r1
 80084da:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80084de:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80084e2:	f023 031f 	bic.w	r3, r3, #31
 80084e6:	69e1      	ldr	r1, [r4, #28]
 80084e8:	3901      	subs	r1, #1
 80084ea:	430b      	orrs	r3, r1
 80084ec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLI2S_ENABLE();
 80084f0:	4b6a      	ldr	r3, [pc, #424]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80084f2:	2201      	movs	r2, #1
 80084f4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80084f6:	f7fc fdd3 	bl	80050a0 <HAL_GetTick>
 80084fa:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80084fc:	4b68      	ldr	r3, [pc, #416]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8008504:	d1a7      	bne.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008506:	f7fc fdcb 	bl	80050a0 <HAL_GetTick>
 800850a:	1b40      	subs	r0, r0, r5
 800850c:	2802      	cmp	r0, #2
 800850e:	d9f5      	bls.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0xb4>
        return HAL_TIMEOUT;
 8008510:	2003      	movs	r0, #3
 8008512:	e7b3      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x34>
    __HAL_RCC_PLLSAI_DISABLE();
 8008514:	4b63      	ldr	r3, [pc, #396]	; (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008516:	2200      	movs	r2, #0
 8008518:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800851a:	f7fc fdc1 	bl	80050a0 <HAL_GetTick>
 800851e:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008520:	4b5f      	ldr	r3, [pc, #380]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8008528:	d006      	beq.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800852a:	f7fc fdb9 	bl	80050a0 <HAL_GetTick>
 800852e:	1b43      	subs	r3, r0, r5
 8008530:	2b02      	cmp	r3, #2
 8008532:	d9f5      	bls.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        return HAL_TIMEOUT;
 8008534:	2003      	movs	r0, #3
 8008536:	e7a1      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x34>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008538:	6823      	ldr	r3, [r4, #0]
 800853a:	f013 0f04 	tst.w	r3, #4
 800853e:	d016      	beq.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x126>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008540:	4a57      	ldr	r2, [pc, #348]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008542:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008546:	6920      	ldr	r0, [r4, #16]
 8008548:	6963      	ldr	r3, [r4, #20]
 800854a:	061b      	lsls	r3, r3, #24
 800854c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8008550:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8008554:	430b      	orrs	r3, r1
 8008556:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800855a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800855e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8008562:	6a21      	ldr	r1, [r4, #32]
 8008564:	3901      	subs	r1, #1
 8008566:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800856a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800856e:	6823      	ldr	r3, [r4, #0]
 8008570:	f013 0f08 	tst.w	r3, #8
 8008574:	d014      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008576:	4a4a      	ldr	r2, [pc, #296]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008578:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800857c:	6921      	ldr	r1, [r4, #16]
 800857e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8008582:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8008586:	69a1      	ldr	r1, [r4, #24]
 8008588:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800858c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008590:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8008594:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008598:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800859a:	430b      	orrs	r3, r1
 800859c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 80085a0:	4b40      	ldr	r3, [pc, #256]	; (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80085a2:	2201      	movs	r2, #1
 80085a4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80085a6:	f7fc fd7b 	bl	80050a0 <HAL_GetTick>
 80085aa:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80085ac:	4b3c      	ldr	r3, [pc, #240]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80085b4:	f47f af53 	bne.w	800845e <HAL_RCCEx_PeriphCLKConfig+0x16>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80085b8:	f7fc fd72 	bl	80050a0 <HAL_GetTick>
 80085bc:	1b40      	subs	r0, r0, r5
 80085be:	2802      	cmp	r0, #2
 80085c0:	d9f4      	bls.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x164>
        return HAL_TIMEOUT;
 80085c2:	2003      	movs	r0, #3
 80085c4:	e75a      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x34>
    __HAL_RCC_PWR_CLK_ENABLE();
 80085c6:	2300      	movs	r3, #0
 80085c8:	9301      	str	r3, [sp, #4]
 80085ca:	4b35      	ldr	r3, [pc, #212]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80085cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80085d2:	641a      	str	r2, [r3, #64]	; 0x40
 80085d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085da:	9301      	str	r3, [sp, #4]
 80085dc:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80085de:	4a32      	ldr	r2, [pc, #200]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085e0:	6813      	ldr	r3, [r2, #0]
 80085e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085e6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80085e8:	f7fc fd5a 	bl	80050a0 <HAL_GetTick>
 80085ec:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80085ee:	4b2e      	ldr	r3, [pc, #184]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80085f6:	d106      	bne.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x1be>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80085f8:	f7fc fd52 	bl	80050a0 <HAL_GetTick>
 80085fc:	1b40      	subs	r0, r0, r5
 80085fe:	2802      	cmp	r0, #2
 8008600:	d9f5      	bls.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
        return HAL_TIMEOUT;
 8008602:	2003      	movs	r0, #3
 8008604:	e73a      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x34>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008606:	4b26      	ldr	r3, [pc, #152]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800860a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800860e:	d012      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008610:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008612:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8008616:	429a      	cmp	r2, r3
 8008618:	d00d      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800861a:	4b21      	ldr	r3, [pc, #132]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800861c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800861e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8008622:	4922      	ldr	r1, [pc, #136]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008624:	2001      	movs	r0, #1
 8008626:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008628:	2000      	movs	r0, #0
 800862a:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 800862c:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800862e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008630:	f013 0f01 	tst.w	r3, #1
 8008634:	d112      	bne.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x214>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008636:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008638:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800863c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8008640:	d01d      	beq.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x236>
 8008642:	4a17      	ldr	r2, [pc, #92]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008644:	6893      	ldr	r3, [r2, #8]
 8008646:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800864a:	6093      	str	r3, [r2, #8]
 800864c:	4914      	ldr	r1, [pc, #80]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800864e:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8008650:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008652:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8008656:	4313      	orrs	r3, r2
 8008658:	670b      	str	r3, [r1, #112]	; 0x70
 800865a:	e705      	b.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 800865c:	f7fc fd20 	bl	80050a0 <HAL_GetTick>
 8008660:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008662:	4b0f      	ldr	r3, [pc, #60]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008666:	f013 0f02 	tst.w	r3, #2
 800866a:	d1e4      	bne.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800866c:	f7fc fd18 	bl	80050a0 <HAL_GetTick>
 8008670:	1b40      	subs	r0, r0, r5
 8008672:	f241 3388 	movw	r3, #5000	; 0x1388
 8008676:	4298      	cmp	r0, r3
 8008678:	d9f3      	bls.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x21a>
            return HAL_TIMEOUT;
 800867a:	2003      	movs	r0, #3
 800867c:	e6fe      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x34>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800867e:	4908      	ldr	r1, [pc, #32]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008680:	688a      	ldr	r2, [r1, #8]
 8008682:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8008686:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800868a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800868e:	4313      	orrs	r3, r2
 8008690:	608b      	str	r3, [r1, #8]
 8008692:	e7db      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x204>
  return HAL_OK;
 8008694:	2000      	movs	r0, #0
 8008696:	e6f1      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x34>
 8008698:	424711e0 	.word	0x424711e0
 800869c:	42470068 	.word	0x42470068
 80086a0:	40023800 	.word	0x40023800
 80086a4:	42470070 	.word	0x42470070
 80086a8:	40007000 	.word	0x40007000
 80086ac:	42470e40 	.word	0x42470e40

080086b0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80086b0:	b510      	push	{r4, lr}
 80086b2:	4604      	mov	r4, r0
  if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRA))
 80086b4:	6803      	ldr	r3, [r0, #0]
 80086b6:	68da      	ldr	r2, [r3, #12]
 80086b8:	f412 7f80 	tst.w	r2, #256	; 0x100
 80086bc:	d003      	beq.n	80086c6 <HAL_RTC_AlarmIRQHandler+0x16>
  {
    /* Get the status of the Interrupt */
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRA) != (uint32_t)RESET)
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80086c4:	d10f      	bne.n	80086e6 <HAL_RTC_AlarmIRQHandler+0x36>
      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
    }
  }

  if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRB))
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	68da      	ldr	r2, [r3, #12]
 80086ca:	f412 7f00 	tst.w	r2, #512	; 0x200
 80086ce:	d003      	beq.n	80086d8 <HAL_RTC_AlarmIRQHandler+0x28>
  {
    /* Get the status of the Interrupt */
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRB) != (uint32_t)RESET)
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80086d6:	d10f      	bne.n	80086f8 <HAL_RTC_AlarmIRQHandler+0x48>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80086d8:	4b0c      	ldr	r3, [pc, #48]	; (800870c <HAL_RTC_AlarmIRQHandler+0x5c>)
 80086da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80086de:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80086e0:	2301      	movs	r3, #1
 80086e2:	7763      	strb	r3, [r4, #29]
}
 80086e4:	bd10      	pop	{r4, pc}
      HAL_RTC_AlarmAEventCallback(hrtc);
 80086e6:	f00c faa6 	bl	8014c36 <HAL_RTC_AlarmAEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 80086ea:	6822      	ldr	r2, [r4, #0]
 80086ec:	68d3      	ldr	r3, [r2, #12]
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	f463 73c0 	orn	r3, r3, #384	; 0x180
 80086f4:	60d3      	str	r3, [r2, #12]
 80086f6:	e7e6      	b.n	80086c6 <HAL_RTC_AlarmIRQHandler+0x16>
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80086f8:	4620      	mov	r0, r4
 80086fa:	f000 fb64 	bl	8008dc6 <HAL_RTCEx_AlarmBEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 80086fe:	6822      	ldr	r2, [r4, #0]
 8008700:	68d3      	ldr	r3, [r2, #12]
 8008702:	b2db      	uxtb	r3, r3
 8008704:	f463 7320 	orn	r3, r3, #640	; 0x280
 8008708:	60d3      	str	r3, [r2, #12]
 800870a:	e7e5      	b.n	80086d8 <HAL_RTC_AlarmIRQHandler+0x28>
 800870c:	40013c00 	.word	0x40013c00

08008710 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008714:	6802      	ldr	r2, [r0, #0]
 8008716:	68d3      	ldr	r3, [r2, #12]
 8008718:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800871c:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800871e:	f7fc fcbf 	bl	80050a0 <HAL_GetTick>
 8008722:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008724:	6823      	ldr	r3, [r4, #0]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	f013 0f20 	tst.w	r3, #32
 800872c:	d107      	bne.n	800873e <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800872e:	f7fc fcb7 	bl	80050a0 <HAL_GetTick>
 8008732:	1b40      	subs	r0, r0, r5
 8008734:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008738:	d9f4      	bls.n	8008724 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 800873a:	2003      	movs	r0, #3
 800873c:	e000      	b.n	8008740 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 800873e:	2000      	movs	r0, #0
}
 8008740:	bd38      	pop	{r3, r4, r5, pc}

08008742 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008742:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008744:	6803      	ldr	r3, [r0, #0]
 8008746:	68da      	ldr	r2, [r3, #12]
 8008748:	f012 0f40 	tst.w	r2, #64	; 0x40
 800874c:	d001      	beq.n	8008752 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800874e:	2000      	movs	r0, #0
}
 8008750:	bd38      	pop	{r3, r4, r5, pc}
 8008752:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008754:	f04f 32ff 	mov.w	r2, #4294967295
 8008758:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800875a:	f7fc fca1 	bl	80050a0 <HAL_GetTick>
 800875e:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008760:	6823      	ldr	r3, [r4, #0]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008768:	d107      	bne.n	800877a <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800876a:	f7fc fc99 	bl	80050a0 <HAL_GetTick>
 800876e:	1b43      	subs	r3, r0, r5
 8008770:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008774:	d9f4      	bls.n	8008760 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8008776:	2003      	movs	r0, #3
 8008778:	e7ea      	b.n	8008750 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 800877a:	2000      	movs	r0, #0
 800877c:	e7e8      	b.n	8008750 <RTC_EnterInitMode+0xe>

0800877e <HAL_RTC_Init>:
{
 800877e:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8008780:	2800      	cmp	r0, #0
 8008782:	d05c      	beq.n	800883e <HAL_RTC_Init+0xc0>
 8008784:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008786:	7f43      	ldrb	r3, [r0, #29]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d041      	beq.n	8008810 <HAL_RTC_Init+0x92>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800878c:	2302      	movs	r3, #2
 800878e:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008790:	6823      	ldr	r3, [r4, #0]
 8008792:	22ca      	movs	r2, #202	; 0xca
 8008794:	625a      	str	r2, [r3, #36]	; 0x24
 8008796:	6823      	ldr	r3, [r4, #0]
 8008798:	2253      	movs	r2, #83	; 0x53
 800879a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800879c:	4620      	mov	r0, r4
 800879e:	f7ff ffd0 	bl	8008742 <RTC_EnterInitMode>
 80087a2:	4605      	mov	r5, r0
 80087a4:	2800      	cmp	r0, #0
 80087a6:	d137      	bne.n	8008818 <HAL_RTC_Init+0x9a>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80087a8:	6822      	ldr	r2, [r4, #0]
 80087aa:	6893      	ldr	r3, [r2, #8]
 80087ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80087b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087b4:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80087b6:	6821      	ldr	r1, [r4, #0]
 80087b8:	688a      	ldr	r2, [r1, #8]
 80087ba:	6863      	ldr	r3, [r4, #4]
 80087bc:	6920      	ldr	r0, [r4, #16]
 80087be:	4303      	orrs	r3, r0
 80087c0:	6960      	ldr	r0, [r4, #20]
 80087c2:	4303      	orrs	r3, r0
 80087c4:	4313      	orrs	r3, r2
 80087c6:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80087c8:	6823      	ldr	r3, [r4, #0]
 80087ca:	68e2      	ldr	r2, [r4, #12]
 80087cc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80087ce:	6822      	ldr	r2, [r4, #0]
 80087d0:	6913      	ldr	r3, [r2, #16]
 80087d2:	68a1      	ldr	r1, [r4, #8]
 80087d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80087d8:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80087da:	6822      	ldr	r2, [r4, #0]
 80087dc:	68d3      	ldr	r3, [r2, #12]
 80087de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087e2:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80087e4:	6823      	ldr	r3, [r4, #0]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	f013 0f20 	tst.w	r3, #32
 80087ec:	d01b      	beq.n	8008826 <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80087ee:	6822      	ldr	r2, [r4, #0]
 80087f0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80087f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087f6:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80087f8:	6822      	ldr	r2, [r4, #0]
 80087fa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80087fc:	69a1      	ldr	r1, [r4, #24]
 80087fe:	430b      	orrs	r3, r1
 8008800:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008802:	6823      	ldr	r3, [r4, #0]
 8008804:	22ff      	movs	r2, #255	; 0xff
 8008806:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8008808:	2301      	movs	r3, #1
 800880a:	7763      	strb	r3, [r4, #29]
}
 800880c:	4628      	mov	r0, r5
 800880e:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8008810:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8008812:	f00b fae9 	bl	8013de8 <HAL_RTC_MspInit>
 8008816:	e7b9      	b.n	800878c <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008818:	6823      	ldr	r3, [r4, #0]
 800881a:	22ff      	movs	r2, #255	; 0xff
 800881c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800881e:	2304      	movs	r3, #4
 8008820:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8008822:	2501      	movs	r5, #1
 8008824:	e7f2      	b.n	800880c <HAL_RTC_Init+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008826:	4620      	mov	r0, r4
 8008828:	f7ff ff72 	bl	8008710 <HAL_RTC_WaitForSynchro>
 800882c:	2800      	cmp	r0, #0
 800882e:	d0de      	beq.n	80087ee <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008830:	6823      	ldr	r3, [r4, #0]
 8008832:	22ff      	movs	r2, #255	; 0xff
 8008834:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008836:	2304      	movs	r3, #4
 8008838:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 800883a:	2501      	movs	r5, #1
 800883c:	e7e6      	b.n	800880c <HAL_RTC_Init+0x8e>
     return HAL_ERROR;
 800883e:	2501      	movs	r5, #1
 8008840:	e7e4      	b.n	800880c <HAL_RTC_Init+0x8e>

08008842 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8008842:	2300      	movs	r3, #0

  while(Value >= 10U)
 8008844:	2809      	cmp	r0, #9
 8008846:	d903      	bls.n	8008850 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
 8008848:	3301      	adds	r3, #1
    Value -= 10U;
 800884a:	380a      	subs	r0, #10
 800884c:	b2c0      	uxtb	r0, r0
 800884e:	e7f9      	b.n	8008844 <RTC_ByteToBcd2+0x2>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8008850:	011b      	lsls	r3, r3, #4
 8008852:	b2db      	uxtb	r3, r3
}
 8008854:	4318      	orrs	r0, r3
 8008856:	4770      	bx	lr

08008858 <HAL_RTC_SetTime>:
{
 8008858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800885a:	7f03      	ldrb	r3, [r0, #28]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d078      	beq.n	8008952 <HAL_RTC_SetTime+0xfa>
 8008860:	4604      	mov	r4, r0
 8008862:	460e      	mov	r6, r1
 8008864:	2301      	movs	r3, #1
 8008866:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008868:	2302      	movs	r3, #2
 800886a:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 800886c:	2a00      	cmp	r2, #0
 800886e:	d147      	bne.n	8008900 <HAL_RTC_SetTime+0xa8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008870:	6803      	ldr	r3, [r0, #0]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008878:	d101      	bne.n	800887e <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00U;
 800887a:	2300      	movs	r3, #0
 800887c:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800887e:	7830      	ldrb	r0, [r6, #0]
 8008880:	f7ff ffdf 	bl	8008842 <RTC_ByteToBcd2>
 8008884:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008886:	7870      	ldrb	r0, [r6, #1]
 8008888:	f7ff ffdb 	bl	8008842 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800888c:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008890:	78b0      	ldrb	r0, [r6, #2]
 8008892:	f7ff ffd6 	bl	8008842 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008896:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8008898:	78f0      	ldrb	r0, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800889a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800889e:	6823      	ldr	r3, [r4, #0]
 80088a0:	22ca      	movs	r2, #202	; 0xca
 80088a2:	625a      	str	r2, [r3, #36]	; 0x24
 80088a4:	6823      	ldr	r3, [r4, #0]
 80088a6:	2253      	movs	r2, #83	; 0x53
 80088a8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80088aa:	4620      	mov	r0, r4
 80088ac:	f7ff ff49 	bl	8008742 <RTC_EnterInitMode>
 80088b0:	4607      	mov	r7, r0
 80088b2:	2800      	cmp	r0, #0
 80088b4:	d136      	bne.n	8008924 <HAL_RTC_SetTime+0xcc>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80088b6:	6823      	ldr	r3, [r4, #0]
 80088b8:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 80088bc:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 80088c0:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80088c2:	6822      	ldr	r2, [r4, #0]
 80088c4:	6893      	ldr	r3, [r2, #8]
 80088c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088ca:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80088cc:	6821      	ldr	r1, [r4, #0]
 80088ce:	688b      	ldr	r3, [r1, #8]
 80088d0:	68f2      	ldr	r2, [r6, #12]
 80088d2:	6930      	ldr	r0, [r6, #16]
 80088d4:	4302      	orrs	r2, r0
 80088d6:	4313      	orrs	r3, r2
 80088d8:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80088da:	6822      	ldr	r2, [r4, #0]
 80088dc:	68d3      	ldr	r3, [r2, #12]
 80088de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088e2:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80088e4:	6823      	ldr	r3, [r4, #0]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	f013 0f20 	tst.w	r3, #32
 80088ec:	d023      	beq.n	8008936 <HAL_RTC_SetTime+0xde>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088ee:	6823      	ldr	r3, [r4, #0]
 80088f0:	22ff      	movs	r2, #255	; 0xff
 80088f2:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80088f4:	2301      	movs	r3, #1
 80088f6:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc);
 80088f8:	2300      	movs	r3, #0
 80088fa:	7723      	strb	r3, [r4, #28]
}
 80088fc:	4638      	mov	r0, r7
 80088fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008900:	6803      	ldr	r3, [r0, #0]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008908:	d101      	bne.n	800890e <HAL_RTC_SetTime+0xb6>
      sTime->TimeFormat = 0x00U;
 800890a:	2300      	movs	r3, #0
 800890c:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800890e:	7835      	ldrb	r5, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008910:	7870      	ldrb	r0, [r6, #1]
 8008912:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008914:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8008918:	78b5      	ldrb	r5, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800891a:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800891c:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800891e:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8008922:	e7bc      	b.n	800889e <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008924:	6823      	ldr	r3, [r4, #0]
 8008926:	22ff      	movs	r2, #255	; 0xff
 8008928:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800892a:	2304      	movs	r3, #4
 800892c:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 800892e:	2300      	movs	r3, #0
 8008930:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8008932:	2701      	movs	r7, #1
 8008934:	e7e2      	b.n	80088fc <HAL_RTC_SetTime+0xa4>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008936:	4620      	mov	r0, r4
 8008938:	f7ff feea 	bl	8008710 <HAL_RTC_WaitForSynchro>
 800893c:	2800      	cmp	r0, #0
 800893e:	d0d6      	beq.n	80088ee <HAL_RTC_SetTime+0x96>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008940:	6823      	ldr	r3, [r4, #0]
 8008942:	22ff      	movs	r2, #255	; 0xff
 8008944:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008946:	2304      	movs	r3, #4
 8008948:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 800894a:	2300      	movs	r3, #0
 800894c:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 800894e:	2701      	movs	r7, #1
 8008950:	e7d4      	b.n	80088fc <HAL_RTC_SetTime+0xa4>
  __HAL_LOCK(hrtc);
 8008952:	2702      	movs	r7, #2
 8008954:	e7d2      	b.n	80088fc <HAL_RTC_SetTime+0xa4>

08008956 <HAL_RTC_SetDate>:
{
 8008956:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8008958:	7f03      	ldrb	r3, [r0, #28]
 800895a:	2b01      	cmp	r3, #1
 800895c:	d066      	beq.n	8008a2c <HAL_RTC_SetDate+0xd6>
 800895e:	4604      	mov	r4, r0
 8008960:	460e      	mov	r6, r1
 8008962:	2301      	movs	r3, #1
 8008964:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008966:	2302      	movs	r3, #2
 8008968:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800896a:	b93a      	cbnz	r2, 800897c <HAL_RTC_SetDate+0x26>
 800896c:	784b      	ldrb	r3, [r1, #1]
 800896e:	f013 0f10 	tst.w	r3, #16
 8008972:	d003      	beq.n	800897c <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008974:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8008978:	330a      	adds	r3, #10
 800897a:	704b      	strb	r3, [r1, #1]
  if(Format == RTC_FORMAT_BIN)
 800897c:	2a00      	cmp	r2, #0
 800897e:	d133      	bne.n	80089e8 <HAL_RTC_SetDate+0x92>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008980:	78f0      	ldrb	r0, [r6, #3]
 8008982:	f7ff ff5e 	bl	8008842 <RTC_ByteToBcd2>
 8008986:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008988:	7870      	ldrb	r0, [r6, #1]
 800898a:	f7ff ff5a 	bl	8008842 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800898e:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008992:	78b0      	ldrb	r0, [r6, #2]
 8008994:	f7ff ff55 	bl	8008842 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008998:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13U));
 800899a:	7830      	ldrb	r0, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800899c:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089a0:	6823      	ldr	r3, [r4, #0]
 80089a2:	22ca      	movs	r2, #202	; 0xca
 80089a4:	625a      	str	r2, [r3, #36]	; 0x24
 80089a6:	6823      	ldr	r3, [r4, #0]
 80089a8:	2253      	movs	r2, #83	; 0x53
 80089aa:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80089ac:	4620      	mov	r0, r4
 80089ae:	f7ff fec8 	bl	8008742 <RTC_EnterInitMode>
 80089b2:	4606      	mov	r6, r0
 80089b4:	bb18      	cbnz	r0, 80089fe <HAL_RTC_SetDate+0xa8>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80089b6:	6823      	ldr	r3, [r4, #0]
 80089b8:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 80089bc:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 80089c0:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80089c2:	6822      	ldr	r2, [r4, #0]
 80089c4:	68d3      	ldr	r3, [r2, #12]
 80089c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089ca:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80089cc:	6823      	ldr	r3, [r4, #0]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	f013 0f20 	tst.w	r3, #32
 80089d4:	d01c      	beq.n	8008a10 <HAL_RTC_SetDate+0xba>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	22ff      	movs	r2, #255	; 0xff
 80089da:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80089dc:	2301      	movs	r3, #1
 80089de:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80089e0:	2300      	movs	r3, #0
 80089e2:	7723      	strb	r3, [r4, #28]
}
 80089e4:	4630      	mov	r0, r6
 80089e6:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80089e8:	78f5      	ldrb	r5, [r6, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 80089ea:	7870      	ldrb	r0, [r6, #1]
 80089ec:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80089ee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
                  ((uint32_t)sDate->Date) | \
 80089f2:	78b5      	ldrb	r5, [r6, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80089f4:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13U));
 80089f6:	7835      	ldrb	r5, [r6, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80089f8:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 80089fc:	e7d0      	b.n	80089a0 <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089fe:	6823      	ldr	r3, [r4, #0]
 8008a00:	22ff      	movs	r2, #255	; 0xff
 8008a02:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008a04:	2304      	movs	r3, #4
 8008a06:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8008a08:	2300      	movs	r3, #0
 8008a0a:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8008a0c:	2601      	movs	r6, #1
 8008a0e:	e7e9      	b.n	80089e4 <HAL_RTC_SetDate+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a10:	4620      	mov	r0, r4
 8008a12:	f7ff fe7d 	bl	8008710 <HAL_RTC_WaitForSynchro>
 8008a16:	2800      	cmp	r0, #0
 8008a18:	d0dd      	beq.n	80089d6 <HAL_RTC_SetDate+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a1a:	6823      	ldr	r3, [r4, #0]
 8008a1c:	22ff      	movs	r2, #255	; 0xff
 8008a1e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008a20:	2304      	movs	r3, #4
 8008a22:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8008a24:	2300      	movs	r3, #0
 8008a26:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8008a28:	2601      	movs	r6, #1
 8008a2a:	e7db      	b.n	80089e4 <HAL_RTC_SetDate+0x8e>
 __HAL_LOCK(hrtc);
 8008a2c:	2602      	movs	r6, #2
 8008a2e:	e7d9      	b.n	80089e4 <HAL_RTC_SetDate+0x8e>

08008a30 <HAL_RTC_SetAlarm_IT>:
{
 8008a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a32:	b083      	sub	sp, #12
 8008a34:	460d      	mov	r5, r1
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8008a36:	4b63      	ldr	r3, [pc, #396]	; (8008bc4 <HAL_RTC_SetAlarm_IT+0x194>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4963      	ldr	r1, [pc, #396]	; (8008bc8 <HAL_RTC_SetAlarm_IT+0x198>)
 8008a3c:	fba1 1303 	umull	r1, r3, r1, r3
 8008a40:	0adb      	lsrs	r3, r3, #11
 8008a42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008a46:	fb01 f303 	mul.w	r3, r1, r3
 8008a4a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hrtc);
 8008a4c:	7f03      	ldrb	r3, [r0, #28]
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	f000 80b5 	beq.w	8008bbe <HAL_RTC_SetAlarm_IT+0x18e>
 8008a54:	4604      	mov	r4, r0
 8008a56:	2301      	movs	r3, #1
 8008a58:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a5a:	2302      	movs	r3, #2
 8008a5c:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8008a5e:	2a00      	cmp	r2, #0
 8008a60:	d161      	bne.n	8008b26 <HAL_RTC_SetAlarm_IT+0xf6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008a62:	6803      	ldr	r3, [r0, #0]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008a6a:	d101      	bne.n	8008a70 <HAL_RTC_SetAlarm_IT+0x40>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	70eb      	strb	r3, [r5, #3]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8008a70:	69ef      	ldr	r7, [r5, #28]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008a72:	7828      	ldrb	r0, [r5, #0]
 8008a74:	f7ff fee5 	bl	8008842 <RTC_ByteToBcd2>
 8008a78:	0406      	lsls	r6, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008a7a:	7868      	ldrb	r0, [r5, #1]
 8008a7c:	f7ff fee1 	bl	8008842 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008a80:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008a84:	78a8      	ldrb	r0, [r5, #2]
 8008a86:	f7ff fedc 	bl	8008842 <RTC_ByteToBcd2>
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008a8a:	4306      	orrs	r6, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008a8c:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008a8e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008a92:	f895 0020 	ldrb.w	r0, [r5, #32]
 8008a96:	f7ff fed4 	bl	8008842 <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008a9a:	ea46 6600 	orr.w	r6, r6, r0, lsl #24
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008a9e:	433e      	orrs	r6, r7
              ((uint32_t)sAlarm->AlarmMask));
 8008aa0:	696b      	ldr	r3, [r5, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008aa2:	431e      	orrs	r6, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008aa4:	6868      	ldr	r0, [r5, #4]
 8008aa6:	69ab      	ldr	r3, [r5, #24]
 8008aa8:	4318      	orrs	r0, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008aaa:	6823      	ldr	r3, [r4, #0]
 8008aac:	22ca      	movs	r2, #202	; 0xca
 8008aae:	625a      	str	r2, [r3, #36]	; 0x24
 8008ab0:	6823      	ldr	r3, [r4, #0]
 8008ab2:	2253      	movs	r2, #83	; 0x53
 8008ab4:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008ab6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008abc:	d04d      	beq.n	8008b5a <HAL_RTC_SetAlarm_IT+0x12a>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008abe:	6822      	ldr	r2, [r4, #0]
 8008ac0:	6893      	ldr	r3, [r2, #8]
 8008ac2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ac6:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008ac8:	6822      	ldr	r2, [r4, #0]
 8008aca:	68d3      	ldr	r3, [r2, #12]
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	f463 7320 	orn	r3, r3, #640	; 0x280
 8008ad2:	60d3      	str	r3, [r2, #12]
      if (count-- == 0U)
 8008ad4:	9b01      	ldr	r3, [sp, #4]
 8008ad6:	1e5a      	subs	r2, r3, #1
 8008ad8:	9201      	str	r2, [sp, #4]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d067      	beq.n	8008bae <HAL_RTC_SetAlarm_IT+0x17e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8008ade:	6823      	ldr	r3, [r4, #0]
 8008ae0:	68da      	ldr	r2, [r3, #12]
 8008ae2:	f012 0f02 	tst.w	r2, #2
 8008ae6:	d0f5      	beq.n	8008ad4 <HAL_RTC_SetAlarm_IT+0xa4>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008ae8:	621e      	str	r6, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008aea:	6823      	ldr	r3, [r4, #0]
 8008aec:	6498      	str	r0, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008aee:	6822      	ldr	r2, [r4, #0]
 8008af0:	6893      	ldr	r3, [r2, #8]
 8008af2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008af6:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8008af8:	6822      	ldr	r2, [r4, #0]
 8008afa:	6893      	ldr	r3, [r2, #8]
 8008afc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008b00:	6093      	str	r3, [r2, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8008b02:	4b32      	ldr	r3, [pc, #200]	; (8008bcc <HAL_RTC_SetAlarm_IT+0x19c>)
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008b0a:	601a      	str	r2, [r3, #0]
  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8008b0c:	689a      	ldr	r2, [r3, #8]
 8008b0e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008b12:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b14:	6823      	ldr	r3, [r4, #0]
 8008b16:	22ff      	movs	r2, #255	; 0xff
 8008b18:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hrtc);
 8008b1e:	2000      	movs	r0, #0
 8008b20:	7720      	strb	r0, [r4, #28]
}
 8008b22:	b003      	add	sp, #12
 8008b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008b26:	6803      	ldr	r3, [r0, #0]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008b2e:	d101      	bne.n	8008b34 <HAL_RTC_SetAlarm_IT+0x104>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008b30:	2300      	movs	r3, #0
 8008b32:	70eb      	strb	r3, [r5, #3]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8008b34:	69ea      	ldr	r2, [r5, #28]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008b36:	7829      	ldrb	r1, [r5, #0]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008b38:	786b      	ldrb	r3, [r5, #1]
 8008b3a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008b3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008b40:	78a9      	ldrb	r1, [r5, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008b42:	430b      	orrs	r3, r1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008b44:	78e9      	ldrb	r1, [r5, #3]
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008b46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008b4a:	f895 1020 	ldrb.w	r1, [r5, #32]
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008b4e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008b52:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmMask));
 8008b54:	696e      	ldr	r6, [r5, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008b56:	431e      	orrs	r6, r3
 8008b58:	e7a4      	b.n	8008aa4 <HAL_RTC_SetAlarm_IT+0x74>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008b5a:	6822      	ldr	r2, [r4, #0]
 8008b5c:	6893      	ldr	r3, [r2, #8]
 8008b5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b62:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008b64:	6822      	ldr	r2, [r4, #0]
 8008b66:	68d3      	ldr	r3, [r2, #12]
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	f463 73c0 	orn	r3, r3, #384	; 0x180
 8008b6e:	60d3      	str	r3, [r2, #12]
      if (count-- == 0U)
 8008b70:	9b01      	ldr	r3, [sp, #4]
 8008b72:	1e5a      	subs	r2, r3, #1
 8008b74:	9201      	str	r2, [sp, #4]
 8008b76:	b193      	cbz	r3, 8008b9e <HAL_RTC_SetAlarm_IT+0x16e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8008b78:	6823      	ldr	r3, [r4, #0]
 8008b7a:	68d9      	ldr	r1, [r3, #12]
 8008b7c:	f011 0f01 	tst.w	r1, #1
 8008b80:	d0f6      	beq.n	8008b70 <HAL_RTC_SetAlarm_IT+0x140>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008b82:	61de      	str	r6, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008b84:	6823      	ldr	r3, [r4, #0]
 8008b86:	6458      	str	r0, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008b88:	6822      	ldr	r2, [r4, #0]
 8008b8a:	6893      	ldr	r3, [r2, #8]
 8008b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b90:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8008b92:	6822      	ldr	r2, [r4, #0]
 8008b94:	6893      	ldr	r3, [r2, #8]
 8008b96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b9a:	6093      	str	r3, [r2, #8]
 8008b9c:	e7b1      	b.n	8008b02 <HAL_RTC_SetAlarm_IT+0xd2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b9e:	6823      	ldr	r3, [r4, #0]
 8008ba0:	22ff      	movs	r2, #255	; 0xff
 8008ba2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008ba4:	2003      	movs	r0, #3
 8008ba6:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8008ba8:	2300      	movs	r3, #0
 8008baa:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 8008bac:	e7b9      	b.n	8008b22 <HAL_RTC_SetAlarm_IT+0xf2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	22ff      	movs	r2, #255	; 0xff
 8008bb2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008bb4:	2003      	movs	r0, #3
 8008bb6:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8008bb8:	2300      	movs	r3, #0
 8008bba:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 8008bbc:	e7b1      	b.n	8008b22 <HAL_RTC_SetAlarm_IT+0xf2>
  __HAL_LOCK(hrtc);
 8008bbe:	2002      	movs	r0, #2
 8008bc0:	e7af      	b.n	8008b22 <HAL_RTC_SetAlarm_IT+0xf2>
 8008bc2:	bf00      	nop
 8008bc4:	2000382c 	.word	0x2000382c
 8008bc8:	10624dd3 	.word	0x10624dd3
 8008bcc:	40013c00 	.word	0x40013c00

08008bd0 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8008bd0:	0903      	lsrs	r3, r0, #4
 8008bd2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8008bd6:	f000 000f 	and.w	r0, r0, #15
 8008bda:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8008bde:	b2c0      	uxtb	r0, r0
 8008be0:	4770      	bx	lr

08008be2 <HAL_RTC_GetTime>:
{
 8008be2:	b570      	push	{r4, r5, r6, lr}
 8008be4:	460c      	mov	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008be6:	6803      	ldr	r3, [r0, #0]
 8008be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bea:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008bec:	6803      	ldr	r3, [r0, #0]
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008bf4:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008bf6:	6803      	ldr	r3, [r0, #0]
 8008bf8:	681d      	ldr	r5, [r3, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8008bfa:	f3c5 4106 	ubfx	r1, r5, #16, #7
 8008bfe:	f3c5 4005 	ubfx	r0, r5, #16, #6
 8008c02:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8008c04:	f3c5 2606 	ubfx	r6, r5, #8, #7
 8008c08:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008c0a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 8008c0e:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8008c10:	f001 0340 	and.w	r3, r1, #64	; 0x40
 8008c14:	70e3      	strb	r3, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 8008c16:	b952      	cbnz	r2, 8008c2e <HAL_RTC_GetTime+0x4c>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008c18:	f7ff ffda 	bl	8008bd0 <RTC_Bcd2ToByte>
 8008c1c:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008c1e:	4630      	mov	r0, r6
 8008c20:	f7ff ffd6 	bl	8008bd0 <RTC_Bcd2ToByte>
 8008c24:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008c26:	4628      	mov	r0, r5
 8008c28:	f7ff ffd2 	bl	8008bd0 <RTC_Bcd2ToByte>
 8008c2c:	70a0      	strb	r0, [r4, #2]
}
 8008c2e:	2000      	movs	r0, #0
 8008c30:	bd70      	pop	{r4, r5, r6, pc}

08008c32 <HAL_RTC_GetDate>:
{
 8008c32:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008c34:	6803      	ldr	r3, [r0, #0]
 8008c36:	685b      	ldr	r3, [r3, #4]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8008c38:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8008c3c:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8008c3e:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8008c42:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008c44:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 8008c48:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8008c4a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8008c4e:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8008c50:	b95a      	cbnz	r2, 8008c6a <HAL_RTC_GetDate+0x38>
 8008c52:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008c54:	f7ff ffbc 	bl	8008bd0 <RTC_Bcd2ToByte>
 8008c58:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008c5a:	4630      	mov	r0, r6
 8008c5c:	f7ff ffb8 	bl	8008bd0 <RTC_Bcd2ToByte>
 8008c60:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008c62:	4628      	mov	r0, r5
 8008c64:	f7ff ffb4 	bl	8008bd0 <RTC_Bcd2ToByte>
 8008c68:	70a0      	strb	r0, [r4, #2]
}
 8008c6a:	2000      	movs	r0, #0
 8008c6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008c70 <HAL_RTCEx_SetWakeUpTimer_IT>:
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008c70:	7f03      	ldrb	r3, [r0, #28]
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d07c      	beq.n	8008d70 <HAL_RTCEx_SetWakeUpTimer_IT+0x100>
{
 8008c76:	b430      	push	{r4, r5}
 8008c78:	b082      	sub	sp, #8
  __HAL_LOCK(hrtc);
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	7703      	strb	r3, [r0, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c7e:	2302      	movs	r3, #2
 8008c80:	7743      	strb	r3, [r0, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c82:	6803      	ldr	r3, [r0, #0]
 8008c84:	24ca      	movs	r4, #202	; 0xca
 8008c86:	625c      	str	r4, [r3, #36]	; 0x24
 8008c88:	6803      	ldr	r3, [r0, #0]
 8008c8a:	2453      	movs	r4, #83	; 0x53
 8008c8c:	625c      	str	r4, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8008c8e:	6805      	ldr	r5, [r0, #0]
 8008c90:	68ab      	ldr	r3, [r5, #8]
 8008c92:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008c96:	d013      	beq.n	8008cc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8008c98:	4b36      	ldr	r3, [pc, #216]	; (8008d74 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4c36      	ldr	r4, [pc, #216]	; (8008d78 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8008c9e:	fba4 4303 	umull	r4, r3, r4, r3
 8008ca2:	0adb      	lsrs	r3, r3, #11
 8008ca4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8008ca8:	fb04 f303 	mul.w	r3, r4, r3
 8008cac:	9301      	str	r3, [sp, #4]
    do
    {
      if(count-- == 0U)
 8008cae:	9b01      	ldr	r3, [sp, #4]
 8008cb0:	1e5c      	subs	r4, r3, #1
 8008cb2:	9401      	str	r4, [sp, #4]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d048      	beq.n	8008d4a <HAL_RTCEx_SetWakeUpTimer_IT+0xda>
        __HAL_UNLOCK(hrtc);

        return HAL_TIMEOUT;
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 8008cb8:	68eb      	ldr	r3, [r5, #12]
 8008cba:	f013 0f04 	tst.w	r3, #4
 8008cbe:	d1f6      	bne.n	8008cae <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008cc0:	68ab      	ldr	r3, [r5, #8]
 8008cc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008cc6:	60ab      	str	r3, [r5, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8008cc8:	4b2a      	ldr	r3, [pc, #168]	; (8008d74 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4c2a      	ldr	r4, [pc, #168]	; (8008d78 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8008cce:	fba4 4303 	umull	r4, r3, r4, r3
 8008cd2:	0adb      	lsrs	r3, r3, #11
 8008cd4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8008cd8:	fb04 f303 	mul.w	r3, r4, r3
 8008cdc:	9301      	str	r3, [sp, #4]
  do
  {
    if(count-- == 0U)
 8008cde:	9b01      	ldr	r3, [sp, #4]
 8008ce0:	1e5c      	subs	r4, r3, #1
 8008ce2:	9401      	str	r4, [sp, #4]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d038      	beq.n	8008d5a <HAL_RTCEx_SetWakeUpTimer_IT+0xea>
      __HAL_UNLOCK(hrtc);

      return HAL_TIMEOUT;
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 8008ce8:	6803      	ldr	r3, [r0, #0]
 8008cea:	68dc      	ldr	r4, [r3, #12]
 8008cec:	f014 0f04 	tst.w	r4, #4
 8008cf0:	d0f5      	beq.n	8008cde <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8008cf2:	6159      	str	r1, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8008cf4:	6801      	ldr	r1, [r0, #0]
 8008cf6:	688b      	ldr	r3, [r1, #8]
 8008cf8:	f023 0307 	bic.w	r3, r3, #7
 8008cfc:	608b      	str	r3, [r1, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8008cfe:	6801      	ldr	r1, [r0, #0]
 8008d00:	688b      	ldr	r3, [r1, #8]
 8008d02:	431a      	orrs	r2, r3
 8008d04:	608a      	str	r2, [r1, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8008d06:	4b1d      	ldr	r3, [pc, #116]	; (8008d7c <HAL_RTCEx_SetWakeUpTimer_IT+0x10c>)
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8008d0e:	601a      	str	r2, [r3, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 8008d10:	689a      	ldr	r2, [r3, #8]
 8008d12:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8008d16:	609a      	str	r2, [r3, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008d18:	6802      	ldr	r2, [r0, #0]
 8008d1a:	68d3      	ldr	r3, [r2, #12]
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8008d22:	60d3      	str	r3, [r2, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8008d24:	6802      	ldr	r2, [r0, #0]
 8008d26:	6893      	ldr	r3, [r2, #8]
 8008d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d2c:	6093      	str	r3, [r2, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8008d2e:	6802      	ldr	r2, [r0, #0]
 8008d30:	6893      	ldr	r3, [r2, #8]
 8008d32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008d36:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d38:	6803      	ldr	r3, [r0, #0]
 8008d3a:	22ff      	movs	r2, #255	; 0xff
 8008d3c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	7743      	strb	r3, [r0, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008d42:	2300      	movs	r3, #0
 8008d44:	7703      	strb	r3, [r0, #28]

  return HAL_OK;
 8008d46:	4618      	mov	r0, r3
 8008d48:	e00f      	b.n	8008d6a <HAL_RTCEx_SetWakeUpTimer_IT+0xfa>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d4a:	23ff      	movs	r3, #255	; 0xff
 8008d4c:	626b      	str	r3, [r5, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	7743      	strb	r3, [r0, #29]
        __HAL_UNLOCK(hrtc);
 8008d52:	2200      	movs	r2, #0
 8008d54:	7702      	strb	r2, [r0, #28]
        return HAL_TIMEOUT;
 8008d56:	4618      	mov	r0, r3
 8008d58:	e007      	b.n	8008d6a <HAL_RTCEx_SetWakeUpTimer_IT+0xfa>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d5a:	6803      	ldr	r3, [r0, #0]
 8008d5c:	22ff      	movs	r2, #255	; 0xff
 8008d5e:	625a      	str	r2, [r3, #36]	; 0x24
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d60:	2303      	movs	r3, #3
 8008d62:	7743      	strb	r3, [r0, #29]
      __HAL_UNLOCK(hrtc);
 8008d64:	2200      	movs	r2, #0
 8008d66:	7702      	strb	r2, [r0, #28]
      return HAL_TIMEOUT;
 8008d68:	4618      	mov	r0, r3
}
 8008d6a:	b002      	add	sp, #8
 8008d6c:	bc30      	pop	{r4, r5}
 8008d6e:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8008d70:	2002      	movs	r0, #2
}
 8008d72:	4770      	bx	lr
 8008d74:	2000382c 	.word	0x2000382c
 8008d78:	10624dd3 	.word	0x10624dd3
 8008d7c:	40013c00 	.word	0x40013c00

08008d80 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008d80:	b510      	push	{r4, lr}
 8008d82:	4604      	mov	r4, r0
  if(__HAL_RTC_WAKEUPTIMER_GET_IT(hrtc, RTC_IT_WUT))
 8008d84:	6803      	ldr	r3, [r0, #0]
 8008d86:	68da      	ldr	r2, [r3, #12]
 8008d88:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8008d8c:	d003      	beq.n	8008d96 <HAL_RTCEx_WakeUpTimerIRQHandler+0x16>
  {
    /* Get the status of the Interrupt */
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_WUT) != (uint32_t)RESET)
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8008d94:	d106      	bne.n	8008da4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x24>
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
    }
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8008d96:	4b08      	ldr	r3, [pc, #32]	; (8008db8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x38>)
 8008d98:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8008d9c:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	7763      	strb	r3, [r4, #29]
}
 8008da2:	bd10      	pop	{r4, pc}
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8008da4:	f00b ff46 	bl	8014c34 <HAL_RTCEx_WakeUpTimerEventCallback>
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008da8:	6822      	ldr	r2, [r4, #0]
 8008daa:	68d3      	ldr	r3, [r2, #12]
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8008db2:	60d3      	str	r3, [r2, #12]
 8008db4:	e7ef      	b.n	8008d96 <HAL_RTCEx_WakeUpTimerIRQHandler+0x16>
 8008db6:	bf00      	nop
 8008db8:	40013c00 	.word	0x40013c00

08008dbc <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8008dbc:	6803      	ldr	r3, [r0, #0]
 8008dbe:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8008dc0:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8008dc4:	4770      	bx	lr

08008dc6 <HAL_RTCEx_AlarmBEventCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8008dc6:	4770      	bx	lr

08008dc8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008dc8:	6802      	ldr	r2, [r0, #0]
 8008dca:	68d3      	ldr	r3, [r2, #12]
 8008dcc:	f043 0301 	orr.w	r3, r3, #1
 8008dd0:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dd2:	6802      	ldr	r2, [r0, #0]
 8008dd4:	6893      	ldr	r3, [r2, #8]
 8008dd6:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dda:	2b06      	cmp	r3, #6
 8008ddc:	d003      	beq.n	8008de6 <HAL_TIM_Base_Start_IT+0x1e>
  {
    __HAL_TIM_ENABLE(htim);
 8008dde:	6813      	ldr	r3, [r2, #0]
 8008de0:	f043 0301 	orr.w	r3, r3, #1
 8008de4:	6013      	str	r3, [r2, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8008de6:	2000      	movs	r0, #0
 8008de8:	4770      	bx	lr

08008dea <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008dea:	4770      	bx	lr

08008dec <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008dec:	4770      	bx	lr

08008dee <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008dee:	4770      	bx	lr

08008df0 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008df0:	4770      	bx	lr

08008df2 <HAL_TIM_IRQHandler>:
{
 8008df2:	b510      	push	{r4, lr}
 8008df4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008df6:	6803      	ldr	r3, [r0, #0]
 8008df8:	691a      	ldr	r2, [r3, #16]
 8008dfa:	f012 0f02 	tst.w	r2, #2
 8008dfe:	d011      	beq.n	8008e24 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e00:	68da      	ldr	r2, [r3, #12]
 8008e02:	f012 0f02 	tst.w	r2, #2
 8008e06:	d00d      	beq.n	8008e24 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e08:	f06f 0202 	mvn.w	r2, #2
 8008e0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e12:	6803      	ldr	r3, [r0, #0]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	f013 0f03 	tst.w	r3, #3
 8008e1a:	d070      	beq.n	8008efe <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8008e1c:	f7ff ffe6 	bl	8008dec <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e20:	2300      	movs	r3, #0
 8008e22:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e24:	6823      	ldr	r3, [r4, #0]
 8008e26:	691a      	ldr	r2, [r3, #16]
 8008e28:	f012 0f04 	tst.w	r2, #4
 8008e2c:	d012      	beq.n	8008e54 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e2e:	68da      	ldr	r2, [r3, #12]
 8008e30:	f012 0f04 	tst.w	r2, #4
 8008e34:	d00e      	beq.n	8008e54 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e36:	f06f 0204 	mvn.w	r2, #4
 8008e3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e3c:	2302      	movs	r3, #2
 8008e3e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e40:	6823      	ldr	r3, [r4, #0]
 8008e42:	699b      	ldr	r3, [r3, #24]
 8008e44:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008e48:	d05f      	beq.n	8008f0a <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	f7ff ffce 	bl	8008dec <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e50:	2300      	movs	r3, #0
 8008e52:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e54:	6823      	ldr	r3, [r4, #0]
 8008e56:	691a      	ldr	r2, [r3, #16]
 8008e58:	f012 0f08 	tst.w	r2, #8
 8008e5c:	d012      	beq.n	8008e84 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e5e:	68da      	ldr	r2, [r3, #12]
 8008e60:	f012 0f08 	tst.w	r2, #8
 8008e64:	d00e      	beq.n	8008e84 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e66:	f06f 0208 	mvn.w	r2, #8
 8008e6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e6c:	2304      	movs	r3, #4
 8008e6e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e70:	6823      	ldr	r3, [r4, #0]
 8008e72:	69db      	ldr	r3, [r3, #28]
 8008e74:	f013 0f03 	tst.w	r3, #3
 8008e78:	d04e      	beq.n	8008f18 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f7ff ffb6 	bl	8008dec <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e80:	2300      	movs	r3, #0
 8008e82:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e84:	6823      	ldr	r3, [r4, #0]
 8008e86:	691a      	ldr	r2, [r3, #16]
 8008e88:	f012 0f10 	tst.w	r2, #16
 8008e8c:	d012      	beq.n	8008eb4 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e8e:	68da      	ldr	r2, [r3, #12]
 8008e90:	f012 0f10 	tst.w	r2, #16
 8008e94:	d00e      	beq.n	8008eb4 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e96:	f06f 0210 	mvn.w	r2, #16
 8008e9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e9c:	2308      	movs	r3, #8
 8008e9e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ea0:	6823      	ldr	r3, [r4, #0]
 8008ea2:	69db      	ldr	r3, [r3, #28]
 8008ea4:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008ea8:	d03d      	beq.n	8008f26 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f7ff ff9e 	bl	8008dec <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008eb4:	6823      	ldr	r3, [r4, #0]
 8008eb6:	691a      	ldr	r2, [r3, #16]
 8008eb8:	f012 0f01 	tst.w	r2, #1
 8008ebc:	d003      	beq.n	8008ec6 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ebe:	68da      	ldr	r2, [r3, #12]
 8008ec0:	f012 0f01 	tst.w	r2, #1
 8008ec4:	d136      	bne.n	8008f34 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ec6:	6823      	ldr	r3, [r4, #0]
 8008ec8:	691a      	ldr	r2, [r3, #16]
 8008eca:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008ece:	d003      	beq.n	8008ed8 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ed0:	68da      	ldr	r2, [r3, #12]
 8008ed2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008ed6:	d134      	bne.n	8008f42 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ed8:	6823      	ldr	r3, [r4, #0]
 8008eda:	691a      	ldr	r2, [r3, #16]
 8008edc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008ee0:	d003      	beq.n	8008eea <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ee2:	68da      	ldr	r2, [r3, #12]
 8008ee4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008ee8:	d132      	bne.n	8008f50 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008eea:	6823      	ldr	r3, [r4, #0]
 8008eec:	691a      	ldr	r2, [r3, #16]
 8008eee:	f012 0f20 	tst.w	r2, #32
 8008ef2:	d003      	beq.n	8008efc <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ef4:	68da      	ldr	r2, [r3, #12]
 8008ef6:	f012 0f20 	tst.w	r2, #32
 8008efa:	d130      	bne.n	8008f5e <HAL_TIM_IRQHandler+0x16c>
}
 8008efc:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008efe:	f7ff ff74 	bl	8008dea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f02:	4620      	mov	r0, r4
 8008f04:	f7ff ff73 	bl	8008dee <HAL_TIM_PWM_PulseFinishedCallback>
 8008f08:	e78a      	b.n	8008e20 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	f7ff ff6d 	bl	8008dea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f10:	4620      	mov	r0, r4
 8008f12:	f7ff ff6c 	bl	8008dee <HAL_TIM_PWM_PulseFinishedCallback>
 8008f16:	e79b      	b.n	8008e50 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f18:	4620      	mov	r0, r4
 8008f1a:	f7ff ff66 	bl	8008dea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f7ff ff65 	bl	8008dee <HAL_TIM_PWM_PulseFinishedCallback>
 8008f24:	e7ac      	b.n	8008e80 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f26:	4620      	mov	r0, r4
 8008f28:	f7ff ff5f 	bl	8008dea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	f7ff ff5e 	bl	8008dee <HAL_TIM_PWM_PulseFinishedCallback>
 8008f32:	e7bd      	b.n	8008eb0 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f34:	f06f 0201 	mvn.w	r2, #1
 8008f38:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	f00b ff36 	bl	8014dac <HAL_TIM_PeriodElapsedCallback>
 8008f40:	e7c1      	b.n	8008ec6 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f42:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f46:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008f48:	4620      	mov	r0, r4
 8008f4a:	f000 f8b1 	bl	80090b0 <HAL_TIMEx_BreakCallback>
 8008f4e:	e7c3      	b.n	8008ed8 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f54:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008f56:	4620      	mov	r0, r4
 8008f58:	f7ff ff4a 	bl	8008df0 <HAL_TIM_TriggerCallback>
 8008f5c:	e7c5      	b.n	8008eea <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f5e:	f06f 0220 	mvn.w	r2, #32
 8008f62:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8008f64:	4620      	mov	r0, r4
 8008f66:	f000 f8a2 	bl	80090ae <HAL_TIMEx_CommutCallback>
}
 8008f6a:	e7c7      	b.n	8008efc <HAL_TIM_IRQHandler+0x10a>

08008f6c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f6c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f6e:	4a30      	ldr	r2, [pc, #192]	; (8009030 <TIM_Base_SetConfig+0xc4>)
 8008f70:	4290      	cmp	r0, r2
 8008f72:	d012      	beq.n	8008f9a <TIM_Base_SetConfig+0x2e>
 8008f74:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008f78:	d00f      	beq.n	8008f9a <TIM_Base_SetConfig+0x2e>
 8008f7a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008f7e:	4290      	cmp	r0, r2
 8008f80:	d00b      	beq.n	8008f9a <TIM_Base_SetConfig+0x2e>
 8008f82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f86:	4290      	cmp	r0, r2
 8008f88:	d007      	beq.n	8008f9a <TIM_Base_SetConfig+0x2e>
 8008f8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f8e:	4290      	cmp	r0, r2
 8008f90:	d003      	beq.n	8008f9a <TIM_Base_SetConfig+0x2e>
 8008f92:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8008f96:	4290      	cmp	r0, r2
 8008f98:	d103      	bne.n	8008fa2 <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008f9e:	684a      	ldr	r2, [r1, #4]
 8008fa0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fa2:	4a23      	ldr	r2, [pc, #140]	; (8009030 <TIM_Base_SetConfig+0xc4>)
 8008fa4:	4290      	cmp	r0, r2
 8008fa6:	d02a      	beq.n	8008ffe <TIM_Base_SetConfig+0x92>
 8008fa8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008fac:	d027      	beq.n	8008ffe <TIM_Base_SetConfig+0x92>
 8008fae:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008fb2:	4290      	cmp	r0, r2
 8008fb4:	d023      	beq.n	8008ffe <TIM_Base_SetConfig+0x92>
 8008fb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008fba:	4290      	cmp	r0, r2
 8008fbc:	d01f      	beq.n	8008ffe <TIM_Base_SetConfig+0x92>
 8008fbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008fc2:	4290      	cmp	r0, r2
 8008fc4:	d01b      	beq.n	8008ffe <TIM_Base_SetConfig+0x92>
 8008fc6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8008fca:	4290      	cmp	r0, r2
 8008fcc:	d017      	beq.n	8008ffe <TIM_Base_SetConfig+0x92>
 8008fce:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8008fd2:	4290      	cmp	r0, r2
 8008fd4:	d013      	beq.n	8008ffe <TIM_Base_SetConfig+0x92>
 8008fd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008fda:	4290      	cmp	r0, r2
 8008fdc:	d00f      	beq.n	8008ffe <TIM_Base_SetConfig+0x92>
 8008fde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008fe2:	4290      	cmp	r0, r2
 8008fe4:	d00b      	beq.n	8008ffe <TIM_Base_SetConfig+0x92>
 8008fe6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8008fea:	4290      	cmp	r0, r2
 8008fec:	d007      	beq.n	8008ffe <TIM_Base_SetConfig+0x92>
 8008fee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ff2:	4290      	cmp	r0, r2
 8008ff4:	d003      	beq.n	8008ffe <TIM_Base_SetConfig+0x92>
 8008ff6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ffa:	4290      	cmp	r0, r2
 8008ffc:	d103      	bne.n	8009006 <TIM_Base_SetConfig+0x9a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009002:	68ca      	ldr	r2, [r1, #12]
 8009004:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800900a:	694a      	ldr	r2, [r1, #20]
 800900c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800900e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009010:	688b      	ldr	r3, [r1, #8]
 8009012:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009014:	680b      	ldr	r3, [r1, #0]
 8009016:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009018:	4b05      	ldr	r3, [pc, #20]	; (8009030 <TIM_Base_SetConfig+0xc4>)
 800901a:	4298      	cmp	r0, r3
 800901c:	d003      	beq.n	8009026 <TIM_Base_SetConfig+0xba>
 800901e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009022:	4298      	cmp	r0, r3
 8009024:	d101      	bne.n	800902a <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009026:	690b      	ldr	r3, [r1, #16]
 8009028:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800902a:	2301      	movs	r3, #1
 800902c:	6143      	str	r3, [r0, #20]
}
 800902e:	4770      	bx	lr
 8009030:	40010000 	.word	0x40010000

08009034 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8009034:	b1b0      	cbz	r0, 8009064 <HAL_TIM_Base_Init+0x30>
{
 8009036:	b510      	push	{r4, lr}
 8009038:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800903a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800903e:	b163      	cbz	r3, 800905a <HAL_TIM_Base_Init+0x26>
  htim->State = HAL_TIM_STATE_BUSY;
 8009040:	2302      	movs	r3, #2
 8009042:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009046:	4621      	mov	r1, r4
 8009048:	f851 0b04 	ldr.w	r0, [r1], #4
 800904c:	f7ff ff8e 	bl	8008f6c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8009050:	2301      	movs	r3, #1
 8009052:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8009056:	2000      	movs	r0, #0
}
 8009058:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800905a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800905e:	f00b f8d3 	bl	8014208 <HAL_TIM_Base_MspInit>
 8009062:	e7ed      	b.n	8009040 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8009064:	2001      	movs	r0, #1
}
 8009066:	4770      	bx	lr

08009068 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009068:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800906c:	2b01      	cmp	r3, #1
 800906e:	d01c      	beq.n	80090aa <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 8009070:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8009072:	2601      	movs	r6, #1
 8009074:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009078:	2302      	movs	r3, #2
 800907a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800907e:	6802      	ldr	r2, [r0, #0]
 8009080:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009082:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009084:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009088:	680c      	ldr	r4, [r1, #0]
 800908a:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800908c:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009090:	684b      	ldr	r3, [r1, #4]
 8009092:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009094:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009096:	6802      	ldr	r2, [r0, #0]
 8009098:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800909a:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800909e:	2300      	movs	r3, #0
 80090a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80090a4:	4618      	mov	r0, r3
}
 80090a6:	bc70      	pop	{r4, r5, r6}
 80090a8:	4770      	bx	lr
  __HAL_LOCK(htim);
 80090aa:	2002      	movs	r0, #2
}
 80090ac:	4770      	bx	lr

080090ae <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090ae:	4770      	bx	lr

080090b0 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80090b0:	4770      	bx	lr

080090b2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80090b2:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80090b4:	680c      	ldr	r4, [r1, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090b6:	fa94 f4a4 	rbit	r4, r4
 80090ba:	fab4 f484 	clz	r4, r4

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80090be:	e02c      	b.n	800911a <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80090c0:	688e      	ldr	r6, [r1, #8]
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80090c2:	6882      	ldr	r2, [r0, #8]
 80090c4:	fa93 f5a3 	rbit	r5, r3
 80090c8:	fab5 f585 	clz	r5, r5
 80090cc:	006d      	lsls	r5, r5, #1
 80090ce:	fa07 f505 	lsl.w	r5, r7, r5
 80090d2:	ea22 0205 	bic.w	r2, r2, r5
 80090d6:	fa93 f5a3 	rbit	r5, r3
 80090da:	fab5 f585 	clz	r5, r5
 80090de:	006d      	lsls	r5, r5, #1
 80090e0:	fa06 f505 	lsl.w	r5, r6, r5
 80090e4:	432a      	orrs	r2, r5
 80090e6:	6082      	str	r2, [r0, #8]
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80090e8:	690e      	ldr	r6, [r1, #16]
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80090ea:	68c2      	ldr	r2, [r0, #12]
 80090ec:	fa93 f5a3 	rbit	r5, r3
 80090f0:	fab5 f585 	clz	r5, r5
 80090f4:	006d      	lsls	r5, r5, #1
 80090f6:	2703      	movs	r7, #3
 80090f8:	fa07 f505 	lsl.w	r5, r7, r5
 80090fc:	ea22 0205 	bic.w	r2, r2, r5
 8009100:	fa93 f5a3 	rbit	r5, r3
 8009104:	fab5 f585 	clz	r5, r5
 8009108:	006d      	lsls	r5, r5, #1
 800910a:	fa06 f505 	lsl.w	r5, r6, r5
 800910e:	432a      	orrs	r2, r5
 8009110:	60c2      	str	r2, [r0, #12]

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009112:	684a      	ldr	r2, [r1, #4]
 8009114:	2a02      	cmp	r2, #2
 8009116:	d022      	beq.n	800915e <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
    }
    pinpos++;
 8009118:	3401      	adds	r4, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800911a:	680b      	ldr	r3, [r1, #0]
 800911c:	fa33 f204 	lsrs.w	r2, r3, r4
 8009120:	d050      	beq.n	80091c4 <LL_GPIO_Init+0x112>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8009122:	2201      	movs	r2, #1
 8009124:	40a2      	lsls	r2, r4
    if (currentpin)
 8009126:	4013      	ands	r3, r2
 8009128:	d0f6      	beq.n	8009118 <LL_GPIO_Init+0x66>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800912a:	684e      	ldr	r6, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800912c:	6802      	ldr	r2, [r0, #0]
 800912e:	fa93 f5a3 	rbit	r5, r3
 8009132:	fab5 f585 	clz	r5, r5
 8009136:	006d      	lsls	r5, r5, #1
 8009138:	2703      	movs	r7, #3
 800913a:	fa07 f505 	lsl.w	r5, r7, r5
 800913e:	ea22 0205 	bic.w	r2, r2, r5
 8009142:	fa93 f5a3 	rbit	r5, r3
 8009146:	fab5 f585 	clz	r5, r5
 800914a:	006d      	lsls	r5, r5, #1
 800914c:	fa06 f505 	lsl.w	r5, r6, r5
 8009150:	432a      	orrs	r2, r5
 8009152:	6002      	str	r2, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009154:	684a      	ldr	r2, [r1, #4]
 8009156:	3a01      	subs	r2, #1
 8009158:	2a01      	cmp	r2, #1
 800915a:	d8c5      	bhi.n	80090e8 <LL_GPIO_Init+0x36>
 800915c:	e7b0      	b.n	80090c0 <LL_GPIO_Init+0xe>
 800915e:	fa93 f2a3 	rbit	r2, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8009162:	fab2 f282 	clz	r2, r2
 8009166:	2a07      	cmp	r2, #7
 8009168:	d815      	bhi.n	8009196 <LL_GPIO_Init+0xe4>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800916a:	694d      	ldr	r5, [r1, #20]
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800916c:	6a02      	ldr	r2, [r0, #32]
 800916e:	fa93 f6a3 	rbit	r6, r3
 8009172:	fab6 f686 	clz	r6, r6
 8009176:	00b6      	lsls	r6, r6, #2
 8009178:	270f      	movs	r7, #15
 800917a:	fa07 f606 	lsl.w	r6, r7, r6
 800917e:	ea22 0206 	bic.w	r2, r2, r6
 8009182:	fa93 f3a3 	rbit	r3, r3
 8009186:	fab3 f383 	clz	r3, r3
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	fa05 f303 	lsl.w	r3, r5, r3
 8009190:	4313      	orrs	r3, r2
 8009192:	6203      	str	r3, [r0, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8009194:	e7c0      	b.n	8009118 <LL_GPIO_Init+0x66>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009196:	694a      	ldr	r2, [r1, #20]
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8009198:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800919a:	0a1b      	lsrs	r3, r3, #8
 800919c:	fa93 f6a3 	rbit	r6, r3
 80091a0:	fab6 f686 	clz	r6, r6
 80091a4:	00b6      	lsls	r6, r6, #2
 80091a6:	270f      	movs	r7, #15
 80091a8:	fa07 f606 	lsl.w	r6, r7, r6
 80091ac:	ea25 0506 	bic.w	r5, r5, r6
 80091b0:	fa93 f3a3 	rbit	r3, r3
 80091b4:	fab3 f383 	clz	r3, r3
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	fa02 f303 	lsl.w	r3, r2, r3
 80091be:	432b      	orrs	r3, r5
 80091c0:	6243      	str	r3, [r0, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80091c2:	e7a9      	b.n	8009118 <LL_GPIO_Init+0x66>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80091c4:	684a      	ldr	r2, [r1, #4]
 80091c6:	3a01      	subs	r2, #1
 80091c8:	2a01      	cmp	r2, #1
 80091ca:	d902      	bls.n	80091d2 <LL_GPIO_Init+0x120>
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 80091cc:	2000      	movs	r0, #0
 80091ce:	bcf0      	pop	{r4, r5, r6, r7}
 80091d0:	4770      	bx	lr
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80091d2:	68c9      	ldr	r1, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80091d4:	6842      	ldr	r2, [r0, #4]
 80091d6:	ea22 0203 	bic.w	r2, r2, r3
 80091da:	fb01 f303 	mul.w	r3, r1, r3
 80091de:	4313      	orrs	r3, r2
 80091e0:	6043      	str	r3, [r0, #4]
}
 80091e2:	e7f3      	b.n	80091cc <LL_GPIO_Init+0x11a>

080091e4 <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80091e4:	4b03      	ldr	r3, [pc, #12]	; (80091f4 <RCC_GetHCLKClockFreq+0x10>)
 80091e6:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80091e8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80091ec:	4a02      	ldr	r2, [pc, #8]	; (80091f8 <RCC_GetHCLKClockFreq+0x14>)
 80091ee:	5cd3      	ldrb	r3, [r2, r3]
}
 80091f0:	40d8      	lsrs	r0, r3
 80091f2:	4770      	bx	lr
 80091f4:	40023800 	.word	0x40023800
 80091f8:	0801c934 	.word	0x0801c934

080091fc <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80091fc:	4b03      	ldr	r3, [pc, #12]	; (800920c <RCC_GetPCLK1ClockFreq+0x10>)
 80091fe:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8009200:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8009204:	4a02      	ldr	r2, [pc, #8]	; (8009210 <RCC_GetPCLK1ClockFreq+0x14>)
 8009206:	5cd3      	ldrb	r3, [r2, r3]
}
 8009208:	40d8      	lsrs	r0, r3
 800920a:	4770      	bx	lr
 800920c:	40023800 	.word	0x40023800
 8009210:	0801c944 	.word	0x0801c944

08009214 <RCC_GetPCLK2ClockFreq>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8009214:	4b03      	ldr	r3, [pc, #12]	; (8009224 <RCC_GetPCLK2ClockFreq+0x10>)
 8009216:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8009218:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800921c:	4a02      	ldr	r2, [pc, #8]	; (8009228 <RCC_GetPCLK2ClockFreq+0x14>)
 800921e:	5cd3      	ldrb	r3, [r2, r3]
}
 8009220:	40d8      	lsrs	r0, r3
 8009222:	4770      	bx	lr
 8009224:	40023800 	.word	0x40023800
 8009228:	0801c944 	.word	0x0801c944

0800922c <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800922c:	4b0f      	ldr	r3, [pc, #60]	; (800926c <RCC_PLL_GetFreqDomain_SYS+0x40>)
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8009234:	b923      	cbnz	r3, 8009240 <RCC_PLL_GetFreqDomain_SYS+0x14>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8009236:	4b0e      	ldr	r3, [pc, #56]	; (8009270 <RCC_PLL_GetFreqDomain_SYS+0x44>)
    default:
      pllinputfreq = HSI_VALUE;
      break;
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8009238:	2808      	cmp	r0, #8
 800923a:	d003      	beq.n	8009244 <RCC_PLL_GetFreqDomain_SYS+0x18>
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800923c:	2000      	movs	r0, #0
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
}
 800923e:	4770      	bx	lr
      pllinputfreq = HSE_VALUE;
 8009240:	4b0c      	ldr	r3, [pc, #48]	; (8009274 <RCC_PLL_GetFreqDomain_SYS+0x48>)
 8009242:	e7f9      	b.n	8009238 <RCC_PLL_GetFreqDomain_SYS+0xc>
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8009244:	4a09      	ldr	r2, [pc, #36]	; (800926c <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8009246:	6850      	ldr	r0, [r2, #4]
 8009248:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800924c:	fbb3 f3f0 	udiv	r3, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8009250:	6850      	ldr	r0, [r2, #4]
 8009252:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8009256:	fb00 f003 	mul.w	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800925a:	6853      	ldr	r3, [r2, #4]
 800925c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8009260:	3301      	adds	r3, #1
 8009262:	005b      	lsls	r3, r3, #1
 8009264:	fbb0 f0f3 	udiv	r0, r0, r3
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	40023800 	.word	0x40023800
 8009270:	00f42400 	.word	0x00f42400
 8009274:	017d7840 	.word	0x017d7840

08009278 <RCC_GetSystemClockFreq>:
{
 8009278:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800927a:	4b08      	ldr	r3, [pc, #32]	; (800929c <RCC_GetSystemClockFreq+0x24>)
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8009282:	2b04      	cmp	r3, #4
 8009284:	d005      	beq.n	8009292 <RCC_GetSystemClockFreq+0x1a>
 8009286:	2b08      	cmp	r3, #8
 8009288:	d105      	bne.n	8009296 <RCC_GetSystemClockFreq+0x1e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800928a:	2008      	movs	r0, #8
 800928c:	f7ff ffce 	bl	800922c <RCC_PLL_GetFreqDomain_SYS>
      break;
 8009290:	e002      	b.n	8009298 <RCC_GetSystemClockFreq+0x20>
      frequency = HSE_VALUE;
 8009292:	4803      	ldr	r0, [pc, #12]	; (80092a0 <RCC_GetSystemClockFreq+0x28>)
 8009294:	e000      	b.n	8009298 <RCC_GetSystemClockFreq+0x20>
  switch (LL_RCC_GetSysClkSource())
 8009296:	4803      	ldr	r0, [pc, #12]	; (80092a4 <RCC_GetSystemClockFreq+0x2c>)
}
 8009298:	bd08      	pop	{r3, pc}
 800929a:	bf00      	nop
 800929c:	40023800 	.word	0x40023800
 80092a0:	017d7840 	.word	0x017d7840
 80092a4:	00f42400 	.word	0x00f42400

080092a8 <LL_RCC_GetSystemClocksFreq>:
{
 80092a8:	b510      	push	{r4, lr}
 80092aa:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80092ac:	f7ff ffe4 	bl	8009278 <RCC_GetSystemClockFreq>
 80092b0:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80092b2:	f7ff ff97 	bl	80091e4 <RCC_GetHCLKClockFreq>
 80092b6:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80092b8:	f7ff ffa0 	bl	80091fc <RCC_GetPCLK1ClockFreq>
 80092bc:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80092be:	6860      	ldr	r0, [r4, #4]
 80092c0:	f7ff ffa8 	bl	8009214 <RCC_GetPCLK2ClockFreq>
 80092c4:	60e0      	str	r0, [r4, #12]
}
 80092c6:	bd10      	pop	{r4, pc}

080092c8 <LL_USART_Init>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80092c8:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80092ca:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80092ce:	d001      	beq.n	80092d4 <LL_USART_Init+0xc>
  ErrorStatus status = ERROR;
 80092d0:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 80092d2:	4770      	bx	lr
{
 80092d4:	b530      	push	{r4, r5, lr}
 80092d6:	b085      	sub	sp, #20
 80092d8:	4604      	mov	r4, r0
 80092da:	460d      	mov	r5, r1
    MODIFY_REG(USARTx->CR1,
 80092dc:	68c3      	ldr	r3, [r0, #12]
 80092de:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80092e2:	f023 030c 	bic.w	r3, r3, #12
 80092e6:	684a      	ldr	r2, [r1, #4]
 80092e8:	68c9      	ldr	r1, [r1, #12]
 80092ea:	430a      	orrs	r2, r1
 80092ec:	6929      	ldr	r1, [r5, #16]
 80092ee:	430a      	orrs	r2, r1
 80092f0:	69a9      	ldr	r1, [r5, #24]
 80092f2:	430a      	orrs	r2, r1
 80092f4:	4313      	orrs	r3, r2
 80092f6:	60c3      	str	r3, [r0, #12]
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80092f8:	68ab      	ldr	r3, [r5, #8]
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80092fa:	6902      	ldr	r2, [r0, #16]
 80092fc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009300:	4313      	orrs	r3, r2
 8009302:	6103      	str	r3, [r0, #16]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8009304:	696b      	ldr	r3, [r5, #20]
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8009306:	6942      	ldr	r2, [r0, #20]
 8009308:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800930c:	4313      	orrs	r3, r2
 800930e:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8009310:	4668      	mov	r0, sp
 8009312:	f7ff ffc9 	bl	80092a8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8009316:	4b3c      	ldr	r3, [pc, #240]	; (8009408 <LL_USART_Init+0x140>)
 8009318:	429c      	cmp	r4, r3
 800931a:	d016      	beq.n	800934a <LL_USART_Init+0x82>
    else if (USARTx == USART2)
 800931c:	4b3b      	ldr	r3, [pc, #236]	; (800940c <LL_USART_Init+0x144>)
 800931e:	429c      	cmp	r4, r3
 8009320:	d01a      	beq.n	8009358 <LL_USART_Init+0x90>
    else if (USARTx == USART3)
 8009322:	4b3b      	ldr	r3, [pc, #236]	; (8009410 <LL_USART_Init+0x148>)
 8009324:	429c      	cmp	r4, r3
 8009326:	d019      	beq.n	800935c <LL_USART_Init+0x94>
    else if (USARTx == USART6)
 8009328:	4b3a      	ldr	r3, [pc, #232]	; (8009414 <LL_USART_Init+0x14c>)
 800932a:	429c      	cmp	r4, r3
 800932c:	d018      	beq.n	8009360 <LL_USART_Init+0x98>
    else if (USARTx == UART4)
 800932e:	4b3a      	ldr	r3, [pc, #232]	; (8009418 <LL_USART_Init+0x150>)
 8009330:	429c      	cmp	r4, r3
 8009332:	d017      	beq.n	8009364 <LL_USART_Init+0x9c>
    else if (USARTx == UART5)
 8009334:	4b39      	ldr	r3, [pc, #228]	; (800941c <LL_USART_Init+0x154>)
 8009336:	429c      	cmp	r4, r3
 8009338:	d016      	beq.n	8009368 <LL_USART_Init+0xa0>
    else if (USARTx == UART7)
 800933a:	4b39      	ldr	r3, [pc, #228]	; (8009420 <LL_USART_Init+0x158>)
 800933c:	429c      	cmp	r4, r3
 800933e:	d015      	beq.n	800936c <LL_USART_Init+0xa4>
    else if (USARTx == UART8)
 8009340:	4b38      	ldr	r3, [pc, #224]	; (8009424 <LL_USART_Init+0x15c>)
 8009342:	429c      	cmp	r4, r3
 8009344:	d014      	beq.n	8009370 <LL_USART_Init+0xa8>
  ErrorStatus status = ERROR;
 8009346:	2001      	movs	r0, #1
 8009348:	e05b      	b.n	8009402 <LL_USART_Init+0x13a>
      periphclk = rcc_clocks.PCLK2_Frequency;
 800934a:	9b03      	ldr	r3, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800934c:	2b00      	cmp	r3, #0
 800934e:	d057      	beq.n	8009400 <LL_USART_Init+0x138>
        && (USART_InitStruct->BaudRate != 0U))
 8009350:	682a      	ldr	r2, [r5, #0]
 8009352:	b97a      	cbnz	r2, 8009374 <LL_USART_Init+0xac>
  ErrorStatus status = ERROR;
 8009354:	2001      	movs	r0, #1
 8009356:	e054      	b.n	8009402 <LL_USART_Init+0x13a>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8009358:	9b02      	ldr	r3, [sp, #8]
 800935a:	e7f7      	b.n	800934c <LL_USART_Init+0x84>
      periphclk = rcc_clocks.PCLK1_Frequency;
 800935c:	9b02      	ldr	r3, [sp, #8]
 800935e:	e7f5      	b.n	800934c <LL_USART_Init+0x84>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8009360:	9b03      	ldr	r3, [sp, #12]
 8009362:	e7f3      	b.n	800934c <LL_USART_Init+0x84>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8009364:	9b02      	ldr	r3, [sp, #8]
 8009366:	e7f1      	b.n	800934c <LL_USART_Init+0x84>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8009368:	9b02      	ldr	r3, [sp, #8]
 800936a:	e7ef      	b.n	800934c <LL_USART_Init+0x84>
      periphclk = rcc_clocks.PCLK1_Frequency;
 800936c:	9b02      	ldr	r3, [sp, #8]
 800936e:	e7ed      	b.n	800934c <LL_USART_Init+0x84>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8009370:	9b02      	ldr	r3, [sp, #8]
 8009372:	e7eb      	b.n	800934c <LL_USART_Init+0x84>
      LL_USART_SetBaudRate(USARTx,
 8009374:	69a9      	ldr	r1, [r5, #24]
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8009376:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800937a:	d020      	beq.n	80093be <LL_USART_Init+0xf6>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800937c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009380:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009384:	0092      	lsls	r2, r2, #2
 8009386:	fbb3 f3f2 	udiv	r3, r3, r2
 800938a:	4827      	ldr	r0, [pc, #156]	; (8009428 <LL_USART_Init+0x160>)
 800938c:	fba0 1203 	umull	r1, r2, r0, r3
 8009390:	0952      	lsrs	r2, r2, #5
 8009392:	0111      	lsls	r1, r2, #4
 8009394:	b289      	uxth	r1, r1
 8009396:	2564      	movs	r5, #100	; 0x64
 8009398:	fb05 3312 	mls	r3, r5, r2, r3
 800939c:	011b      	lsls	r3, r3, #4
 800939e:	3332      	adds	r3, #50	; 0x32
 80093a0:	fba0 2303 	umull	r2, r3, r0, r3
 80093a4:	f3c3 134f 	ubfx	r3, r3, #5, #16
 80093a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80093ac:	440a      	add	r2, r1
 80093ae:	b292      	uxth	r2, r2
 80093b0:	f003 030f 	and.w	r3, r3, #15
 80093b4:	4413      	add	r3, r2
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 80093ba:	2000      	movs	r0, #0
  }
}
 80093bc:	e021      	b.n	8009402 <LL_USART_Init+0x13a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80093be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80093c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80093c6:	0052      	lsls	r2, r2, #1
 80093c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80093cc:	4816      	ldr	r0, [pc, #88]	; (8009428 <LL_USART_Init+0x160>)
 80093ce:	fba0 1203 	umull	r1, r2, r0, r3
 80093d2:	0952      	lsrs	r2, r2, #5
 80093d4:	0111      	lsls	r1, r2, #4
 80093d6:	b289      	uxth	r1, r1
 80093d8:	2564      	movs	r5, #100	; 0x64
 80093da:	fb05 3312 	mls	r3, r5, r2, r3
 80093de:	00db      	lsls	r3, r3, #3
 80093e0:	3332      	adds	r3, #50	; 0x32
 80093e2:	fba0 2303 	umull	r2, r3, r0, r3
 80093e6:	f3c3 134f 	ubfx	r3, r3, #5, #16
 80093ea:	005a      	lsls	r2, r3, #1
 80093ec:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80093f0:	440a      	add	r2, r1
 80093f2:	b292      	uxth	r2, r2
 80093f4:	f003 0307 	and.w	r3, r3, #7
 80093f8:	4413      	add	r3, r2
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	60a3      	str	r3, [r4, #8]
 80093fe:	e7dc      	b.n	80093ba <LL_USART_Init+0xf2>
  ErrorStatus status = ERROR;
 8009400:	2001      	movs	r0, #1
}
 8009402:	b005      	add	sp, #20
 8009404:	bd30      	pop	{r4, r5, pc}
 8009406:	bf00      	nop
 8009408:	40011000 	.word	0x40011000
 800940c:	40004400 	.word	0x40004400
 8009410:	40004800 	.word	0x40004800
 8009414:	40011400 	.word	0x40011400
 8009418:	40004c00 	.word	0x40004c00
 800941c:	40005000 	.word	0x40005000
 8009420:	40007800 	.word	0x40007800
 8009424:	40007c00 	.word	0x40007c00
 8009428:	51eb851f 	.word	0x51eb851f

0800942c <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 800942c:	ba40      	rev16	r0, r0
}
 800942e:	b280      	uxth	r0, r0
 8009430:	4770      	bx	lr

08009432 <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
 8009432:	0203      	lsls	r3, r0, #8
 8009434:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009438:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800943c:	0a02      	lsrs	r2, r0, #8
 800943e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8009442:	4313      	orrs	r3, r2
}
 8009444:	ea43 6010 	orr.w	r0, r3, r0, lsr #24
 8009448:	4770      	bx	lr

0800944a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800944a:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800944c:	f000 f878 	bl	8009540 <mem_init>
  memp_init();
 8009450:	f000 fa44 	bl	80098dc <memp_init>
  pbuf_init();
  netif_init();
 8009454:	f000 fa97 	bl	8009986 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009458:	f004 fbda 	bl	800dc10 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800945c:	f001 f830 	bl	800a4c0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8009460:	f004 fb5a 	bl	800db18 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009464:	bd08      	pop	{r3, pc}
	...

08009468 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009468:	b510      	push	{r4, lr}
 800946a:	4604      	mov	r4, r0
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800946c:	4b2d      	ldr	r3, [pc, #180]	; (8009524 <plug_holes+0xbc>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4283      	cmp	r3, r0
 8009472:	d831      	bhi.n	80094d8 <plug_holes+0x70>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009474:	4b2b      	ldr	r3, [pc, #172]	; (8009524 <plug_holes+0xbc>)
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	42a3      	cmp	r3, r4
 800947a:	d935      	bls.n	80094e8 <plug_holes+0x80>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800947c:	7923      	ldrb	r3, [r4, #4]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d13a      	bne.n	80094f8 <plug_holes+0x90>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009482:	8823      	ldrh	r3, [r4, #0]
 8009484:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009488:	d83e      	bhi.n	8009508 <plug_holes+0xa0>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800948a:	4b26      	ldr	r3, [pc, #152]	; (8009524 <plug_holes+0xbc>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	8821      	ldrh	r1, [r4, #0]
 8009490:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009492:	4294      	cmp	r4, r2
 8009494:	d00f      	beq.n	80094b6 <plug_holes+0x4e>
 8009496:	7910      	ldrb	r0, [r2, #4]
 8009498:	b968      	cbnz	r0, 80094b6 <plug_holes+0x4e>
 800949a:	4822      	ldr	r0, [pc, #136]	; (8009524 <plug_holes+0xbc>)
 800949c:	6840      	ldr	r0, [r0, #4]
 800949e:	4290      	cmp	r0, r2
 80094a0:	d009      	beq.n	80094b6 <plug_holes+0x4e>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80094a2:	4820      	ldr	r0, [pc, #128]	; (8009524 <plug_holes+0xbc>)
 80094a4:	6880      	ldr	r0, [r0, #8]
 80094a6:	4290      	cmp	r0, r2
 80094a8:	d036      	beq.n	8009518 <plug_holes+0xb0>
      lfree = mem;
    }
    mem->next = nmem->next;
 80094aa:	5a5a      	ldrh	r2, [r3, r1]
 80094ac:	8022      	strh	r2, [r4, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80094ae:	1ae0      	subs	r0, r4, r3
 80094b0:	5a5a      	ldrh	r2, [r3, r1]
 80094b2:	441a      	add	r2, r3
 80094b4:	8050      	strh	r0, [r2, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80094b6:	8861      	ldrh	r1, [r4, #2]
 80094b8:	185a      	adds	r2, r3, r1
  if (pmem != mem && pmem->used == 0) {
 80094ba:	4294      	cmp	r4, r2
 80094bc:	d00b      	beq.n	80094d6 <plug_holes+0x6e>
 80094be:	7910      	ldrb	r0, [r2, #4]
 80094c0:	b948      	cbnz	r0, 80094d6 <plug_holes+0x6e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80094c2:	4818      	ldr	r0, [pc, #96]	; (8009524 <plug_holes+0xbc>)
 80094c4:	6880      	ldr	r0, [r0, #8]
 80094c6:	42a0      	cmp	r0, r4
 80094c8:	d029      	beq.n	800951e <plug_holes+0xb6>
      lfree = pmem;
    }
    pmem->next = mem->next;
 80094ca:	8820      	ldrh	r0, [r4, #0]
 80094cc:	5258      	strh	r0, [r3, r1]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 80094ce:	1ad2      	subs	r2, r2, r3
 80094d0:	8821      	ldrh	r1, [r4, #0]
 80094d2:	440b      	add	r3, r1
 80094d4:	805a      	strh	r2, [r3, #2]
  }
}
 80094d6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80094d8:	4b13      	ldr	r3, [pc, #76]	; (8009528 <plug_holes+0xc0>)
 80094da:	f240 125d 	movw	r2, #349	; 0x15d
 80094de:	4913      	ldr	r1, [pc, #76]	; (800952c <plug_holes+0xc4>)
 80094e0:	4813      	ldr	r0, [pc, #76]	; (8009530 <plug_holes+0xc8>)
 80094e2:	f00c f829 	bl	8015538 <printf>
 80094e6:	e7c5      	b.n	8009474 <plug_holes+0xc>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80094e8:	4b0f      	ldr	r3, [pc, #60]	; (8009528 <plug_holes+0xc0>)
 80094ea:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80094ee:	4911      	ldr	r1, [pc, #68]	; (8009534 <plug_holes+0xcc>)
 80094f0:	480f      	ldr	r0, [pc, #60]	; (8009530 <plug_holes+0xc8>)
 80094f2:	f00c f821 	bl	8015538 <printf>
 80094f6:	e7c1      	b.n	800947c <plug_holes+0x14>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80094f8:	4b0b      	ldr	r3, [pc, #44]	; (8009528 <plug_holes+0xc0>)
 80094fa:	f240 125f 	movw	r2, #351	; 0x15f
 80094fe:	490e      	ldr	r1, [pc, #56]	; (8009538 <plug_holes+0xd0>)
 8009500:	480b      	ldr	r0, [pc, #44]	; (8009530 <plug_holes+0xc8>)
 8009502:	f00c f819 	bl	8015538 <printf>
 8009506:	e7bc      	b.n	8009482 <plug_holes+0x1a>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009508:	4b07      	ldr	r3, [pc, #28]	; (8009528 <plug_holes+0xc0>)
 800950a:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800950e:	490b      	ldr	r1, [pc, #44]	; (800953c <plug_holes+0xd4>)
 8009510:	4807      	ldr	r0, [pc, #28]	; (8009530 <plug_holes+0xc8>)
 8009512:	f00c f811 	bl	8015538 <printf>
 8009516:	e7b8      	b.n	800948a <plug_holes+0x22>
      lfree = mem;
 8009518:	4a02      	ldr	r2, [pc, #8]	; (8009524 <plug_holes+0xbc>)
 800951a:	6094      	str	r4, [r2, #8]
 800951c:	e7c5      	b.n	80094aa <plug_holes+0x42>
      lfree = pmem;
 800951e:	4801      	ldr	r0, [pc, #4]	; (8009524 <plug_holes+0xbc>)
 8009520:	6082      	str	r2, [r0, #8]
 8009522:	e7d2      	b.n	80094ca <plug_holes+0x62>
 8009524:	20004250 	.word	0x20004250
 8009528:	0801c94c 	.word	0x0801c94c
 800952c:	0801c97c 	.word	0x0801c97c
 8009530:	0801c994 	.word	0x0801c994
 8009534:	0801c9bc 	.word	0x0801c9bc
 8009538:	0801c9d8 	.word	0x0801c9d8
 800953c:	0801c9f4 	.word	0x0801c9f4

08009540 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009540:	b410      	push	{r4}

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009542:	4b0b      	ldr	r3, [pc, #44]	; (8009570 <mem_init+0x30>)
 8009544:	f023 0303 	bic.w	r3, r3, #3
 8009548:	4a0a      	ldr	r2, [pc, #40]	; (8009574 <mem_init+0x34>)
 800954a:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 800954c:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8009550:	8018      	strh	r0, [r3, #0]
  mem->prev = 0;
 8009552:	2100      	movs	r1, #0
 8009554:	8059      	strh	r1, [r3, #2]
  mem->used = 0;
 8009556:	7119      	strb	r1, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8009558:	1819      	adds	r1, r3, r0
 800955a:	6051      	str	r1, [r2, #4]
  ram_end->used = 1;
 800955c:	2401      	movs	r4, #1
 800955e:	710c      	strb	r4, [r1, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8009560:	f8a3 0640 	strh.w	r0, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 8009564:	8048      	strh	r0, [r1, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009566:	6093      	str	r3, [r2, #8]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8009568:	f85d 4b04 	ldr.w	r4, [sp], #4
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	200061fb 	.word	0x200061fb
 8009574:	20004250 	.word	0x20004250

08009578 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009578:	2800      	cmp	r0, #0
 800957a:	d03d      	beq.n	80095f8 <mem_free+0x80>
{
 800957c:	b538      	push	{r3, r4, r5, lr}
 800957e:	4604      	mov	r4, r0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8009580:	f010 0f03 	tst.w	r0, #3
 8009584:	d128      	bne.n	80095d8 <mem_free+0x60>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009586:	4b1d      	ldr	r3, [pc, #116]	; (80095fc <mem_free+0x84>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	42a3      	cmp	r3, r4
 800958c:	d803      	bhi.n	8009596 <mem_free+0x1e>
 800958e:	4b1b      	ldr	r3, [pc, #108]	; (80095fc <mem_free+0x84>)
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	42a3      	cmp	r3, r4
 8009594:	d806      	bhi.n	80095a4 <mem_free+0x2c>
 8009596:	4b1a      	ldr	r3, [pc, #104]	; (8009600 <mem_free+0x88>)
 8009598:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800959c:	4919      	ldr	r1, [pc, #100]	; (8009604 <mem_free+0x8c>)
 800959e:	481a      	ldr	r0, [pc, #104]	; (8009608 <mem_free+0x90>)
 80095a0:	f00b ffca 	bl	8015538 <printf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80095a4:	4b15      	ldr	r3, [pc, #84]	; (80095fc <mem_free+0x84>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	42a3      	cmp	r3, r4
 80095aa:	d814      	bhi.n	80095d6 <mem_free+0x5e>
 80095ac:	4b13      	ldr	r3, [pc, #76]	; (80095fc <mem_free+0x84>)
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	42a3      	cmp	r3, r4
 80095b2:	d910      	bls.n	80095d6 <mem_free+0x5e>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80095b4:	f1a4 0508 	sub.w	r5, r4, #8
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 80095b8:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 80095bc:	b1a3      	cbz	r3, 80095e8 <mem_free+0x70>
  /* ... and is now unused. */
  mem->used = 0;
 80095be:	2300      	movs	r3, #0
 80095c0:	f804 3c04 	strb.w	r3, [r4, #-4]

  if (mem < lfree) {
 80095c4:	4b0d      	ldr	r3, [pc, #52]	; (80095fc <mem_free+0x84>)
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	42ab      	cmp	r3, r5
 80095ca:	d901      	bls.n	80095d0 <mem_free+0x58>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80095cc:	4b0b      	ldr	r3, [pc, #44]	; (80095fc <mem_free+0x84>)
 80095ce:	609d      	str	r5, [r3, #8]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80095d0:	4628      	mov	r0, r5
 80095d2:	f7ff ff49 	bl	8009468 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80095d6:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 80095d8:	4b09      	ldr	r3, [pc, #36]	; (8009600 <mem_free+0x88>)
 80095da:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80095de:	490b      	ldr	r1, [pc, #44]	; (800960c <mem_free+0x94>)
 80095e0:	4809      	ldr	r0, [pc, #36]	; (8009608 <mem_free+0x90>)
 80095e2:	f00b ffa9 	bl	8015538 <printf>
 80095e6:	e7ce      	b.n	8009586 <mem_free+0xe>
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 80095e8:	4b05      	ldr	r3, [pc, #20]	; (8009600 <mem_free+0x88>)
 80095ea:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80095ee:	4908      	ldr	r1, [pc, #32]	; (8009610 <mem_free+0x98>)
 80095f0:	4805      	ldr	r0, [pc, #20]	; (8009608 <mem_free+0x90>)
 80095f2:	f00b ffa1 	bl	8015538 <printf>
 80095f6:	e7e2      	b.n	80095be <mem_free+0x46>
 80095f8:	4770      	bx	lr
 80095fa:	bf00      	nop
 80095fc:	20004250 	.word	0x20004250
 8009600:	0801c94c 	.word	0x0801c94c
 8009604:	0801ca44 	.word	0x0801ca44
 8009608:	0801c994 	.word	0x0801c994
 800960c:	0801ca20 	.word	0x0801ca20
 8009610:	0801ca5c 	.word	0x0801ca5c

08009614 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8009614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009616:	4605      	mov	r5, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8009618:	1ccc      	adds	r4, r1, #3
 800961a:	b2a4      	uxth	r4, r4
 800961c:	f024 0403 	bic.w	r4, r4, #3
 8009620:	b2a4      	uxth	r4, r4

  if (newsize < MIN_SIZE_ALIGNED) {
 8009622:	2c0b      	cmp	r4, #11
 8009624:	d905      	bls.n	8009632 <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8009626:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
 800962a:	d903      	bls.n	8009634 <mem_trim+0x20>
    return NULL;
 800962c:	2500      	movs	r5, #0
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 800962e:	4628      	mov	r0, r5
 8009630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    newsize = MIN_SIZE_ALIGNED;
 8009632:	240c      	movs	r4, #12
  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009634:	4b37      	ldr	r3, [pc, #220]	; (8009714 <mem_trim+0x100>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	42ab      	cmp	r3, r5
 800963a:	d803      	bhi.n	8009644 <mem_trim+0x30>
 800963c:	4b35      	ldr	r3, [pc, #212]	; (8009714 <mem_trim+0x100>)
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	42ab      	cmp	r3, r5
 8009642:	d806      	bhi.n	8009652 <mem_trim+0x3e>
 8009644:	4b34      	ldr	r3, [pc, #208]	; (8009718 <mem_trim+0x104>)
 8009646:	f240 12f3 	movw	r2, #499	; 0x1f3
 800964a:	4934      	ldr	r1, [pc, #208]	; (800971c <mem_trim+0x108>)
 800964c:	4834      	ldr	r0, [pc, #208]	; (8009720 <mem_trim+0x10c>)
 800964e:	f00b ff73 	bl	8015538 <printf>
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009652:	4b30      	ldr	r3, [pc, #192]	; (8009714 <mem_trim+0x100>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	42ab      	cmp	r3, r5
 8009658:	d8e9      	bhi.n	800962e <mem_trim+0x1a>
 800965a:	4a2e      	ldr	r2, [pc, #184]	; (8009714 <mem_trim+0x100>)
 800965c:	6852      	ldr	r2, [r2, #4]
 800965e:	42aa      	cmp	r2, r5
 8009660:	d9e5      	bls.n	800962e <mem_trim+0x1a>
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8009662:	f1a5 0708 	sub.w	r7, r5, #8
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8009666:	1aff      	subs	r7, r7, r3
 8009668:	b2bf      	uxth	r7, r7
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800966a:	f835 6c08 	ldrh.w	r6, [r5, #-8]
 800966e:	1bf6      	subs	r6, r6, r7
 8009670:	b2b6      	uxth	r6, r6
 8009672:	3e08      	subs	r6, #8
 8009674:	b2b6      	uxth	r6, r6
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009676:	42b4      	cmp	r4, r6
 8009678:	d820      	bhi.n	80096bc <mem_trim+0xa8>
  if (newsize > size) {
 800967a:	42b4      	cmp	r4, r6
 800967c:	d848      	bhi.n	8009710 <mem_trim+0xfc>
  if (newsize == size) {
 800967e:	d0d6      	beq.n	800962e <mem_trim+0x1a>
  mem2 = (struct mem *)(void *)&ram[mem->next];
 8009680:	4b24      	ldr	r3, [pc, #144]	; (8009714 <mem_trim+0x100>)
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	f835 3c08 	ldrh.w	r3, [r5, #-8]
 8009688:	18d1      	adds	r1, r2, r3
  if (mem2->used == 0) {
 800968a:	7908      	ldrb	r0, [r1, #4]
 800968c:	bb10      	cbnz	r0, 80096d4 <mem_trim+0xc0>
    next = mem2->next;
 800968e:	5ad0      	ldrh	r0, [r2, r3]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8009690:	19e3      	adds	r3, r4, r7
 8009692:	b29b      	uxth	r3, r3
 8009694:	3308      	adds	r3, #8
 8009696:	b29b      	uxth	r3, r3
    if (lfree == mem2) {
 8009698:	4c1e      	ldr	r4, [pc, #120]	; (8009714 <mem_trim+0x100>)
 800969a:	68a4      	ldr	r4, [r4, #8]
 800969c:	428c      	cmp	r4, r1
 800969e:	d015      	beq.n	80096cc <mem_trim+0xb8>
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80096a0:	18d1      	adds	r1, r2, r3
    mem2->used = 0;
 80096a2:	2400      	movs	r4, #0
 80096a4:	710c      	strb	r4, [r1, #4]
    mem2->next = next;
 80096a6:	52d0      	strh	r0, [r2, r3]
    mem2->prev = ptr;
 80096a8:	804f      	strh	r7, [r1, #2]
    mem->next = ptr2;
 80096aa:	f825 3c08 	strh.w	r3, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80096ae:	5ad1      	ldrh	r1, [r2, r3]
 80096b0:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 80096b4:	d0bb      	beq.n	800962e <mem_trim+0x1a>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80096b6:	440a      	add	r2, r1
 80096b8:	8053      	strh	r3, [r2, #2]
 80096ba:	e7b8      	b.n	800962e <mem_trim+0x1a>
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80096bc:	4b16      	ldr	r3, [pc, #88]	; (8009718 <mem_trim+0x104>)
 80096be:	f240 2206 	movw	r2, #518	; 0x206
 80096c2:	4918      	ldr	r1, [pc, #96]	; (8009724 <mem_trim+0x110>)
 80096c4:	4816      	ldr	r0, [pc, #88]	; (8009720 <mem_trim+0x10c>)
 80096c6:	f00b ff37 	bl	8015538 <printf>
 80096ca:	e7d6      	b.n	800967a <mem_trim+0x66>
      lfree = (struct mem *)(void *)&ram[ptr2];
 80096cc:	18d1      	adds	r1, r2, r3
 80096ce:	4c11      	ldr	r4, [pc, #68]	; (8009714 <mem_trim+0x100>)
 80096d0:	60a1      	str	r1, [r4, #8]
 80096d2:	e7e5      	b.n	80096a0 <mem_trim+0x8c>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80096d4:	f104 0314 	add.w	r3, r4, #20
 80096d8:	42b3      	cmp	r3, r6
 80096da:	d8a8      	bhi.n	800962e <mem_trim+0x1a>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80096dc:	19e3      	adds	r3, r4, r7
 80096de:	b29b      	uxth	r3, r3
 80096e0:	3308      	adds	r3, #8
 80096e2:	b29b      	uxth	r3, r3
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80096e4:	18d1      	adds	r1, r2, r3
    if (mem2 < lfree) {
 80096e6:	480b      	ldr	r0, [pc, #44]	; (8009714 <mem_trim+0x100>)
 80096e8:	6880      	ldr	r0, [r0, #8]
 80096ea:	4288      	cmp	r0, r1
 80096ec:	d901      	bls.n	80096f2 <mem_trim+0xde>
      lfree = mem2;
 80096ee:	4809      	ldr	r0, [pc, #36]	; (8009714 <mem_trim+0x100>)
 80096f0:	6081      	str	r1, [r0, #8]
    mem2->used = 0;
 80096f2:	2000      	movs	r0, #0
 80096f4:	7108      	strb	r0, [r1, #4]
    mem2->next = mem->next;
 80096f6:	f835 0c08 	ldrh.w	r0, [r5, #-8]
 80096fa:	52d0      	strh	r0, [r2, r3]
    mem2->prev = ptr;
 80096fc:	804f      	strh	r7, [r1, #2]
    mem->next = ptr2;
 80096fe:	f825 3c08 	strh.w	r3, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009702:	5ad1      	ldrh	r1, [r2, r3]
 8009704:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 8009708:	d091      	beq.n	800962e <mem_trim+0x1a>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800970a:	440a      	add	r2, r1
 800970c:	8053      	strh	r3, [r2, #2]
 800970e:	e78e      	b.n	800962e <mem_trim+0x1a>
    return NULL;
 8009710:	2500      	movs	r5, #0
 8009712:	e78c      	b.n	800962e <mem_trim+0x1a>
 8009714:	20004250 	.word	0x20004250
 8009718:	0801c94c 	.word	0x0801c94c
 800971c:	0801ca70 	.word	0x0801ca70
 8009720:	0801c994 	.word	0x0801c994
 8009724:	0801ca88 	.word	0x0801ca88

08009728 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8009728:	2800      	cmp	r0, #0
 800972a:	d07e      	beq.n	800982a <mem_malloc+0x102>
{
 800972c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800972e:	1cc2      	adds	r2, r0, #3
 8009730:	b292      	uxth	r2, r2
 8009732:	f022 0203 	bic.w	r2, r2, #3
 8009736:	b292      	uxth	r2, r2

  if (size < MIN_SIZE_ALIGNED) {
 8009738:	2a0b      	cmp	r2, #11
 800973a:	d904      	bls.n	8009746 <mem_malloc+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 800973c:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
 8009740:	d902      	bls.n	8009748 <mem_malloc+0x20>
    return NULL;
 8009742:	2000      	movs	r0, #0
 8009744:	e070      	b.n	8009828 <mem_malloc+0x100>
    size = MIN_SIZE_ALIGNED;
 8009746:	220c      	movs	r2, #12
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8009748:	4b39      	ldr	r3, [pc, #228]	; (8009830 <mem_malloc+0x108>)
 800974a:	689f      	ldr	r7, [r3, #8]
 800974c:	681e      	ldr	r6, [r3, #0]
 800974e:	1bbb      	subs	r3, r7, r6
 8009750:	b29b      	uxth	r3, r3
 8009752:	e040      	b.n	80097d6 <mem_malloc+0xae>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009754:	2301      	movs	r3, #1
 8009756:	7123      	strb	r3, [r4, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009758:	42a7      	cmp	r7, r4
 800975a:	d00e      	beq.n	800977a <mem_malloc+0x52>
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800975c:	4425      	add	r5, r4
 800975e:	3508      	adds	r5, #8
 8009760:	4b33      	ldr	r3, [pc, #204]	; (8009830 <mem_malloc+0x108>)
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	429d      	cmp	r5, r3
 8009766:	d81d      	bhi.n	80097a4 <mem_malloc+0x7c>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009768:	f014 0503 	ands.w	r5, r4, #3
 800976c:	d122      	bne.n	80097b4 <mem_malloc+0x8c>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800976e:	bb4d      	cbnz	r5, 80097c4 <mem_malloc+0x9c>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8009770:	f104 0008 	add.w	r0, r4, #8
 8009774:	e058      	b.n	8009828 <mem_malloc+0x100>
            cur = (struct mem *)(void *)&ram[cur->next];
 8009776:	883f      	ldrh	r7, [r7, #0]
 8009778:	4437      	add	r7, r6
          while (cur->used && cur != ram_end) {
 800977a:	793b      	ldrb	r3, [r7, #4]
 800977c:	b11b      	cbz	r3, 8009786 <mem_malloc+0x5e>
 800977e:	4a2c      	ldr	r2, [pc, #176]	; (8009830 <mem_malloc+0x108>)
 8009780:	6852      	ldr	r2, [r2, #4]
 8009782:	42ba      	cmp	r2, r7
 8009784:	d1f7      	bne.n	8009776 <mem_malloc+0x4e>
          lfree = cur;
 8009786:	4a2a      	ldr	r2, [pc, #168]	; (8009830 <mem_malloc+0x108>)
 8009788:	6097      	str	r7, [r2, #8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800978a:	6852      	ldr	r2, [r2, #4]
 800978c:	42ba      	cmp	r2, r7
 800978e:	d0e5      	beq.n	800975c <mem_malloc+0x34>
 8009790:	2b00      	cmp	r3, #0
 8009792:	d0e3      	beq.n	800975c <mem_malloc+0x34>
 8009794:	4b27      	ldr	r3, [pc, #156]	; (8009834 <mem_malloc+0x10c>)
 8009796:	f240 22cf 	movw	r2, #719	; 0x2cf
 800979a:	4927      	ldr	r1, [pc, #156]	; (8009838 <mem_malloc+0x110>)
 800979c:	4827      	ldr	r0, [pc, #156]	; (800983c <mem_malloc+0x114>)
 800979e:	f00b fecb 	bl	8015538 <printf>
 80097a2:	e7db      	b.n	800975c <mem_malloc+0x34>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80097a4:	4b23      	ldr	r3, [pc, #140]	; (8009834 <mem_malloc+0x10c>)
 80097a6:	f240 22d3 	movw	r2, #723	; 0x2d3
 80097aa:	4925      	ldr	r1, [pc, #148]	; (8009840 <mem_malloc+0x118>)
 80097ac:	4823      	ldr	r0, [pc, #140]	; (800983c <mem_malloc+0x114>)
 80097ae:	f00b fec3 	bl	8015538 <printf>
 80097b2:	e7d9      	b.n	8009768 <mem_malloc+0x40>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80097b4:	4b1f      	ldr	r3, [pc, #124]	; (8009834 <mem_malloc+0x10c>)
 80097b6:	f240 22d5 	movw	r2, #725	; 0x2d5
 80097ba:	4922      	ldr	r1, [pc, #136]	; (8009844 <mem_malloc+0x11c>)
 80097bc:	481f      	ldr	r0, [pc, #124]	; (800983c <mem_malloc+0x114>)
 80097be:	f00b febb 	bl	8015538 <printf>
 80097c2:	e7d4      	b.n	800976e <mem_malloc+0x46>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80097c4:	4b1b      	ldr	r3, [pc, #108]	; (8009834 <mem_malloc+0x10c>)
 80097c6:	f240 22d7 	movw	r2, #727	; 0x2d7
 80097ca:	491f      	ldr	r1, [pc, #124]	; (8009848 <mem_malloc+0x120>)
 80097cc:	481b      	ldr	r0, [pc, #108]	; (800983c <mem_malloc+0x114>)
 80097ce:	f00b feb3 	bl	8015538 <printf>
 80097d2:	e7cd      	b.n	8009770 <mem_malloc+0x48>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 80097d4:	8823      	ldrh	r3, [r4, #0]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80097d6:	469c      	mov	ip, r3
 80097d8:	4615      	mov	r5, r2
 80097da:	f5c2 60c8 	rsb	r0, r2, #1600	; 0x640
 80097de:	4283      	cmp	r3, r0
 80097e0:	d221      	bcs.n	8009826 <mem_malloc+0xfe>
      mem = (struct mem *)(void *)&ram[ptr];
 80097e2:	18f4      	adds	r4, r6, r3
      if ((!mem->used) &&
 80097e4:	7920      	ldrb	r0, [r4, #4]
 80097e6:	2800      	cmp	r0, #0
 80097e8:	d1f4      	bne.n	80097d4 <mem_malloc+0xac>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80097ea:	5af1      	ldrh	r1, [r6, r3]
 80097ec:	eba1 010c 	sub.w	r1, r1, ip
 80097f0:	3908      	subs	r1, #8
      if ((!mem->used) &&
 80097f2:	42a9      	cmp	r1, r5
 80097f4:	d3ee      	bcc.n	80097d4 <mem_malloc+0xac>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80097f6:	f105 0014 	add.w	r0, r5, #20
 80097fa:	4281      	cmp	r1, r0
 80097fc:	d3aa      	bcc.n	8009754 <mem_malloc+0x2c>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 80097fe:	441a      	add	r2, r3
 8009800:	b292      	uxth	r2, r2
 8009802:	3208      	adds	r2, #8
 8009804:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8009806:	18b1      	adds	r1, r6, r2
          mem2->used = 0;
 8009808:	2000      	movs	r0, #0
 800980a:	7108      	strb	r0, [r1, #4]
          mem2->next = mem->next;
 800980c:	8820      	ldrh	r0, [r4, #0]
 800980e:	52b0      	strh	r0, [r6, r2]
          mem2->prev = ptr;
 8009810:	804b      	strh	r3, [r1, #2]
          mem->next = ptr2;
 8009812:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 8009814:	2301      	movs	r3, #1
 8009816:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009818:	5ab3      	ldrh	r3, [r6, r2]
 800981a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800981e:	d09b      	beq.n	8009758 <mem_malloc+0x30>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8009820:	4433      	add	r3, r6
 8009822:	805a      	strh	r2, [r3, #2]
 8009824:	e798      	b.n	8009758 <mem_malloc+0x30>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8009826:	2000      	movs	r0, #0
}
 8009828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
 800982a:	2000      	movs	r0, #0
}
 800982c:	4770      	bx	lr
 800982e:	bf00      	nop
 8009830:	20004250 	.word	0x20004250
 8009834:	0801c94c 	.word	0x0801c94c
 8009838:	0801caa8 	.word	0x0801caa8
 800983c:	0801c994 	.word	0x0801c994
 8009840:	0801cac4 	.word	0x0801cac4
 8009844:	0801caf4 	.word	0x0801caf4
 8009848:	0801cb24 	.word	0x0801cb24

0800984c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800984c:	b510      	push	{r4, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800984e:	6883      	ldr	r3, [r0, #8]
 8009850:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009852:	b124      	cbz	r4, 800985e <do_memp_malloc_pool+0x12>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009854:	6822      	ldr	r2, [r4, #0]
 8009856:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009858:	f014 0f03 	tst.w	r4, #3
 800985c:	d101      	bne.n	8009862 <do_memp_malloc_pool+0x16>
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
}
 800985e:	4620      	mov	r0, r4
 8009860:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009862:	4b04      	ldr	r3, [pc, #16]	; (8009874 <do_memp_malloc_pool+0x28>)
 8009864:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8009868:	4903      	ldr	r1, [pc, #12]	; (8009878 <do_memp_malloc_pool+0x2c>)
 800986a:	4804      	ldr	r0, [pc, #16]	; (800987c <do_memp_malloc_pool+0x30>)
 800986c:	f00b fe64 	bl	8015538 <printf>
    return ((u8_t*)memp + MEMP_SIZE);
 8009870:	e7f5      	b.n	800985e <do_memp_malloc_pool+0x12>
 8009872:	bf00      	nop
 8009874:	0801cb48 	.word	0x0801cb48
 8009878:	0801cb78 	.word	0x0801cb78
 800987c:	0801c994 	.word	0x0801c994

08009880 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8009880:	b538      	push	{r3, r4, r5, lr}
 8009882:	4605      	mov	r5, r0
 8009884:	460c      	mov	r4, r1
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009886:	f011 0f03 	tst.w	r1, #3
 800988a:	d105      	bne.n	8009898 <do_memp_free_pool+0x18>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800988c:	68ab      	ldr	r3, [r5, #8]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	6023      	str	r3, [r4, #0]
  *desc->tab = memp;
 8009892:	68ab      	ldr	r3, [r5, #8]
 8009894:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8009896:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 8009898:	4b03      	ldr	r3, [pc, #12]	; (80098a8 <do_memp_free_pool+0x28>)
 800989a:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800989e:	4903      	ldr	r1, [pc, #12]	; (80098ac <do_memp_free_pool+0x2c>)
 80098a0:	4803      	ldr	r0, [pc, #12]	; (80098b0 <do_memp_free_pool+0x30>)
 80098a2:	f00b fe49 	bl	8015538 <printf>
 80098a6:	e7f1      	b.n	800988c <do_memp_free_pool+0xc>
 80098a8:	0801cb48 	.word	0x0801cb48
 80098ac:	0801cb9c 	.word	0x0801cb9c
 80098b0:	0801c994 	.word	0x0801c994

080098b4 <memp_init_pool>:
  *desc->tab = NULL;
 80098b4:	6883      	ldr	r3, [r0, #8]
 80098b6:	2200      	movs	r2, #0
 80098b8:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 80098ba:	6843      	ldr	r3, [r0, #4]
 80098bc:	3303      	adds	r3, #3
 80098be:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 80098c2:	8841      	ldrh	r1, [r0, #2]
 80098c4:	4291      	cmp	r1, r2
 80098c6:	dd08      	ble.n	80098da <memp_init_pool+0x26>
    memp->next = *desc->tab;
 80098c8:	6881      	ldr	r1, [r0, #8]
 80098ca:	6809      	ldr	r1, [r1, #0]
 80098cc:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 80098ce:	6881      	ldr	r1, [r0, #8]
 80098d0:	600b      	str	r3, [r1, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80098d2:	8801      	ldrh	r1, [r0, #0]
 80098d4:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 80098d6:	3201      	adds	r2, #1
 80098d8:	e7f3      	b.n	80098c2 <memp_init_pool+0xe>
}
 80098da:	4770      	bx	lr

080098dc <memp_init>:
{
 80098dc:	b510      	push	{r4, lr}
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80098de:	2400      	movs	r4, #0
 80098e0:	e006      	b.n	80098f0 <memp_init+0x14>
    memp_init_pool(memp_pools[i]);
 80098e2:	4b05      	ldr	r3, [pc, #20]	; (80098f8 <memp_init+0x1c>)
 80098e4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80098e8:	f7ff ffe4 	bl	80098b4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80098ec:	3401      	adds	r4, #1
 80098ee:	b2a4      	uxth	r4, r4
 80098f0:	2c08      	cmp	r4, #8
 80098f2:	d9f6      	bls.n	80098e2 <memp_init+0x6>
}
 80098f4:	bd10      	pop	{r4, pc}
 80098f6:	bf00      	nop
 80098f8:	0801c820 	.word	0x0801c820

080098fc <memp_malloc>:
{
 80098fc:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80098fe:	2808      	cmp	r0, #8
 8009900:	d805      	bhi.n	800990e <memp_malloc+0x12>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009902:	4b07      	ldr	r3, [pc, #28]	; (8009920 <memp_malloc+0x24>)
 8009904:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009908:	f7ff ffa0 	bl	800984c <do_memp_malloc_pool>
}
 800990c:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800990e:	4b05      	ldr	r3, [pc, #20]	; (8009924 <memp_malloc+0x28>)
 8009910:	f240 1287 	movw	r2, #391	; 0x187
 8009914:	4904      	ldr	r1, [pc, #16]	; (8009928 <memp_malloc+0x2c>)
 8009916:	4805      	ldr	r0, [pc, #20]	; (800992c <memp_malloc+0x30>)
 8009918:	f00b fe0e 	bl	8015538 <printf>
 800991c:	2000      	movs	r0, #0
 800991e:	e7f5      	b.n	800990c <memp_malloc+0x10>
 8009920:	0801c820 	.word	0x0801c820
 8009924:	0801cb48 	.word	0x0801cb48
 8009928:	0801cbd0 	.word	0x0801cbd0
 800992c:	0801c994 	.word	0x0801c994

08009930 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009930:	b508      	push	{r3, lr}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009932:	2808      	cmp	r0, #8
 8009934:	d806      	bhi.n	8009944 <memp_free+0x14>

  if (mem == NULL) {
 8009936:	b121      	cbz	r1, 8009942 <memp_free+0x12>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009938:	4b06      	ldr	r3, [pc, #24]	; (8009954 <memp_free+0x24>)
 800993a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800993e:	f7ff ff9f 	bl	8009880 <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009942:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009944:	4b04      	ldr	r3, [pc, #16]	; (8009958 <memp_free+0x28>)
 8009946:	f240 12db 	movw	r2, #475	; 0x1db
 800994a:	4904      	ldr	r1, [pc, #16]	; (800995c <memp_free+0x2c>)
 800994c:	4804      	ldr	r0, [pc, #16]	; (8009960 <memp_free+0x30>)
 800994e:	f00b fdf3 	bl	8015538 <printf>
 8009952:	e7f6      	b.n	8009942 <memp_free+0x12>
 8009954:	0801c820 	.word	0x0801c820
 8009958:	0801cb48 	.word	0x0801cb48
 800995c:	0801cbf0 	.word	0x0801cbf0
 8009960:	0801c994 	.word	0x0801c994

08009964 <netif_issue_reports>:
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009964:	f011 0f01 	tst.w	r1, #1
 8009968:	d00c      	beq.n	8009984 <netif_issue_reports+0x20>
{
 800996a:	b508      	push	{r3, lr}
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800996c:	6843      	ldr	r3, [r0, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800996e:	b123      	cbz	r3, 800997a <netif_issue_reports+0x16>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009970:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8009974:	f013 0f08 	tst.w	r3, #8
 8009978:	d100      	bne.n	800997c <netif_issue_reports+0x18>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800997a:	bd08      	pop	{r3, pc}
      etharp_gratuitous(netif);
 800997c:	1d01      	adds	r1, r0, #4
 800997e:	f004 fc4b 	bl	800e218 <etharp_request>
}
 8009982:	e7fa      	b.n	800997a <netif_issue_reports+0x16>
 8009984:	4770      	bx	lr

08009986 <netif_init>:
}
 8009986:	4770      	bx	lr

08009988 <netif_set_ipaddr>:
{
 8009988:	b570      	push	{r4, r5, r6, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	4604      	mov	r4, r0
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800998e:	460d      	mov	r5, r1
 8009990:	b139      	cbz	r1, 80099a2 <netif_set_ipaddr+0x1a>
 8009992:	680b      	ldr	r3, [r1, #0]
 8009994:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8009996:	6863      	ldr	r3, [r4, #4]
 8009998:	9a01      	ldr	r2, [sp, #4]
 800999a:	429a      	cmp	r2, r3
 800999c:	d105      	bne.n	80099aa <netif_set_ipaddr+0x22>
}
 800999e:	b002      	add	sp, #8
 80099a0:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 80099a2:	4b0b      	ldr	r3, [pc, #44]	; (80099d0 <netif_set_ipaddr+0x48>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	9301      	str	r3, [sp, #4]
 80099a8:	e7f5      	b.n	8009996 <netif_set_ipaddr+0xe>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80099aa:	1d26      	adds	r6, r4, #4
 80099ac:	a901      	add	r1, sp, #4
 80099ae:	4630      	mov	r0, r6
 80099b0:	f001 fcc6 	bl	800b340 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80099b4:	a901      	add	r1, sp, #4
 80099b6:	4630      	mov	r0, r6
 80099b8:	f004 f9c8 	bl	800dd4c <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80099bc:	b135      	cbz	r5, 80099cc <netif_set_ipaddr+0x44>
 80099be:	682b      	ldr	r3, [r5, #0]
 80099c0:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80099c2:	2101      	movs	r1, #1
 80099c4:	4620      	mov	r0, r4
 80099c6:	f7ff ffcd 	bl	8009964 <netif_issue_reports>
}
 80099ca:	e7e8      	b.n	800999e <netif_set_ipaddr+0x16>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80099cc:	2300      	movs	r3, #0
 80099ce:	e7f7      	b.n	80099c0 <netif_set_ipaddr+0x38>
 80099d0:	0801c920 	.word	0x0801c920

080099d4 <netif_set_gw>:
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80099d4:	b111      	cbz	r1, 80099dc <netif_set_gw+0x8>
 80099d6:	680b      	ldr	r3, [r1, #0]
 80099d8:	60c3      	str	r3, [r0, #12]
}
 80099da:	4770      	bx	lr
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80099dc:	2300      	movs	r3, #0
 80099de:	e7fb      	b.n	80099d8 <netif_set_gw+0x4>

080099e0 <netif_set_netmask>:
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80099e0:	b111      	cbz	r1, 80099e8 <netif_set_netmask+0x8>
 80099e2:	680b      	ldr	r3, [r1, #0]
 80099e4:	6083      	str	r3, [r0, #8]
}
 80099e6:	4770      	bx	lr
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80099e8:	2300      	movs	r3, #0
 80099ea:	e7fb      	b.n	80099e4 <netif_set_netmask+0x4>

080099ec <netif_set_addr>:
{
 80099ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ee:	4604      	mov	r4, r0
 80099f0:	4616      	mov	r6, r2
 80099f2:	461d      	mov	r5, r3
  if (ip4_addr_isany(ipaddr)) {
 80099f4:	460f      	mov	r7, r1
 80099f6:	b109      	cbz	r1, 80099fc <netif_set_addr+0x10>
 80099f8:	680b      	ldr	r3, [r1, #0]
 80099fa:	b963      	cbnz	r3, 8009a16 <netif_set_addr+0x2a>
    netif_set_ipaddr(netif, ipaddr);
 80099fc:	4639      	mov	r1, r7
 80099fe:	4620      	mov	r0, r4
 8009a00:	f7ff ffc2 	bl	8009988 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8009a04:	4631      	mov	r1, r6
 8009a06:	4620      	mov	r0, r4
 8009a08:	f7ff ffea 	bl	80099e0 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8009a0c:	4629      	mov	r1, r5
 8009a0e:	4620      	mov	r0, r4
 8009a10:	f7ff ffe0 	bl	80099d4 <netif_set_gw>
}
 8009a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    netif_set_netmask(netif, netmask);
 8009a16:	4611      	mov	r1, r2
 8009a18:	f7ff ffe2 	bl	80099e0 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8009a1c:	4629      	mov	r1, r5
 8009a1e:	4620      	mov	r0, r4
 8009a20:	f7ff ffd8 	bl	80099d4 <netif_set_gw>
    netif_set_ipaddr(netif, ipaddr);
 8009a24:	4639      	mov	r1, r7
 8009a26:	4620      	mov	r0, r4
 8009a28:	f7ff ffae 	bl	8009988 <netif_set_ipaddr>
}
 8009a2c:	e7f2      	b.n	8009a14 <netif_set_addr+0x28>
	...

08009a30 <netif_add>:
{
 8009a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a34:	4604      	mov	r4, r0
 8009a36:	460d      	mov	r5, r1
 8009a38:	4616      	mov	r6, r2
 8009a3a:	461f      	mov	r7, r3
 8009a3c:	f8dd 801c 	ldr.w	r8, [sp, #28]
  LWIP_ASSERT("No init function given", init != NULL);
 8009a40:	f1b8 0f00 	cmp.w	r8, #0
 8009a44:	d022      	beq.n	8009a8c <netif_add+0x5c>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009a46:	2000      	movs	r0, #0
 8009a48:	6060      	str	r0, [r4, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009a4a:	60a0      	str	r0, [r4, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009a4c:	60e0      	str	r0, [r4, #12]
  netif->flags = 0;
 8009a4e:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8009a52:	2303      	movs	r3, #3
 8009a54:	f884 3020 	strb.w	r3, [r4, #32]
  netif->state = state;
 8009a58:	9b06      	ldr	r3, [sp, #24]
 8009a5a:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 8009a5c:	4a10      	ldr	r2, [pc, #64]	; (8009aa0 <netif_add+0x70>)
 8009a5e:	7813      	ldrb	r3, [r2, #0]
 8009a60:	1c59      	adds	r1, r3, #1
 8009a62:	7011      	strb	r1, [r2, #0]
 8009a64:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->input = input;
 8009a68:	9b08      	ldr	r3, [sp, #32]
 8009a6a:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009a6c:	463b      	mov	r3, r7
 8009a6e:	4632      	mov	r2, r6
 8009a70:	4629      	mov	r1, r5
 8009a72:	4620      	mov	r0, r4
 8009a74:	f7ff ffba 	bl	80099ec <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8009a78:	4620      	mov	r0, r4
 8009a7a:	47c0      	blx	r8
 8009a7c:	b968      	cbnz	r0, 8009a9a <netif_add+0x6a>
  netif->next = netif_list;
 8009a7e:	4b09      	ldr	r3, [pc, #36]	; (8009aa4 <netif_add+0x74>)
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 8009a84:	601c      	str	r4, [r3, #0]
  return netif;
 8009a86:	4620      	mov	r0, r4
}
 8009a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("No init function given", init != NULL);
 8009a8c:	4b06      	ldr	r3, [pc, #24]	; (8009aa8 <netif_add+0x78>)
 8009a8e:	22fb      	movs	r2, #251	; 0xfb
 8009a90:	4906      	ldr	r1, [pc, #24]	; (8009aac <netif_add+0x7c>)
 8009a92:	4807      	ldr	r0, [pc, #28]	; (8009ab0 <netif_add+0x80>)
 8009a94:	f00b fd50 	bl	8015538 <printf>
 8009a98:	e7d5      	b.n	8009a46 <netif_add+0x16>
    return NULL;
 8009a9a:	2000      	movs	r0, #0
 8009a9c:	e7f4      	b.n	8009a88 <netif_add+0x58>
 8009a9e:	bf00      	nop
 8009aa0:	20004280 	.word	0x20004280
 8009aa4:	20009700 	.word	0x20009700
 8009aa8:	0801cc0c 	.word	0x0801cc0c
 8009aac:	0801cc40 	.word	0x0801cc40
 8009ab0:	0801c994 	.word	0x0801c994

08009ab4 <netif_set_default>:
  netif_default = netif;
 8009ab4:	4b01      	ldr	r3, [pc, #4]	; (8009abc <netif_set_default+0x8>)
 8009ab6:	6018      	str	r0, [r3, #0]
}
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop
 8009abc:	20009704 	.word	0x20009704

08009ac0 <netif_set_up>:
{
 8009ac0:	b508      	push	{r3, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009ac2:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8009ac6:	f013 0f01 	tst.w	r3, #1
 8009aca:	d106      	bne.n	8009ada <netif_set_up+0x1a>
    netif->flags |= NETIF_FLAG_UP;
 8009acc:	f043 0301 	orr.w	r3, r3, #1
 8009ad0:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009ad4:	f013 0f04 	tst.w	r3, #4
 8009ad8:	d100      	bne.n	8009adc <netif_set_up+0x1c>
}
 8009ada:	bd08      	pop	{r3, pc}
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8009adc:	2103      	movs	r1, #3
 8009ade:	f7ff ff41 	bl	8009964 <netif_issue_reports>
}
 8009ae2:	e7fa      	b.n	8009ada <netif_set_up+0x1a>

08009ae4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009ae4:	b508      	push	{r3, lr}
  if (netif->flags & NETIF_FLAG_UP) {
 8009ae6:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8009aea:	f013 0f01 	tst.w	r3, #1
 8009aee:	d006      	beq.n	8009afe <netif_set_down+0x1a>
    netif->flags &= ~NETIF_FLAG_UP;
 8009af0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009af4:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009af8:	f013 0f08 	tst.w	r3, #8
 8009afc:	d100      	bne.n	8009b00 <netif_set_down+0x1c>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8009afe:	bd08      	pop	{r3, pc}
      etharp_cleanup_netif(netif);
 8009b00:	f004 fb10 	bl	800e124 <etharp_cleanup_netif>
}
 8009b04:	e7fb      	b.n	8009afe <netif_set_down+0x1a>
	...

08009b08 <pbuf_pool_is_empty>:
/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8009b08:	4b01      	ldr	r3, [pc, #4]	; (8009b10 <pbuf_pool_is_empty+0x8>)
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8009b0e:	4770      	bx	lr
 8009b10:	20009708 	.word	0x20009708

08009b14 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009b14:	b570      	push	{r4, r5, r6, lr}
 8009b16:	460c      	mov	r4, r1
 8009b18:	4616      	mov	r6, r2
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009b1a:	4605      	mov	r5, r0
 8009b1c:	b1c0      	cbz	r0, 8009b50 <pbuf_header_impl+0x3c>
  if ((header_size_increment == 0) || (p == NULL)) {
 8009b1e:	2c00      	cmp	r4, #0
 8009b20:	d04e      	beq.n	8009bc0 <pbuf_header_impl+0xac>
 8009b22:	2d00      	cmp	r5, #0
 8009b24:	d04e      	beq.n	8009bc4 <pbuf_header_impl+0xb0>
    return 0;
  }

  if (header_size_increment < 0) {
 8009b26:	2c00      	cmp	r4, #0
 8009b28:	db1a      	blt.n	8009b60 <pbuf_header_impl+0x4c>
    increment_magnitude = (u16_t)-header_size_increment;
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8009b2a:	b2a2      	uxth	r2, r4
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8009b2c:	7b2b      	ldrb	r3, [r5, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8009b2e:	6869      	ldr	r1, [r5, #4]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8009b30:	b32b      	cbz	r3, 8009b7e <pbuf_header_impl+0x6a>
 8009b32:	2b03      	cmp	r3, #3
 8009b34:	d023      	beq.n	8009b7e <pbuf_header_impl+0x6a>
      p->payload = payload;
      /* bail out unsuccessfully */
      return 1;
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8009b36:	3b01      	subs	r3, #1
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d837      	bhi.n	8009bae <pbuf_header_impl+0x9a>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8009b3e:	2c00      	cmp	r4, #0
 8009b40:	db2f      	blt.n	8009ba2 <pbuf_header_impl+0x8e>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
    } else if ((header_size_increment > 0) && force) {
 8009b42:	2c00      	cmp	r4, #0
 8009b44:	dd40      	ble.n	8009bc8 <pbuf_header_impl+0xb4>
 8009b46:	2e00      	cmp	r6, #0
 8009b48:	d040      	beq.n	8009bcc <pbuf_header_impl+0xb8>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8009b4a:	1b09      	subs	r1, r1, r4
 8009b4c:	6069      	str	r1, [r5, #4]
 8009b4e:	e01c      	b.n	8009b8a <pbuf_header_impl+0x76>
  LWIP_ASSERT("p != NULL", p != NULL);
 8009b50:	4b1f      	ldr	r3, [pc, #124]	; (8009bd0 <pbuf_header_impl+0xbc>)
 8009b52:	f240 223f 	movw	r2, #575	; 0x23f
 8009b56:	491f      	ldr	r1, [pc, #124]	; (8009bd4 <pbuf_header_impl+0xc0>)
 8009b58:	481f      	ldr	r0, [pc, #124]	; (8009bd8 <pbuf_header_impl+0xc4>)
 8009b5a:	f00b fced 	bl	8015538 <printf>
 8009b5e:	e7de      	b.n	8009b1e <pbuf_header_impl+0xa>
    increment_magnitude = (u16_t)-header_size_increment;
 8009b60:	b2a2      	uxth	r2, r4
 8009b62:	4252      	negs	r2, r2
 8009b64:	b292      	uxth	r2, r2
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009b66:	896b      	ldrh	r3, [r5, #10]
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d2df      	bcs.n	8009b2c <pbuf_header_impl+0x18>
 8009b6c:	4b18      	ldr	r3, [pc, #96]	; (8009bd0 <pbuf_header_impl+0xbc>)
 8009b6e:	f240 2247 	movw	r2, #583	; 0x247
 8009b72:	491a      	ldr	r1, [pc, #104]	; (8009bdc <pbuf_header_impl+0xc8>)
 8009b74:	4818      	ldr	r0, [pc, #96]	; (8009bd8 <pbuf_header_impl+0xc4>)
 8009b76:	f00b fcdf 	bl	8015538 <printf>
 8009b7a:	2001      	movs	r0, #1
 8009b7c:	e021      	b.n	8009bc2 <pbuf_header_impl+0xae>
    p->payload = (u8_t *)p->payload - header_size_increment;
 8009b7e:	1b0b      	subs	r3, r1, r4
 8009b80:	606b      	str	r3, [r5, #4]
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009b82:	f105 0210 	add.w	r2, r5, #16
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d308      	bcc.n	8009b9c <pbuf_header_impl+0x88>
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8009b8a:	b2a4      	uxth	r4, r4
 8009b8c:	896b      	ldrh	r3, [r5, #10]
 8009b8e:	4423      	add	r3, r4
 8009b90:	816b      	strh	r3, [r5, #10]
  p->tot_len += header_size_increment;
 8009b92:	8929      	ldrh	r1, [r5, #8]
 8009b94:	440c      	add	r4, r1
 8009b96:	812c      	strh	r4, [r5, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8009b98:	2000      	movs	r0, #0
 8009b9a:	e012      	b.n	8009bc2 <pbuf_header_impl+0xae>
      p->payload = payload;
 8009b9c:	6069      	str	r1, [r5, #4]
      return 1;
 8009b9e:	2001      	movs	r0, #1
 8009ba0:	e00f      	b.n	8009bc2 <pbuf_header_impl+0xae>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8009ba2:	896b      	ldrh	r3, [r5, #10]
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d3cc      	bcc.n	8009b42 <pbuf_header_impl+0x2e>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8009ba8:	1b09      	subs	r1, r1, r4
 8009baa:	6069      	str	r1, [r5, #4]
 8009bac:	e7ed      	b.n	8009b8a <pbuf_header_impl+0x76>
    LWIP_ASSERT("bad pbuf type", 0);
 8009bae:	4b08      	ldr	r3, [pc, #32]	; (8009bd0 <pbuf_header_impl+0xbc>)
 8009bb0:	f240 2277 	movw	r2, #631	; 0x277
 8009bb4:	490a      	ldr	r1, [pc, #40]	; (8009be0 <pbuf_header_impl+0xcc>)
 8009bb6:	4808      	ldr	r0, [pc, #32]	; (8009bd8 <pbuf_header_impl+0xc4>)
 8009bb8:	f00b fcbe 	bl	8015538 <printf>
    return 1;
 8009bbc:	2001      	movs	r0, #1
 8009bbe:	e000      	b.n	8009bc2 <pbuf_header_impl+0xae>
    return 0;
 8009bc0:	2000      	movs	r0, #0
}
 8009bc2:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	e7fc      	b.n	8009bc2 <pbuf_header_impl+0xae>
      return 1;
 8009bc8:	2001      	movs	r0, #1
 8009bca:	e7fa      	b.n	8009bc2 <pbuf_header_impl+0xae>
 8009bcc:	2001      	movs	r0, #1
 8009bce:	e7f8      	b.n	8009bc2 <pbuf_header_impl+0xae>
 8009bd0:	0801cc58 	.word	0x0801cc58
 8009bd4:	0801cc88 	.word	0x0801cc88
 8009bd8:	0801c994 	.word	0x0801c994
 8009bdc:	0801cc94 	.word	0x0801cc94
 8009be0:	0801ccb4 	.word	0x0801ccb4

08009be4 <pbuf_free_ooseq>:
{
 8009be4:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8009be6:	4b07      	ldr	r3, [pc, #28]	; (8009c04 <pbuf_free_ooseq+0x20>)
 8009be8:	2200      	movs	r2, #0
 8009bea:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009bec:	4b06      	ldr	r3, [pc, #24]	; (8009c08 <pbuf_free_ooseq+0x24>)
 8009bee:	681c      	ldr	r4, [r3, #0]
 8009bf0:	b13c      	cbz	r4, 8009c02 <pbuf_free_ooseq+0x1e>
    if (NULL != pcb->ooseq) {
 8009bf2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8009bf4:	b908      	cbnz	r0, 8009bfa <pbuf_free_ooseq+0x16>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009bf6:	68e4      	ldr	r4, [r4, #12]
 8009bf8:	e7fa      	b.n	8009bf0 <pbuf_free_ooseq+0xc>
      tcp_segs_free(pcb->ooseq);
 8009bfa:	f000 fd3e 	bl	800a67a <tcp_segs_free>
      pcb->ooseq = NULL;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	6723      	str	r3, [r4, #112]	; 0x70
}
 8009c02:	bd10      	pop	{r4, pc}
 8009c04:	20009708 	.word	0x20009708
 8009c08:	20009710 	.word	0x20009710

08009c0c <pbuf_alloced_custom>:
{
 8009c0c:	b570      	push	{r4, r5, r6, lr}
 8009c0e:	9c04      	ldr	r4, [sp, #16]
  switch (l) {
 8009c10:	2804      	cmp	r0, #4
 8009c12:	d80a      	bhi.n	8009c2a <pbuf_alloced_custom+0x1e>
 8009c14:	e8df f000 	tbb	[pc, r0]
 8009c18:	05032912 	.word	0x05032912
 8009c1c:	07          	.byte	0x07
 8009c1d:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8009c1e:	200e      	movs	r0, #14
    break;
 8009c20:	e00d      	b.n	8009c3e <pbuf_alloced_custom+0x32>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8009c22:	2000      	movs	r0, #0
    break;
 8009c24:	e00b      	b.n	8009c3e <pbuf_alloced_custom+0x32>
    offset = 0;
 8009c26:	2000      	movs	r0, #0
    break;
 8009c28:	e009      	b.n	8009c3e <pbuf_alloced_custom+0x32>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8009c2a:	4b13      	ldr	r3, [pc, #76]	; (8009c78 <pbuf_alloced_custom+0x6c>)
 8009c2c:	f240 12c5 	movw	r2, #453	; 0x1c5
 8009c30:	4912      	ldr	r1, [pc, #72]	; (8009c7c <pbuf_alloced_custom+0x70>)
 8009c32:	4813      	ldr	r0, [pc, #76]	; (8009c80 <pbuf_alloced_custom+0x74>)
 8009c34:	f00b fc80 	bl	8015538 <printf>
    return NULL;
 8009c38:	2000      	movs	r0, #0
 8009c3a:	e015      	b.n	8009c68 <pbuf_alloced_custom+0x5c>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8009c3c:	2036      	movs	r0, #54	; 0x36
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009c3e:	3003      	adds	r0, #3
 8009c40:	f020 0003 	bic.w	r0, r0, #3
 8009c44:	180e      	adds	r6, r1, r0
 8009c46:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 8009c4a:	42ae      	cmp	r6, r5
 8009c4c:	d812      	bhi.n	8009c74 <pbuf_alloced_custom+0x68>
  p->pbuf.next = NULL;
 8009c4e:	2500      	movs	r5, #0
 8009c50:	601d      	str	r5, [r3, #0]
  if (payload_mem != NULL) {
 8009c52:	b164      	cbz	r4, 8009c6e <pbuf_alloced_custom+0x62>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009c54:	4420      	add	r0, r4
 8009c56:	6058      	str	r0, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8009c58:	2002      	movs	r0, #2
 8009c5a:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8009c5c:	8119      	strh	r1, [r3, #8]
 8009c5e:	8159      	strh	r1, [r3, #10]
  p->pbuf.type = type;
 8009c60:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8009c62:	2201      	movs	r2, #1
 8009c64:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8009c66:	4618      	mov	r0, r3
}
 8009c68:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8009c6a:	2022      	movs	r0, #34	; 0x22
 8009c6c:	e7e7      	b.n	8009c3e <pbuf_alloced_custom+0x32>
    p->pbuf.payload = NULL;
 8009c6e:	2000      	movs	r0, #0
 8009c70:	6058      	str	r0, [r3, #4]
 8009c72:	e7f1      	b.n	8009c58 <pbuf_alloced_custom+0x4c>
    return NULL;
 8009c74:	2000      	movs	r0, #0
 8009c76:	e7f7      	b.n	8009c68 <pbuf_alloced_custom+0x5c>
 8009c78:	0801cc58 	.word	0x0801cc58
 8009c7c:	0801ccc4 	.word	0x0801ccc4
 8009c80:	0801c994 	.word	0x0801c994

08009c84 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8009c84:	b508      	push	{r3, lr}
   return pbuf_header_impl(p, header_size_increment, 0);
 8009c86:	2200      	movs	r2, #0
 8009c88:	f7ff ff44 	bl	8009b14 <pbuf_header_impl>
}
 8009c8c:	bd08      	pop	{r3, pc}

08009c8e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8009c8e:	b508      	push	{r3, lr}
   return pbuf_header_impl(p, header_size_increment, 1);
 8009c90:	2201      	movs	r2, #1
 8009c92:	f7ff ff3f 	bl	8009b14 <pbuf_header_impl>
}
 8009c96:	bd08      	pop	{r3, pc}

08009c98 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009c98:	b570      	push	{r4, r5, r6, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009c9a:	b128      	cbz	r0, 8009ca8 <pbuf_free+0x10>
 8009c9c:	4604      	mov	r4, r0
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8009c9e:	7b03      	ldrb	r3, [r0, #12]
 8009ca0:	2b03      	cmp	r3, #3
 8009ca2:	d80b      	bhi.n	8009cbc <pbuf_free+0x24>
{
 8009ca4:	2500      	movs	r5, #0
 8009ca6:	e01f      	b.n	8009ce8 <pbuf_free+0x50>
    LWIP_ASSERT("p != NULL", p != NULL);
 8009ca8:	4b27      	ldr	r3, [pc, #156]	; (8009d48 <pbuf_free+0xb0>)
 8009caa:	f240 22d2 	movw	r2, #722	; 0x2d2
 8009cae:	4927      	ldr	r1, [pc, #156]	; (8009d4c <pbuf_free+0xb4>)
 8009cb0:	4827      	ldr	r0, [pc, #156]	; (8009d50 <pbuf_free+0xb8>)
 8009cb2:	f00b fc41 	bl	8015538 <printf>
    return 0;
 8009cb6:	2500      	movs	r5, #0
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8009cb8:	4628      	mov	r0, r5
 8009cba:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 8009cbc:	4b22      	ldr	r3, [pc, #136]	; (8009d48 <pbuf_free+0xb0>)
 8009cbe:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8009cc2:	4924      	ldr	r1, [pc, #144]	; (8009d54 <pbuf_free+0xbc>)
 8009cc4:	4822      	ldr	r0, [pc, #136]	; (8009d50 <pbuf_free+0xb8>)
 8009cc6:	f00b fc37 	bl	8015538 <printf>
 8009cca:	e7eb      	b.n	8009ca4 <pbuf_free+0xc>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009ccc:	4b1e      	ldr	r3, [pc, #120]	; (8009d48 <pbuf_free+0xb0>)
 8009cce:	f240 22eb 	movw	r2, #747	; 0x2eb
 8009cd2:	4921      	ldr	r1, [pc, #132]	; (8009d58 <pbuf_free+0xc0>)
 8009cd4:	481e      	ldr	r0, [pc, #120]	; (8009d50 <pbuf_free+0xb8>)
 8009cd6:	f00b fc2f 	bl	8015538 <printf>
 8009cda:	e00a      	b.n	8009cf2 <pbuf_free+0x5a>
        pc->custom_free_function(p);
 8009cdc:	6923      	ldr	r3, [r4, #16]
 8009cde:	4620      	mov	r0, r4
 8009ce0:	4798      	blx	r3
      count++;
 8009ce2:	3501      	adds	r5, #1
 8009ce4:	b2ed      	uxtb	r5, r5
      p = q;
 8009ce6:	4634      	mov	r4, r6
  while (p != NULL) {
 8009ce8:	2c00      	cmp	r4, #0
 8009cea:	d0e5      	beq.n	8009cb8 <pbuf_free+0x20>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009cec:	89e3      	ldrh	r3, [r4, #14]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d0ec      	beq.n	8009ccc <pbuf_free+0x34>
    ref = --(p->ref);
 8009cf2:	89e3      	ldrh	r3, [r4, #14]
 8009cf4:	3b01      	subs	r3, #1
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	81e3      	strh	r3, [r4, #14]
    if (ref == 0) {
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d1dc      	bne.n	8009cb8 <pbuf_free+0x20>
      q = p->next;
 8009cfe:	6826      	ldr	r6, [r4, #0]
      type = p->type;
 8009d00:	7b23      	ldrb	r3, [r4, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009d02:	7b62      	ldrb	r2, [r4, #13]
 8009d04:	f012 0f02 	tst.w	r2, #2
 8009d08:	d00a      	beq.n	8009d20 <pbuf_free+0x88>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009d0a:	6923      	ldr	r3, [r4, #16]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d1e5      	bne.n	8009cdc <pbuf_free+0x44>
 8009d10:	4b0d      	ldr	r3, [pc, #52]	; (8009d48 <pbuf_free+0xb0>)
 8009d12:	f240 22f9 	movw	r2, #761	; 0x2f9
 8009d16:	4911      	ldr	r1, [pc, #68]	; (8009d5c <pbuf_free+0xc4>)
 8009d18:	480d      	ldr	r0, [pc, #52]	; (8009d50 <pbuf_free+0xb8>)
 8009d1a:	f00b fc0d 	bl	8015538 <printf>
 8009d1e:	e7dd      	b.n	8009cdc <pbuf_free+0x44>
        if (type == PBUF_POOL) {
 8009d20:	2b03      	cmp	r3, #3
 8009d22:	d007      	beq.n	8009d34 <pbuf_free+0x9c>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8009d24:	3b01      	subs	r3, #1
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d908      	bls.n	8009d3e <pbuf_free+0xa6>
          mem_free(p);
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	f7ff fc23 	bl	8009578 <mem_free>
 8009d32:	e7d6      	b.n	8009ce2 <pbuf_free+0x4a>
          memp_free(MEMP_PBUF_POOL, p);
 8009d34:	4621      	mov	r1, r4
 8009d36:	2008      	movs	r0, #8
 8009d38:	f7ff fdfa 	bl	8009930 <memp_free>
 8009d3c:	e7d1      	b.n	8009ce2 <pbuf_free+0x4a>
          memp_free(MEMP_PBUF, p);
 8009d3e:	4621      	mov	r1, r4
 8009d40:	2007      	movs	r0, #7
 8009d42:	f7ff fdf5 	bl	8009930 <memp_free>
 8009d46:	e7cc      	b.n	8009ce2 <pbuf_free+0x4a>
 8009d48:	0801cc58 	.word	0x0801cc58
 8009d4c:	0801cc88 	.word	0x0801cc88
 8009d50:	0801c994 	.word	0x0801c994
 8009d54:	0801cce8 	.word	0x0801cce8
 8009d58:	0801cd00 	.word	0x0801cd00
 8009d5c:	0801cd18 	.word	0x0801cd18

08009d60 <pbuf_alloc>:
{
 8009d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d64:	460d      	mov	r5, r1
 8009d66:	4617      	mov	r7, r2
  switch (layer) {
 8009d68:	2804      	cmp	r0, #4
 8009d6a:	d80a      	bhi.n	8009d82 <pbuf_alloc+0x22>
 8009d6c:	e8df f000 	tbb	[pc, r0]
 8009d70:	05033f12 	.word	0x05033f12
 8009d74:	07          	.byte	0x07
 8009d75:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8009d76:	240e      	movs	r4, #14
    break;
 8009d78:	e00d      	b.n	8009d96 <pbuf_alloc+0x36>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8009d7a:	2400      	movs	r4, #0
    break;
 8009d7c:	e00b      	b.n	8009d96 <pbuf_alloc+0x36>
    offset = 0;
 8009d7e:	2400      	movs	r4, #0
    break;
 8009d80:	e009      	b.n	8009d96 <pbuf_alloc+0x36>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8009d82:	4b68      	ldr	r3, [pc, #416]	; (8009f24 <pbuf_alloc+0x1c4>)
 8009d84:	f44f 728b 	mov.w	r2, #278	; 0x116
 8009d88:	4967      	ldr	r1, [pc, #412]	; (8009f28 <pbuf_alloc+0x1c8>)
 8009d8a:	4868      	ldr	r0, [pc, #416]	; (8009f2c <pbuf_alloc+0x1cc>)
 8009d8c:	f00b fbd4 	bl	8015538 <printf>
    return NULL;
 8009d90:	2600      	movs	r6, #0
 8009d92:	e0b9      	b.n	8009f08 <pbuf_alloc+0x1a8>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8009d94:	2436      	movs	r4, #54	; 0x36
  switch (type) {
 8009d96:	2f02      	cmp	r7, #2
 8009d98:	d82b      	bhi.n	8009df2 <pbuf_alloc+0x92>
 8009d9a:	b27b      	sxtb	r3, r7
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f040 80a4 	bne.w	8009eea <pbuf_alloc+0x18a>
 8009da2:	2f00      	cmp	r7, #0
 8009da4:	f040 80b3 	bne.w	8009f0e <pbuf_alloc+0x1ae>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8009da8:	f104 0013 	add.w	r0, r4, #19
 8009dac:	f020 0003 	bic.w	r0, r0, #3
 8009db0:	b283      	uxth	r3, r0
 8009db2:	1cea      	adds	r2, r5, #3
 8009db4:	b290      	uxth	r0, r2
 8009db6:	f020 0003 	bic.w	r0, r0, #3
 8009dba:	4418      	add	r0, r3
 8009dbc:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8009dbe:	f022 0203 	bic.w	r2, r2, #3
 8009dc2:	4290      	cmp	r0, r2
 8009dc4:	f0c0 80ac 	bcc.w	8009f20 <pbuf_alloc+0x1c0>
      p = (struct pbuf*)mem_malloc(alloc_len);
 8009dc8:	f7ff fcae 	bl	8009728 <mem_malloc>
    if (p == NULL) {
 8009dcc:	4606      	mov	r6, r0
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	f000 809a 	beq.w	8009f08 <pbuf_alloc+0x1a8>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8009dd4:	f104 0310 	add.w	r3, r4, #16
 8009dd8:	4403      	add	r3, r0
 8009dda:	3303      	adds	r3, #3
 8009ddc:	f023 0303 	bic.w	r3, r3, #3
 8009de0:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 8009de2:	8105      	strh	r5, [r0, #8]
 8009de4:	8145      	strh	r5, [r0, #10]
    p->next = NULL;
 8009de6:	2300      	movs	r3, #0
 8009de8:	6003      	str	r3, [r0, #0]
    p->type = type;
 8009dea:	7307      	strb	r7, [r0, #12]
    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8009dec:	e088      	b.n	8009f00 <pbuf_alloc+0x1a0>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8009dee:	2422      	movs	r4, #34	; 0x22
 8009df0:	e7d1      	b.n	8009d96 <pbuf_alloc+0x36>
  switch (type) {
 8009df2:	2f03      	cmp	r7, #3
 8009df4:	f040 808b 	bne.w	8009f0e <pbuf_alloc+0x1ae>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009df8:	2008      	movs	r0, #8
 8009dfa:	f7ff fd7f 	bl	80098fc <memp_malloc>
    if (p == NULL) {
 8009dfe:	4606      	mov	r6, r0
 8009e00:	b1f8      	cbz	r0, 8009e42 <pbuf_alloc+0xe2>
    p->type = type;
 8009e02:	7307      	strb	r7, [r0, #12]
    p->next = NULL;
 8009e04:	2300      	movs	r3, #0
 8009e06:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8009e08:	f104 0310 	add.w	r3, r4, #16
 8009e0c:	4403      	add	r3, r0
 8009e0e:	3303      	adds	r3, #3
 8009e10:	f023 0303 	bic.w	r3, r3, #3
 8009e14:	6043      	str	r3, [r0, #4]
    p->tot_len = length;
 8009e16:	8105      	strh	r5, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8009e18:	1ce2      	adds	r2, r4, #3
 8009e1a:	f022 0203 	bic.w	r2, r2, #3
 8009e1e:	f5c2 7214 	rsb	r2, r2, #592	; 0x250
 8009e22:	42aa      	cmp	r2, r5
 8009e24:	bf28      	it	cs
 8009e26:	462a      	movcs	r2, r5
 8009e28:	b292      	uxth	r2, r2
 8009e2a:	8142      	strh	r2, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8009e2c:	4413      	add	r3, r2
 8009e2e:	f500 7818 	add.w	r8, r0, #608	; 0x260
 8009e32:	4543      	cmp	r3, r8
 8009e34:	d808      	bhi.n	8009e48 <pbuf_alloc+0xe8>
    p->ref = 1;
 8009e36:	2301      	movs	r3, #1
 8009e38:	81f3      	strh	r3, [r6, #14]
    rem_len = length - p->len;
 8009e3a:	8971      	ldrh	r1, [r6, #10]
 8009e3c:	1a6d      	subs	r5, r5, r1
    r = p;
 8009e3e:	46b1      	mov	r9, r6
    while (rem_len > 0) {
 8009e40:	e02d      	b.n	8009e9e <pbuf_alloc+0x13e>
      PBUF_POOL_IS_EMPTY();
 8009e42:	f7ff fe61 	bl	8009b08 <pbuf_pool_is_empty>
      return NULL;
 8009e46:	e05f      	b.n	8009f08 <pbuf_alloc+0x1a8>
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8009e48:	4b36      	ldr	r3, [pc, #216]	; (8009f24 <pbuf_alloc+0x1c4>)
 8009e4a:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8009e4e:	4938      	ldr	r1, [pc, #224]	; (8009f30 <pbuf_alloc+0x1d0>)
 8009e50:	4836      	ldr	r0, [pc, #216]	; (8009f2c <pbuf_alloc+0x1cc>)
 8009e52:	f00b fb71 	bl	8015538 <printf>
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009e56:	e7ee      	b.n	8009e36 <pbuf_alloc+0xd6>
        PBUF_POOL_IS_EMPTY();
 8009e58:	f7ff fe56 	bl	8009b08 <pbuf_pool_is_empty>
        pbuf_free(p);
 8009e5c:	4630      	mov	r0, r6
 8009e5e:	f7ff ff1b 	bl	8009c98 <pbuf_free>
        return NULL;
 8009e62:	4626      	mov	r6, r4
 8009e64:	e050      	b.n	8009f08 <pbuf_alloc+0x1a8>
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8009e66:	4b2f      	ldr	r3, [pc, #188]	; (8009f24 <pbuf_alloc+0x1c4>)
 8009e68:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8009e6c:	4931      	ldr	r1, [pc, #196]	; (8009f34 <pbuf_alloc+0x1d4>)
 8009e6e:	482f      	ldr	r0, [pc, #188]	; (8009f2c <pbuf_alloc+0x1cc>)
 8009e70:	f00b fb62 	bl	8015538 <printf>
 8009e74:	e025      	b.n	8009ec2 <pbuf_alloc+0x162>
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8009e76:	4b2b      	ldr	r3, [pc, #172]	; (8009f24 <pbuf_alloc+0x1c4>)
 8009e78:	f240 1251 	movw	r2, #337	; 0x151
 8009e7c:	492e      	ldr	r1, [pc, #184]	; (8009f38 <pbuf_alloc+0x1d8>)
 8009e7e:	482b      	ldr	r0, [pc, #172]	; (8009f2c <pbuf_alloc+0x1cc>)
 8009e80:	f00b fb5a 	bl	8015538 <printf>
 8009e84:	e02b      	b.n	8009ede <pbuf_alloc+0x17e>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8009e86:	4b27      	ldr	r3, [pc, #156]	; (8009f24 <pbuf_alloc+0x1c4>)
 8009e88:	f240 1253 	movw	r2, #339	; 0x153
 8009e8c:	4928      	ldr	r1, [pc, #160]	; (8009f30 <pbuf_alloc+0x1d0>)
 8009e8e:	4827      	ldr	r0, [pc, #156]	; (8009f2c <pbuf_alloc+0x1cc>)
 8009e90:	f00b fb52 	bl	8015538 <printf>
      q->ref = 1;
 8009e94:	2301      	movs	r3, #1
 8009e96:	81e3      	strh	r3, [r4, #14]
      rem_len -= q->len;
 8009e98:	8963      	ldrh	r3, [r4, #10]
 8009e9a:	1aed      	subs	r5, r5, r3
      r = q;
 8009e9c:	46a1      	mov	r9, r4
    while (rem_len > 0) {
 8009e9e:	2d00      	cmp	r5, #0
 8009ea0:	dd2e      	ble.n	8009f00 <pbuf_alloc+0x1a0>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009ea2:	2008      	movs	r0, #8
 8009ea4:	f7ff fd2a 	bl	80098fc <memp_malloc>
      if (q == NULL) {
 8009ea8:	4604      	mov	r4, r0
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	d0d4      	beq.n	8009e58 <pbuf_alloc+0xf8>
      q->type = type;
 8009eae:	7307      	strb	r7, [r0, #12]
      q->flags = 0;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 8009eb4:	6003      	str	r3, [r0, #0]
      r->next = q;
 8009eb6:	f8c9 0000 	str.w	r0, [r9]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8009eba:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8009ebe:	429d      	cmp	r5, r3
 8009ec0:	dcd1      	bgt.n	8009e66 <pbuf_alloc+0x106>
      q->tot_len = (u16_t)rem_len;
 8009ec2:	b2ab      	uxth	r3, r5
 8009ec4:	8123      	strh	r3, [r4, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8009ec6:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8009eca:	bf28      	it	cs
 8009ecc:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8009ed0:	8163      	strh	r3, [r4, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8009ed2:	f104 0310 	add.w	r3, r4, #16
 8009ed6:	6063      	str	r3, [r4, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8009ed8:	f013 0f03 	tst.w	r3, #3
 8009edc:	d1cb      	bne.n	8009e76 <pbuf_alloc+0x116>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8009ede:	6873      	ldr	r3, [r6, #4]
 8009ee0:	8972      	ldrh	r2, [r6, #10]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	4598      	cmp	r8, r3
 8009ee6:	d2d5      	bcs.n	8009e94 <pbuf_alloc+0x134>
 8009ee8:	e7cd      	b.n	8009e86 <pbuf_alloc+0x126>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8009eea:	2007      	movs	r0, #7
 8009eec:	f7ff fd06 	bl	80098fc <memp_malloc>
    if (p == NULL) {
 8009ef0:	4606      	mov	r6, r0
 8009ef2:	b148      	cbz	r0, 8009f08 <pbuf_alloc+0x1a8>
    p->payload = NULL;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 8009ef8:	8105      	strh	r5, [r0, #8]
 8009efa:	8145      	strh	r5, [r0, #10]
    p->next = NULL;
 8009efc:	6003      	str	r3, [r0, #0]
    p->type = type;
 8009efe:	7307      	strb	r7, [r0, #12]
  p->ref = 1;
 8009f00:	2301      	movs	r3, #1
 8009f02:	81f3      	strh	r3, [r6, #14]
  p->flags = 0;
 8009f04:	2300      	movs	r3, #0
 8009f06:	7373      	strb	r3, [r6, #13]
}
 8009f08:	4630      	mov	r0, r6
 8009f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009f0e:	4b05      	ldr	r3, [pc, #20]	; (8009f24 <pbuf_alloc+0x1c4>)
 8009f10:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8009f14:	4909      	ldr	r1, [pc, #36]	; (8009f3c <pbuf_alloc+0x1dc>)
 8009f16:	4805      	ldr	r0, [pc, #20]	; (8009f2c <pbuf_alloc+0x1cc>)
 8009f18:	f00b fb0e 	bl	8015538 <printf>
    return NULL;
 8009f1c:	2600      	movs	r6, #0
 8009f1e:	e7f3      	b.n	8009f08 <pbuf_alloc+0x1a8>
        return NULL;
 8009f20:	2600      	movs	r6, #0
 8009f22:	e7f1      	b.n	8009f08 <pbuf_alloc+0x1a8>
 8009f24:	0801cc58 	.word	0x0801cc58
 8009f28:	0801cd3c 	.word	0x0801cd3c
 8009f2c:	0801c994 	.word	0x0801c994
 8009f30:	0801cd58 	.word	0x0801cd58
 8009f34:	0801cdc0 	.word	0x0801cdc0
 8009f38:	0801cdd4 	.word	0x0801cdd4
 8009f3c:	0801ce04 	.word	0x0801ce04

08009f40 <pbuf_realloc>:
{
 8009f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f44:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009f46:	4604      	mov	r4, r0
 8009f48:	b170      	cbz	r0, 8009f68 <pbuf_realloc+0x28>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8009f4a:	7b23      	ldrb	r3, [r4, #12]
 8009f4c:	2b03      	cmp	r3, #3
 8009f4e:	d004      	beq.n	8009f5a <pbuf_realloc+0x1a>
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d002      	beq.n	8009f5a <pbuf_realloc+0x1a>
 8009f54:	b10b      	cbz	r3, 8009f5a <pbuf_realloc+0x1a>
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	d10e      	bne.n	8009f78 <pbuf_realloc+0x38>
  if (new_len >= p->tot_len) {
 8009f5a:	8927      	ldrh	r7, [r4, #8]
 8009f5c:	42b7      	cmp	r7, r6
 8009f5e:	d943      	bls.n	8009fe8 <pbuf_realloc+0xa8>
  grow = new_len - p->tot_len;
 8009f60:	eba6 0807 	sub.w	r8, r6, r7
  rem_len = new_len;
 8009f64:	4635      	mov	r5, r6
  while (rem_len > q->len) {
 8009f66:	e01d      	b.n	8009fa4 <pbuf_realloc+0x64>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009f68:	4b2a      	ldr	r3, [pc, #168]	; (800a014 <pbuf_realloc+0xd4>)
 8009f6a:	f240 12f3 	movw	r2, #499	; 0x1f3
 8009f6e:	492a      	ldr	r1, [pc, #168]	; (800a018 <pbuf_realloc+0xd8>)
 8009f70:	482a      	ldr	r0, [pc, #168]	; (800a01c <pbuf_realloc+0xdc>)
 8009f72:	f00b fae1 	bl	8015538 <printf>
 8009f76:	e7e8      	b.n	8009f4a <pbuf_realloc+0xa>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8009f78:	4b26      	ldr	r3, [pc, #152]	; (800a014 <pbuf_realloc+0xd4>)
 8009f7a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009f7e:	4928      	ldr	r1, [pc, #160]	; (800a020 <pbuf_realloc+0xe0>)
 8009f80:	4826      	ldr	r0, [pc, #152]	; (800a01c <pbuf_realloc+0xdc>)
 8009f82:	f00b fad9 	bl	8015538 <printf>
 8009f86:	e7e8      	b.n	8009f5a <pbuf_realloc+0x1a>
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8009f88:	4b22      	ldr	r3, [pc, #136]	; (800a014 <pbuf_realloc+0xd4>)
 8009f8a:	f240 220b 	movw	r2, #523	; 0x20b
 8009f8e:	4925      	ldr	r1, [pc, #148]	; (800a024 <pbuf_realloc+0xe4>)
 8009f90:	4822      	ldr	r0, [pc, #136]	; (800a01c <pbuf_realloc+0xdc>)
 8009f92:	f00b fad1 	bl	8015538 <printf>
    q->tot_len += (u16_t)grow;
 8009f96:	1bf3      	subs	r3, r6, r7
 8009f98:	8922      	ldrh	r2, [r4, #8]
 8009f9a:	fa12 f383 	uxtah	r3, r2, r3
 8009f9e:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8009fa0:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009fa2:	b14c      	cbz	r4, 8009fb8 <pbuf_realloc+0x78>
  while (rem_len > q->len) {
 8009fa4:	8963      	ldrh	r3, [r4, #10]
 8009fa6:	42ab      	cmp	r3, r5
 8009fa8:	d20e      	bcs.n	8009fc8 <pbuf_realloc+0x88>
    rem_len -= q->len;
 8009faa:	1aed      	subs	r5, r5, r3
 8009fac:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8009fae:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8009fb2:	4598      	cmp	r8, r3
 8009fb4:	ddef      	ble.n	8009f96 <pbuf_realloc+0x56>
 8009fb6:	e7e7      	b.n	8009f88 <pbuf_realloc+0x48>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009fb8:	4b16      	ldr	r3, [pc, #88]	; (800a014 <pbuf_realloc+0xd4>)
 8009fba:	f240 220f 	movw	r2, #527	; 0x20f
 8009fbe:	491a      	ldr	r1, [pc, #104]	; (800a028 <pbuf_realloc+0xe8>)
 8009fc0:	4816      	ldr	r0, [pc, #88]	; (800a01c <pbuf_realloc+0xdc>)
 8009fc2:	f00b fab9 	bl	8015538 <printf>
 8009fc6:	e7ed      	b.n	8009fa4 <pbuf_realloc+0x64>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8009fc8:	7b22      	ldrb	r2, [r4, #12]
 8009fca:	b92a      	cbnz	r2, 8009fd8 <pbuf_realloc+0x98>
 8009fcc:	42ab      	cmp	r3, r5
 8009fce:	d003      	beq.n	8009fd8 <pbuf_realloc+0x98>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009fd0:	7b63      	ldrb	r3, [r4, #13]
 8009fd2:	f013 0f02 	tst.w	r3, #2
 8009fd6:	d009      	beq.n	8009fec <pbuf_realloc+0xac>
  q->len = rem_len;
 8009fd8:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8009fda:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8009fdc:	6820      	ldr	r0, [r4, #0]
 8009fde:	b108      	cbz	r0, 8009fe4 <pbuf_realloc+0xa4>
    pbuf_free(q->next);
 8009fe0:	f7ff fe5a 	bl	8009c98 <pbuf_free>
  q->next = NULL;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	6023      	str	r3, [r4, #0]
}
 8009fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8009fec:	6863      	ldr	r3, [r4, #4]
 8009fee:	1b1b      	subs	r3, r3, r4
 8009ff0:	fa15 f183 	uxtah	r1, r5, r3
 8009ff4:	b289      	uxth	r1, r1
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	f7ff fb0c 	bl	8009614 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009ffc:	4604      	mov	r4, r0
 8009ffe:	2800      	cmp	r0, #0
 800a000:	d1ea      	bne.n	8009fd8 <pbuf_realloc+0x98>
 800a002:	4b04      	ldr	r3, [pc, #16]	; (800a014 <pbuf_realloc+0xd4>)
 800a004:	f240 221d 	movw	r2, #541	; 0x21d
 800a008:	4908      	ldr	r1, [pc, #32]	; (800a02c <pbuf_realloc+0xec>)
 800a00a:	4804      	ldr	r0, [pc, #16]	; (800a01c <pbuf_realloc+0xdc>)
 800a00c:	f00b fa94 	bl	8015538 <printf>
 800a010:	e7e2      	b.n	8009fd8 <pbuf_realloc+0x98>
 800a012:	bf00      	nop
 800a014:	0801cc58 	.word	0x0801cc58
 800a018:	0801ce20 	.word	0x0801ce20
 800a01c:	0801c994 	.word	0x0801c994
 800a020:	0801ce38 	.word	0x0801ce38
 800a024:	0801ce54 	.word	0x0801ce54
 800a028:	0801ce68 	.word	0x0801ce68
 800a02c:	0801ce80 	.word	0x0801ce80

0800a030 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a030:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
 800a032:	2000      	movs	r0, #0
  while (p != NULL) {
 800a034:	b11b      	cbz	r3, 800a03e <pbuf_clen+0xe>
    ++len;
 800a036:	3001      	adds	r0, #1
 800a038:	b280      	uxth	r0, r0
    p = p->next;
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	e7fa      	b.n	800a034 <pbuf_clen+0x4>
  }
  return len;
}
 800a03e:	4770      	bx	lr

0800a040 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 800a040:	b170      	cbz	r0, 800a060 <pbuf_ref+0x20>
{
 800a042:	b508      	push	{r3, lr}
    SYS_ARCH_INC(p->ref, 1);
 800a044:	89c3      	ldrh	r3, [r0, #14]
 800a046:	3301      	adds	r3, #1
 800a048:	b29b      	uxth	r3, r3
 800a04a:	81c3      	strh	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a04c:	b103      	cbz	r3, 800a050 <pbuf_ref+0x10>
  }
}
 800a04e:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a050:	4b04      	ldr	r3, [pc, #16]	; (800a064 <pbuf_ref+0x24>)
 800a052:	f240 3239 	movw	r2, #825	; 0x339
 800a056:	4904      	ldr	r1, [pc, #16]	; (800a068 <pbuf_ref+0x28>)
 800a058:	4804      	ldr	r0, [pc, #16]	; (800a06c <pbuf_ref+0x2c>)
 800a05a:	f00b fa6d 	bl	8015538 <printf>
}
 800a05e:	e7f6      	b.n	800a04e <pbuf_ref+0xe>
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop
 800a064:	0801cc58 	.word	0x0801cc58
 800a068:	0801ce9c 	.word	0x0801ce9c
 800a06c:	0801c994 	.word	0x0801c994

0800a070 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a070:	b538      	push	{r3, r4, r5, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a072:	b110      	cbz	r0, 800a07a <pbuf_cat+0xa>
 800a074:	460d      	mov	r5, r1
 800a076:	4604      	mov	r4, r0
 800a078:	b961      	cbnz	r1, 800a094 <pbuf_cat+0x24>
 800a07a:	4b15      	ldr	r3, [pc, #84]	; (800a0d0 <pbuf_cat+0x60>)
 800a07c:	f44f 7253 	mov.w	r2, #844	; 0x34c
 800a080:	4914      	ldr	r1, [pc, #80]	; (800a0d4 <pbuf_cat+0x64>)
 800a082:	4815      	ldr	r0, [pc, #84]	; (800a0d8 <pbuf_cat+0x68>)
 800a084:	f00b fa58 	bl	8015538 <printf>
 800a088:	e019      	b.n	800a0be <pbuf_cat+0x4e>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800a08a:	892b      	ldrh	r3, [r5, #8]
 800a08c:	8920      	ldrh	r0, [r4, #8]
 800a08e:	4403      	add	r3, r0
 800a090:	8123      	strh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a092:	4614      	mov	r4, r2
 800a094:	6822      	ldr	r2, [r4, #0]
 800a096:	2a00      	cmp	r2, #0
 800a098:	d1f7      	bne.n	800a08a <pbuf_cat+0x1a>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a09a:	8922      	ldrh	r2, [r4, #8]
 800a09c:	8963      	ldrh	r3, [r4, #10]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d10e      	bne.n	800a0c0 <pbuf_cat+0x50>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a0a2:	6823      	ldr	r3, [r4, #0]
 800a0a4:	b133      	cbz	r3, 800a0b4 <pbuf_cat+0x44>
 800a0a6:	4b0a      	ldr	r3, [pc, #40]	; (800a0d0 <pbuf_cat+0x60>)
 800a0a8:	f240 3256 	movw	r2, #854	; 0x356
 800a0ac:	490b      	ldr	r1, [pc, #44]	; (800a0dc <pbuf_cat+0x6c>)
 800a0ae:	480a      	ldr	r0, [pc, #40]	; (800a0d8 <pbuf_cat+0x68>)
 800a0b0:	f00b fa42 	bl	8015538 <printf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800a0b4:	892b      	ldrh	r3, [r5, #8]
 800a0b6:	8922      	ldrh	r2, [r4, #8]
 800a0b8:	4413      	add	r3, r2
 800a0ba:	8123      	strh	r3, [r4, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a0bc:	6025      	str	r5, [r4, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a0be:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a0c0:	4b03      	ldr	r3, [pc, #12]	; (800a0d0 <pbuf_cat+0x60>)
 800a0c2:	f240 3255 	movw	r2, #853	; 0x355
 800a0c6:	4906      	ldr	r1, [pc, #24]	; (800a0e0 <pbuf_cat+0x70>)
 800a0c8:	4803      	ldr	r0, [pc, #12]	; (800a0d8 <pbuf_cat+0x68>)
 800a0ca:	f00b fa35 	bl	8015538 <printf>
 800a0ce:	e7e8      	b.n	800a0a2 <pbuf_cat+0x32>
 800a0d0:	0801cc58 	.word	0x0801cc58
 800a0d4:	0801ceb0 	.word	0x0801ceb0
 800a0d8:	0801c994 	.word	0x0801c994
 800a0dc:	0801cf18 	.word	0x0801cf18
 800a0e0:	0801cee8 	.word	0x0801cee8

0800a0e4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a0e8:	b150      	cbz	r0, 800a100 <pbuf_copy+0x1c>
 800a0ea:	460d      	mov	r5, r1
 800a0ec:	4607      	mov	r7, r0
 800a0ee:	b139      	cbz	r1, 800a100 <pbuf_copy+0x1c>
 800a0f0:	8902      	ldrh	r2, [r0, #8]
 800a0f2:	890b      	ldrh	r3, [r1, #8]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d303      	bcc.n	800a100 <pbuf_copy+0x1c>
  u16_t offset_to=0, offset_from=0, len;
 800a0f8:	f04f 0800 	mov.w	r8, #0
 800a0fc:	4646      	mov	r6, r8
 800a0fe:	e03c      	b.n	800a17a <pbuf_copy+0x96>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a100:	4b3d      	ldr	r3, [pc, #244]	; (800a1f8 <pbuf_copy+0x114>)
 800a102:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800a106:	493d      	ldr	r1, [pc, #244]	; (800a1fc <pbuf_copy+0x118>)
 800a108:	483d      	ldr	r0, [pc, #244]	; (800a200 <pbuf_copy+0x11c>)
 800a10a:	f00b fa15 	bl	8015538 <printf>
 800a10e:	f06f 000f 	mvn.w	r0, #15
 800a112:	e06e      	b.n	800a1f2 <pbuf_copy+0x10e>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800a114:	1b9b      	subs	r3, r3, r6
 800a116:	b29c      	uxth	r4, r3
 800a118:	e037      	b.n	800a18a <pbuf_copy+0xa6>
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a11a:	4b37      	ldr	r3, [pc, #220]	; (800a1f8 <pbuf_copy+0x114>)
 800a11c:	f240 32cd 	movw	r2, #973	; 0x3cd
 800a120:	4938      	ldr	r1, [pc, #224]	; (800a204 <pbuf_copy+0x120>)
 800a122:	4837      	ldr	r0, [pc, #220]	; (800a200 <pbuf_copy+0x11c>)
 800a124:	f00b fa08 	bl	8015538 <printf>
 800a128:	e03e      	b.n	800a1a8 <pbuf_copy+0xc4>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a12a:	4b33      	ldr	r3, [pc, #204]	; (800a1f8 <pbuf_copy+0x114>)
 800a12c:	f240 32ce 	movw	r2, #974	; 0x3ce
 800a130:	4935      	ldr	r1, [pc, #212]	; (800a208 <pbuf_copy+0x124>)
 800a132:	4833      	ldr	r0, [pc, #204]	; (800a200 <pbuf_copy+0x11c>)
 800a134:	f00b fa00 	bl	8015538 <printf>
 800a138:	e039      	b.n	800a1ae <pbuf_copy+0xca>
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
 800a13a:	683f      	ldr	r7, [r7, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800a13c:	b10f      	cbz	r7, 800a142 <pbuf_copy+0x5e>
      offset_to = 0;
 800a13e:	2600      	movs	r6, #0
 800a140:	e03e      	b.n	800a1c0 <pbuf_copy+0xdc>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800a142:	b90d      	cbnz	r5, 800a148 <pbuf_copy+0x64>
      offset_to = 0;
 800a144:	2600      	movs	r6, #0
 800a146:	e03b      	b.n	800a1c0 <pbuf_copy+0xdc>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800a148:	4b2b      	ldr	r3, [pc, #172]	; (800a1f8 <pbuf_copy+0x114>)
 800a14a:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a14e:	492f      	ldr	r1, [pc, #188]	; (800a20c <pbuf_copy+0x128>)
 800a150:	482b      	ldr	r0, [pc, #172]	; (800a200 <pbuf_copy+0x11c>)
 800a152:	f00b f9f1 	bl	8015538 <printf>
 800a156:	f06f 000f 	mvn.w	r0, #15
 800a15a:	e04a      	b.n	800a1f2 <pbuf_copy+0x10e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a15c:	682b      	ldr	r3, [r5, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d033      	beq.n	800a1ca <pbuf_copy+0xe6>
 800a162:	4b25      	ldr	r3, [pc, #148]	; (800a1f8 <pbuf_copy+0x114>)
 800a164:	f240 32dd 	movw	r2, #989	; 0x3dd
 800a168:	4929      	ldr	r1, [pc, #164]	; (800a210 <pbuf_copy+0x12c>)
 800a16a:	4825      	ldr	r0, [pc, #148]	; (800a200 <pbuf_copy+0x11c>)
 800a16c:	f00b f9e4 	bl	8015538 <printf>
 800a170:	f06f 0005 	mvn.w	r0, #5
 800a174:	e03d      	b.n	800a1f2 <pbuf_copy+0x10e>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800a176:	2d00      	cmp	r5, #0
 800a178:	d03a      	beq.n	800a1f0 <pbuf_copy+0x10c>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a17a:	897b      	ldrh	r3, [r7, #10]
 800a17c:	1b99      	subs	r1, r3, r6
 800a17e:	896c      	ldrh	r4, [r5, #10]
 800a180:	eba4 0208 	sub.w	r2, r4, r8
 800a184:	4291      	cmp	r1, r2
 800a186:	dbc5      	blt.n	800a114 <pbuf_copy+0x30>
      len = p_from->len - offset_from;
 800a188:	b294      	uxth	r4, r2
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	6869      	ldr	r1, [r5, #4]
 800a18e:	4622      	mov	r2, r4
 800a190:	4441      	add	r1, r8
 800a192:	4430      	add	r0, r6
 800a194:	f00b f9ae 	bl	80154f4 <memcpy>
    offset_to += len;
 800a198:	4426      	add	r6, r4
 800a19a:	b2b6      	uxth	r6, r6
    offset_from += len;
 800a19c:	4444      	add	r4, r8
 800a19e:	fa1f f884 	uxth.w	r8, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a1a2:	897b      	ldrh	r3, [r7, #10]
 800a1a4:	42b3      	cmp	r3, r6
 800a1a6:	d3b8      	bcc.n	800a11a <pbuf_copy+0x36>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a1a8:	896b      	ldrh	r3, [r5, #10]
 800a1aa:	4543      	cmp	r3, r8
 800a1ac:	d3bd      	bcc.n	800a12a <pbuf_copy+0x46>
    if (offset_from >= p_from->len) {
 800a1ae:	896b      	ldrh	r3, [r5, #10]
 800a1b0:	4543      	cmp	r3, r8
 800a1b2:	d802      	bhi.n	800a1ba <pbuf_copy+0xd6>
      p_from = p_from->next;
 800a1b4:	682d      	ldr	r5, [r5, #0]
      offset_from = 0;
 800a1b6:	f04f 0800 	mov.w	r8, #0
    if (offset_to == p_to->len) {
 800a1ba:	897b      	ldrh	r3, [r7, #10]
 800a1bc:	42b3      	cmp	r3, r6
 800a1be:	d0bc      	beq.n	800a13a <pbuf_copy+0x56>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a1c0:	b11d      	cbz	r5, 800a1ca <pbuf_copy+0xe6>
 800a1c2:	896a      	ldrh	r2, [r5, #10]
 800a1c4:	892b      	ldrh	r3, [r5, #8]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d0c8      	beq.n	800a15c <pbuf_copy+0x78>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a1ca:	2f00      	cmp	r7, #0
 800a1cc:	d0d3      	beq.n	800a176 <pbuf_copy+0x92>
 800a1ce:	897a      	ldrh	r2, [r7, #10]
 800a1d0:	893b      	ldrh	r3, [r7, #8]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d1cf      	bne.n	800a176 <pbuf_copy+0x92>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d0cc      	beq.n	800a176 <pbuf_copy+0x92>
 800a1dc:	4b06      	ldr	r3, [pc, #24]	; (800a1f8 <pbuf_copy+0x114>)
 800a1de:	f240 32e2 	movw	r2, #994	; 0x3e2
 800a1e2:	490b      	ldr	r1, [pc, #44]	; (800a210 <pbuf_copy+0x12c>)
 800a1e4:	4806      	ldr	r0, [pc, #24]	; (800a200 <pbuf_copy+0x11c>)
 800a1e6:	f00b f9a7 	bl	8015538 <printf>
 800a1ea:	f06f 0005 	mvn.w	r0, #5
 800a1ee:	e000      	b.n	800a1f2 <pbuf_copy+0x10e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a1f0:	2000      	movs	r0, #0
}
 800a1f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1f6:	bf00      	nop
 800a1f8:	0801cc58 	.word	0x0801cc58
 800a1fc:	0801cf64 	.word	0x0801cf64
 800a200:	0801c994 	.word	0x0801c994
 800a204:	0801cf94 	.word	0x0801cf94
 800a208:	0801cfac 	.word	0x0801cfac
 800a20c:	0801cfc8 	.word	0x0801cfc8
 800a210:	0801cfd8 	.word	0x0801cfd8

0800a214 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a218:	b130      	cbz	r0, 800a228 <pbuf_copy_partial+0x14>
 800a21a:	4688      	mov	r8, r1
 800a21c:	4691      	mov	r9, r2
 800a21e:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a220:	b169      	cbz	r1, 800a23e <pbuf_copy_partial+0x2a>
  u16_t copied_total = 0;
 800a222:	2700      	movs	r7, #0

  left = 0;
 800a224:	463e      	mov	r6, r7
 800a226:	e02a      	b.n	800a27e <pbuf_copy_partial+0x6a>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a228:	4b1b      	ldr	r3, [pc, #108]	; (800a298 <pbuf_copy_partial+0x84>)
 800a22a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800a22e:	491b      	ldr	r1, [pc, #108]	; (800a29c <pbuf_copy_partial+0x88>)
 800a230:	481b      	ldr	r0, [pc, #108]	; (800a2a0 <pbuf_copy_partial+0x8c>)
 800a232:	f00b f981 	bl	8015538 <printf>
 800a236:	2700      	movs	r7, #0
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 800a238:	4638      	mov	r0, r7
 800a23a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a23e:	4b16      	ldr	r3, [pc, #88]	; (800a298 <pbuf_copy_partial+0x84>)
 800a240:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a244:	4917      	ldr	r1, [pc, #92]	; (800a2a4 <pbuf_copy_partial+0x90>)
 800a246:	4816      	ldr	r0, [pc, #88]	; (800a2a0 <pbuf_copy_partial+0x8c>)
 800a248:	f00b f976 	bl	8015538 <printf>
 800a24c:	2700      	movs	r7, #0
 800a24e:	e7f3      	b.n	800a238 <pbuf_copy_partial+0x24>
      buf_copy_len = p->len - offset;
 800a250:	896c      	ldrh	r4, [r5, #10]
 800a252:	1ae4      	subs	r4, r4, r3
 800a254:	b2a4      	uxth	r4, r4
      if (buf_copy_len > len) {
 800a256:	45a1      	cmp	r9, r4
 800a258:	d200      	bcs.n	800a25c <pbuf_copy_partial+0x48>
        buf_copy_len = len;
 800a25a:	464c      	mov	r4, r9
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800a25c:	6869      	ldr	r1, [r5, #4]
 800a25e:	4622      	mov	r2, r4
 800a260:	4419      	add	r1, r3
 800a262:	eb08 0006 	add.w	r0, r8, r6
 800a266:	f00b f945 	bl	80154f4 <memcpy>
      copied_total += buf_copy_len;
 800a26a:	4427      	add	r7, r4
 800a26c:	b2bf      	uxth	r7, r7
      left += buf_copy_len;
 800a26e:	4426      	add	r6, r4
 800a270:	b2b6      	uxth	r6, r6
      len -= buf_copy_len;
 800a272:	eba9 0404 	sub.w	r4, r9, r4
 800a276:	fa1f f984 	uxth.w	r9, r4
      offset = 0;
 800a27a:	2300      	movs	r3, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a27c:	682d      	ldr	r5, [r5, #0]
 800a27e:	f1b9 0f00 	cmp.w	r9, #0
 800a282:	d0d9      	beq.n	800a238 <pbuf_copy_partial+0x24>
 800a284:	2d00      	cmp	r5, #0
 800a286:	d0d7      	beq.n	800a238 <pbuf_copy_partial+0x24>
    if ((offset != 0) && (offset >= p->len)) {
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d0e1      	beq.n	800a250 <pbuf_copy_partial+0x3c>
 800a28c:	8969      	ldrh	r1, [r5, #10]
 800a28e:	4299      	cmp	r1, r3
 800a290:	d8de      	bhi.n	800a250 <pbuf_copy_partial+0x3c>
      offset -= p->len;
 800a292:	1a5b      	subs	r3, r3, r1
 800a294:	b29b      	uxth	r3, r3
 800a296:	e7f1      	b.n	800a27c <pbuf_copy_partial+0x68>
 800a298:	0801cc58 	.word	0x0801cc58
 800a29c:	0801d004 	.word	0x0801d004
 800a2a0:	0801c994 	.word	0x0801c994
 800a2a4:	0801d024 	.word	0x0801d024

0800a2a8 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800a2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800a2ac:	b148      	cbz	r0, 800a2c2 <pbuf_take+0x1a>
 800a2ae:	4688      	mov	r8, r1
 800a2b0:	4691      	mov	r9, r2
 800a2b2:	4606      	mov	r6, r0
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800a2b4:	b179      	cbz	r1, 800a2d6 <pbuf_take+0x2e>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800a2b6:	8903      	ldrh	r3, [r0, #8]
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d316      	bcc.n	800a2ea <pbuf_take+0x42>
  u16_t total_copy_len = len;
 800a2bc:	4614      	mov	r4, r2
  u16_t copied_total = 0;
 800a2be:	2700      	movs	r7, #0
 800a2c0:	e030      	b.n	800a324 <pbuf_take+0x7c>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800a2c2:	4b23      	ldr	r3, [pc, #140]	; (800a350 <pbuf_take+0xa8>)
 800a2c4:	f240 4284 	movw	r2, #1156	; 0x484
 800a2c8:	4922      	ldr	r1, [pc, #136]	; (800a354 <pbuf_take+0xac>)
 800a2ca:	4823      	ldr	r0, [pc, #140]	; (800a358 <pbuf_take+0xb0>)
 800a2cc:	f00b f934 	bl	8015538 <printf>
 800a2d0:	f06f 000f 	mvn.w	r0, #15
 800a2d4:	e031      	b.n	800a33a <pbuf_take+0x92>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800a2d6:	4b1e      	ldr	r3, [pc, #120]	; (800a350 <pbuf_take+0xa8>)
 800a2d8:	f240 4285 	movw	r2, #1157	; 0x485
 800a2dc:	491f      	ldr	r1, [pc, #124]	; (800a35c <pbuf_take+0xb4>)
 800a2de:	481e      	ldr	r0, [pc, #120]	; (800a358 <pbuf_take+0xb0>)
 800a2e0:	f00b f92a 	bl	8015538 <printf>
 800a2e4:	f06f 000f 	mvn.w	r0, #15
 800a2e8:	e027      	b.n	800a33a <pbuf_take+0x92>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800a2ea:	4b19      	ldr	r3, [pc, #100]	; (800a350 <pbuf_take+0xa8>)
 800a2ec:	f240 4286 	movw	r2, #1158	; 0x486
 800a2f0:	491b      	ldr	r1, [pc, #108]	; (800a360 <pbuf_take+0xb8>)
 800a2f2:	4819      	ldr	r0, [pc, #100]	; (800a358 <pbuf_take+0xb0>)
 800a2f4:	f00b f920 	bl	8015538 <printf>
 800a2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2fc:	e01d      	b.n	800a33a <pbuf_take+0x92>
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800a2fe:	4b14      	ldr	r3, [pc, #80]	; (800a350 <pbuf_take+0xa8>)
 800a300:	f240 428e 	movw	r2, #1166	; 0x48e
 800a304:	4917      	ldr	r1, [pc, #92]	; (800a364 <pbuf_take+0xbc>)
 800a306:	4814      	ldr	r0, [pc, #80]	; (800a358 <pbuf_take+0xb0>)
 800a308:	f00b f916 	bl	8015538 <printf>
 800a30c:	e00d      	b.n	800a32a <pbuf_take+0x82>
    if (buf_copy_len > p->len) {
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 800a30e:	462a      	mov	r2, r5
 800a310:	eb08 0107 	add.w	r1, r8, r7
 800a314:	6870      	ldr	r0, [r6, #4]
 800a316:	f00b f8ed 	bl	80154f4 <memcpy>
    total_copy_len -= buf_copy_len;
 800a31a:	1b64      	subs	r4, r4, r5
 800a31c:	b2a4      	uxth	r4, r4
    copied_total += buf_copy_len;
 800a31e:	442f      	add	r7, r5
 800a320:	b2bf      	uxth	r7, r7
  for (p = buf; total_copy_len != 0; p = p->next) {
 800a322:	6836      	ldr	r6, [r6, #0]
 800a324:	b134      	cbz	r4, 800a334 <pbuf_take+0x8c>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800a326:	2e00      	cmp	r6, #0
 800a328:	d0e9      	beq.n	800a2fe <pbuf_take+0x56>
    if (buf_copy_len > p->len) {
 800a32a:	8975      	ldrh	r5, [r6, #10]
 800a32c:	42a5      	cmp	r5, r4
 800a32e:	d3ee      	bcc.n	800a30e <pbuf_take+0x66>
    buf_copy_len = total_copy_len;
 800a330:	4625      	mov	r5, r4
 800a332:	e7ec      	b.n	800a30e <pbuf_take+0x66>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800a334:	454f      	cmp	r7, r9
 800a336:	d102      	bne.n	800a33e <pbuf_take+0x96>
  return ERR_OK;
 800a338:	2000      	movs	r0, #0
}
 800a33a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800a33e:	4b04      	ldr	r3, [pc, #16]	; (800a350 <pbuf_take+0xa8>)
 800a340:	f240 4299 	movw	r2, #1177	; 0x499
 800a344:	4908      	ldr	r1, [pc, #32]	; (800a368 <pbuf_take+0xc0>)
 800a346:	4804      	ldr	r0, [pc, #16]	; (800a358 <pbuf_take+0xb0>)
 800a348:	f00b f8f6 	bl	8015538 <printf>
  return ERR_OK;
 800a34c:	2000      	movs	r0, #0
 800a34e:	e7f4      	b.n	800a33a <pbuf_take+0x92>
 800a350:	0801cc58 	.word	0x0801cc58
 800a354:	0801d048 	.word	0x0801d048
 800a358:	0801c994 	.word	0x0801c994
 800a35c:	0801d060 	.word	0x0801d060
 800a360:	0801d07c 	.word	0x0801d07c
 800a364:	0801d09c 	.word	0x0801d09c
 800a368:	0801d0b4 	.word	0x0801d0b4

0800a36c <tcp_remove_listener>:
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a36c:	e002      	b.n	800a374 <tcp_remove_listener+0x8>
      if (pcb->listener == lpcb) {
         pcb->listener = NULL;
 800a36e:	2300      	movs	r3, #0
 800a370:	6783      	str	r3, [r0, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a372:	68c0      	ldr	r0, [r0, #12]
 800a374:	b118      	cbz	r0, 800a37e <tcp_remove_listener+0x12>
      if (pcb->listener == lpcb) {
 800a376:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800a378:	428b      	cmp	r3, r1
 800a37a:	d1fa      	bne.n	800a372 <tcp_remove_listener+0x6>
 800a37c:	e7f7      	b.n	800a36e <tcp_remove_listener+0x2>
      }
   }
}
 800a37e:	4770      	bx	lr

0800a380 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800a380:	b410      	push	{r4}
  u8_t i;
  u16_t n = 0;
 800a382:	2400      	movs	r4, #0
 800a384:	e009      	b.n	800a39a <tcp_new_port+0x1a>
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800a386:	4b15      	ldr	r3, [pc, #84]	; (800a3dc <tcp_new_port+0x5c>)
 800a388:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800a38c:	801a      	strh	r2, [r3, #0]
 800a38e:	e00c      	b.n	800a3aa <tcp_new_port+0x2a>
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
      if (pcb->local_port == tcp_port) {
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800a390:	3401      	adds	r4, #1
 800a392:	b2a4      	uxth	r4, r4
 800a394:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 800a398:	d21e      	bcs.n	800a3d8 <tcp_new_port+0x58>
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800a39a:	4a10      	ldr	r2, [pc, #64]	; (800a3dc <tcp_new_port+0x5c>)
 800a39c:	8813      	ldrh	r3, [r2, #0]
 800a39e:	1c59      	adds	r1, r3, #1
 800a3a0:	8011      	strh	r1, [r2, #0]
 800a3a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d0ed      	beq.n	800a386 <tcp_new_port+0x6>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a3aa:	2000      	movs	r0, #0
 800a3ac:	2803      	cmp	r0, #3
 800a3ae:	d80e      	bhi.n	800a3ce <tcp_new_port+0x4e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a3b0:	4b0b      	ldr	r3, [pc, #44]	; (800a3e0 <tcp_new_port+0x60>)
 800a3b2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	b133      	cbz	r3, 800a3c8 <tcp_new_port+0x48>
      if (pcb->local_port == tcp_port) {
 800a3ba:	8ad9      	ldrh	r1, [r3, #22]
 800a3bc:	4a07      	ldr	r2, [pc, #28]	; (800a3dc <tcp_new_port+0x5c>)
 800a3be:	8812      	ldrh	r2, [r2, #0]
 800a3c0:	4291      	cmp	r1, r2
 800a3c2:	d0e5      	beq.n	800a390 <tcp_new_port+0x10>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	e7f7      	b.n	800a3b8 <tcp_new_port+0x38>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a3c8:	3001      	adds	r0, #1
 800a3ca:	b2c0      	uxtb	r0, r0
 800a3cc:	e7ee      	b.n	800a3ac <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800a3ce:	4b03      	ldr	r3, [pc, #12]	; (800a3dc <tcp_new_port+0x5c>)
 800a3d0:	8818      	ldrh	r0, [r3, #0]
}
 800a3d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3d6:	4770      	bx	lr
          return 0;
 800a3d8:	2000      	movs	r0, #0
 800a3da:	e7fa      	b.n	800a3d2 <tcp_new_port+0x52>
 800a3dc:	20000008 	.word	0x20000008
 800a3e0:	0801c8b0 	.word	0x0801c8b0

0800a3e4 <tcp_listen_closed>:
{
 800a3e4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a3e6:	4605      	mov	r5, r0
 800a3e8:	b120      	cbz	r0, 800a3f4 <tcp_listen_closed+0x10>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800a3ea:	7d2b      	ldrb	r3, [r5, #20]
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d108      	bne.n	800a402 <tcp_listen_closed+0x1e>
{
 800a3f0:	2401      	movs	r4, #1
 800a3f2:	e015      	b.n	800a420 <tcp_listen_closed+0x3c>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a3f4:	4b0c      	ldr	r3, [pc, #48]	; (800a428 <tcp_listen_closed+0x44>)
 800a3f6:	22c0      	movs	r2, #192	; 0xc0
 800a3f8:	490c      	ldr	r1, [pc, #48]	; (800a42c <tcp_listen_closed+0x48>)
 800a3fa:	480d      	ldr	r0, [pc, #52]	; (800a430 <tcp_listen_closed+0x4c>)
 800a3fc:	f00b f89c 	bl	8015538 <printf>
 800a400:	e7f3      	b.n	800a3ea <tcp_listen_closed+0x6>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800a402:	4b09      	ldr	r3, [pc, #36]	; (800a428 <tcp_listen_closed+0x44>)
 800a404:	22c1      	movs	r2, #193	; 0xc1
 800a406:	490b      	ldr	r1, [pc, #44]	; (800a434 <tcp_listen_closed+0x50>)
 800a408:	4809      	ldr	r0, [pc, #36]	; (800a430 <tcp_listen_closed+0x4c>)
 800a40a:	f00b f895 	bl	8015538 <printf>
 800a40e:	e7ef      	b.n	800a3f0 <tcp_listen_closed+0xc>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800a410:	4b09      	ldr	r3, [pc, #36]	; (800a438 <tcp_listen_closed+0x54>)
 800a412:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a416:	4629      	mov	r1, r5
 800a418:	6818      	ldr	r0, [r3, #0]
 800a41a:	f7ff ffa7 	bl	800a36c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a41e:	3401      	adds	r4, #1
 800a420:	2c03      	cmp	r4, #3
 800a422:	d9f5      	bls.n	800a410 <tcp_listen_closed+0x2c>
}
 800a424:	bd38      	pop	{r3, r4, r5, pc}
 800a426:	bf00      	nop
 800a428:	0801d0e0 	.word	0x0801d0e0
 800a42c:	0801d110 	.word	0x0801d110
 800a430:	0801c994 	.word	0x0801c994
 800a434:	0801d11c 	.word	0x0801d11c
 800a438:	0801c8b0 	.word	0x0801c8b0

0800a43c <tcp_close_shutdown_fin>:
{
 800a43c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a43e:	4605      	mov	r5, r0
 800a440:	b148      	cbz	r0, 800a456 <tcp_close_shutdown_fin+0x1a>
  switch (pcb->state) {
 800a442:	7d2b      	ldrb	r3, [r5, #20]
 800a444:	2b04      	cmp	r3, #4
 800a446:	d01f      	beq.n	800a488 <tcp_close_shutdown_fin+0x4c>
 800a448:	2b07      	cmp	r3, #7
 800a44a:	d026      	beq.n	800a49a <tcp_close_shutdown_fin+0x5e>
 800a44c:	2b03      	cmp	r3, #3
 800a44e:	d00a      	beq.n	800a466 <tcp_close_shutdown_fin+0x2a>
 800a450:	2400      	movs	r4, #0
}
 800a452:	4620      	mov	r0, r4
 800a454:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a456:	4b17      	ldr	r3, [pc, #92]	; (800a4b4 <tcp_close_shutdown_fin+0x78>)
 800a458:	f240 124d 	movw	r2, #333	; 0x14d
 800a45c:	4916      	ldr	r1, [pc, #88]	; (800a4b8 <tcp_close_shutdown_fin+0x7c>)
 800a45e:	4817      	ldr	r0, [pc, #92]	; (800a4bc <tcp_close_shutdown_fin+0x80>)
 800a460:	f00b f86a 	bl	8015538 <printf>
 800a464:	e7ed      	b.n	800a442 <tcp_close_shutdown_fin+0x6>
    err = tcp_send_fin(pcb);
 800a466:	4628      	mov	r0, r5
 800a468:	f002 ffc8 	bl	800d3fc <tcp_send_fin>
    if (err == ERR_OK) {
 800a46c:	4604      	mov	r4, r0
 800a46e:	b908      	cbnz	r0, 800a474 <tcp_close_shutdown_fin+0x38>
      pcb->state = FIN_WAIT_1;
 800a470:	2305      	movs	r3, #5
 800a472:	752b      	strb	r3, [r5, #20]
  if (err == ERR_OK) {
 800a474:	b1d4      	cbz	r4, 800a4ac <tcp_close_shutdown_fin+0x70>
  } else if (err == ERR_MEM) {
 800a476:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a47a:	d1ea      	bne.n	800a452 <tcp_close_shutdown_fin+0x16>
    pcb->flags |= TF_CLOSEPEND;
 800a47c:	7eab      	ldrb	r3, [r5, #26]
 800a47e:	f043 0308 	orr.w	r3, r3, #8
 800a482:	76ab      	strb	r3, [r5, #26]
    return ERR_OK;
 800a484:	2400      	movs	r4, #0
 800a486:	e7e4      	b.n	800a452 <tcp_close_shutdown_fin+0x16>
    err = tcp_send_fin(pcb);
 800a488:	4628      	mov	r0, r5
 800a48a:	f002 ffb7 	bl	800d3fc <tcp_send_fin>
    if (err == ERR_OK) {
 800a48e:	4604      	mov	r4, r0
 800a490:	2800      	cmp	r0, #0
 800a492:	d1ef      	bne.n	800a474 <tcp_close_shutdown_fin+0x38>
      pcb->state = FIN_WAIT_1;
 800a494:	2305      	movs	r3, #5
 800a496:	752b      	strb	r3, [r5, #20]
 800a498:	e7ec      	b.n	800a474 <tcp_close_shutdown_fin+0x38>
    err = tcp_send_fin(pcb);
 800a49a:	4628      	mov	r0, r5
 800a49c:	f002 ffae 	bl	800d3fc <tcp_send_fin>
    if (err == ERR_OK) {
 800a4a0:	4604      	mov	r4, r0
 800a4a2:	2800      	cmp	r0, #0
 800a4a4:	d1e6      	bne.n	800a474 <tcp_close_shutdown_fin+0x38>
      pcb->state = LAST_ACK;
 800a4a6:	2309      	movs	r3, #9
 800a4a8:	752b      	strb	r3, [r5, #20]
 800a4aa:	e7e3      	b.n	800a474 <tcp_close_shutdown_fin+0x38>
    tcp_output(pcb);
 800a4ac:	4628      	mov	r0, r5
 800a4ae:	f003 f801 	bl	800d4b4 <tcp_output>
 800a4b2:	e7ce      	b.n	800a452 <tcp_close_shutdown_fin+0x16>
 800a4b4:	0801d0e0 	.word	0x0801d0e0
 800a4b8:	0801d110 	.word	0x0801d110
 800a4bc:	0801c994 	.word	0x0801c994

0800a4c0 <tcp_init>:
}
 800a4c0:	4770      	bx	lr
	...

0800a4c4 <tcp_bind>:
{
 800a4c4:	b570      	push	{r4, r5, r6, lr}
 800a4c6:	4606      	mov	r6, r0
  if (ipaddr == NULL) {
 800a4c8:	460d      	mov	r5, r1
 800a4ca:	b171      	cbz	r1, 800a4ea <tcp_bind+0x26>
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800a4cc:	2e00      	cmp	r6, #0
 800a4ce:	d039      	beq.n	800a544 <tcp_bind+0x80>
 800a4d0:	2d00      	cmp	r5, #0
 800a4d2:	d03a      	beq.n	800a54a <tcp_bind+0x86>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800a4d4:	7d33      	ldrb	r3, [r6, #20]
 800a4d6:	b953      	cbnz	r3, 800a4ee <tcp_bind+0x2a>
  if (port == 0) {
 800a4d8:	b19a      	cbz	r2, 800a502 <tcp_bind+0x3e>
    for (i = 0; i < max_pcb_list; i++) {
 800a4da:	2000      	movs	r0, #0
 800a4dc:	2803      	cmp	r0, #3
 800a4de:	dc14      	bgt.n	800a50a <tcp_bind+0x46>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800a4e0:	4b21      	ldr	r3, [pc, #132]	; (800a568 <tcp_bind+0xa4>)
 800a4e2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	e01c      	b.n	800a524 <tcp_bind+0x60>
    ipaddr = IP4_ADDR_ANY;
 800a4ea:	4d20      	ldr	r5, [pc, #128]	; (800a56c <tcp_bind+0xa8>)
 800a4ec:	e7ee      	b.n	800a4cc <tcp_bind+0x8>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800a4ee:	4b20      	ldr	r3, [pc, #128]	; (800a570 <tcp_bind+0xac>)
 800a4f0:	f44f 7211 	mov.w	r2, #580	; 0x244
 800a4f4:	491f      	ldr	r1, [pc, #124]	; (800a574 <tcp_bind+0xb0>)
 800a4f6:	4820      	ldr	r0, [pc, #128]	; (800a578 <tcp_bind+0xb4>)
 800a4f8:	f00b f81e 	bl	8015538 <printf>
 800a4fc:	f06f 0005 	mvn.w	r0, #5
 800a500:	e00e      	b.n	800a520 <tcp_bind+0x5c>
    port = tcp_new_port();
 800a502:	f7ff ff3d 	bl	800a380 <tcp_new_port>
    if (port == 0) {
 800a506:	4602      	mov	r2, r0
 800a508:	b310      	cbz	r0, 800a550 <tcp_bind+0x8c>
  if (!ip_addr_isany(ipaddr)) {
 800a50a:	682b      	ldr	r3, [r5, #0]
 800a50c:	b103      	cbz	r3, 800a510 <tcp_bind+0x4c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800a50e:	6033      	str	r3, [r6, #0]
  pcb->local_port = port;
 800a510:	82f2      	strh	r2, [r6, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800a512:	4b1a      	ldr	r3, [pc, #104]	; (800a57c <tcp_bind+0xb8>)
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	60f2      	str	r2, [r6, #12]
 800a518:	601e      	str	r6, [r3, #0]
 800a51a:	f003 fac3 	bl	800daa4 <tcp_timer_needed>
  return ERR_OK;
 800a51e:	2000      	movs	r0, #0
}
 800a520:	bd70      	pop	{r4, r5, r6, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	b163      	cbz	r3, 800a540 <tcp_bind+0x7c>
        if (cpcb->local_port == port) {
 800a526:	8ad9      	ldrh	r1, [r3, #22]
 800a528:	4291      	cmp	r1, r2
 800a52a:	d1fa      	bne.n	800a522 <tcp_bind+0x5e>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800a52c:	b19b      	cbz	r3, 800a556 <tcp_bind+0x92>
                (ip_addr_isany(&cpcb->local_ip) ||
 800a52e:	6819      	ldr	r1, [r3, #0]
 800a530:	b1a1      	cbz	r1, 800a55c <tcp_bind+0x98>
                ip_addr_isany(ipaddr) ||
 800a532:	682c      	ldr	r4, [r5, #0]
 800a534:	b1ac      	cbz	r4, 800a562 <tcp_bind+0x9e>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800a536:	42a1      	cmp	r1, r4
 800a538:	d1f3      	bne.n	800a522 <tcp_bind+0x5e>
              return ERR_USE;
 800a53a:	f06f 0007 	mvn.w	r0, #7
 800a53e:	e7ef      	b.n	800a520 <tcp_bind+0x5c>
    for (i = 0; i < max_pcb_list; i++) {
 800a540:	3001      	adds	r0, #1
 800a542:	e7cb      	b.n	800a4dc <tcp_bind+0x18>
    return ERR_VAL;
 800a544:	f06f 0005 	mvn.w	r0, #5
 800a548:	e7ea      	b.n	800a520 <tcp_bind+0x5c>
 800a54a:	f06f 0005 	mvn.w	r0, #5
 800a54e:	e7e7      	b.n	800a520 <tcp_bind+0x5c>
      return ERR_BUF;
 800a550:	f06f 0001 	mvn.w	r0, #1
 800a554:	e7e4      	b.n	800a520 <tcp_bind+0x5c>
              return ERR_USE;
 800a556:	f06f 0007 	mvn.w	r0, #7
 800a55a:	e7e1      	b.n	800a520 <tcp_bind+0x5c>
 800a55c:	f06f 0007 	mvn.w	r0, #7
 800a560:	e7de      	b.n	800a520 <tcp_bind+0x5c>
 800a562:	f06f 0007 	mvn.w	r0, #7
 800a566:	e7db      	b.n	800a520 <tcp_bind+0x5c>
 800a568:	0801c8b0 	.word	0x0801c8b0
 800a56c:	0801c920 	.word	0x0801c920
 800a570:	0801d0e0 	.word	0x0801d0e0
 800a574:	0801d134 	.word	0x0801d134
 800a578:	0801c994 	.word	0x0801c994
 800a57c:	2000971c 	.word	0x2000971c

0800a580 <tcp_update_rcv_ann_wnd>:
{
 800a580:	b538      	push	{r3, r4, r5, lr}
 800a582:	4604      	mov	r4, r0
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a584:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a586:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 800a588:	1868      	adds	r0, r5, r1
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a58a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a58c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800a58e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a592:	bf94      	ite	ls
 800a594:	18d3      	addls	r3, r2, r3
 800a596:	f502 6386 	addhi.w	r3, r2, #1072	; 0x430
 800a59a:	1ac3      	subs	r3, r0, r3
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	db02      	blt.n	800a5a6 <tcp_update_rcv_ann_wnd+0x26>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a5a0:	8561      	strh	r1, [r4, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800a5a2:	1a80      	subs	r0, r0, r2
}
 800a5a4:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a5a6:	1aab      	subs	r3, r5, r2
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	dd03      	ble.n	800a5b4 <tcp_update_rcv_ann_wnd+0x34>
      pcb->rcv_ann_wnd = 0;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	8563      	strh	r3, [r4, #42]	; 0x2a
    return 0;
 800a5b0:	2000      	movs	r0, #0
 800a5b2:	e7f7      	b.n	800a5a4 <tcp_update_rcv_ann_wnd+0x24>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a5b4:	1b55      	subs	r5, r2, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a5b6:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800a5ba:	d201      	bcs.n	800a5c0 <tcp_update_rcv_ann_wnd+0x40>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a5bc:	8565      	strh	r5, [r4, #42]	; 0x2a
 800a5be:	e7f7      	b.n	800a5b0 <tcp_update_rcv_ann_wnd+0x30>
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a5c0:	4b03      	ldr	r3, [pc, #12]	; (800a5d0 <tcp_update_rcv_ann_wnd+0x50>)
 800a5c2:	f44f 7242 	mov.w	r2, #776	; 0x308
 800a5c6:	4903      	ldr	r1, [pc, #12]	; (800a5d4 <tcp_update_rcv_ann_wnd+0x54>)
 800a5c8:	4803      	ldr	r0, [pc, #12]	; (800a5d8 <tcp_update_rcv_ann_wnd+0x58>)
 800a5ca:	f00a ffb5 	bl	8015538 <printf>
 800a5ce:	e7f5      	b.n	800a5bc <tcp_update_rcv_ann_wnd+0x3c>
 800a5d0:	0801d0e0 	.word	0x0801d0e0
 800a5d4:	0801d180 	.word	0x0801d180
 800a5d8:	0801c994 	.word	0x0801c994

0800a5dc <tcp_recved>:
{
 800a5dc:	b538      	push	{r3, r4, r5, lr}
 800a5de:	4605      	mov	r5, r0
 800a5e0:	460c      	mov	r4, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a5e2:	7d03      	ldrb	r3, [r0, #20]
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d010      	beq.n	800a60a <tcp_recved+0x2e>
  pcb->rcv_wnd += len;
 800a5e8:	8d29      	ldrh	r1, [r5, #40]	; 0x28
 800a5ea:	4421      	add	r1, r4
 800a5ec:	b289      	uxth	r1, r1
 800a5ee:	8529      	strh	r1, [r5, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800a5f0:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 800a5f4:	d911      	bls.n	800a61a <tcp_recved+0x3e>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a5f6:	f44f 6306 	mov.w	r3, #2144	; 0x860
 800a5fa:	852b      	strh	r3, [r5, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a5fc:	4628      	mov	r0, r5
 800a5fe:	f7ff ffbf 	bl	800a580 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a602:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 800a606:	da1b      	bge.n	800a640 <tcp_recved+0x64>
}
 800a608:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a60a:	4b11      	ldr	r3, [pc, #68]	; (800a650 <tcp_recved+0x74>)
 800a60c:	f240 321f 	movw	r2, #799	; 0x31f
 800a610:	4910      	ldr	r1, [pc, #64]	; (800a654 <tcp_recved+0x78>)
 800a612:	4811      	ldr	r0, [pc, #68]	; (800a658 <tcp_recved+0x7c>)
 800a614:	f00a ff90 	bl	8015538 <printf>
 800a618:	e7e6      	b.n	800a5e8 <tcp_recved+0xc>
  } else if (pcb->rcv_wnd == 0) {
 800a61a:	2900      	cmp	r1, #0
 800a61c:	d1ee      	bne.n	800a5fc <tcp_recved+0x20>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800a61e:	7d2b      	ldrb	r3, [r5, #20]
 800a620:	2b07      	cmp	r3, #7
 800a622:	d001      	beq.n	800a628 <tcp_recved+0x4c>
 800a624:	2b09      	cmp	r3, #9
 800a626:	d103      	bne.n	800a630 <tcp_recved+0x54>
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a628:	f44f 6306 	mov.w	r3, #2144	; 0x860
 800a62c:	852b      	strh	r3, [r5, #40]	; 0x28
 800a62e:	e7e5      	b.n	800a5fc <tcp_recved+0x20>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800a630:	4b07      	ldr	r3, [pc, #28]	; (800a650 <tcp_recved+0x74>)
 800a632:	f240 322d 	movw	r2, #813	; 0x32d
 800a636:	4909      	ldr	r1, [pc, #36]	; (800a65c <tcp_recved+0x80>)
 800a638:	4807      	ldr	r0, [pc, #28]	; (800a658 <tcp_recved+0x7c>)
 800a63a:	f00a ff7d 	bl	8015538 <printf>
 800a63e:	e7dd      	b.n	800a5fc <tcp_recved+0x20>
    tcp_ack_now(pcb);
 800a640:	7eab      	ldrb	r3, [r5, #26]
 800a642:	f043 0302 	orr.w	r3, r3, #2
 800a646:	76ab      	strb	r3, [r5, #26]
    tcp_output(pcb);
 800a648:	4628      	mov	r0, r5
 800a64a:	f002 ff33 	bl	800d4b4 <tcp_output>
}
 800a64e:	e7db      	b.n	800a608 <tcp_recved+0x2c>
 800a650:	0801d0e0 	.word	0x0801d0e0
 800a654:	0801d19c 	.word	0x0801d19c
 800a658:	0801c994 	.word	0x0801c994
 800a65c:	0801d1c4 	.word	0x0801d1c4

0800a660 <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
 800a660:	b150      	cbz	r0, 800a678 <tcp_seg_free+0x18>
{
 800a662:	b510      	push	{r4, lr}
 800a664:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 800a666:	6840      	ldr	r0, [r0, #4]
 800a668:	b108      	cbz	r0, 800a66e <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800a66a:	f7ff fb15 	bl	8009c98 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a66e:	4621      	mov	r1, r4
 800a670:	2003      	movs	r0, #3
 800a672:	f7ff f95d 	bl	8009930 <memp_free>
  }
}
 800a676:	bd10      	pop	{r4, pc}
 800a678:	4770      	bx	lr

0800a67a <tcp_segs_free>:
  while (seg != NULL) {
 800a67a:	b138      	cbz	r0, 800a68c <tcp_segs_free+0x12>
{
 800a67c:	b510      	push	{r4, lr}
    struct tcp_seg *next = seg->next;
 800a67e:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 800a680:	f7ff ffee 	bl	800a660 <tcp_seg_free>
    seg = next;
 800a684:	4620      	mov	r0, r4
  while (seg != NULL) {
 800a686:	2c00      	cmp	r4, #0
 800a688:	d1f9      	bne.n	800a67e <tcp_segs_free+0x4>
}
 800a68a:	bd10      	pop	{r4, pc}
 800a68c:	4770      	bx	lr

0800a68e <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a68e:	b538      	push	{r3, r4, r5, lr}
 800a690:	4604      	mov	r4, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800a692:	2003      	movs	r0, #3
 800a694:	f7ff f932 	bl	80098fc <memp_malloc>
  if (cseg == NULL) {
 800a698:	4605      	mov	r5, r0
 800a69a:	b150      	cbz	r0, 800a6b2 <tcp_seg_copy+0x24>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a69c:	6820      	ldr	r0, [r4, #0]
 800a69e:	6861      	ldr	r1, [r4, #4]
 800a6a0:	68a2      	ldr	r2, [r4, #8]
 800a6a2:	68e3      	ldr	r3, [r4, #12]
 800a6a4:	6028      	str	r0, [r5, #0]
 800a6a6:	6069      	str	r1, [r5, #4]
 800a6a8:	60aa      	str	r2, [r5, #8]
 800a6aa:	60eb      	str	r3, [r5, #12]
  pbuf_ref(cseg->p);
 800a6ac:	6868      	ldr	r0, [r5, #4]
 800a6ae:	f7ff fcc7 	bl	800a040 <pbuf_ref>
  return cseg;
}
 800a6b2:	4628      	mov	r0, r5
 800a6b4:	bd38      	pop	{r3, r4, r5, pc}

0800a6b6 <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800a6b6:	b100      	cbz	r0, 800a6ba <tcp_arg+0x4>
    pcb->callback_arg = arg;
 800a6b8:	6101      	str	r1, [r0, #16]
  }
}
 800a6ba:	4770      	bx	lr

0800a6bc <tcp_recv>:
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  if (pcb != NULL) {
 800a6bc:	b180      	cbz	r0, 800a6e0 <tcp_recv+0x24>
{
 800a6be:	b538      	push	{r3, r4, r5, lr}
 800a6c0:	460c      	mov	r4, r1
 800a6c2:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800a6c4:	7d03      	ldrb	r3, [r0, #20]
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d002      	beq.n	800a6d0 <tcp_recv+0x14>
    pcb->recv = recv;
 800a6ca:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
  }
}
 800a6ce:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800a6d0:	4b04      	ldr	r3, [pc, #16]	; (800a6e4 <tcp_recv+0x28>)
 800a6d2:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800a6d6:	4904      	ldr	r1, [pc, #16]	; (800a6e8 <tcp_recv+0x2c>)
 800a6d8:	4804      	ldr	r0, [pc, #16]	; (800a6ec <tcp_recv+0x30>)
 800a6da:	f00a ff2d 	bl	8015538 <printf>
 800a6de:	e7f4      	b.n	800a6ca <tcp_recv+0xe>
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	0801d0e0 	.word	0x0801d0e0
 800a6e8:	0801d1e8 	.word	0x0801d1e8
 800a6ec:	0801c994 	.word	0x0801c994

0800a6f0 <tcp_sent>:
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  if (pcb != NULL) {
 800a6f0:	b178      	cbz	r0, 800a712 <tcp_sent+0x22>
{
 800a6f2:	b538      	push	{r3, r4, r5, lr}
 800a6f4:	460c      	mov	r4, r1
 800a6f6:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800a6f8:	7d03      	ldrb	r3, [r0, #20]
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d001      	beq.n	800a702 <tcp_sent+0x12>
    pcb->sent = sent;
 800a6fe:	67ec      	str	r4, [r5, #124]	; 0x7c
  }
}
 800a700:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800a702:	4b04      	ldr	r3, [pc, #16]	; (800a714 <tcp_sent+0x24>)
 800a704:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800a708:	4903      	ldr	r1, [pc, #12]	; (800a718 <tcp_sent+0x28>)
 800a70a:	4804      	ldr	r0, [pc, #16]	; (800a71c <tcp_sent+0x2c>)
 800a70c:	f00a ff14 	bl	8015538 <printf>
 800a710:	e7f5      	b.n	800a6fe <tcp_sent+0xe>
 800a712:	4770      	bx	lr
 800a714:	0801d0e0 	.word	0x0801d0e0
 800a718:	0801d210 	.word	0x0801d210
 800a71c:	0801c994 	.word	0x0801c994

0800a720 <tcp_err>:
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  if (pcb != NULL) {
 800a720:	b180      	cbz	r0, 800a744 <tcp_err+0x24>
{
 800a722:	b538      	push	{r3, r4, r5, lr}
 800a724:	460c      	mov	r4, r1
 800a726:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800a728:	7d03      	ldrb	r3, [r0, #20]
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d002      	beq.n	800a734 <tcp_err+0x14>
    pcb->errf = err;
 800a72e:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
  }
}
 800a732:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800a734:	4b04      	ldr	r3, [pc, #16]	; (800a748 <tcp_err+0x28>)
 800a736:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800a73a:	4904      	ldr	r1, [pc, #16]	; (800a74c <tcp_err+0x2c>)
 800a73c:	4804      	ldr	r0, [pc, #16]	; (800a750 <tcp_err+0x30>)
 800a73e:	f00a fefb 	bl	8015538 <printf>
 800a742:	e7f4      	b.n	800a72e <tcp_err+0xe>
 800a744:	4770      	bx	lr
 800a746:	bf00      	nop
 800a748:	0801d0e0 	.word	0x0801d0e0
 800a74c:	0801d238 	.word	0x0801d238
 800a750:	0801c994 	.word	0x0801c994

0800a754 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800a754:	b570      	push	{r4, r5, r6, lr}
 800a756:	4604      	mov	r4, r0
 800a758:	460e      	mov	r6, r1
 800a75a:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800a75c:	7d03      	ldrb	r3, [r0, #20]
 800a75e:	2b01      	cmp	r3, #1
 800a760:	d003      	beq.n	800a76a <tcp_poll+0x16>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800a762:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800a766:	7725      	strb	r5, [r4, #28]
}
 800a768:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800a76a:	4b04      	ldr	r3, [pc, #16]	; (800a77c <tcp_poll+0x28>)
 800a76c:	f240 7203 	movw	r2, #1795	; 0x703
 800a770:	4903      	ldr	r1, [pc, #12]	; (800a780 <tcp_poll+0x2c>)
 800a772:	4804      	ldr	r0, [pc, #16]	; (800a784 <tcp_poll+0x30>)
 800a774:	f00a fee0 	bl	8015538 <printf>
 800a778:	e7f3      	b.n	800a762 <tcp_poll+0xe>
 800a77a:	bf00      	nop
 800a77c:	0801d0e0 	.word	0x0801d0e0
 800a780:	0801d260 	.word	0x0801d260
 800a784:	0801c994 	.word	0x0801c994

0800a788 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a788:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 800a78a:	7d03      	ldrb	r3, [r0, #20]
 800a78c:	b1e3      	cbz	r3, 800a7c8 <tcp_pcb_purge+0x40>
 800a78e:	4604      	mov	r4, r0
 800a790:	2b0a      	cmp	r3, #10
 800a792:	d019      	beq.n	800a7c8 <tcp_pcb_purge+0x40>
     pcb->state != TIME_WAIT &&
 800a794:	2b01      	cmp	r3, #1
 800a796:	d017      	beq.n	800a7c8 <tcp_pcb_purge+0x40>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a798:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800a79a:	b118      	cbz	r0, 800a7a4 <tcp_pcb_purge+0x1c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a79c:	f7ff fa7c 	bl	8009c98 <pbuf_free>
      pcb->refused_data = NULL;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800a7a4:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800a7a6:	f7ff ff68 	bl	800a67a <tcp_segs_free>
    pcb->ooseq = NULL;
 800a7aa:	2500      	movs	r5, #0
 800a7ac:	6725      	str	r5, [r4, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a7ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a7b2:	8623      	strh	r3, [r4, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800a7b4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800a7b6:	f7ff ff60 	bl	800a67a <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a7ba:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800a7bc:	f7ff ff5d 	bl	800a67a <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a7c0:	66a5      	str	r5, [r4, #104]	; 0x68
 800a7c2:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a7c4:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800a7c8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a7cc <tcp_slowtmr>:
{
 800a7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7d0:	b082      	sub	sp, #8
  ++tcp_ticks;
 800a7d2:	4aae      	ldr	r2, [pc, #696]	; (800aa8c <tcp_slowtmr+0x2c0>)
 800a7d4:	6813      	ldr	r3, [r2, #0]
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a7da:	4aad      	ldr	r2, [pc, #692]	; (800aa90 <tcp_slowtmr+0x2c4>)
 800a7dc:	7813      	ldrb	r3, [r2, #0]
 800a7de:	3301      	adds	r3, #1
 800a7e0:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 800a7e2:	4bac      	ldr	r3, [pc, #688]	; (800aa94 <tcp_slowtmr+0x2c8>)
 800a7e4:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 800a7e6:	2600      	movs	r6, #0
  while (pcb != NULL) {
 800a7e8:	e16e      	b.n	800aac8 <tcp_slowtmr+0x2fc>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a7ea:	4bab      	ldr	r3, [pc, #684]	; (800aa98 <tcp_slowtmr+0x2cc>)
 800a7ec:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800a7f0:	49aa      	ldr	r1, [pc, #680]	; (800aa9c <tcp_slowtmr+0x2d0>)
 800a7f2:	48ab      	ldr	r0, [pc, #684]	; (800aaa0 <tcp_slowtmr+0x2d4>)
 800a7f4:	f00a fea0 	bl	8015538 <printf>
 800a7f8:	e16b      	b.n	800aad2 <tcp_slowtmr+0x306>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a7fa:	4ba7      	ldr	r3, [pc, #668]	; (800aa98 <tcp_slowtmr+0x2cc>)
 800a7fc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800a800:	49a8      	ldr	r1, [pc, #672]	; (800aaa4 <tcp_slowtmr+0x2d8>)
 800a802:	48a7      	ldr	r0, [pc, #668]	; (800aaa0 <tcp_slowtmr+0x2d4>)
 800a804:	f00a fe98 	bl	8015538 <printf>
 800a808:	e167      	b.n	800aada <tcp_slowtmr+0x30e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a80a:	4ba3      	ldr	r3, [pc, #652]	; (800aa98 <tcp_slowtmr+0x2cc>)
 800a80c:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800a810:	49a5      	ldr	r1, [pc, #660]	; (800aaa8 <tcp_slowtmr+0x2dc>)
 800a812:	48a3      	ldr	r0, [pc, #652]	; (800aaa0 <tcp_slowtmr+0x2d4>)
 800a814:	f00a fe90 	bl	8015538 <printf>
 800a818:	e163      	b.n	800aae2 <tcp_slowtmr+0x316>
      pcb = pcb->next;
 800a81a:	68e4      	ldr	r4, [r4, #12]
      continue;
 800a81c:	e154      	b.n	800aac8 <tcp_slowtmr+0x2fc>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a81e:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800a822:	2a05      	cmp	r2, #5
 800a824:	f240 8168 	bls.w	800aaf8 <tcp_slowtmr+0x32c>
      ++pcb_remove;
 800a828:	2501      	movs	r5, #1
 800a82a:	e04c      	b.n	800a8c6 <tcp_slowtmr+0xfa>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800a82c:	4620      	mov	r0, r4
 800a82e:	f003 f879 	bl	800d924 <tcp_zero_window_probe>
 800a832:	2800      	cmp	r0, #0
 800a834:	f040 8087 	bne.w	800a946 <tcp_slowtmr+0x17a>
            pcb->persist_cnt = 0;
 800a838:	2300      	movs	r3, #0
 800a83a:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a83e:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800a842:	2b06      	cmp	r3, #6
 800a844:	f200 8081 	bhi.w	800a94a <tcp_slowtmr+0x17e>
              pcb->persist_backoff++;
 800a848:	3301      	adds	r3, #1
 800a84a:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
    pcb_remove = 0;
 800a84e:	2500      	movs	r5, #0
 800a850:	e039      	b.n	800a8c6 <tcp_slowtmr+0xfa>
        if (pcb->rtime >= 0) {
 800a852:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 800a856:	2900      	cmp	r1, #0
 800a858:	db01      	blt.n	800a85e <tcp_slowtmr+0x92>
          ++pcb->rtime;
 800a85a:	3101      	adds	r1, #1
 800a85c:	8621      	strh	r1, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800a85e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a860:	b389      	cbz	r1, 800a8c6 <tcp_slowtmr+0xfa>
 800a862:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 800a866:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 800a86a:	4288      	cmp	r0, r1
 800a86c:	db2b      	blt.n	800a8c6 <tcp_slowtmr+0xfa>
          if (pcb->state != SYN_SENT) {
 800a86e:	2b02      	cmp	r3, #2
 800a870:	d00f      	beq.n	800a892 <tcp_slowtmr+0xc6>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a872:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 800a876:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 800a87a:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800a87e:	498b      	ldr	r1, [pc, #556]	; (800aaac <tcp_slowtmr+0x2e0>)
 800a880:	2a0c      	cmp	r2, #12
 800a882:	bf94      	ite	ls
 800a884:	188a      	addls	r2, r1, r2
 800a886:	f101 020c 	addhi.w	r2, r1, #12
 800a88a:	7e12      	ldrb	r2, [r2, #24]
 800a88c:	4093      	lsls	r3, r2
 800a88e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 800a892:	2300      	movs	r3, #0
 800a894:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a896:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 800a89a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	bf28      	it	cs
 800a8a2:	4613      	movcs	r3, r2
          pcb->ssthresh = eff_wnd >> 1;
 800a8a4:	085b      	lsrs	r3, r3, #1
 800a8a6:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a8aa:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 800a8ac:	004a      	lsls	r2, r1, #1
 800a8ae:	b292      	uxth	r2, r2
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d201      	bcs.n	800a8b8 <tcp_slowtmr+0xec>
            pcb->ssthresh = (pcb->mss << 1);
 800a8b4:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
          pcb->cwnd = pcb->mss;
 800a8b8:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          tcp_rexmit_rto(pcb);
 800a8bc:	4620      	mov	r0, r4
 800a8be:	f002 ff97 	bl	800d7f0 <tcp_rexmit_rto>
 800a8c2:	e000      	b.n	800a8c6 <tcp_slowtmr+0xfa>
      ++pcb_remove;
 800a8c4:	2501      	movs	r5, #1
    if (pcb->state == FIN_WAIT_2) {
 800a8c6:	7d22      	ldrb	r2, [r4, #20]
 800a8c8:	2a06      	cmp	r2, #6
 800a8ca:	d040      	beq.n	800a94e <tcp_slowtmr+0x182>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a8cc:	7a23      	ldrb	r3, [r4, #8]
 800a8ce:	f013 0708 	ands.w	r7, r3, #8
 800a8d2:	d004      	beq.n	800a8de <tcp_slowtmr+0x112>
 800a8d4:	2a04      	cmp	r2, #4
 800a8d6:	d047      	beq.n	800a968 <tcp_slowtmr+0x19c>
       ((pcb->state == ESTABLISHED) ||
 800a8d8:	2a07      	cmp	r2, #7
 800a8da:	d045      	beq.n	800a968 <tcp_slowtmr+0x19c>
    pcb_reset = 0;
 800a8dc:	2700      	movs	r7, #0
    if (pcb->ooseq != NULL &&
 800a8de:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800a8e0:	b150      	cbz	r0, 800a8f8 <tcp_slowtmr+0x12c>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800a8e2:	4b6a      	ldr	r3, [pc, #424]	; (800aa8c <tcp_slowtmr+0x2c0>)
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	6a23      	ldr	r3, [r4, #32]
 800a8e8:	1ad2      	subs	r2, r2, r3
 800a8ea:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800a8ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 800a8f2:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800a8f6:	d265      	bcs.n	800a9c4 <tcp_slowtmr+0x1f8>
    if (pcb->state == SYN_RCVD) {
 800a8f8:	7d23      	ldrb	r3, [r4, #20]
 800a8fa:	2b03      	cmp	r3, #3
 800a8fc:	d067      	beq.n	800a9ce <tcp_slowtmr+0x202>
    if (pcb->state == LAST_ACK) {
 800a8fe:	2b09      	cmp	r3, #9
 800a900:	d06e      	beq.n	800a9e0 <tcp_slowtmr+0x214>
    if (pcb_remove) {
 800a902:	2d00      	cmp	r5, #0
 800a904:	d175      	bne.n	800a9f2 <tcp_slowtmr+0x226>
      pcb = pcb->next;
 800a906:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 800a908:	7ee3      	ldrb	r3, [r4, #27]
 800a90a:	3301      	adds	r3, #1
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800a910:	7f22      	ldrb	r2, [r4, #28]
 800a912:	4293      	cmp	r3, r2
 800a914:	f0c0 80d6 	bcc.w	800aac4 <tcp_slowtmr+0x2f8>
        prev->polltmr = 0;
 800a918:	2300      	movs	r3, #0
 800a91a:	76e3      	strb	r3, [r4, #27]
        tcp_active_pcbs_changed = 0;
 800a91c:	4a64      	ldr	r2, [pc, #400]	; (800aab0 <tcp_slowtmr+0x2e4>)
 800a91e:	7013      	strb	r3, [r2, #0]
        TCP_EVENT_POLL(prev, err);
 800a920:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800a924:	2b00      	cmp	r3, #0
 800a926:	f000 80a9 	beq.w	800aa7c <tcp_slowtmr+0x2b0>
 800a92a:	4621      	mov	r1, r4
 800a92c:	6920      	ldr	r0, [r4, #16]
 800a92e:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800a930:	4b5f      	ldr	r3, [pc, #380]	; (800aab0 <tcp_slowtmr+0x2e4>)
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	2b00      	cmp	r3, #0
 800a936:	f47f af54 	bne.w	800a7e2 <tcp_slowtmr+0x16>
        if (err == ERR_OK) {
 800a93a:	2800      	cmp	r0, #0
 800a93c:	f000 80a0 	beq.w	800aa80 <tcp_slowtmr+0x2b4>
      prev = pcb;
 800a940:	4626      	mov	r6, r4
      pcb = pcb->next;
 800a942:	462c      	mov	r4, r5
 800a944:	e0c0      	b.n	800aac8 <tcp_slowtmr+0x2fc>
    pcb_remove = 0;
 800a946:	2500      	movs	r5, #0
 800a948:	e7bd      	b.n	800a8c6 <tcp_slowtmr+0xfa>
 800a94a:	2500      	movs	r5, #0
 800a94c:	e7bb      	b.n	800a8c6 <tcp_slowtmr+0xfa>
      if (pcb->flags & TF_RXCLOSED) {
 800a94e:	7ea3      	ldrb	r3, [r4, #26]
 800a950:	f013 0f10 	tst.w	r3, #16
 800a954:	d0ba      	beq.n	800a8cc <tcp_slowtmr+0x100>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a956:	6a21      	ldr	r1, [r4, #32]
 800a958:	4b4c      	ldr	r3, [pc, #304]	; (800aa8c <tcp_slowtmr+0x2c0>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	1a5b      	subs	r3, r3, r1
 800a95e:	2b28      	cmp	r3, #40	; 0x28
 800a960:	d9b4      	bls.n	800a8cc <tcp_slowtmr+0x100>
          ++pcb_remove;
 800a962:	3501      	adds	r5, #1
 800a964:	b2ed      	uxtb	r5, r5
 800a966:	e7b1      	b.n	800a8cc <tcp_slowtmr+0x100>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a968:	4b48      	ldr	r3, [pc, #288]	; (800aa8c <tcp_slowtmr+0x2c0>)
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	6a23      	ldr	r3, [r4, #32]
 800a96e:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800a970:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800a974:	f501 2324 	add.w	r3, r1, #671744	; 0xa4000
 800a978:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800a97c:	484d      	ldr	r0, [pc, #308]	; (800aab4 <tcp_slowtmr+0x2e8>)
 800a97e:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a982:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 800a986:	d903      	bls.n	800a990 <tcp_slowtmr+0x1c4>
        ++pcb_remove;
 800a988:	3501      	adds	r5, #1
 800a98a:	b2ed      	uxtb	r5, r5
        ++pcb_reset;
 800a98c:	2701      	movs	r7, #1
 800a98e:	e7a6      	b.n	800a8de <tcp_slowtmr+0x112>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a990:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800a994:	4848      	ldr	r0, [pc, #288]	; (800aab8 <tcp_slowtmr+0x2ec>)
 800a996:	fb00 1303 	mla	r3, r0, r3, r1
                / TCP_SLOW_INTERVAL)
 800a99a:	4946      	ldr	r1, [pc, #280]	; (800aab4 <tcp_slowtmr+0x2e8>)
 800a99c:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a9a0:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 800a9a4:	d801      	bhi.n	800a9aa <tcp_slowtmr+0x1de>
    pcb_reset = 0;
 800a9a6:	2700      	movs	r7, #0
 800a9a8:	e799      	b.n	800a8de <tcp_slowtmr+0x112>
        err = tcp_keepalive(pcb);
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	f002 ff8e 	bl	800d8cc <tcp_keepalive>
        if (err == ERR_OK) {
 800a9b0:	b930      	cbnz	r0, 800a9c0 <tcp_slowtmr+0x1f4>
          pcb->keep_cnt_sent++;
 800a9b2:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 800a9bc:	2700      	movs	r7, #0
 800a9be:	e78e      	b.n	800a8de <tcp_slowtmr+0x112>
 800a9c0:	2700      	movs	r7, #0
 800a9c2:	e78c      	b.n	800a8de <tcp_slowtmr+0x112>
      tcp_segs_free(pcb->ooseq);
 800a9c4:	f7ff fe59 	bl	800a67a <tcp_segs_free>
      pcb->ooseq = NULL;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	6723      	str	r3, [r4, #112]	; 0x70
 800a9cc:	e794      	b.n	800a8f8 <tcp_slowtmr+0x12c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a9ce:	6a21      	ldr	r1, [r4, #32]
 800a9d0:	4a2e      	ldr	r2, [pc, #184]	; (800aa8c <tcp_slowtmr+0x2c0>)
 800a9d2:	6812      	ldr	r2, [r2, #0]
 800a9d4:	1a52      	subs	r2, r2, r1
 800a9d6:	2a28      	cmp	r2, #40	; 0x28
 800a9d8:	d991      	bls.n	800a8fe <tcp_slowtmr+0x132>
        ++pcb_remove;
 800a9da:	3501      	adds	r5, #1
 800a9dc:	b2ed      	uxtb	r5, r5
 800a9de:	e78e      	b.n	800a8fe <tcp_slowtmr+0x132>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a9e0:	6a22      	ldr	r2, [r4, #32]
 800a9e2:	4b2a      	ldr	r3, [pc, #168]	; (800aa8c <tcp_slowtmr+0x2c0>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	1a9b      	subs	r3, r3, r2
 800a9e8:	2bf0      	cmp	r3, #240	; 0xf0
 800a9ea:	d98a      	bls.n	800a902 <tcp_slowtmr+0x136>
        ++pcb_remove;
 800a9ec:	3501      	adds	r5, #1
 800a9ee:	b2ed      	uxtb	r5, r5
 800a9f0:	e787      	b.n	800a902 <tcp_slowtmr+0x136>
      tcp_err_fn err_fn = pcb->errf;
 800a9f2:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	f7ff fec6 	bl	800a788 <tcp_pcb_purge>
      if (prev != NULL) {
 800a9fc:	b326      	cbz	r6, 800aa48 <tcp_slowtmr+0x27c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a9fe:	4b25      	ldr	r3, [pc, #148]	; (800aa94 <tcp_slowtmr+0x2c8>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	42a3      	cmp	r3, r4
 800aa04:	d018      	beq.n	800aa38 <tcp_slowtmr+0x26c>
        prev->next = pcb->next;
 800aa06:	68e3      	ldr	r3, [r4, #12]
 800aa08:	60f3      	str	r3, [r6, #12]
      if (pcb_reset) {
 800aa0a:	bb67      	cbnz	r7, 800aa66 <tcp_slowtmr+0x29a>
      err_arg = pcb->callback_arg;
 800aa0c:	f8d4 8010 	ldr.w	r8, [r4, #16]
      pcb = pcb->next;
 800aa10:	68e7      	ldr	r7, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 800aa12:	4621      	mov	r1, r4
 800aa14:	2001      	movs	r0, #1
 800aa16:	f7fe ff8b 	bl	8009930 <memp_free>
      tcp_active_pcbs_changed = 0;
 800aa1a:	4b25      	ldr	r3, [pc, #148]	; (800aab0 <tcp_slowtmr+0x2e4>)
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800aa20:	b11d      	cbz	r5, 800aa2a <tcp_slowtmr+0x25e>
 800aa22:	f06f 010c 	mvn.w	r1, #12
 800aa26:	4640      	mov	r0, r8
 800aa28:	47a8      	blx	r5
      if (tcp_active_pcbs_changed) {
 800aa2a:	4b21      	ldr	r3, [pc, #132]	; (800aab0 <tcp_slowtmr+0x2e4>)
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	f47f aed7 	bne.w	800a7e2 <tcp_slowtmr+0x16>
      pcb = pcb->next;
 800aa34:	463c      	mov	r4, r7
 800aa36:	e047      	b.n	800aac8 <tcp_slowtmr+0x2fc>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800aa38:	4b17      	ldr	r3, [pc, #92]	; (800aa98 <tcp_slowtmr+0x2cc>)
 800aa3a:	f240 4289 	movw	r2, #1161	; 0x489
 800aa3e:	491f      	ldr	r1, [pc, #124]	; (800aabc <tcp_slowtmr+0x2f0>)
 800aa40:	4817      	ldr	r0, [pc, #92]	; (800aaa0 <tcp_slowtmr+0x2d4>)
 800aa42:	f00a fd79 	bl	8015538 <printf>
 800aa46:	e7de      	b.n	800aa06 <tcp_slowtmr+0x23a>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800aa48:	4b12      	ldr	r3, [pc, #72]	; (800aa94 <tcp_slowtmr+0x2c8>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	42a3      	cmp	r3, r4
 800aa4e:	d006      	beq.n	800aa5e <tcp_slowtmr+0x292>
 800aa50:	4b11      	ldr	r3, [pc, #68]	; (800aa98 <tcp_slowtmr+0x2cc>)
 800aa52:	f240 428d 	movw	r2, #1165	; 0x48d
 800aa56:	491a      	ldr	r1, [pc, #104]	; (800aac0 <tcp_slowtmr+0x2f4>)
 800aa58:	4811      	ldr	r0, [pc, #68]	; (800aaa0 <tcp_slowtmr+0x2d4>)
 800aa5a:	f00a fd6d 	bl	8015538 <printf>
        tcp_active_pcbs = pcb->next;
 800aa5e:	68e2      	ldr	r2, [r4, #12]
 800aa60:	4b0c      	ldr	r3, [pc, #48]	; (800aa94 <tcp_slowtmr+0x2c8>)
 800aa62:	601a      	str	r2, [r3, #0]
 800aa64:	e7d1      	b.n	800aa0a <tcp_slowtmr+0x23e>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800aa66:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800aa68:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800aa6a:	8b23      	ldrh	r3, [r4, #24]
 800aa6c:	9301      	str	r3, [sp, #4]
 800aa6e:	8ae3      	ldrh	r3, [r4, #22]
 800aa70:	9300      	str	r3, [sp, #0]
 800aa72:	1d23      	adds	r3, r4, #4
 800aa74:	4622      	mov	r2, r4
 800aa76:	f002 fe65 	bl	800d744 <tcp_rst>
 800aa7a:	e7c7      	b.n	800aa0c <tcp_slowtmr+0x240>
        TCP_EVENT_POLL(prev, err);
 800aa7c:	2000      	movs	r0, #0
 800aa7e:	e757      	b.n	800a930 <tcp_slowtmr+0x164>
          tcp_output(prev);
 800aa80:	4620      	mov	r0, r4
 800aa82:	f002 fd17 	bl	800d4b4 <tcp_output>
      prev = pcb;
 800aa86:	4626      	mov	r6, r4
      pcb = pcb->next;
 800aa88:	462c      	mov	r4, r5
 800aa8a:	e01d      	b.n	800aac8 <tcp_slowtmr+0x2fc>
 800aa8c:	20009714 	.word	0x20009714
 800aa90:	20004281 	.word	0x20004281
 800aa94:	20009710 	.word	0x20009710
 800aa98:	0801d0e0 	.word	0x0801d0e0
 800aa9c:	0801d280 	.word	0x0801d280
 800aaa0:	0801c994 	.word	0x0801c994
 800aaa4:	0801d2ac 	.word	0x0801d2ac
 800aaa8:	0801d2d8 	.word	0x0801d2d8
 800aaac:	0801c8b0 	.word	0x0801c8b0
 800aab0:	2000970c 	.word	0x2000970c
 800aab4:	10624dd3 	.word	0x10624dd3
 800aab8:	000124f8 	.word	0x000124f8
 800aabc:	0801d308 	.word	0x0801d308
 800aac0:	0801d334 	.word	0x0801d334
      prev = pcb;
 800aac4:	4626      	mov	r6, r4
      pcb = pcb->next;
 800aac6:	462c      	mov	r4, r5
  while (pcb != NULL) {
 800aac8:	b394      	cbz	r4, 800ab30 <tcp_slowtmr+0x364>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800aaca:	7d23      	ldrb	r3, [r4, #20]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	f43f ae8c 	beq.w	800a7ea <tcp_slowtmr+0x1e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800aad2:	7d23      	ldrb	r3, [r4, #20]
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	f43f ae90 	beq.w	800a7fa <tcp_slowtmr+0x2e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800aada:	7d23      	ldrb	r3, [r4, #20]
 800aadc:	2b0a      	cmp	r3, #10
 800aade:	f43f ae94 	beq.w	800a80a <tcp_slowtmr+0x3e>
    if (pcb->last_timer == tcp_timer_ctr) {
 800aae2:	7f62      	ldrb	r2, [r4, #29]
 800aae4:	4b33      	ldr	r3, [pc, #204]	; (800abb4 <tcp_slowtmr+0x3e8>)
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	f43f ae96 	beq.w	800a81a <tcp_slowtmr+0x4e>
    pcb->last_timer = tcp_timer_ctr;
 800aaee:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800aaf0:	7d23      	ldrb	r3, [r4, #20]
 800aaf2:	2b02      	cmp	r3, #2
 800aaf4:	f43f ae93 	beq.w	800a81e <tcp_slowtmr+0x52>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800aaf8:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800aafc:	2a0b      	cmp	r2, #11
 800aafe:	f63f aee1 	bhi.w	800a8c4 <tcp_slowtmr+0xf8>
      if (pcb->persist_backoff > 0) {
 800ab02:	f894 5095 	ldrb.w	r5, [r4, #149]	; 0x95
 800ab06:	2d00      	cmp	r5, #0
 800ab08:	f43f aea3 	beq.w	800a852 <tcp_slowtmr+0x86>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800ab0c:	3d01      	subs	r5, #1
 800ab0e:	4b2a      	ldr	r3, [pc, #168]	; (800abb8 <tcp_slowtmr+0x3ec>)
 800ab10:	441d      	add	r5, r3
 800ab12:	7c2a      	ldrb	r2, [r5, #16]
        if (pcb->persist_cnt < backoff_cnt) {
 800ab14:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d202      	bcs.n	800ab22 <tcp_slowtmr+0x356>
          pcb->persist_cnt++;
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 800ab22:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 800ab26:	4293      	cmp	r3, r2
 800ab28:	f4bf ae80 	bcs.w	800a82c <tcp_slowtmr+0x60>
    pcb_remove = 0;
 800ab2c:	2500      	movs	r5, #0
 800ab2e:	e6ca      	b.n	800a8c6 <tcp_slowtmr+0xfa>
  pcb = tcp_tw_pcbs;
 800ab30:	4b22      	ldr	r3, [pc, #136]	; (800abbc <tcp_slowtmr+0x3f0>)
 800ab32:	681d      	ldr	r5, [r3, #0]
  while (pcb != NULL) {
 800ab34:	e00e      	b.n	800ab54 <tcp_slowtmr+0x388>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ab36:	4b22      	ldr	r3, [pc, #136]	; (800abc0 <tcp_slowtmr+0x3f4>)
 800ab38:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800ab3c:	4921      	ldr	r1, [pc, #132]	; (800abc4 <tcp_slowtmr+0x3f8>)
 800ab3e:	4822      	ldr	r0, [pc, #136]	; (800abc8 <tcp_slowtmr+0x3fc>)
 800ab40:	f00a fcfa 	bl	8015538 <printf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ab44:	6a2a      	ldr	r2, [r5, #32]
 800ab46:	4b21      	ldr	r3, [pc, #132]	; (800abcc <tcp_slowtmr+0x400>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	1a9b      	subs	r3, r3, r2
 800ab4c:	2bf0      	cmp	r3, #240	; 0xf0
 800ab4e:	d806      	bhi.n	800ab5e <tcp_slowtmr+0x392>
      prev = pcb;
 800ab50:	462c      	mov	r4, r5
      pcb = pcb->next;
 800ab52:	68ed      	ldr	r5, [r5, #12]
  while (pcb != NULL) {
 800ab54:	b35d      	cbz	r5, 800abae <tcp_slowtmr+0x3e2>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ab56:	7d2b      	ldrb	r3, [r5, #20]
 800ab58:	2b0a      	cmp	r3, #10
 800ab5a:	d0f3      	beq.n	800ab44 <tcp_slowtmr+0x378>
 800ab5c:	e7eb      	b.n	800ab36 <tcp_slowtmr+0x36a>
      tcp_pcb_purge(pcb);
 800ab5e:	4628      	mov	r0, r5
 800ab60:	f7ff fe12 	bl	800a788 <tcp_pcb_purge>
      if (prev != NULL) {
 800ab64:	b1a4      	cbz	r4, 800ab90 <tcp_slowtmr+0x3c4>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ab66:	4b15      	ldr	r3, [pc, #84]	; (800abbc <tcp_slowtmr+0x3f0>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	42ab      	cmp	r3, r5
 800ab6c:	d008      	beq.n	800ab80 <tcp_slowtmr+0x3b4>
        prev->next = pcb->next;
 800ab6e:	68eb      	ldr	r3, [r5, #12]
 800ab70:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 800ab72:	68ee      	ldr	r6, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 800ab74:	4629      	mov	r1, r5
 800ab76:	2001      	movs	r0, #1
 800ab78:	f7fe feda 	bl	8009930 <memp_free>
      pcb = pcb->next;
 800ab7c:	4635      	mov	r5, r6
 800ab7e:	e7e9      	b.n	800ab54 <tcp_slowtmr+0x388>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ab80:	4b0f      	ldr	r3, [pc, #60]	; (800abc0 <tcp_slowtmr+0x3f4>)
 800ab82:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800ab86:	4912      	ldr	r1, [pc, #72]	; (800abd0 <tcp_slowtmr+0x404>)
 800ab88:	480f      	ldr	r0, [pc, #60]	; (800abc8 <tcp_slowtmr+0x3fc>)
 800ab8a:	f00a fcd5 	bl	8015538 <printf>
 800ab8e:	e7ee      	b.n	800ab6e <tcp_slowtmr+0x3a2>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ab90:	4b0a      	ldr	r3, [pc, #40]	; (800abbc <tcp_slowtmr+0x3f0>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	42ab      	cmp	r3, r5
 800ab96:	d006      	beq.n	800aba6 <tcp_slowtmr+0x3da>
 800ab98:	4b09      	ldr	r3, [pc, #36]	; (800abc0 <tcp_slowtmr+0x3f4>)
 800ab9a:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800ab9e:	490d      	ldr	r1, [pc, #52]	; (800abd4 <tcp_slowtmr+0x408>)
 800aba0:	4809      	ldr	r0, [pc, #36]	; (800abc8 <tcp_slowtmr+0x3fc>)
 800aba2:	f00a fcc9 	bl	8015538 <printf>
        tcp_tw_pcbs = pcb->next;
 800aba6:	68ea      	ldr	r2, [r5, #12]
 800aba8:	4b04      	ldr	r3, [pc, #16]	; (800abbc <tcp_slowtmr+0x3f0>)
 800abaa:	601a      	str	r2, [r3, #0]
 800abac:	e7e1      	b.n	800ab72 <tcp_slowtmr+0x3a6>
}
 800abae:	b002      	add	sp, #8
 800abb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abb4:	20004281 	.word	0x20004281
 800abb8:	0801c8b0 	.word	0x0801c8b0
 800abbc:	20009720 	.word	0x20009720
 800abc0:	0801d0e0 	.word	0x0801d0e0
 800abc4:	0801d360 	.word	0x0801d360
 800abc8:	0801c994 	.word	0x0801c994
 800abcc:	20009714 	.word	0x20009714
 800abd0:	0801d390 	.word	0x0801d390
 800abd4:	0801d3b8 	.word	0x0801d3b8

0800abd8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800abd8:	b510      	push	{r4, lr}
 800abda:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 800abdc:	6803      	ldr	r3, [r0, #0]
 800abde:	428b      	cmp	r3, r1
 800abe0:	d005      	beq.n	800abee <tcp_pcb_remove+0x16>
 800abe2:	b14b      	cbz	r3, 800abf8 <tcp_pcb_remove+0x20>
 800abe4:	68da      	ldr	r2, [r3, #12]
 800abe6:	42a2      	cmp	r2, r4
 800abe8:	d004      	beq.n	800abf4 <tcp_pcb_remove+0x1c>
 800abea:	4613      	mov	r3, r2
 800abec:	e7f9      	b.n	800abe2 <tcp_pcb_remove+0xa>
 800abee:	68db      	ldr	r3, [r3, #12]
 800abf0:	6003      	str	r3, [r0, #0]
 800abf2:	e001      	b.n	800abf8 <tcp_pcb_remove+0x20>
 800abf4:	68e2      	ldr	r2, [r4, #12]
 800abf6:	60da      	str	r2, [r3, #12]
 800abf8:	2300      	movs	r3, #0
 800abfa:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 800abfc:	4620      	mov	r0, r4
 800abfe:	f7ff fdc3 	bl	800a788 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800ac02:	7d23      	ldrb	r3, [r4, #20]
 800ac04:	2b0a      	cmp	r3, #10
 800ac06:	d005      	beq.n	800ac14 <tcp_pcb_remove+0x3c>
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	d003      	beq.n	800ac14 <tcp_pcb_remove+0x3c>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 800ac0c:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 800ac0e:	f013 0f01 	tst.w	r3, #1
 800ac12:	d121      	bne.n	800ac58 <tcp_pcb_remove+0x80>
    pcb->flags |= TF_ACK_NOW;
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
 800ac14:	7d23      	ldrb	r3, [r4, #20]
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d01a      	beq.n	800ac50 <tcp_pcb_remove+0x78>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ac1a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800ac1c:	b133      	cbz	r3, 800ac2c <tcp_pcb_remove+0x54>
 800ac1e:	4b12      	ldr	r3, [pc, #72]	; (800ac68 <tcp_pcb_remove+0x90>)
 800ac20:	f240 7253 	movw	r2, #1875	; 0x753
 800ac24:	4911      	ldr	r1, [pc, #68]	; (800ac6c <tcp_pcb_remove+0x94>)
 800ac26:	4812      	ldr	r0, [pc, #72]	; (800ac70 <tcp_pcb_remove+0x98>)
 800ac28:	f00a fc86 	bl	8015538 <printf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ac2c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ac2e:	b133      	cbz	r3, 800ac3e <tcp_pcb_remove+0x66>
 800ac30:	4b0d      	ldr	r3, [pc, #52]	; (800ac68 <tcp_pcb_remove+0x90>)
 800ac32:	f240 7254 	movw	r2, #1876	; 0x754
 800ac36:	490f      	ldr	r1, [pc, #60]	; (800ac74 <tcp_pcb_remove+0x9c>)
 800ac38:	480d      	ldr	r0, [pc, #52]	; (800ac70 <tcp_pcb_remove+0x98>)
 800ac3a:	f00a fc7d 	bl	8015538 <printf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ac3e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ac40:	b133      	cbz	r3, 800ac50 <tcp_pcb_remove+0x78>
 800ac42:	4b09      	ldr	r3, [pc, #36]	; (800ac68 <tcp_pcb_remove+0x90>)
 800ac44:	f240 7256 	movw	r2, #1878	; 0x756
 800ac48:	490b      	ldr	r1, [pc, #44]	; (800ac78 <tcp_pcb_remove+0xa0>)
 800ac4a:	4809      	ldr	r0, [pc, #36]	; (800ac70 <tcp_pcb_remove+0x98>)
 800ac4c:	f00a fc74 	bl	8015538 <printf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ac50:	2300      	movs	r3, #0
 800ac52:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ac54:	82e3      	strh	r3, [r4, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ac56:	bd10      	pop	{r4, pc}
    pcb->flags |= TF_ACK_NOW;
 800ac58:	f043 0302 	orr.w	r3, r3, #2
 800ac5c:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 800ac5e:	4620      	mov	r0, r4
 800ac60:	f002 fc28 	bl	800d4b4 <tcp_output>
 800ac64:	e7d6      	b.n	800ac14 <tcp_pcb_remove+0x3c>
 800ac66:	bf00      	nop
 800ac68:	0801d0e0 	.word	0x0801d0e0
 800ac6c:	0801d3e0 	.word	0x0801d3e0
 800ac70:	0801c994 	.word	0x0801c994
 800ac74:	0801d3f8 	.word	0x0801d3f8
 800ac78:	0801d414 	.word	0x0801d414

0800ac7c <tcp_close_shutdown>:
{
 800ac7c:	b510      	push	{r4, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ac82:	b121      	cbz	r1, 800ac8e <tcp_close_shutdown+0x12>
 800ac84:	7d03      	ldrb	r3, [r0, #20]
 800ac86:	2b04      	cmp	r3, #4
 800ac88:	d00c      	beq.n	800aca4 <tcp_close_shutdown+0x28>
 800ac8a:	2b07      	cmp	r3, #7
 800ac8c:	d00a      	beq.n	800aca4 <tcp_close_shutdown+0x28>
  switch (pcb->state) {
 800ac8e:	7d23      	ldrb	r3, [r4, #20]
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d070      	beq.n	800ad76 <tcp_close_shutdown+0xfa>
 800ac94:	2b02      	cmp	r3, #2
 800ac96:	d07b      	beq.n	800ad90 <tcp_close_shutdown+0x114>
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d052      	beq.n	800ad42 <tcp_close_shutdown+0xc6>
    return tcp_close_shutdown_fin(pcb);
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	f7ff fbcd 	bl	800a43c <tcp_close_shutdown_fin>
 800aca2:	e040      	b.n	800ad26 <tcp_close_shutdown+0xaa>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800aca4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800aca6:	b1d3      	cbz	r3, 800acde <tcp_close_shutdown+0x62>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800aca8:	7ea3      	ldrb	r3, [r4, #26]
 800acaa:	f013 0f10 	tst.w	r3, #16
 800acae:	d01b      	beq.n	800ace8 <tcp_close_shutdown+0x6c>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800acb0:	8b23      	ldrh	r3, [r4, #24]
 800acb2:	9301      	str	r3, [sp, #4]
 800acb4:	8ae3      	ldrh	r3, [r4, #22]
 800acb6:	9300      	str	r3, [sp, #0]
 800acb8:	1d23      	adds	r3, r4, #4
 800acba:	4622      	mov	r2, r4
 800acbc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800acbe:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800acc0:	f002 fd40 	bl	800d744 <tcp_rst>
      tcp_pcb_purge(pcb);
 800acc4:	4620      	mov	r0, r4
 800acc6:	f7ff fd5f 	bl	800a788 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800acca:	4b37      	ldr	r3, [pc, #220]	; (800ada8 <tcp_close_shutdown+0x12c>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	42a3      	cmp	r3, r4
 800acd0:	d012      	beq.n	800acf8 <tcp_close_shutdown+0x7c>
 800acd2:	b1bb      	cbz	r3, 800ad04 <tcp_close_shutdown+0x88>
 800acd4:	68da      	ldr	r2, [r3, #12]
 800acd6:	42a2      	cmp	r2, r4
 800acd8:	d012      	beq.n	800ad00 <tcp_close_shutdown+0x84>
 800acda:	4613      	mov	r3, r2
 800acdc:	e7f9      	b.n	800acd2 <tcp_close_shutdown+0x56>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800acde:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800ace0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ace4:	d0d3      	beq.n	800ac8e <tcp_close_shutdown+0x12>
 800ace6:	e7df      	b.n	800aca8 <tcp_close_shutdown+0x2c>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ace8:	4b30      	ldr	r3, [pc, #192]	; (800adac <tcp_close_shutdown+0x130>)
 800acea:	f240 120f 	movw	r2, #271	; 0x10f
 800acee:	4930      	ldr	r1, [pc, #192]	; (800adb0 <tcp_close_shutdown+0x134>)
 800acf0:	4830      	ldr	r0, [pc, #192]	; (800adb4 <tcp_close_shutdown+0x138>)
 800acf2:	f00a fc21 	bl	8015538 <printf>
 800acf6:	e7db      	b.n	800acb0 <tcp_close_shutdown+0x34>
      TCP_RMV_ACTIVE(pcb);
 800acf8:	68da      	ldr	r2, [r3, #12]
 800acfa:	4b2b      	ldr	r3, [pc, #172]	; (800ada8 <tcp_close_shutdown+0x12c>)
 800acfc:	601a      	str	r2, [r3, #0]
 800acfe:	e001      	b.n	800ad04 <tcp_close_shutdown+0x88>
 800ad00:	68e2      	ldr	r2, [r4, #12]
 800ad02:	60da      	str	r2, [r3, #12]
 800ad04:	2300      	movs	r3, #0
 800ad06:	60e3      	str	r3, [r4, #12]
 800ad08:	4b2b      	ldr	r3, [pc, #172]	; (800adb8 <tcp_close_shutdown+0x13c>)
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800ad0e:	7d23      	ldrb	r3, [r4, #20]
 800ad10:	2b04      	cmp	r3, #4
 800ad12:	d00a      	beq.n	800ad2a <tcp_close_shutdown+0xae>
        if (tcp_input_pcb == pcb) {
 800ad14:	4b29      	ldr	r3, [pc, #164]	; (800adbc <tcp_close_shutdown+0x140>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	42a3      	cmp	r3, r4
 800ad1a:	d00f      	beq.n	800ad3c <tcp_close_shutdown+0xc0>
          memp_free(MEMP_TCP_PCB, pcb);
 800ad1c:	4621      	mov	r1, r4
 800ad1e:	2001      	movs	r0, #1
 800ad20:	f7fe fe06 	bl	8009930 <memp_free>
      return ERR_OK;
 800ad24:	2000      	movs	r0, #0
}
 800ad26:	b002      	add	sp, #8
 800ad28:	bd10      	pop	{r4, pc}
        pcb->state = TIME_WAIT;
 800ad2a:	230a      	movs	r3, #10
 800ad2c:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ad2e:	4b24      	ldr	r3, [pc, #144]	; (800adc0 <tcp_close_shutdown+0x144>)
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	60e2      	str	r2, [r4, #12]
 800ad34:	601c      	str	r4, [r3, #0]
 800ad36:	f002 feb5 	bl	800daa4 <tcp_timer_needed>
 800ad3a:	e7f3      	b.n	800ad24 <tcp_close_shutdown+0xa8>
          tcp_trigger_input_pcb_close();
 800ad3c:	f001 fe64 	bl	800ca08 <tcp_trigger_input_pcb_close>
 800ad40:	e7f0      	b.n	800ad24 <tcp_close_shutdown+0xa8>
    if (pcb->local_port != 0) {
 800ad42:	8ae3      	ldrh	r3, [r4, #22]
 800ad44:	b18b      	cbz	r3, 800ad6a <tcp_close_shutdown+0xee>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800ad46:	4b1f      	ldr	r3, [pc, #124]	; (800adc4 <tcp_close_shutdown+0x148>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	42a3      	cmp	r3, r4
 800ad4c:	d005      	beq.n	800ad5a <tcp_close_shutdown+0xde>
 800ad4e:	b153      	cbz	r3, 800ad66 <tcp_close_shutdown+0xea>
 800ad50:	68da      	ldr	r2, [r3, #12]
 800ad52:	42a2      	cmp	r2, r4
 800ad54:	d005      	beq.n	800ad62 <tcp_close_shutdown+0xe6>
 800ad56:	4613      	mov	r3, r2
 800ad58:	e7f9      	b.n	800ad4e <tcp_close_shutdown+0xd2>
 800ad5a:	68da      	ldr	r2, [r3, #12]
 800ad5c:	4b19      	ldr	r3, [pc, #100]	; (800adc4 <tcp_close_shutdown+0x148>)
 800ad5e:	601a      	str	r2, [r3, #0]
 800ad60:	e001      	b.n	800ad66 <tcp_close_shutdown+0xea>
 800ad62:	68e2      	ldr	r2, [r4, #12]
 800ad64:	60da      	str	r2, [r3, #12]
 800ad66:	2300      	movs	r3, #0
 800ad68:	60e3      	str	r3, [r4, #12]
    memp_free(MEMP_TCP_PCB, pcb);
 800ad6a:	4621      	mov	r1, r4
 800ad6c:	2001      	movs	r0, #1
 800ad6e:	f7fe fddf 	bl	8009930 <memp_free>
  return ERR_OK;
 800ad72:	2000      	movs	r0, #0
    break;
 800ad74:	e7d7      	b.n	800ad26 <tcp_close_shutdown+0xaa>
    tcp_listen_closed(pcb);
 800ad76:	4620      	mov	r0, r4
 800ad78:	f7ff fb34 	bl	800a3e4 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ad7c:	4621      	mov	r1, r4
 800ad7e:	4812      	ldr	r0, [pc, #72]	; (800adc8 <tcp_close_shutdown+0x14c>)
 800ad80:	f7ff ff2a 	bl	800abd8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ad84:	4621      	mov	r1, r4
 800ad86:	2002      	movs	r0, #2
 800ad88:	f7fe fdd2 	bl	8009930 <memp_free>
  return ERR_OK;
 800ad8c:	2000      	movs	r0, #0
    break;
 800ad8e:	e7ca      	b.n	800ad26 <tcp_close_shutdown+0xaa>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800ad90:	4621      	mov	r1, r4
 800ad92:	4805      	ldr	r0, [pc, #20]	; (800ada8 <tcp_close_shutdown+0x12c>)
 800ad94:	f7ff ff20 	bl	800abd8 <tcp_pcb_remove>
 800ad98:	2001      	movs	r0, #1
 800ad9a:	4b07      	ldr	r3, [pc, #28]	; (800adb8 <tcp_close_shutdown+0x13c>)
 800ad9c:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800ad9e:	4621      	mov	r1, r4
 800ada0:	f7fe fdc6 	bl	8009930 <memp_free>
  return ERR_OK;
 800ada4:	2000      	movs	r0, #0
    break;
 800ada6:	e7be      	b.n	800ad26 <tcp_close_shutdown+0xaa>
 800ada8:	20009710 	.word	0x20009710
 800adac:	0801d0e0 	.word	0x0801d0e0
 800adb0:	0801d42c 	.word	0x0801d42c
 800adb4:	0801c994 	.word	0x0801c994
 800adb8:	2000970c 	.word	0x2000970c
 800adbc:	20009724 	.word	0x20009724
 800adc0:	20009720 	.word	0x20009720
 800adc4:	2000971c 	.word	0x2000971c
 800adc8:	20009718 	.word	0x20009718

0800adcc <tcp_close>:
{
 800adcc:	b508      	push	{r3, lr}
  if (pcb->state != LISTEN) {
 800adce:	7d03      	ldrb	r3, [r0, #20]
 800add0:	2b01      	cmp	r3, #1
 800add2:	d003      	beq.n	800addc <tcp_close+0x10>
    pcb->flags |= TF_RXCLOSED;
 800add4:	7e83      	ldrb	r3, [r0, #26]
 800add6:	f043 0310 	orr.w	r3, r3, #16
 800adda:	7683      	strb	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 800addc:	2101      	movs	r1, #1
 800adde:	f7ff ff4d 	bl	800ac7c <tcp_close_shutdown>
}
 800ade2:	bd08      	pop	{r3, pc}

0800ade4 <tcp_recv_null>:
{
 800ade4:	b510      	push	{r4, lr}
 800ade6:	4608      	mov	r0, r1
  if (p != NULL) {
 800ade8:	b142      	cbz	r2, 800adfc <tcp_recv_null+0x18>
 800adea:	4614      	mov	r4, r2
    tcp_recved(pcb, p->tot_len);
 800adec:	8911      	ldrh	r1, [r2, #8]
 800adee:	f7ff fbf5 	bl	800a5dc <tcp_recved>
    pbuf_free(p);
 800adf2:	4620      	mov	r0, r4
 800adf4:	f7fe ff50 	bl	8009c98 <pbuf_free>
  return ERR_OK;
 800adf8:	2000      	movs	r0, #0
}
 800adfa:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 800adfc:	b10b      	cbz	r3, 800ae02 <tcp_recv_null+0x1e>
  return ERR_OK;
 800adfe:	2000      	movs	r0, #0
 800ae00:	e7fb      	b.n	800adfa <tcp_recv_null+0x16>
    return tcp_close(pcb);
 800ae02:	f7ff ffe3 	bl	800adcc <tcp_close>
 800ae06:	e7f8      	b.n	800adfa <tcp_recv_null+0x16>

0800ae08 <tcp_process_refused_data>:
{
 800ae08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae0a:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 800ae0c:	6f46      	ldr	r6, [r0, #116]	; 0x74
 800ae0e:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 800ae10:	2300      	movs	r3, #0
 800ae12:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ae14:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
 800ae18:	b1dd      	cbz	r5, 800ae52 <tcp_process_refused_data+0x4a>
 800ae1a:	4632      	mov	r2, r6
 800ae1c:	4601      	mov	r1, r0
 800ae1e:	6900      	ldr	r0, [r0, #16]
 800ae20:	47a8      	blx	r5
 800ae22:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 800ae24:	b9ed      	cbnz	r5, 800ae62 <tcp_process_refused_data+0x5a>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800ae26:	f017 0f20 	tst.w	r7, #32
 800ae2a:	d020      	beq.n	800ae6e <tcp_process_refused_data+0x66>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ae2c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800ae2e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ae32:	d001      	beq.n	800ae38 <tcp_process_refused_data+0x30>
          pcb->rcv_wnd++;
 800ae34:	3301      	adds	r3, #1
 800ae36:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800ae38:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 800ae3c:	b1be      	cbz	r6, 800ae6e <tcp_process_refused_data+0x66>
 800ae3e:	2300      	movs	r3, #0
 800ae40:	461a      	mov	r2, r3
 800ae42:	4621      	mov	r1, r4
 800ae44:	6920      	ldr	r0, [r4, #16]
 800ae46:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 800ae48:	f110 0f0d 	cmn.w	r0, #13
 800ae4c:	d10f      	bne.n	800ae6e <tcp_process_refused_data+0x66>
          return ERR_ABRT;
 800ae4e:	4605      	mov	r5, r0
 800ae50:	e00d      	b.n	800ae6e <tcp_process_refused_data+0x66>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ae52:	2300      	movs	r3, #0
 800ae54:	4632      	mov	r2, r6
 800ae56:	4601      	mov	r1, r0
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f7ff ffc3 	bl	800ade4 <tcp_recv_null>
 800ae5e:	4605      	mov	r5, r0
 800ae60:	e7e0      	b.n	800ae24 <tcp_process_refused_data+0x1c>
    } else if (err == ERR_ABRT) {
 800ae62:	f115 0f0d 	cmn.w	r5, #13
 800ae66:	d002      	beq.n	800ae6e <tcp_process_refused_data+0x66>
      pcb->refused_data = refused_data;
 800ae68:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 800ae6a:	f06f 0504 	mvn.w	r5, #4
}
 800ae6e:	4628      	mov	r0, r5
 800ae70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae74 <tcp_fasttmr>:
{
 800ae74:	b570      	push	{r4, r5, r6, lr}
  ++tcp_timer_ctr;
 800ae76:	4a1c      	ldr	r2, [pc, #112]	; (800aee8 <tcp_fasttmr+0x74>)
 800ae78:	7813      	ldrb	r3, [r2, #0]
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 800ae7e:	4b1b      	ldr	r3, [pc, #108]	; (800aeec <tcp_fasttmr+0x78>)
 800ae80:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 800ae82:	e013      	b.n	800aeac <tcp_fasttmr+0x38>
        tcp_ack_now(pcb);
 800ae84:	f043 0302 	orr.w	r3, r3, #2
 800ae88:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	f002 fb12 	bl	800d4b4 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800ae90:	7ea3      	ldrb	r3, [r4, #26]
 800ae92:	f023 0303 	bic.w	r3, r3, #3
 800ae96:	76a3      	strb	r3, [r4, #26]
 800ae98:	e013      	b.n	800aec2 <tcp_fasttmr+0x4e>
        pcb->flags &= ~(TF_CLOSEPEND);
 800ae9a:	f023 0308 	bic.w	r3, r3, #8
 800ae9e:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800aea0:	4620      	mov	r0, r4
 800aea2:	f7ff facb 	bl	800a43c <tcp_close_shutdown_fin>
 800aea6:	e010      	b.n	800aeca <tcp_fasttmr+0x56>
      pcb = pcb->next;
 800aea8:	68e5      	ldr	r5, [r4, #12]
{
 800aeaa:	462c      	mov	r4, r5
  while (pcb != NULL) {
 800aeac:	b1dc      	cbz	r4, 800aee6 <tcp_fasttmr+0x72>
    if (pcb->last_timer != tcp_timer_ctr) {
 800aeae:	7f62      	ldrb	r2, [r4, #29]
 800aeb0:	4b0d      	ldr	r3, [pc, #52]	; (800aee8 <tcp_fasttmr+0x74>)
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d0f7      	beq.n	800aea8 <tcp_fasttmr+0x34>
      pcb->last_timer = tcp_timer_ctr;
 800aeb8:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 800aeba:	7ea3      	ldrb	r3, [r4, #26]
 800aebc:	f013 0f01 	tst.w	r3, #1
 800aec0:	d1e0      	bne.n	800ae84 <tcp_fasttmr+0x10>
      if (pcb->flags & TF_CLOSEPEND) {
 800aec2:	7ea3      	ldrb	r3, [r4, #26]
 800aec4:	f013 0f08 	tst.w	r3, #8
 800aec8:	d1e7      	bne.n	800ae9a <tcp_fasttmr+0x26>
      next = pcb->next;
 800aeca:	68e5      	ldr	r5, [r4, #12]
      if (pcb->refused_data != NULL) {
 800aecc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d0eb      	beq.n	800aeaa <tcp_fasttmr+0x36>
        tcp_active_pcbs_changed = 0;
 800aed2:	4e07      	ldr	r6, [pc, #28]	; (800aef0 <tcp_fasttmr+0x7c>)
 800aed4:	2300      	movs	r3, #0
 800aed6:	7033      	strb	r3, [r6, #0]
        tcp_process_refused_data(pcb);
 800aed8:	4620      	mov	r0, r4
 800aeda:	f7ff ff95 	bl	800ae08 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800aede:	7833      	ldrb	r3, [r6, #0]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d0e2      	beq.n	800aeaa <tcp_fasttmr+0x36>
 800aee4:	e7cb      	b.n	800ae7e <tcp_fasttmr+0xa>
}
 800aee6:	bd70      	pop	{r4, r5, r6, pc}
 800aee8:	20004281 	.word	0x20004281
 800aeec:	20009710 	.word	0x20009710
 800aef0:	2000970c 	.word	0x2000970c

0800aef4 <tcp_tmr>:
{
 800aef4:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800aef6:	f7ff ffbd 	bl	800ae74 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800aefa:	4a06      	ldr	r2, [pc, #24]	; (800af14 <tcp_tmr+0x20>)
 800aefc:	7853      	ldrb	r3, [r2, #1]
 800aefe:	3301      	adds	r3, #1
 800af00:	b2db      	uxtb	r3, r3
 800af02:	7053      	strb	r3, [r2, #1]
 800af04:	f013 0f01 	tst.w	r3, #1
 800af08:	d100      	bne.n	800af0c <tcp_tmr+0x18>
}
 800af0a:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
 800af0c:	f7ff fc5e 	bl	800a7cc <tcp_slowtmr>
}
 800af10:	e7fb      	b.n	800af0a <tcp_tmr+0x16>
 800af12:	bf00      	nop
 800af14:	20004281 	.word	0x20004281

0800af18 <tcp_abandon>:
{
 800af18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af1c:	b082      	sub	sp, #8
 800af1e:	4604      	mov	r4, r0
 800af20:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800af22:	7d03      	ldrb	r3, [r0, #20]
 800af24:	2b01      	cmp	r3, #1
 800af26:	d01a      	beq.n	800af5e <tcp_abandon+0x46>
  if (pcb->state == TIME_WAIT) {
 800af28:	7d23      	ldrb	r3, [r4, #20]
 800af2a:	2b0a      	cmp	r3, #10
 800af2c:	d01f      	beq.n	800af6e <tcp_abandon+0x56>
    seqno = pcb->snd_nxt;
 800af2e:	f8d4 804c 	ldr.w	r8, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 800af32:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    errf = pcb->errf;
 800af36:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 800af3a:	6927      	ldr	r7, [r4, #16]
    if (pcb->state == CLOSED) {
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d141      	bne.n	800afc4 <tcp_abandon+0xac>
      if (pcb->local_port != 0) {
 800af40:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 800af44:	f1ba 0f00 	cmp.w	sl, #0
 800af48:	d046      	beq.n	800afd8 <tcp_abandon+0xc0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800af4a:	4b2a      	ldr	r3, [pc, #168]	; (800aff4 <tcp_abandon+0xdc>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	42a3      	cmp	r3, r4
 800af50:	d016      	beq.n	800af80 <tcp_abandon+0x68>
 800af52:	b1db      	cbz	r3, 800af8c <tcp_abandon+0x74>
 800af54:	68da      	ldr	r2, [r3, #12]
 800af56:	42a2      	cmp	r2, r4
 800af58:	d016      	beq.n	800af88 <tcp_abandon+0x70>
 800af5a:	4613      	mov	r3, r2
 800af5c:	e7f9      	b.n	800af52 <tcp_abandon+0x3a>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800af5e:	4b26      	ldr	r3, [pc, #152]	; (800aff8 <tcp_abandon+0xe0>)
 800af60:	f240 12df 	movw	r2, #479	; 0x1df
 800af64:	4925      	ldr	r1, [pc, #148]	; (800affc <tcp_abandon+0xe4>)
 800af66:	4826      	ldr	r0, [pc, #152]	; (800b000 <tcp_abandon+0xe8>)
 800af68:	f00a fae6 	bl	8015538 <printf>
 800af6c:	e7dc      	b.n	800af28 <tcp_abandon+0x10>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800af6e:	4621      	mov	r1, r4
 800af70:	4824      	ldr	r0, [pc, #144]	; (800b004 <tcp_abandon+0xec>)
 800af72:	f7ff fe31 	bl	800abd8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800af76:	4621      	mov	r1, r4
 800af78:	2001      	movs	r0, #1
 800af7a:	f7fe fcd9 	bl	8009930 <memp_free>
 800af7e:	e01e      	b.n	800afbe <tcp_abandon+0xa6>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800af80:	68da      	ldr	r2, [r3, #12]
 800af82:	4b1c      	ldr	r3, [pc, #112]	; (800aff4 <tcp_abandon+0xdc>)
 800af84:	601a      	str	r2, [r3, #0]
 800af86:	e001      	b.n	800af8c <tcp_abandon+0x74>
 800af88:	68e2      	ldr	r2, [r4, #12]
 800af8a:	60da      	str	r2, [r3, #12]
 800af8c:	2500      	movs	r5, #0
 800af8e:	60e5      	str	r5, [r4, #12]
    u16_t local_port = 0;
 800af90:	46aa      	mov	sl, r5
    if (pcb->unacked != NULL) {
 800af92:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800af94:	b108      	cbz	r0, 800af9a <tcp_abandon+0x82>
      tcp_segs_free(pcb->unacked);
 800af96:	f7ff fb70 	bl	800a67a <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800af9a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800af9c:	b108      	cbz	r0, 800afa2 <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unsent);
 800af9e:	f7ff fb6c 	bl	800a67a <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800afa2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800afa4:	b108      	cbz	r0, 800afaa <tcp_abandon+0x92>
      tcp_segs_free(pcb->ooseq);
 800afa6:	f7ff fb68 	bl	800a67a <tcp_segs_free>
    if (send_rst) {
 800afaa:	b9bd      	cbnz	r5, 800afdc <tcp_abandon+0xc4>
    memp_free(MEMP_TCP_PCB, pcb);
 800afac:	4621      	mov	r1, r4
 800afae:	2001      	movs	r0, #1
 800afb0:	f7fe fcbe 	bl	8009930 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800afb4:	b11e      	cbz	r6, 800afbe <tcp_abandon+0xa6>
 800afb6:	f06f 010c 	mvn.w	r1, #12
 800afba:	4638      	mov	r0, r7
 800afbc:	47b0      	blx	r6
}
 800afbe:	b002      	add	sp, #8
 800afc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      local_port = pcb->local_port;
 800afc4:	f8b4 a016 	ldrh.w	sl, [r4, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800afc8:	4621      	mov	r1, r4
 800afca:	480f      	ldr	r0, [pc, #60]	; (800b008 <tcp_abandon+0xf0>)
 800afcc:	f7ff fe04 	bl	800abd8 <tcp_pcb_remove>
 800afd0:	4b0e      	ldr	r3, [pc, #56]	; (800b00c <tcp_abandon+0xf4>)
 800afd2:	2201      	movs	r2, #1
 800afd4:	701a      	strb	r2, [r3, #0]
 800afd6:	e7dc      	b.n	800af92 <tcp_abandon+0x7a>
    int send_rst = 0;
 800afd8:	2500      	movs	r5, #0
 800afda:	e7da      	b.n	800af92 <tcp_abandon+0x7a>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800afdc:	8b23      	ldrh	r3, [r4, #24]
 800afde:	9301      	str	r3, [sp, #4]
 800afe0:	f8cd a000 	str.w	sl, [sp]
 800afe4:	1d23      	adds	r3, r4, #4
 800afe6:	4622      	mov	r2, r4
 800afe8:	4649      	mov	r1, r9
 800afea:	4640      	mov	r0, r8
 800afec:	f002 fbaa 	bl	800d744 <tcp_rst>
 800aff0:	e7dc      	b.n	800afac <tcp_abandon+0x94>
 800aff2:	bf00      	nop
 800aff4:	2000971c 	.word	0x2000971c
 800aff8:	0801d0e0 	.word	0x0801d0e0
 800affc:	0801d448 	.word	0x0801d448
 800b000:	0801c994 	.word	0x0801c994
 800b004:	20009720 	.word	0x20009720
 800b008:	20009710 	.word	0x20009710
 800b00c:	2000970c 	.word	0x2000970c

0800b010 <tcp_abort>:
{
 800b010:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 800b012:	2101      	movs	r1, #1
 800b014:	f7ff ff80 	bl	800af18 <tcp_abandon>
}
 800b018:	bd08      	pop	{r3, pc}
	...

0800b01c <tcp_kill_timewait>:
{
 800b01c:	b510      	push	{r4, lr}
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b01e:	4b0a      	ldr	r3, [pc, #40]	; (800b048 <tcp_kill_timewait+0x2c>)
 800b020:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 800b022:	2400      	movs	r4, #0
  inactive = NULL;
 800b024:	4620      	mov	r0, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b026:	e000      	b.n	800b02a <tcp_kill_timewait+0xe>
 800b028:	68db      	ldr	r3, [r3, #12]
 800b02a:	b143      	cbz	r3, 800b03e <tcp_kill_timewait+0x22>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b02c:	6a19      	ldr	r1, [r3, #32]
 800b02e:	4a07      	ldr	r2, [pc, #28]	; (800b04c <tcp_kill_timewait+0x30>)
 800b030:	6812      	ldr	r2, [r2, #0]
 800b032:	1a52      	subs	r2, r2, r1
 800b034:	42a2      	cmp	r2, r4
 800b036:	d3f7      	bcc.n	800b028 <tcp_kill_timewait+0xc>
      inactivity = tcp_ticks - pcb->tmr;
 800b038:	4614      	mov	r4, r2
      inactive = pcb;
 800b03a:	4618      	mov	r0, r3
 800b03c:	e7f4      	b.n	800b028 <tcp_kill_timewait+0xc>
  if (inactive != NULL) {
 800b03e:	b108      	cbz	r0, 800b044 <tcp_kill_timewait+0x28>
    tcp_abort(inactive);
 800b040:	f7ff ffe6 	bl	800b010 <tcp_abort>
}
 800b044:	bd10      	pop	{r4, pc}
 800b046:	bf00      	nop
 800b048:	20009720 	.word	0x20009720
 800b04c:	20009714 	.word	0x20009714

0800b050 <tcp_kill_prio>:
{
 800b050:	b570      	push	{r4, r5, r6, lr}
 800b052:	4604      	mov	r4, r0
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b054:	f010 0f80 	tst.w	r0, #128	; 0x80
 800b058:	d104      	bne.n	800b064 <tcp_kill_prio+0x14>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b05a:	4b0d      	ldr	r3, [pc, #52]	; (800b090 <tcp_kill_prio+0x40>)
 800b05c:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 800b05e:	2600      	movs	r6, #0
  inactive = NULL;
 800b060:	4630      	mov	r0, r6
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b062:	e002      	b.n	800b06a <tcp_kill_prio+0x1a>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b064:	247f      	movs	r4, #127	; 0x7f
 800b066:	e7f8      	b.n	800b05a <tcp_kill_prio+0xa>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b068:	68db      	ldr	r3, [r3, #12]
 800b06a:	b163      	cbz	r3, 800b086 <tcp_kill_prio+0x36>
    if (pcb->prio <= mprio &&
 800b06c:	7d59      	ldrb	r1, [r3, #21]
 800b06e:	42a1      	cmp	r1, r4
 800b070:	d8fa      	bhi.n	800b068 <tcp_kill_prio+0x18>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b072:	6a1d      	ldr	r5, [r3, #32]
 800b074:	4a07      	ldr	r2, [pc, #28]	; (800b094 <tcp_kill_prio+0x44>)
 800b076:	6812      	ldr	r2, [r2, #0]
 800b078:	1b52      	subs	r2, r2, r5
    if (pcb->prio <= mprio &&
 800b07a:	42b2      	cmp	r2, r6
 800b07c:	d3f4      	bcc.n	800b068 <tcp_kill_prio+0x18>
      mprio = pcb->prio;
 800b07e:	460c      	mov	r4, r1
      inactivity = tcp_ticks - pcb->tmr;
 800b080:	4616      	mov	r6, r2
      inactive = pcb;
 800b082:	4618      	mov	r0, r3
 800b084:	e7f0      	b.n	800b068 <tcp_kill_prio+0x18>
  if (inactive != NULL) {
 800b086:	b108      	cbz	r0, 800b08c <tcp_kill_prio+0x3c>
    tcp_abort(inactive);
 800b088:	f7ff ffc2 	bl	800b010 <tcp_abort>
}
 800b08c:	bd70      	pop	{r4, r5, r6, pc}
 800b08e:	bf00      	nop
 800b090:	20009710 	.word	0x20009710
 800b094:	20009714 	.word	0x20009714

0800b098 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800b098:	b538      	push	{r3, r4, r5, lr}
 800b09a:	4604      	mov	r4, r0
 800b09c:	4608      	mov	r0, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 800b09e:	e003      	b.n	800b0a8 <tcp_netif_ip_addr_changed_pcblist+0x10>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b0a0:	68c5      	ldr	r5, [r0, #12]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b0a2:	f7ff ffb5 	bl	800b010 <tcp_abort>
      pcb = next;
 800b0a6:	4628      	mov	r0, r5
  while (pcb != NULL) {
 800b0a8:	b128      	cbz	r0, 800b0b6 <tcp_netif_ip_addr_changed_pcblist+0x1e>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b0aa:	6802      	ldr	r2, [r0, #0]
 800b0ac:	6823      	ldr	r3, [r4, #0]
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d0f6      	beq.n	800b0a0 <tcp_netif_ip_addr_changed_pcblist+0x8>
    } else {
      pcb = pcb->next;
 800b0b2:	68c0      	ldr	r0, [r0, #12]
 800b0b4:	e7f8      	b.n	800b0a8 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800b0b6:	bd38      	pop	{r3, r4, r5, pc}

0800b0b8 <tcp_kill_state>:
{
 800b0b8:	b538      	push	{r3, r4, r5, lr}
 800b0ba:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800b0bc:	f1a0 0308 	sub.w	r3, r0, #8
 800b0c0:	b2db      	uxtb	r3, r3
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d804      	bhi.n	800b0d0 <tcp_kill_state+0x18>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b0c6:	4b10      	ldr	r3, [pc, #64]	; (800b108 <tcp_kill_state+0x50>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 800b0ca:	2100      	movs	r1, #0
  inactive = NULL;
 800b0cc:	4608      	mov	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b0ce:	e008      	b.n	800b0e2 <tcp_kill_state+0x2a>
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800b0d0:	4b0e      	ldr	r3, [pc, #56]	; (800b10c <tcp_kill_state+0x54>)
 800b0d2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b0d6:	490e      	ldr	r1, [pc, #56]	; (800b110 <tcp_kill_state+0x58>)
 800b0d8:	480e      	ldr	r0, [pc, #56]	; (800b114 <tcp_kill_state+0x5c>)
 800b0da:	f00a fa2d 	bl	8015538 <printf>
 800b0de:	e7f2      	b.n	800b0c6 <tcp_kill_state+0xe>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b0e0:	68db      	ldr	r3, [r3, #12]
 800b0e2:	b15b      	cbz	r3, 800b0fc <tcp_kill_state+0x44>
    if (pcb->state == state) {
 800b0e4:	7d1a      	ldrb	r2, [r3, #20]
 800b0e6:	42a2      	cmp	r2, r4
 800b0e8:	d1fa      	bne.n	800b0e0 <tcp_kill_state+0x28>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b0ea:	6a1d      	ldr	r5, [r3, #32]
 800b0ec:	4a0a      	ldr	r2, [pc, #40]	; (800b118 <tcp_kill_state+0x60>)
 800b0ee:	6812      	ldr	r2, [r2, #0]
 800b0f0:	1b52      	subs	r2, r2, r5
 800b0f2:	428a      	cmp	r2, r1
 800b0f4:	d3f4      	bcc.n	800b0e0 <tcp_kill_state+0x28>
        inactivity = tcp_ticks - pcb->tmr;
 800b0f6:	4611      	mov	r1, r2
        inactive = pcb;
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	e7f1      	b.n	800b0e0 <tcp_kill_state+0x28>
  if (inactive != NULL) {
 800b0fc:	b110      	cbz	r0, 800b104 <tcp_kill_state+0x4c>
    tcp_abandon(inactive, 0);
 800b0fe:	2100      	movs	r1, #0
 800b100:	f7ff ff0a 	bl	800af18 <tcp_abandon>
}
 800b104:	bd38      	pop	{r3, r4, r5, pc}
 800b106:	bf00      	nop
 800b108:	20009710 	.word	0x20009710
 800b10c:	0801d0e0 	.word	0x0801d0e0
 800b110:	0801d47c 	.word	0x0801d47c
 800b114:	0801c994 	.word	0x0801c994
 800b118:	20009714 	.word	0x20009714

0800b11c <tcp_alloc>:
{
 800b11c:	b538      	push	{r3, r4, r5, lr}
 800b11e:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b120:	2001      	movs	r0, #1
 800b122:	f7fe fbeb 	bl	80098fc <memp_malloc>
  if (pcb == NULL) {
 800b126:	4604      	mov	r4, r0
 800b128:	b368      	cbz	r0, 800b186 <tcp_alloc+0x6a>
  if (pcb != NULL) {
 800b12a:	b354      	cbz	r4, 800b182 <tcp_alloc+0x66>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b12c:	2298      	movs	r2, #152	; 0x98
 800b12e:	2100      	movs	r1, #0
 800b130:	4620      	mov	r0, r4
 800b132:	f00a f9ed 	bl	8015510 <memset>
    pcb->prio = prio;
 800b136:	7565      	strb	r5, [r4, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800b138:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800b13c:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b140:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b144:	8562      	strh	r2, [r4, #42]	; 0x2a
 800b146:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800b148:	22ff      	movs	r2, #255	; 0xff
 800b14a:	72a2      	strb	r2, [r4, #10]
    pcb->mss = INITIAL_MSS;
 800b14c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b150:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b152:	2206      	movs	r2, #6
 800b154:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b158:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 800b15a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b15e:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 800b160:	2201      	movs	r2, #1
 800b162:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800b166:	4a19      	ldr	r2, [pc, #100]	; (800b1cc <tcp_alloc+0xb0>)
 800b168:	6812      	ldr	r2, [r2, #0]
 800b16a:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 800b16c:	4a18      	ldr	r2, [pc, #96]	; (800b1d0 <tcp_alloc+0xb4>)
 800b16e:	7812      	ldrb	r2, [r2, #0]
 800b170:	7762      	strb	r2, [r4, #29]
    pcb->ssthresh = TCP_SND_BUF;
 800b172:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 800b176:	4b17      	ldr	r3, [pc, #92]	; (800b1d4 <tcp_alloc+0xb8>)
 800b178:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b17c:	4b16      	ldr	r3, [pc, #88]	; (800b1d8 <tcp_alloc+0xbc>)
 800b17e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
 800b182:	4620      	mov	r0, r4
 800b184:	bd38      	pop	{r3, r4, r5, pc}
    tcp_kill_timewait();
 800b186:	f7ff ff49 	bl	800b01c <tcp_kill_timewait>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b18a:	2001      	movs	r0, #1
 800b18c:	f7fe fbb6 	bl	80098fc <memp_malloc>
    if (pcb == NULL) {
 800b190:	4604      	mov	r4, r0
 800b192:	2800      	cmp	r0, #0
 800b194:	d1c9      	bne.n	800b12a <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 800b196:	2009      	movs	r0, #9
 800b198:	f7ff ff8e 	bl	800b0b8 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b19c:	2001      	movs	r0, #1
 800b19e:	f7fe fbad 	bl	80098fc <memp_malloc>
      if (pcb == NULL) {
 800b1a2:	4604      	mov	r4, r0
 800b1a4:	2800      	cmp	r0, #0
 800b1a6:	d1c0      	bne.n	800b12a <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 800b1a8:	2008      	movs	r0, #8
 800b1aa:	f7ff ff85 	bl	800b0b8 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b1ae:	2001      	movs	r0, #1
 800b1b0:	f7fe fba4 	bl	80098fc <memp_malloc>
        if (pcb == NULL) {
 800b1b4:	4604      	mov	r4, r0
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	d1b7      	bne.n	800b12a <tcp_alloc+0xe>
          tcp_kill_prio(prio);
 800b1ba:	4628      	mov	r0, r5
 800b1bc:	f7ff ff48 	bl	800b050 <tcp_kill_prio>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b1c0:	2001      	movs	r0, #1
 800b1c2:	f7fe fb9b 	bl	80098fc <memp_malloc>
 800b1c6:	4604      	mov	r4, r0
          if (pcb != NULL) {
 800b1c8:	e7af      	b.n	800b12a <tcp_alloc+0xe>
 800b1ca:	bf00      	nop
 800b1cc:	20009714 	.word	0x20009714
 800b1d0:	20004281 	.word	0x20004281
 800b1d4:	0800ade5 	.word	0x0800ade5
 800b1d8:	006ddd00 	.word	0x006ddd00

0800b1dc <tcp_new>:
{
 800b1dc:	b508      	push	{r3, lr}
  return tcp_alloc(TCP_PRIO_NORMAL);
 800b1de:	2040      	movs	r0, #64	; 0x40
 800b1e0:	f7ff ff9c 	bl	800b11c <tcp_alloc>
}
 800b1e4:	bd08      	pop	{r3, pc}
	...

0800b1e8 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 800b1e8:	4b03      	ldr	r3, [pc, #12]	; (800b1f8 <tcp_next_iss+0x10>)
 800b1ea:	6858      	ldr	r0, [r3, #4]
 800b1ec:	4a03      	ldr	r2, [pc, #12]	; (800b1fc <tcp_next_iss+0x14>)
 800b1ee:	6812      	ldr	r2, [r2, #0]
 800b1f0:	4410      	add	r0, r2
 800b1f2:	6058      	str	r0, [r3, #4]
}
 800b1f4:	4770      	bx	lr
 800b1f6:	bf00      	nop
 800b1f8:	20000008 	.word	0x20000008
 800b1fc:	20009714 	.word	0x20009714

0800b200 <tcp_eff_send_mss_impl>:
{
 800b200:	b510      	push	{r4, lr}
 800b202:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 800b204:	4608      	mov	r0, r1
 800b206:	f003 fb51 	bl	800e8ac <ip4_route>
    if (outif == NULL) {
 800b20a:	b130      	cbz	r0, 800b21a <tcp_eff_send_mss_impl+0x1a>
    mtu = outif->mtu;
 800b20c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
  if (mtu != 0) {
 800b20e:	b123      	cbz	r3, 800b21a <tcp_eff_send_mss_impl+0x1a>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800b210:	3b28      	subs	r3, #40	; 0x28
 800b212:	b29b      	uxth	r3, r3
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b214:	429c      	cmp	r4, r3
 800b216:	bf28      	it	cs
 800b218:	461c      	movcs	r4, r3
}
 800b21a:	4620      	mov	r0, r4
 800b21c:	bd10      	pop	{r4, pc}
	...

0800b220 <tcp_connect>:
{
 800b220:	b570      	push	{r4, r5, r6, lr}
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800b222:	2800      	cmp	r0, #0
 800b224:	d070      	beq.n	800b308 <tcp_connect+0xe8>
 800b226:	461d      	mov	r5, r3
 800b228:	4604      	mov	r4, r0
 800b22a:	2900      	cmp	r1, #0
 800b22c:	d06f      	beq.n	800b30e <tcp_connect+0xee>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800b22e:	7d03      	ldrb	r3, [r0, #20]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d149      	bne.n	800b2c8 <tcp_connect+0xa8>
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800b234:	680b      	ldr	r3, [r1, #0]
 800b236:	6043      	str	r3, [r0, #4]
  pcb->remote_port = port;
 800b238:	8302      	strh	r2, [r0, #24]
  if (ip_addr_isany(&pcb->local_ip)) {
 800b23a:	b108      	cbz	r0, 800b240 <tcp_connect+0x20>
 800b23c:	6803      	ldr	r3, [r0, #0]
 800b23e:	b963      	cbnz	r3, 800b25a <tcp_connect+0x3a>
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
 800b240:	1d20      	adds	r0, r4, #4
 800b242:	f003 fb33 	bl	800e8ac <ip4_route>
 800b246:	4603      	mov	r3, r0
 800b248:	2800      	cmp	r0, #0
 800b24a:	d047      	beq.n	800b2dc <tcp_connect+0xbc>
 800b24c:	1d02      	adds	r2, r0, #4
    if ((netif == NULL) || (local_ip == NULL)) {
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d060      	beq.n	800b314 <tcp_connect+0xf4>
 800b252:	2a00      	cmp	r2, #0
 800b254:	d061      	beq.n	800b31a <tcp_connect+0xfa>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b256:	6813      	ldr	r3, [r2, #0]
 800b258:	6023      	str	r3, [r4, #0]
  old_local_port = pcb->local_port;
 800b25a:	8ae6      	ldrh	r6, [r4, #22]
  if (pcb->local_port == 0) {
 800b25c:	b926      	cbnz	r6, 800b268 <tcp_connect+0x48>
    pcb->local_port = tcp_new_port();
 800b25e:	f7ff f88f 	bl	800a380 <tcp_new_port>
 800b262:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 800b264:	2800      	cmp	r0, #0
 800b266:	d05b      	beq.n	800b320 <tcp_connect+0x100>
  iss = tcp_next_iss(pcb);
 800b268:	4620      	mov	r0, r4
 800b26a:	f7ff ffbd 	bl	800b1e8 <tcp_next_iss>
  pcb->rcv_nxt = 0;
 800b26e:	2200      	movs	r2, #0
 800b270:	6262      	str	r2, [r4, #36]	; 0x24
  pcb->snd_nxt = iss;
 800b272:	64e0      	str	r0, [r4, #76]	; 0x4c
  pcb->lastack = iss - 1;
 800b274:	3801      	subs	r0, #1
 800b276:	6460      	str	r0, [r4, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800b278:	6560      	str	r0, [r4, #84]	; 0x54
  pcb->snd_lbb = iss - 1;
 800b27a:	65a0      	str	r0, [r4, #88]	; 0x58
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b27c:	f44f 6306 	mov.w	r3, #2144	; 0x860
 800b280:	8563      	strh	r3, [r4, #42]	; 0x2a
 800b282:	8523      	strh	r3, [r4, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b284:	62e2      	str	r2, [r4, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800b286:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
  pcb->mss = INITIAL_MSS;
 800b28a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800b28e:	8660      	strh	r0, [r4, #50]	; 0x32
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b290:	1d21      	adds	r1, r4, #4
 800b292:	f7ff ffb5 	bl	800b200 <tcp_eff_send_mss_impl>
 800b296:	8660      	strh	r0, [r4, #50]	; 0x32
  pcb->cwnd = 1;
 800b298:	2301      	movs	r3, #1
 800b29a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  pcb->connected = connected;
 800b29e:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800b2a2:	2102      	movs	r1, #2
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	f001 fff7 	bl	800d298 <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 800b2aa:	4605      	mov	r5, r0
 800b2ac:	bb50      	cbnz	r0, 800b304 <tcp_connect+0xe4>
    pcb->state = SYN_SENT;
 800b2ae:	2302      	movs	r3, #2
 800b2b0:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 800b2b2:	b1de      	cbz	r6, 800b2ec <tcp_connect+0xcc>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800b2b4:	4b1c      	ldr	r3, [pc, #112]	; (800b328 <tcp_connect+0x108>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	42a3      	cmp	r3, r4
 800b2ba:	d011      	beq.n	800b2e0 <tcp_connect+0xc0>
 800b2bc:	b1b3      	cbz	r3, 800b2ec <tcp_connect+0xcc>
 800b2be:	68da      	ldr	r2, [r3, #12]
 800b2c0:	42a2      	cmp	r2, r4
 800b2c2:	d011      	beq.n	800b2e8 <tcp_connect+0xc8>
 800b2c4:	4613      	mov	r3, r2
 800b2c6:	e7f9      	b.n	800b2bc <tcp_connect+0x9c>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800b2c8:	4b18      	ldr	r3, [pc, #96]	; (800b32c <tcp_connect+0x10c>)
 800b2ca:	f44f 725e 	mov.w	r2, #888	; 0x378
 800b2ce:	4918      	ldr	r1, [pc, #96]	; (800b330 <tcp_connect+0x110>)
 800b2d0:	4818      	ldr	r0, [pc, #96]	; (800b334 <tcp_connect+0x114>)
 800b2d2:	f00a f931 	bl	8015538 <printf>
 800b2d6:	f06f 0509 	mvn.w	r5, #9
 800b2da:	e013      	b.n	800b304 <tcp_connect+0xe4>
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
 800b2dc:	4602      	mov	r2, r0
 800b2de:	e7b6      	b.n	800b24e <tcp_connect+0x2e>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800b2e0:	68da      	ldr	r2, [r3, #12]
 800b2e2:	4b11      	ldr	r3, [pc, #68]	; (800b328 <tcp_connect+0x108>)
 800b2e4:	601a      	str	r2, [r3, #0]
 800b2e6:	e001      	b.n	800b2ec <tcp_connect+0xcc>
 800b2e8:	68e2      	ldr	r2, [r4, #12]
 800b2ea:	60da      	str	r2, [r3, #12]
    TCP_REG_ACTIVE(pcb);
 800b2ec:	4b12      	ldr	r3, [pc, #72]	; (800b338 <tcp_connect+0x118>)
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	60e2      	str	r2, [r4, #12]
 800b2f2:	601c      	str	r4, [r3, #0]
 800b2f4:	f002 fbd6 	bl	800daa4 <tcp_timer_needed>
 800b2f8:	4b10      	ldr	r3, [pc, #64]	; (800b33c <tcp_connect+0x11c>)
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 800b2fe:	4620      	mov	r0, r4
 800b300:	f002 f8d8 	bl	800d4b4 <tcp_output>
}
 800b304:	4628      	mov	r0, r5
 800b306:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 800b308:	f06f 0505 	mvn.w	r5, #5
 800b30c:	e7fa      	b.n	800b304 <tcp_connect+0xe4>
 800b30e:	f06f 0505 	mvn.w	r5, #5
 800b312:	e7f7      	b.n	800b304 <tcp_connect+0xe4>
      return ERR_RTE;
 800b314:	f06f 0503 	mvn.w	r5, #3
 800b318:	e7f4      	b.n	800b304 <tcp_connect+0xe4>
 800b31a:	f06f 0503 	mvn.w	r5, #3
 800b31e:	e7f1      	b.n	800b304 <tcp_connect+0xe4>
      return ERR_BUF;
 800b320:	f06f 0501 	mvn.w	r5, #1
 800b324:	e7ee      	b.n	800b304 <tcp_connect+0xe4>
 800b326:	bf00      	nop
 800b328:	2000971c 	.word	0x2000971c
 800b32c:	0801d0e0 	.word	0x0801d0e0
 800b330:	0801d48c 	.word	0x0801d48c
 800b334:	0801c994 	.word	0x0801c994
 800b338:	20009710 	.word	0x20009710
 800b33c:	2000970c 	.word	0x2000970c

0800b340 <tcp_netif_ip_addr_changed>:
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800b340:	b308      	cbz	r0, 800b386 <tcp_netif_ip_addr_changed+0x46>
{
 800b342:	b538      	push	{r3, r4, r5, lr}
 800b344:	460d      	mov	r5, r1
 800b346:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 800b348:	6803      	ldr	r3, [r0, #0]
 800b34a:	b903      	cbnz	r3, 800b34e <tcp_netif_ip_addr_changed+0xe>
          ip_addr_copy(lpcb->local_ip, *new_addr);
        }
      }
    }
  }
}
 800b34c:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b34e:	4b0e      	ldr	r3, [pc, #56]	; (800b388 <tcp_netif_ip_addr_changed+0x48>)
 800b350:	6819      	ldr	r1, [r3, #0]
 800b352:	f7ff fea1 	bl	800b098 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b356:	4b0d      	ldr	r3, [pc, #52]	; (800b38c <tcp_netif_ip_addr_changed+0x4c>)
 800b358:	6819      	ldr	r1, [r3, #0]
 800b35a:	4620      	mov	r0, r4
 800b35c:	f7ff fe9c 	bl	800b098 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 800b360:	2d00      	cmp	r5, #0
 800b362:	d0f3      	beq.n	800b34c <tcp_netif_ip_addr_changed+0xc>
 800b364:	682b      	ldr	r3, [r5, #0]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d0f0      	beq.n	800b34c <tcp_netif_ip_addr_changed+0xc>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800b36a:	4b09      	ldr	r3, [pc, #36]	; (800b390 <tcp_netif_ip_addr_changed+0x50>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	e000      	b.n	800b372 <tcp_netif_ip_addr_changed+0x32>
{
 800b370:	4613      	mov	r3, r2
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800b372:	2b00      	cmp	r3, #0
 800b374:	d0ea      	beq.n	800b34c <tcp_netif_ip_addr_changed+0xc>
        next = lpcb->next;
 800b376:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b378:	6818      	ldr	r0, [r3, #0]
 800b37a:	6821      	ldr	r1, [r4, #0]
 800b37c:	4288      	cmp	r0, r1
 800b37e:	d1f7      	bne.n	800b370 <tcp_netif_ip_addr_changed+0x30>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b380:	6829      	ldr	r1, [r5, #0]
 800b382:	6019      	str	r1, [r3, #0]
 800b384:	e7f4      	b.n	800b370 <tcp_netif_ip_addr_changed+0x30>
 800b386:	4770      	bx	lr
 800b388:	20009710 	.word	0x20009710
 800b38c:	2000971c 	.word	0x2000971c
 800b390:	20009718 	.word	0x20009718

0800b394 <tcp_getoptbyte>:
}

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800b394:	4b0d      	ldr	r3, [pc, #52]	; (800b3cc <tcp_getoptbyte+0x38>)
 800b396:	6819      	ldr	r1, [r3, #0]
 800b398:	b121      	cbz	r1, 800b3a4 <tcp_getoptbyte+0x10>
 800b39a:	461a      	mov	r2, r3
 800b39c:	889b      	ldrh	r3, [r3, #4]
 800b39e:	88d2      	ldrh	r2, [r2, #6]
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d207      	bcs.n	800b3b4 <tcp_getoptbyte+0x20>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800b3a4:	4a09      	ldr	r2, [pc, #36]	; (800b3cc <tcp_getoptbyte+0x38>)
 800b3a6:	6893      	ldr	r3, [r2, #8]
    return opts[tcp_optidx++];
 800b3a8:	8891      	ldrh	r1, [r2, #4]
 800b3aa:	1c48      	adds	r0, r1, #1
 800b3ac:	8090      	strh	r0, [r2, #4]
 800b3ae:	440b      	add	r3, r1
 800b3b0:	7d18      	ldrb	r0, [r3, #20]
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
    return tcphdr_opt2[idx];
  }
}
 800b3b2:	4770      	bx	lr
{
 800b3b4:	b410      	push	{r4}
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800b3b6:	1c5c      	adds	r4, r3, #1
 800b3b8:	4804      	ldr	r0, [pc, #16]	; (800b3cc <tcp_getoptbyte+0x38>)
 800b3ba:	8084      	strh	r4, [r0, #4]
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	b2d2      	uxtb	r2, r2
 800b3c0:	1a9b      	subs	r3, r3, r2
 800b3c2:	b2db      	uxtb	r3, r3
    return tcphdr_opt2[idx];
 800b3c4:	5cc8      	ldrb	r0, [r1, r3]
}
 800b3c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3ca:	4770      	bx	lr
 800b3cc:	20004284 	.word	0x20004284

0800b3d0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b3d0:	b538      	push	{r3, r4, r5, lr}
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b3d2:	4b1e      	ldr	r3, [pc, #120]	; (800b44c <tcp_parseopt+0x7c>)
 800b3d4:	899b      	ldrh	r3, [r3, #12]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d036      	beq.n	800b448 <tcp_parseopt+0x78>
 800b3da:	4604      	mov	r4, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b3dc:	4b1b      	ldr	r3, [pc, #108]	; (800b44c <tcp_parseopt+0x7c>)
 800b3de:	2200      	movs	r2, #0
 800b3e0:	809a      	strh	r2, [r3, #4]
 800b3e2:	4b1a      	ldr	r3, [pc, #104]	; (800b44c <tcp_parseopt+0x7c>)
 800b3e4:	889a      	ldrh	r2, [r3, #4]
 800b3e6:	899b      	ldrh	r3, [r3, #12]
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d22d      	bcs.n	800b448 <tcp_parseopt+0x78>
      u8_t opt = tcp_getoptbyte();
 800b3ec:	f7ff ffd2 	bl	800b394 <tcp_getoptbyte>
      switch (opt) {
 800b3f0:	2801      	cmp	r0, #1
 800b3f2:	d0f6      	beq.n	800b3e2 <tcp_parseopt+0x12>
 800b3f4:	2802      	cmp	r0, #2
 800b3f6:	d00b      	beq.n	800b410 <tcp_parseopt+0x40>
 800b3f8:	b330      	cbz	r0, 800b448 <tcp_parseopt+0x78>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800b3fa:	f7ff ffcb 	bl	800b394 <tcp_getoptbyte>
 800b3fe:	4603      	mov	r3, r0
        if (data < 2) {
 800b400:	2801      	cmp	r0, #1
 800b402:	d921      	bls.n	800b448 <tcp_parseopt+0x78>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800b404:	4a11      	ldr	r2, [pc, #68]	; (800b44c <tcp_parseopt+0x7c>)
 800b406:	8890      	ldrh	r0, [r2, #4]
 800b408:	4403      	add	r3, r0
 800b40a:	3b02      	subs	r3, #2
 800b40c:	8093      	strh	r3, [r2, #4]
 800b40e:	e7e8      	b.n	800b3e2 <tcp_parseopt+0x12>
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b410:	f7ff ffc0 	bl	800b394 <tcp_getoptbyte>
 800b414:	2804      	cmp	r0, #4
 800b416:	d117      	bne.n	800b448 <tcp_parseopt+0x78>
 800b418:	4a0c      	ldr	r2, [pc, #48]	; (800b44c <tcp_parseopt+0x7c>)
 800b41a:	8893      	ldrh	r3, [r2, #4]
 800b41c:	3301      	adds	r3, #1
 800b41e:	8992      	ldrh	r2, [r2, #12]
 800b420:	4293      	cmp	r3, r2
 800b422:	da11      	bge.n	800b448 <tcp_parseopt+0x78>
        mss = (tcp_getoptbyte() << 8);
 800b424:	f7ff ffb6 	bl	800b394 <tcp_getoptbyte>
 800b428:	b285      	uxth	r5, r0
 800b42a:	022d      	lsls	r5, r5, #8
 800b42c:	b2ad      	uxth	r5, r5
        mss |= tcp_getoptbyte();
 800b42e:	f7ff ffb1 	bl	800b394 <tcp_getoptbyte>
 800b432:	b280      	uxth	r0, r0
 800b434:	4305      	orrs	r5, r0
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b436:	1e6b      	subs	r3, r5, #1
 800b438:	b29b      	uxth	r3, r3
 800b43a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b43e:	d301      	bcc.n	800b444 <tcp_parseopt+0x74>
 800b440:	f44f 7506 	mov.w	r5, #536	; 0x218
 800b444:	8665      	strh	r5, [r4, #50]	; 0x32
        break;
 800b446:	e7cc      	b.n	800b3e2 <tcp_parseopt+0x12>
      }
    }
  }
}
 800b448:	bd38      	pop	{r3, r4, r5, pc}
 800b44a:	bf00      	nop
 800b44c:	20004284 	.word	0x20004284

0800b450 <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 800b450:	4b0e      	ldr	r3, [pc, #56]	; (800b48c <tcp_input_delayed_close+0x3c>)
 800b452:	7b9b      	ldrb	r3, [r3, #14]
 800b454:	f013 0f10 	tst.w	r3, #16
 800b458:	d101      	bne.n	800b45e <tcp_input_delayed_close+0xe>
  return 0;
 800b45a:	2000      	movs	r0, #0
}
 800b45c:	4770      	bx	lr
{
 800b45e:	b510      	push	{r4, lr}
 800b460:	4604      	mov	r4, r0
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b462:	7e83      	ldrb	r3, [r0, #26]
 800b464:	f013 0f10 	tst.w	r3, #16
 800b468:	d106      	bne.n	800b478 <tcp_input_delayed_close+0x28>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b46a:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800b46e:	b11b      	cbz	r3, 800b478 <tcp_input_delayed_close+0x28>
 800b470:	f06f 010e 	mvn.w	r1, #14
 800b474:	6900      	ldr	r0, [r0, #16]
 800b476:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b478:	4621      	mov	r1, r4
 800b47a:	4805      	ldr	r0, [pc, #20]	; (800b490 <tcp_input_delayed_close+0x40>)
 800b47c:	f7ff fbac 	bl	800abd8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800b480:	4621      	mov	r1, r4
 800b482:	2001      	movs	r0, #1
 800b484:	f7fe fa54 	bl	8009930 <memp_free>
    return 1;
 800b488:	2001      	movs	r0, #1
}
 800b48a:	bd10      	pop	{r4, pc}
 800b48c:	20004284 	.word	0x20004284
 800b490:	20009710 	.word	0x20009710

0800b494 <tcp_timewait_input>:
  if (flags & TCP_RST) {
 800b494:	4b1b      	ldr	r3, [pc, #108]	; (800b504 <tcp_timewait_input+0x70>)
 800b496:	7bdb      	ldrb	r3, [r3, #15]
 800b498:	f013 0f04 	tst.w	r3, #4
 800b49c:	d130      	bne.n	800b500 <tcp_timewait_input+0x6c>
{
 800b49e:	b530      	push	{r4, r5, lr}
 800b4a0:	b083      	sub	sp, #12
  if (flags & TCP_SYN) {
 800b4a2:	f013 0f02 	tst.w	r3, #2
 800b4a6:	d01d      	beq.n	800b4e4 <tcp_timewait_input+0x50>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b4a8:	4b16      	ldr	r3, [pc, #88]	; (800b504 <tcp_timewait_input+0x70>)
 800b4aa:	6919      	ldr	r1, [r3, #16]
 800b4ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b4ae:	1aca      	subs	r2, r1, r3
 800b4b0:	2a00      	cmp	r2, #0
 800b4b2:	db04      	blt.n	800b4be <tcp_timewait_input+0x2a>
 800b4b4:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 800b4b6:	4413      	add	r3, r2
 800b4b8:	1acb      	subs	r3, r1, r3
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	dd04      	ble.n	800b4c8 <tcp_timewait_input+0x34>
  if ((tcplen > 0)) {
 800b4be:	4b11      	ldr	r3, [pc, #68]	; (800b504 <tcp_timewait_input+0x70>)
 800b4c0:	8a9b      	ldrh	r3, [r3, #20]
 800b4c2:	b9b3      	cbnz	r3, 800b4f2 <tcp_timewait_input+0x5e>
}
 800b4c4:	b003      	add	sp, #12
 800b4c6:	bd30      	pop	{r4, r5, pc}
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b4c8:	480e      	ldr	r0, [pc, #56]	; (800b504 <tcp_timewait_input+0x70>)
 800b4ca:	6882      	ldr	r2, [r0, #8]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b4cc:	4b0e      	ldr	r3, [pc, #56]	; (800b508 <tcp_timewait_input+0x74>)
 800b4ce:	8a84      	ldrh	r4, [r0, #20]
 800b4d0:	8815      	ldrh	r5, [r2, #0]
 800b4d2:	9501      	str	r5, [sp, #4]
 800b4d4:	8852      	ldrh	r2, [r2, #2]
 800b4d6:	9200      	str	r2, [sp, #0]
 800b4d8:	1d1a      	adds	r2, r3, #4
 800b4da:	4421      	add	r1, r4
 800b4dc:	6980      	ldr	r0, [r0, #24]
 800b4de:	f002 f931 	bl	800d744 <tcp_rst>
      return;
 800b4e2:	e7ef      	b.n	800b4c4 <tcp_timewait_input+0x30>
  } else if (flags & TCP_FIN) {
 800b4e4:	f013 0f01 	tst.w	r3, #1
 800b4e8:	d0e9      	beq.n	800b4be <tcp_timewait_input+0x2a>
    pcb->tmr = tcp_ticks;
 800b4ea:	4b08      	ldr	r3, [pc, #32]	; (800b50c <tcp_timewait_input+0x78>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	6203      	str	r3, [r0, #32]
 800b4f0:	e7e5      	b.n	800b4be <tcp_timewait_input+0x2a>
    pcb->flags |= TF_ACK_NOW;
 800b4f2:	7e83      	ldrb	r3, [r0, #26]
 800b4f4:	f043 0302 	orr.w	r3, r3, #2
 800b4f8:	7683      	strb	r3, [r0, #26]
    tcp_output(pcb);
 800b4fa:	f001 ffdb 	bl	800d4b4 <tcp_output>
 800b4fe:	e7e1      	b.n	800b4c4 <tcp_timewait_input+0x30>
 800b500:	4770      	bx	lr
 800b502:	bf00      	nop
 800b504:	20004284 	.word	0x20004284
 800b508:	200061f0 	.word	0x200061f0
 800b50c:	20009714 	.word	0x20009714

0800b510 <tcp_listen_input>:
  if (flags & TCP_RST) {
 800b510:	4b3a      	ldr	r3, [pc, #232]	; (800b5fc <tcp_listen_input+0xec>)
 800b512:	7bdb      	ldrb	r3, [r3, #15]
 800b514:	f013 0f04 	tst.w	r3, #4
 800b518:	d16e      	bne.n	800b5f8 <tcp_listen_input+0xe8>
{
 800b51a:	b570      	push	{r4, r5, r6, lr}
 800b51c:	b082      	sub	sp, #8
 800b51e:	4605      	mov	r5, r0
  if (flags & TCP_ACK) {
 800b520:	f013 0f10 	tst.w	r3, #16
 800b524:	d104      	bne.n	800b530 <tcp_listen_input+0x20>
  } else if (flags & TCP_SYN) {
 800b526:	f013 0f02 	tst.w	r3, #2
 800b52a:	d110      	bne.n	800b54e <tcp_listen_input+0x3e>
}
 800b52c:	b002      	add	sp, #8
 800b52e:	bd70      	pop	{r4, r5, r6, pc}
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b530:	4832      	ldr	r0, [pc, #200]	; (800b5fc <tcp_listen_input+0xec>)
 800b532:	6882      	ldr	r2, [r0, #8]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b534:	4b32      	ldr	r3, [pc, #200]	; (800b600 <tcp_listen_input+0xf0>)
 800b536:	8a84      	ldrh	r4, [r0, #20]
 800b538:	6901      	ldr	r1, [r0, #16]
 800b53a:	8815      	ldrh	r5, [r2, #0]
 800b53c:	9501      	str	r5, [sp, #4]
 800b53e:	8852      	ldrh	r2, [r2, #2]
 800b540:	9200      	str	r2, [sp, #0]
 800b542:	1d1a      	adds	r2, r3, #4
 800b544:	4421      	add	r1, r4
 800b546:	6980      	ldr	r0, [r0, #24]
 800b548:	f002 f8fc 	bl	800d744 <tcp_rst>
 800b54c:	e7ee      	b.n	800b52c <tcp_listen_input+0x1c>
    npcb = tcp_alloc(pcb->prio);
 800b54e:	7d40      	ldrb	r0, [r0, #21]
 800b550:	f7ff fde4 	bl	800b11c <tcp_alloc>
    if (npcb == NULL) {
 800b554:	4604      	mov	r4, r0
 800b556:	2800      	cmp	r0, #0
 800b558:	d040      	beq.n	800b5dc <tcp_listen_input+0xcc>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b55a:	4b2a      	ldr	r3, [pc, #168]	; (800b604 <tcp_listen_input+0xf4>)
 800b55c:	695a      	ldr	r2, [r3, #20]
 800b55e:	6002      	str	r2, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b560:	691b      	ldr	r3, [r3, #16]
 800b562:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800b564:	8aeb      	ldrh	r3, [r5, #22]
 800b566:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800b568:	4e24      	ldr	r6, [pc, #144]	; (800b5fc <tcp_listen_input+0xec>)
 800b56a:	68b3      	ldr	r3, [r6, #8]
 800b56c:	881b      	ldrh	r3, [r3, #0]
 800b56e:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800b570:	2303      	movs	r3, #3
 800b572:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800b574:	6933      	ldr	r3, [r6, #16]
 800b576:	3301      	adds	r3, #1
 800b578:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b57a:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800b57c:	f7ff fe34 	bl	800b1e8 <tcp_next_iss>
    npcb->snd_wl2 = iss;
 800b580:	6560      	str	r0, [r4, #84]	; 0x54
    npcb->snd_nxt = iss;
 800b582:	64e0      	str	r0, [r4, #76]	; 0x4c
    npcb->lastack = iss;
 800b584:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_lbb = iss;
 800b586:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b588:	6933      	ldr	r3, [r6, #16]
 800b58a:	3b01      	subs	r3, #1
 800b58c:	6523      	str	r3, [r4, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800b58e:	692b      	ldr	r3, [r5, #16]
 800b590:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 800b592:	67a5      	str	r5, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b594:	7a2b      	ldrb	r3, [r5, #8]
 800b596:	f003 030c 	and.w	r3, r3, #12
 800b59a:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 800b59c:	4b1a      	ldr	r3, [pc, #104]	; (800b608 <tcp_listen_input+0xf8>)
 800b59e:	681a      	ldr	r2, [r3, #0]
 800b5a0:	60e2      	str	r2, [r4, #12]
 800b5a2:	601c      	str	r4, [r3, #0]
 800b5a4:	f002 fa7e 	bl	800daa4 <tcp_timer_needed>
 800b5a8:	4b18      	ldr	r3, [pc, #96]	; (800b60c <tcp_listen_input+0xfc>)
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	f7ff ff0e 	bl	800b3d0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b5b4:	68b3      	ldr	r3, [r6, #8]
 800b5b6:	89db      	ldrh	r3, [r3, #14]
 800b5b8:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b5bc:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b5c0:	1d21      	adds	r1, r4, #4
 800b5c2:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800b5c4:	f7ff fe1c 	bl	800b200 <tcp_eff_send_mss_impl>
 800b5c8:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b5ca:	2112      	movs	r1, #18
 800b5cc:	4620      	mov	r0, r4
 800b5ce:	f001 fe63 	bl	800d298 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800b5d2:	b960      	cbnz	r0, 800b5ee <tcp_listen_input+0xde>
    tcp_output(npcb);
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	f001 ff6d 	bl	800d4b4 <tcp_output>
 800b5da:	e7a7      	b.n	800b52c <tcp_listen_input+0x1c>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b5dc:	69ab      	ldr	r3, [r5, #24]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d0a4      	beq.n	800b52c <tcp_listen_input+0x1c>
 800b5e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b5e6:	2100      	movs	r1, #0
 800b5e8:	6928      	ldr	r0, [r5, #16]
 800b5ea:	4798      	blx	r3
      return;
 800b5ec:	e79e      	b.n	800b52c <tcp_listen_input+0x1c>
      tcp_abandon(npcb, 0);
 800b5ee:	2100      	movs	r1, #0
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	f7ff fc91 	bl	800af18 <tcp_abandon>
      return;
 800b5f6:	e799      	b.n	800b52c <tcp_listen_input+0x1c>
 800b5f8:	4770      	bx	lr
 800b5fa:	bf00      	nop
 800b5fc:	20004284 	.word	0x20004284
 800b600:	200061f0 	.word	0x200061f0
 800b604:	200061e0 	.word	0x200061e0
 800b608:	20009710 	.word	0x20009710
 800b60c:	2000970c 	.word	0x2000970c

0800b610 <tcp_oos_insert_segment>:
{
 800b610:	b570      	push	{r4, r5, r6, lr}
 800b612:	4605      	mov	r5, r0
 800b614:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b616:	68c3      	ldr	r3, [r0, #12]
 800b618:	8998      	ldrh	r0, [r3, #12]
 800b61a:	f7fd ff07 	bl	800942c <lwip_htons>
 800b61e:	f010 0f01 	tst.w	r0, #1
 800b622:	d012      	beq.n	800b64a <tcp_oos_insert_segment+0x3a>
    tcp_segs_free(next);
 800b624:	4620      	mov	r0, r4
 800b626:	f7ff f828 	bl	800a67a <tcp_segs_free>
    next = NULL;
 800b62a:	2400      	movs	r4, #0
  cseg->next = next;
 800b62c:	602c      	str	r4, [r5, #0]
}
 800b62e:	bd70      	pop	{r4, r5, r6, pc}
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b630:	68eb      	ldr	r3, [r5, #12]
 800b632:	899e      	ldrh	r6, [r3, #12]
 800b634:	2001      	movs	r0, #1
 800b636:	f7fd fef9 	bl	800942c <lwip_htons>
 800b63a:	68eb      	ldr	r3, [r5, #12]
 800b63c:	4306      	orrs	r6, r0
 800b63e:	819e      	strh	r6, [r3, #12]
      next = next->next;
 800b640:	6826      	ldr	r6, [r4, #0]
      tcp_seg_free(old_seg);
 800b642:	4620      	mov	r0, r4
 800b644:	f7ff f80c 	bl	800a660 <tcp_seg_free>
      next = next->next;
 800b648:	4634      	mov	r4, r6
    while (next &&
 800b64a:	b18c      	cbz	r4, 800b670 <tcp_oos_insert_segment+0x60>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b64c:	892b      	ldrh	r3, [r5, #8]
 800b64e:	4a11      	ldr	r2, [pc, #68]	; (800b694 <tcp_oos_insert_segment+0x84>)
 800b650:	6912      	ldr	r2, [r2, #16]
 800b652:	4413      	add	r3, r2
 800b654:	68e1      	ldr	r1, [r4, #12]
 800b656:	684a      	ldr	r2, [r1, #4]
 800b658:	8920      	ldrh	r0, [r4, #8]
 800b65a:	4402      	add	r2, r0
 800b65c:	1a9b      	subs	r3, r3, r2
    while (next &&
 800b65e:	2b00      	cmp	r3, #0
 800b660:	db06      	blt.n	800b670 <tcp_oos_insert_segment+0x60>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b662:	8988      	ldrh	r0, [r1, #12]
 800b664:	f7fd fee2 	bl	800942c <lwip_htons>
 800b668:	f010 0f01 	tst.w	r0, #1
 800b66c:	d0e8      	beq.n	800b640 <tcp_oos_insert_segment+0x30>
 800b66e:	e7df      	b.n	800b630 <tcp_oos_insert_segment+0x20>
    if (next &&
 800b670:	2c00      	cmp	r4, #0
 800b672:	d0db      	beq.n	800b62c <tcp_oos_insert_segment+0x1c>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b674:	892b      	ldrh	r3, [r5, #8]
 800b676:	4a07      	ldr	r2, [pc, #28]	; (800b694 <tcp_oos_insert_segment+0x84>)
 800b678:	6911      	ldr	r1, [r2, #16]
 800b67a:	440b      	add	r3, r1
 800b67c:	68e2      	ldr	r2, [r4, #12]
 800b67e:	6852      	ldr	r2, [r2, #4]
 800b680:	1a9b      	subs	r3, r3, r2
    if (next &&
 800b682:	2b00      	cmp	r3, #0
 800b684:	ddd2      	ble.n	800b62c <tcp_oos_insert_segment+0x1c>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b686:	1a52      	subs	r2, r2, r1
 800b688:	b291      	uxth	r1, r2
 800b68a:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b68c:	6868      	ldr	r0, [r5, #4]
 800b68e:	f7fe fc57 	bl	8009f40 <pbuf_realloc>
 800b692:	e7cb      	b.n	800b62c <tcp_oos_insert_segment+0x1c>
 800b694:	20004284 	.word	0x20004284

0800b698 <tcp_receive>:
{
 800b698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b69a:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b69c:	7d03      	ldrb	r3, [r0, #20]
 800b69e:	2b03      	cmp	r3, #3
 800b6a0:	d979      	bls.n	800b796 <tcp_receive+0xfe>
  if (flags & TCP_ACK) {
 800b6a2:	4bb3      	ldr	r3, [pc, #716]	; (800b970 <tcp_receive+0x2d8>)
 800b6a4:	7bdb      	ldrb	r3, [r3, #15]
 800b6a6:	f013 0f10 	tst.w	r3, #16
 800b6aa:	f000 8194 	beq.w	800b9d6 <tcp_receive+0x33e>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b6ae:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 800b6b2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800b6b4:	1886      	adds	r6, r0, r2
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b6b6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800b6b8:	4bad      	ldr	r3, [pc, #692]	; (800b970 <tcp_receive+0x2d8>)
 800b6ba:	691b      	ldr	r3, [r3, #16]
 800b6bc:	1acd      	subs	r5, r1, r3
 800b6be:	2d00      	cmp	r5, #0
 800b6c0:	db7c      	blt.n	800b7bc <tcp_receive+0x124>
 800b6c2:	4299      	cmp	r1, r3
 800b6c4:	d06f      	beq.n	800b7a6 <tcp_receive+0x10e>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b6c6:	49aa      	ldr	r1, [pc, #680]	; (800b970 <tcp_receive+0x2d8>)
 800b6c8:	6989      	ldr	r1, [r1, #24]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b6ca:	428a      	cmp	r2, r1
 800b6cc:	d071      	beq.n	800b7b2 <tcp_receive+0x11a>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b6ce:	4ba8      	ldr	r3, [pc, #672]	; (800b970 <tcp_receive+0x2d8>)
 800b6d0:	699b      	ldr	r3, [r3, #24]
 800b6d2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b6d4:	1a5a      	subs	r2, r3, r1
 800b6d6:	2a00      	cmp	r2, #0
 800b6d8:	f340 8095 	ble.w	800b806 <tcp_receive+0x16e>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800b6dc:	2a01      	cmp	r2, #1
 800b6de:	d404      	bmi.n	800b6ea <tcp_receive+0x52>
 800b6e0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800b6e2:	1a9a      	subs	r2, r3, r2
 800b6e4:	2a00      	cmp	r2, #0
 800b6e6:	f340 80be 	ble.w	800b866 <tcp_receive+0x1ce>
      tcp_send_empty_ack(pcb);
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	f001 fea8 	bl	800d440 <tcp_send_empty_ack>
    while (pcb->unsent != NULL &&
 800b6f0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	f000 8160 	beq.w	800b9b8 <tcp_receive+0x320>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800b6f8:	4a9d      	ldr	r2, [pc, #628]	; (800b970 <tcp_receive+0x2d8>)
 800b6fa:	6996      	ldr	r6, [r2, #24]
 800b6fc:	68db      	ldr	r3, [r3, #12]
 800b6fe:	6858      	ldr	r0, [r3, #4]
 800b700:	f7fd fe97 	bl	8009432 <lwip_htonl>
 800b704:	4605      	mov	r5, r0
 800b706:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b708:	891f      	ldrh	r7, [r3, #8]
 800b70a:	68db      	ldr	r3, [r3, #12]
 800b70c:	8998      	ldrh	r0, [r3, #12]
 800b70e:	f7fd fe8d 	bl	800942c <lwip_htons>
 800b712:	f010 0f03 	tst.w	r0, #3
 800b716:	f000 814d 	beq.w	800b9b4 <tcp_receive+0x31c>
 800b71a:	2001      	movs	r0, #1
 800b71c:	4407      	add	r7, r0
 800b71e:	443d      	add	r5, r7
 800b720:	1b75      	subs	r5, r6, r5
    while (pcb->unsent != NULL &&
 800b722:	2d00      	cmp	r5, #0
 800b724:	f2c0 8148 	blt.w	800b9b8 <tcp_receive+0x320>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800b728:	4b91      	ldr	r3, [pc, #580]	; (800b970 <tcp_receive+0x2d8>)
 800b72a:	699b      	ldr	r3, [r3, #24]
 800b72c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800b72e:	1a9b      	subs	r3, r3, r2
 800b730:	2b00      	cmp	r3, #0
 800b732:	f300 8141 	bgt.w	800b9b8 <tcp_receive+0x320>
      next = pcb->unsent;
 800b736:	6ea5      	ldr	r5, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 800b738:	682b      	ldr	r3, [r5, #0]
 800b73a:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	f000 812e 	beq.w	800b99e <tcp_receive+0x306>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800b742:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 800b746:	6868      	ldr	r0, [r5, #4]
 800b748:	f7fe fc72 	bl	800a030 <pbuf_clen>
 800b74c:	4286      	cmp	r6, r0
 800b74e:	f0c0 8129 	bcc.w	800b9a4 <tcp_receive+0x30c>
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800b752:	6868      	ldr	r0, [r5, #4]
 800b754:	f7fe fc6c 	bl	800a030 <pbuf_clen>
 800b758:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b75c:	1a1b      	subs	r3, r3, r0
 800b75e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      recv_acked += next->len;
 800b762:	892b      	ldrh	r3, [r5, #8]
 800b764:	4a82      	ldr	r2, [pc, #520]	; (800b970 <tcp_receive+0x2d8>)
 800b766:	8b91      	ldrh	r1, [r2, #28]
 800b768:	440b      	add	r3, r1
 800b76a:	8393      	strh	r3, [r2, #28]
      tcp_seg_free(next);
 800b76c:	4628      	mov	r0, r5
 800b76e:	f7fe ff77 	bl	800a660 <tcp_seg_free>
      if (pcb->snd_queuelen != 0) {
 800b772:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b776:	2b00      	cmp	r3, #0
 800b778:	d0ba      	beq.n	800b6f0 <tcp_receive+0x58>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800b77a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d1b7      	bne.n	800b6f0 <tcp_receive+0x58>
 800b780:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b782:	2b00      	cmp	r3, #0
 800b784:	d1b4      	bne.n	800b6f0 <tcp_receive+0x58>
 800b786:	4b7b      	ldr	r3, [pc, #492]	; (800b974 <tcp_receive+0x2dc>)
 800b788:	f240 42dc 	movw	r2, #1244	; 0x4dc
 800b78c:	497a      	ldr	r1, [pc, #488]	; (800b978 <tcp_receive+0x2e0>)
 800b78e:	487b      	ldr	r0, [pc, #492]	; (800b97c <tcp_receive+0x2e4>)
 800b790:	f009 fed2 	bl	8015538 <printf>
 800b794:	e7ac      	b.n	800b6f0 <tcp_receive+0x58>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b796:	4b77      	ldr	r3, [pc, #476]	; (800b974 <tcp_receive+0x2dc>)
 800b798:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800b79c:	4978      	ldr	r1, [pc, #480]	; (800b980 <tcp_receive+0x2e8>)
 800b79e:	4877      	ldr	r0, [pc, #476]	; (800b97c <tcp_receive+0x2e4>)
 800b7a0:	f009 feca 	bl	8015538 <printf>
 800b7a4:	e77d      	b.n	800b6a2 <tcp_receive+0xa>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b7a6:	4972      	ldr	r1, [pc, #456]	; (800b970 <tcp_receive+0x2d8>)
 800b7a8:	6989      	ldr	r1, [r1, #24]
 800b7aa:	1a51      	subs	r1, r2, r1
 800b7ac:	2900      	cmp	r1, #0
 800b7ae:	da8a      	bge.n	800b6c6 <tcp_receive+0x2e>
 800b7b0:	e004      	b.n	800b7bc <tcp_receive+0x124>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b7b2:	4a6f      	ldr	r2, [pc, #444]	; (800b970 <tcp_receive+0x2d8>)
 800b7b4:	6892      	ldr	r2, [r2, #8]
 800b7b6:	89d2      	ldrh	r2, [r2, #14]
 800b7b8:	4290      	cmp	r0, r2
 800b7ba:	d288      	bcs.n	800b6ce <tcp_receive+0x36>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b7bc:	4a6c      	ldr	r2, [pc, #432]	; (800b970 <tcp_receive+0x2d8>)
 800b7be:	6892      	ldr	r2, [r2, #8]
 800b7c0:	89d2      	ldrh	r2, [r2, #14]
 800b7c2:	b291      	uxth	r1, r2
 800b7c4:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b7c8:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 800b7cc:	4281      	cmp	r1, r0
 800b7ce:	d901      	bls.n	800b7d4 <tcp_receive+0x13c>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b7d0:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->snd_wl1 = seqno;
 800b7d4:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800b7d6:	4b66      	ldr	r3, [pc, #408]	; (800b970 <tcp_receive+0x2d8>)
 800b7d8:	699b      	ldr	r3, [r3, #24]
 800b7da:	6563      	str	r3, [r4, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800b7dc:	b951      	cbnz	r1, 800b7f4 <tcp_receive+0x15c>
        if (pcb->persist_backoff == 0) {
 800b7de:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	f47f af73 	bne.w	800b6ce <tcp_receive+0x36>
          pcb->persist_cnt = 0;
 800b7e8:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          pcb->persist_backoff = 1;
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 800b7f2:	e76c      	b.n	800b6ce <tcp_receive+0x36>
      } else if (pcb->persist_backoff > 0) {
 800b7f4:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	f43f af68 	beq.w	800b6ce <tcp_receive+0x36>
          pcb->persist_backoff = 0;
 800b7fe:	2300      	movs	r3, #0
 800b800:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 800b804:	e763      	b.n	800b6ce <tcp_receive+0x36>
      if (tcplen == 0) {
 800b806:	4a5a      	ldr	r2, [pc, #360]	; (800b970 <tcp_receive+0x2d8>)
 800b808:	8a92      	ldrh	r2, [r2, #20]
 800b80a:	b92a      	cbnz	r2, 800b818 <tcp_receive+0x180>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b80c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800b80e:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 800b812:	4402      	add	r2, r0
 800b814:	42b2      	cmp	r2, r6
 800b816:	d003      	beq.n	800b820 <tcp_receive+0x188>
        pcb->dupacks = 0;
 800b818:	2300      	movs	r3, #0
 800b81a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b81e:	e767      	b.n	800b6f0 <tcp_receive+0x58>
          if (pcb->rtime >= 0) {
 800b820:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 800b824:	2a00      	cmp	r2, #0
 800b826:	dbf7      	blt.n	800b818 <tcp_receive+0x180>
            if (pcb->lastack == ackno) {
 800b828:	428b      	cmp	r3, r1
 800b82a:	d1f5      	bne.n	800b818 <tcp_receive+0x180>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b82c:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b830:	2bff      	cmp	r3, #255	; 0xff
 800b832:	d002      	beq.n	800b83a <tcp_receive+0x1a2>
                ++pcb->dupacks;
 800b834:	3301      	adds	r3, #1
 800b836:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 800b83a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b83e:	2b03      	cmp	r3, #3
 800b840:	d90a      	bls.n	800b858 <tcp_receive+0x1c0>
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800b842:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800b846:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800b848:	4413      	add	r3, r2
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	429a      	cmp	r2, r3
 800b84e:	f4bf af4f 	bcs.w	800b6f0 <tcp_receive+0x58>
                  pcb->cwnd += pcb->mss;
 800b852:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      if (!found_dupack) {
 800b856:	e74b      	b.n	800b6f0 <tcp_receive+0x58>
              } else if (pcb->dupacks == 3) {
 800b858:	2b03      	cmp	r3, #3
 800b85a:	f47f af49 	bne.w	800b6f0 <tcp_receive+0x58>
                tcp_rexmit_fast(pcb);
 800b85e:	4620      	mov	r0, r4
 800b860:	f002 f809 	bl	800d876 <tcp_rexmit_fast>
      if (!found_dupack) {
 800b864:	e744      	b.n	800b6f0 <tcp_receive+0x58>
      if (pcb->flags & TF_INFR) {
 800b866:	7ea2      	ldrb	r2, [r4, #26]
 800b868:	f012 0f04 	tst.w	r2, #4
 800b86c:	d006      	beq.n	800b87c <tcp_receive+0x1e4>
        pcb->flags &= ~TF_INFR;
 800b86e:	f022 0204 	bic.w	r2, r2, #4
 800b872:	76a2      	strb	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800b874:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800b878:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
      pcb->nrtx = 0;
 800b87c:	2100      	movs	r1, #0
 800b87e:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800b882:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 800b886:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b888:	eb02 02e0 	add.w	r2, r2, r0, asr #3
 800b88c:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 800b890:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      pcb->lastack = ackno;
 800b894:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 800b896:	7d23      	ldrb	r3, [r4, #20]
 800b898:	2b03      	cmp	r3, #3
 800b89a:	d90c      	bls.n	800b8b6 <tcp_receive+0x21e>
        if (pcb->cwnd < pcb->ssthresh) {
 800b89c:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800b8a0:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d24b      	bcs.n	800b940 <tcp_receive+0x2a8>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800b8a8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800b8aa:	4413      	add	r3, r2
 800b8ac:	b29b      	uxth	r3, r3
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d201      	bcs.n	800b8b6 <tcp_receive+0x21e>
            pcb->cwnd += pcb->mss;
 800b8b2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      while (pcb->unacked != NULL &&
 800b8b6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d065      	beq.n	800b988 <tcp_receive+0x2f0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800b8bc:	68db      	ldr	r3, [r3, #12]
 800b8be:	6858      	ldr	r0, [r3, #4]
 800b8c0:	f7fd fdb7 	bl	8009432 <lwip_htonl>
 800b8c4:	4605      	mov	r5, r0
 800b8c6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b8c8:	891e      	ldrh	r6, [r3, #8]
 800b8ca:	68db      	ldr	r3, [r3, #12]
 800b8cc:	8998      	ldrh	r0, [r3, #12]
 800b8ce:	f7fd fdad 	bl	800942c <lwip_htons>
 800b8d2:	f010 0f03 	tst.w	r0, #3
 800b8d6:	d048      	beq.n	800b96a <tcp_receive+0x2d2>
 800b8d8:	2301      	movs	r3, #1
 800b8da:	441e      	add	r6, r3
 800b8dc:	4435      	add	r5, r6
 800b8de:	4b24      	ldr	r3, [pc, #144]	; (800b970 <tcp_receive+0x2d8>)
 800b8e0:	699b      	ldr	r3, [r3, #24]
 800b8e2:	1aed      	subs	r5, r5, r3
      while (pcb->unacked != NULL &&
 800b8e4:	2d00      	cmp	r5, #0
 800b8e6:	dc4f      	bgt.n	800b988 <tcp_receive+0x2f0>
        next = pcb->unacked;
 800b8e8:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
        pcb->unacked = pcb->unacked->next;
 800b8ea:	682b      	ldr	r3, [r5, #0]
 800b8ec:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800b8ee:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 800b8f2:	6868      	ldr	r0, [r5, #4]
 800b8f4:	f7fe fb9c 	bl	800a030 <pbuf_clen>
 800b8f8:	4286      	cmp	r6, r0
 800b8fa:	d32e      	bcc.n	800b95a <tcp_receive+0x2c2>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 800b8fc:	6868      	ldr	r0, [r5, #4]
 800b8fe:	f7fe fb97 	bl	800a030 <pbuf_clen>
 800b902:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b906:	1a1b      	subs	r3, r3, r0
 800b908:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        recv_acked += next->len;
 800b90c:	892b      	ldrh	r3, [r5, #8]
 800b90e:	4a18      	ldr	r2, [pc, #96]	; (800b970 <tcp_receive+0x2d8>)
 800b910:	8b91      	ldrh	r1, [r2, #28]
 800b912:	440b      	add	r3, r1
 800b914:	8393      	strh	r3, [r2, #28]
        tcp_seg_free(next);
 800b916:	4628      	mov	r0, r5
 800b918:	f7fe fea2 	bl	800a660 <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 800b91c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b920:	2b00      	cmp	r3, #0
 800b922:	d0c8      	beq.n	800b8b6 <tcp_receive+0x21e>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800b924:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b926:	2b00      	cmp	r3, #0
 800b928:	d1c5      	bne.n	800b8b6 <tcp_receive+0x21e>
 800b92a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d1c2      	bne.n	800b8b6 <tcp_receive+0x21e>
 800b930:	4b10      	ldr	r3, [pc, #64]	; (800b974 <tcp_receive+0x2dc>)
 800b932:	f240 42a6 	movw	r2, #1190	; 0x4a6
 800b936:	4910      	ldr	r1, [pc, #64]	; (800b978 <tcp_receive+0x2e0>)
 800b938:	4810      	ldr	r0, [pc, #64]	; (800b97c <tcp_receive+0x2e4>)
 800b93a:	f009 fdfd 	bl	8015538 <printf>
 800b93e:	e7ba      	b.n	800b8b6 <tcp_receive+0x21e>
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800b940:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800b942:	fb03 f303 	mul.w	r3, r3, r3
 800b946:	fb93 f3f2 	sdiv	r3, r3, r2
 800b94a:	fa12 f383 	uxtah	r3, r2, r3
 800b94e:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 800b950:	429a      	cmp	r2, r3
 800b952:	d2b0      	bcs.n	800b8b6 <tcp_receive+0x21e>
            pcb->cwnd = new_cwnd;
 800b954:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800b958:	e7ad      	b.n	800b8b6 <tcp_receive+0x21e>
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800b95a:	4b06      	ldr	r3, [pc, #24]	; (800b974 <tcp_receive+0x2dc>)
 800b95c:	f240 429e 	movw	r2, #1182	; 0x49e
 800b960:	4908      	ldr	r1, [pc, #32]	; (800b984 <tcp_receive+0x2ec>)
 800b962:	4806      	ldr	r0, [pc, #24]	; (800b97c <tcp_receive+0x2e4>)
 800b964:	f009 fde8 	bl	8015538 <printf>
 800b968:	e7c8      	b.n	800b8fc <tcp_receive+0x264>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800b96a:	2300      	movs	r3, #0
 800b96c:	e7b5      	b.n	800b8da <tcp_receive+0x242>
 800b96e:	bf00      	nop
 800b970:	20004284 	.word	0x20004284
 800b974:	0801d524 	.word	0x0801d524
 800b978:	0801d59c 	.word	0x0801d59c
 800b97c:	0801c994 	.word	0x0801c994
 800b980:	0801d558 	.word	0x0801d558
 800b984:	0801d574 	.word	0x0801d574
      if (pcb->unacked == NULL) {
 800b988:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b98a:	b123      	cbz	r3, 800b996 <tcp_receive+0x2fe>
        pcb->rtime = 0;
 800b98c:	2300      	movs	r3, #0
 800b98e:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800b990:	2300      	movs	r3, #0
 800b992:	76e3      	strb	r3, [r4, #27]
 800b994:	e6ac      	b.n	800b6f0 <tcp_receive+0x58>
        pcb->rtime = -1;
 800b996:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b99a:	8623      	strh	r3, [r4, #48]	; 0x30
 800b99c:	e7f8      	b.n	800b990 <tcp_receive+0x2f8>
        pcb->unsent_oversize = 0;
 800b99e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 800b9a2:	e6ce      	b.n	800b742 <tcp_receive+0xaa>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800b9a4:	4b9c      	ldr	r3, [pc, #624]	; (800bc18 <tcp_receive+0x580>)
 800b9a6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b9aa:	499c      	ldr	r1, [pc, #624]	; (800bc1c <tcp_receive+0x584>)
 800b9ac:	489c      	ldr	r0, [pc, #624]	; (800bc20 <tcp_receive+0x588>)
 800b9ae:	f009 fdc3 	bl	8015538 <printf>
 800b9b2:	e6ce      	b.n	800b752 <tcp_receive+0xba>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800b9b4:	2000      	movs	r0, #0
 800b9b6:	e6b1      	b.n	800b71c <tcp_receive+0x84>
    pcb->snd_buf += recv_acked;
 800b9b8:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800b9bc:	4a99      	ldr	r2, [pc, #612]	; (800bc24 <tcp_receive+0x58c>)
 800b9be:	8b92      	ldrh	r2, [r2, #28]
 800b9c0:	4413      	add	r3, r2
 800b9c2:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b9c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b9c8:	b12b      	cbz	r3, 800b9d6 <tcp_receive+0x33e>
 800b9ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b9cc:	4995      	ldr	r1, [pc, #596]	; (800bc24 <tcp_receive+0x58c>)
 800b9ce:	6989      	ldr	r1, [r1, #24]
 800b9d0:	1a52      	subs	r2, r2, r1
 800b9d2:	2a00      	cmp	r2, #0
 800b9d4:	db28      	blt.n	800ba28 <tcp_receive+0x390>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b9d6:	4b93      	ldr	r3, [pc, #588]	; (800bc24 <tcp_receive+0x58c>)
 800b9d8:	8a9b      	ldrh	r3, [r3, #20]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	f000 8325 	beq.w	800c02a <tcp_receive+0x992>
 800b9e0:	7d22      	ldrb	r2, [r4, #20]
 800b9e2:	2a06      	cmp	r2, #6
 800b9e4:	f200 8321 	bhi.w	800c02a <tcp_receive+0x992>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b9e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b9ea:	4a8e      	ldr	r2, [pc, #568]	; (800bc24 <tcp_receive+0x58c>)
 800b9ec:	6912      	ldr	r2, [r2, #16]
 800b9ee:	1a8e      	subs	r6, r1, r2
 800b9f0:	2e01      	cmp	r6, #1
 800b9f2:	d404      	bmi.n	800b9fe <tcp_receive+0x366>
 800b9f4:	4413      	add	r3, r2
 800b9f6:	1acb      	subs	r3, r1, r3
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	dd38      	ble.n	800ba70 <tcp_receive+0x3d8>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b9fe:	1a52      	subs	r2, r2, r1
 800ba00:	2a00      	cmp	r2, #0
 800ba02:	f2c0 8094 	blt.w	800bb2e <tcp_receive+0x496>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ba06:	4b87      	ldr	r3, [pc, #540]	; (800bc24 <tcp_receive+0x58c>)
 800ba08:	6919      	ldr	r1, [r3, #16]
 800ba0a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ba0c:	1a8b      	subs	r3, r1, r2
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	db06      	blt.n	800ba20 <tcp_receive+0x388>
 800ba12:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800ba14:	4413      	add	r3, r2
 800ba16:	1acb      	subs	r3, r1, r3
 800ba18:	3301      	adds	r3, #1
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	f340 808c 	ble.w	800bb38 <tcp_receive+0x4a0>
      tcp_send_empty_ack(pcb);
 800ba20:	4620      	mov	r0, r4
 800ba22:	f001 fd0d 	bl	800d440 <tcp_send_empty_ack>
 800ba26:	e310      	b.n	800c04a <tcp_receive+0x9b2>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800ba28:	4a7f      	ldr	r2, [pc, #508]	; (800bc28 <tcp_receive+0x590>)
 800ba2a:	8816      	ldrh	r6, [r2, #0]
 800ba2c:	b29b      	uxth	r3, r3
 800ba2e:	1af1      	subs	r1, r6, r3
 800ba30:	b289      	uxth	r1, r1
      m = m - (pcb->sa >> 3);
 800ba32:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
 800ba36:	f3c5 00cf 	ubfx	r0, r5, #3, #16
 800ba3a:	1a09      	subs	r1, r1, r0
 800ba3c:	b20a      	sxth	r2, r1
      pcb->sa += m;
 800ba3e:	fa15 f181 	uxtah	r1, r5, r1
 800ba42:	b209      	sxth	r1, r1
 800ba44:	87a1      	strh	r1, [r4, #60]	; 0x3c
      if (m < 0) {
 800ba46:	2a00      	cmp	r2, #0
 800ba48:	db0e      	blt.n	800ba68 <tcp_receive+0x3d0>
      m = m - (pcb->sv >> 2);
 800ba4a:	f9b4 003e 	ldrsh.w	r0, [r4, #62]	; 0x3e
 800ba4e:	eba2 03a0 	sub.w	r3, r2, r0, asr #2
      pcb->sv += m;
 800ba52:	fa10 f383 	uxtah	r3, r0, r3
 800ba56:	b29b      	uxth	r3, r3
 800ba58:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800ba5a:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800ba5e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 800ba62:	2300      	movs	r3, #0
 800ba64:	6363      	str	r3, [r4, #52]	; 0x34
 800ba66:	e7b6      	b.n	800b9d6 <tcp_receive+0x33e>
        m = -m;
 800ba68:	1b9b      	subs	r3, r3, r6
 800ba6a:	4403      	add	r3, r0
 800ba6c:	b21a      	sxth	r2, r3
 800ba6e:	e7ec      	b.n	800ba4a <tcp_receive+0x3b2>
      struct pbuf *p = inseg.p;
 800ba70:	4b6c      	ldr	r3, [pc, #432]	; (800bc24 <tcp_receive+0x58c>)
 800ba72:	6a5d      	ldr	r5, [r3, #36]	; 0x24
      off = pcb->rcv_nxt - seqno;
 800ba74:	4637      	mov	r7, r6
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ba76:	b195      	cbz	r5, 800ba9e <tcp_receive+0x406>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800ba78:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 800ba7c:	429e      	cmp	r6, r3
 800ba7e:	dc16      	bgt.n	800baae <tcp_receive+0x416>
      if (inseg.p->len < off) {
 800ba80:	4b68      	ldr	r3, [pc, #416]	; (800bc24 <tcp_receive+0x58c>)
 800ba82:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ba84:	8943      	ldrh	r3, [r0, #10]
 800ba86:	42b3      	cmp	r3, r6
 800ba88:	da43      	bge.n	800bb12 <tcp_receive+0x47a>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ba8a:	8903      	ldrh	r3, [r0, #8]
 800ba8c:	42b3      	cmp	r3, r6
 800ba8e:	db16      	blt.n	800babe <tcp_receive+0x426>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ba90:	4b64      	ldr	r3, [pc, #400]	; (800bc24 <tcp_receive+0x58c>)
 800ba92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba94:	891a      	ldrh	r2, [r3, #8]
 800ba96:	b2b6      	uxth	r6, r6
 800ba98:	1b92      	subs	r2, r2, r6
 800ba9a:	b292      	uxth	r2, r2
        while (p->len < off) {
 800ba9c:	e01c      	b.n	800bad8 <tcp_receive+0x440>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ba9e:	4b5e      	ldr	r3, [pc, #376]	; (800bc18 <tcp_receive+0x580>)
 800baa0:	f240 523c 	movw	r2, #1340	; 0x53c
 800baa4:	4961      	ldr	r1, [pc, #388]	; (800bc2c <tcp_receive+0x594>)
 800baa6:	485e      	ldr	r0, [pc, #376]	; (800bc20 <tcp_receive+0x588>)
 800baa8:	f009 fd46 	bl	8015538 <printf>
 800baac:	e7e4      	b.n	800ba78 <tcp_receive+0x3e0>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800baae:	4b5a      	ldr	r3, [pc, #360]	; (800bc18 <tcp_receive+0x580>)
 800bab0:	f240 523d 	movw	r2, #1341	; 0x53d
 800bab4:	495e      	ldr	r1, [pc, #376]	; (800bc30 <tcp_receive+0x598>)
 800bab6:	485a      	ldr	r0, [pc, #360]	; (800bc20 <tcp_receive+0x588>)
 800bab8:	f009 fd3e 	bl	8015538 <printf>
 800babc:	e7e0      	b.n	800ba80 <tcp_receive+0x3e8>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800babe:	4b56      	ldr	r3, [pc, #344]	; (800bc18 <tcp_receive+0x580>)
 800bac0:	f240 523f 	movw	r2, #1343	; 0x53f
 800bac4:	495b      	ldr	r1, [pc, #364]	; (800bc34 <tcp_receive+0x59c>)
 800bac6:	4856      	ldr	r0, [pc, #344]	; (800bc20 <tcp_receive+0x588>)
 800bac8:	f009 fd36 	bl	8015538 <printf>
 800bacc:	e7e0      	b.n	800ba90 <tcp_receive+0x3f8>
          off -= p->len;
 800bace:	1aff      	subs	r7, r7, r3
          p->tot_len = new_tot_len;
 800bad0:	812a      	strh	r2, [r5, #8]
          p->len = 0;
 800bad2:	2300      	movs	r3, #0
 800bad4:	816b      	strh	r3, [r5, #10]
          p = p->next;
 800bad6:	682d      	ldr	r5, [r5, #0]
        while (p->len < off) {
 800bad8:	896b      	ldrh	r3, [r5, #10]
 800bada:	42bb      	cmp	r3, r7
 800badc:	dbf7      	blt.n	800bace <tcp_receive+0x436>
        if (pbuf_header(p, (s16_t)-off)) {
 800bade:	4279      	negs	r1, r7
 800bae0:	b209      	sxth	r1, r1
 800bae2:	4628      	mov	r0, r5
 800bae4:	f7fe f8ce 	bl	8009c84 <pbuf_header>
 800bae8:	b958      	cbnz	r0, 800bb02 <tcp_receive+0x46a>
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800baea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800baec:	4b4d      	ldr	r3, [pc, #308]	; (800bc24 <tcp_receive+0x58c>)
 800baee:	691a      	ldr	r2, [r3, #16]
 800baf0:	1a52      	subs	r2, r2, r1
 800baf2:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 800baf4:	fa10 f282 	uxtah	r2, r0, r2
 800baf8:	851a      	strh	r2, [r3, #40]	; 0x28
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800bafa:	6119      	str	r1, [r3, #16]
 800bafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bafe:	6059      	str	r1, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bb00:	e781      	b.n	800ba06 <tcp_receive+0x36e>
          LWIP_ASSERT("pbuf_header failed", 0);
 800bb02:	4b45      	ldr	r3, [pc, #276]	; (800bc18 <tcp_receive+0x580>)
 800bb04:	f240 524c 	movw	r2, #1356	; 0x54c
 800bb08:	494b      	ldr	r1, [pc, #300]	; (800bc38 <tcp_receive+0x5a0>)
 800bb0a:	4845      	ldr	r0, [pc, #276]	; (800bc20 <tcp_receive+0x588>)
 800bb0c:	f009 fd14 	bl	8015538 <printf>
 800bb10:	e7eb      	b.n	800baea <tcp_receive+0x452>
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800bb12:	4271      	negs	r1, r6
 800bb14:	b209      	sxth	r1, r1
 800bb16:	f7fe f8b5 	bl	8009c84 <pbuf_header>
 800bb1a:	2800      	cmp	r0, #0
 800bb1c:	d0e5      	beq.n	800baea <tcp_receive+0x452>
          LWIP_ASSERT("pbuf_header failed", 0);
 800bb1e:	4b3e      	ldr	r3, [pc, #248]	; (800bc18 <tcp_receive+0x580>)
 800bb20:	f240 5251 	movw	r2, #1361	; 0x551
 800bb24:	4944      	ldr	r1, [pc, #272]	; (800bc38 <tcp_receive+0x5a0>)
 800bb26:	483e      	ldr	r0, [pc, #248]	; (800bc20 <tcp_receive+0x588>)
 800bb28:	f009 fd06 	bl	8015538 <printf>
 800bb2c:	e7dd      	b.n	800baea <tcp_receive+0x452>
        tcp_ack_now(pcb);
 800bb2e:	7ea3      	ldrb	r3, [r4, #26]
 800bb30:	f043 0302 	orr.w	r3, r3, #2
 800bb34:	76a3      	strb	r3, [r4, #26]
 800bb36:	e766      	b.n	800ba06 <tcp_receive+0x36e>
      if (pcb->rcv_nxt == seqno) {
 800bb38:	4291      	cmp	r1, r2
 800bb3a:	d008      	beq.n	800bb4e <tcp_receive+0x4b6>
        tcp_send_empty_ack(pcb);
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	f001 fc7f 	bl	800d440 <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 800bb42:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800bb44:	2d00      	cmp	r5, #0
 800bb46:	f000 8194 	beq.w	800be72 <tcp_receive+0x7da>
          prev = NULL;
 800bb4a:	2600      	movs	r6, #0
 800bb4c:	e1c2      	b.n	800bed4 <tcp_receive+0x83c>
        tcplen = TCP_TCPLEN(&inseg);
 800bb4e:	4b35      	ldr	r3, [pc, #212]	; (800bc24 <tcp_receive+0x58c>)
 800bb50:	8d1d      	ldrh	r5, [r3, #40]	; 0x28
 800bb52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb54:	8998      	ldrh	r0, [r3, #12]
 800bb56:	f7fd fc69 	bl	800942c <lwip_htons>
 800bb5a:	f010 0303 	ands.w	r3, r0, #3
 800bb5e:	d000      	beq.n	800bb62 <tcp_receive+0x4ca>
 800bb60:	2301      	movs	r3, #1
 800bb62:	442b      	add	r3, r5
 800bb64:	b29b      	uxth	r3, r3
 800bb66:	4a2f      	ldr	r2, [pc, #188]	; (800bc24 <tcp_receive+0x58c>)
 800bb68:	8293      	strh	r3, [r2, #20]
        if (tcplen > pcb->rcv_wnd) {
 800bb6a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d80c      	bhi.n	800bb8a <tcp_receive+0x4f2>
        if (pcb->ooseq != NULL) {
 800bb70:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d06b      	beq.n	800bc4e <tcp_receive+0x5b6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bb76:	4b2b      	ldr	r3, [pc, #172]	; (800bc24 <tcp_receive+0x58c>)
 800bb78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb7a:	8998      	ldrh	r0, [r3, #12]
 800bb7c:	f7fd fc56 	bl	800942c <lwip_htons>
 800bb80:	f010 0f01 	tst.w	r0, #1
 800bb84:	d160      	bne.n	800bc48 <tcp_receive+0x5b0>
            next = pcb->ooseq;
 800bb86:	6f25      	ldr	r5, [r4, #112]	; 0x70
            while (next &&
 800bb88:	e08f      	b.n	800bcaa <tcp_receive+0x612>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bb8a:	4b26      	ldr	r3, [pc, #152]	; (800bc24 <tcp_receive+0x58c>)
 800bb8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb8e:	8998      	ldrh	r0, [r3, #12]
 800bb90:	f7fd fc4c 	bl	800942c <lwip_htons>
 800bb94:	f010 0f01 	tst.w	r0, #1
 800bb98:	d12e      	bne.n	800bbf8 <tcp_receive+0x560>
          inseg.len = (u16_t)pcb->rcv_wnd;
 800bb9a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800bb9c:	4b21      	ldr	r3, [pc, #132]	; (800bc24 <tcp_receive+0x58c>)
 800bb9e:	851a      	strh	r2, [r3, #40]	; 0x28
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba2:	8998      	ldrh	r0, [r3, #12]
 800bba4:	f7fd fc42 	bl	800942c <lwip_htons>
 800bba8:	f010 0f02 	tst.w	r0, #2
 800bbac:	d003      	beq.n	800bbb6 <tcp_receive+0x51e>
            inseg.len -= 1;
 800bbae:	4a1d      	ldr	r2, [pc, #116]	; (800bc24 <tcp_receive+0x58c>)
 800bbb0:	8d13      	ldrh	r3, [r2, #40]	; 0x28
 800bbb2:	3b01      	subs	r3, #1
 800bbb4:	8513      	strh	r3, [r2, #40]	; 0x28
          pbuf_realloc(inseg.p, inseg.len);
 800bbb6:	4e1b      	ldr	r6, [pc, #108]	; (800bc24 <tcp_receive+0x58c>)
 800bbb8:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 800bbba:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800bbbc:	f7fe f9c0 	bl	8009f40 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800bbc0:	8d35      	ldrh	r5, [r6, #40]	; 0x28
 800bbc2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800bbc4:	8998      	ldrh	r0, [r3, #12]
 800bbc6:	f7fd fc31 	bl	800942c <lwip_htons>
 800bbca:	f010 0303 	ands.w	r3, r0, #3
 800bbce:	d000      	beq.n	800bbd2 <tcp_receive+0x53a>
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	442b      	add	r3, r5
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	4a13      	ldr	r2, [pc, #76]	; (800bc24 <tcp_receive+0x58c>)
 800bbd8:	8293      	strh	r3, [r2, #20]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bbda:	6912      	ldr	r2, [r2, #16]
 800bbdc:	4413      	add	r3, r2
 800bbde:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bbe0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800bbe2:	440a      	add	r2, r1
 800bbe4:	4293      	cmp	r3, r2
 800bbe6:	d0c3      	beq.n	800bb70 <tcp_receive+0x4d8>
 800bbe8:	4b0b      	ldr	r3, [pc, #44]	; (800bc18 <tcp_receive+0x580>)
 800bbea:	f240 527e 	movw	r2, #1406	; 0x57e
 800bbee:	4913      	ldr	r1, [pc, #76]	; (800bc3c <tcp_receive+0x5a4>)
 800bbf0:	480b      	ldr	r0, [pc, #44]	; (800bc20 <tcp_receive+0x588>)
 800bbf2:	f009 fca1 	bl	8015538 <printf>
 800bbf6:	e7bb      	b.n	800bb70 <tcp_receive+0x4d8>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800bbf8:	4e0a      	ldr	r6, [pc, #40]	; (800bc24 <tcp_receive+0x58c>)
 800bbfa:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800bbfc:	8998      	ldrh	r0, [r3, #12]
 800bbfe:	f420 557c 	bic.w	r5, r0, #16128	; 0x3f00
 800bc02:	b2ad      	uxth	r5, r5
 800bc04:	f7fd fc12 	bl	800942c <lwip_htons>
 800bc08:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800bc0c:	f7fd fc0e 	bl	800942c <lwip_htons>
 800bc10:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800bc12:	4305      	orrs	r5, r0
 800bc14:	819d      	strh	r5, [r3, #12]
 800bc16:	e7c0      	b.n	800bb9a <tcp_receive+0x502>
 800bc18:	0801d524 	.word	0x0801d524
 800bc1c:	0801d574 	.word	0x0801d574
 800bc20:	0801c994 	.word	0x0801c994
 800bc24:	20004284 	.word	0x20004284
 800bc28:	20009714 	.word	0x20009714
 800bc2c:	0801d5bc 	.word	0x0801d5bc
 800bc30:	0801d5cc 	.word	0x0801d5cc
 800bc34:	0801d5dc 	.word	0x0801d5dc
 800bc38:	0801d5ec 	.word	0x0801d5ec
 800bc3c:	0801d600 	.word	0x0801d600
              pcb->ooseq = pcb->ooseq->next;
 800bc40:	6803      	ldr	r3, [r0, #0]
 800bc42:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800bc44:	f7fe fd0c 	bl	800a660 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800bc48:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800bc4a:	2800      	cmp	r0, #0
 800bc4c:	d1f8      	bne.n	800bc40 <tcp_receive+0x5a8>
        pcb->rcv_nxt = seqno + tcplen;
 800bc4e:	4b96      	ldr	r3, [pc, #600]	; (800bea8 <tcp_receive+0x810>)
 800bc50:	8a9a      	ldrh	r2, [r3, #20]
 800bc52:	691b      	ldr	r3, [r3, #16]
 800bc54:	4413      	add	r3, r2
 800bc56:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800bc58:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	f200 808c 	bhi.w	800bd78 <tcp_receive+0x6e0>
        pcb->rcv_wnd -= tcplen;
 800bc60:	4d91      	ldr	r5, [pc, #580]	; (800bea8 <tcp_receive+0x810>)
 800bc62:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800bc64:	8aaa      	ldrh	r2, [r5, #20]
 800bc66:	1a9b      	subs	r3, r3, r2
 800bc68:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800bc6a:	4620      	mov	r0, r4
 800bc6c:	f7fe fc88 	bl	800a580 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800bc70:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bc72:	891a      	ldrh	r2, [r3, #8]
 800bc74:	b112      	cbz	r2, 800bc7c <tcp_receive+0x5e4>
          recv_data = inseg.p;
 800bc76:	632b      	str	r3, [r5, #48]	; 0x30
          inseg.p = NULL;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	626b      	str	r3, [r5, #36]	; 0x24
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bc7c:	4b8a      	ldr	r3, [pc, #552]	; (800bea8 <tcp_receive+0x810>)
 800bc7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc80:	8998      	ldrh	r0, [r3, #12]
 800bc82:	f7fd fbd3 	bl	800942c <lwip_htons>
 800bc86:	f010 0f01 	tst.w	r0, #1
 800bc8a:	f000 80a3 	beq.w	800bdd4 <tcp_receive+0x73c>
          recv_flags |= TF_GOT_FIN;
 800bc8e:	4a86      	ldr	r2, [pc, #536]	; (800bea8 <tcp_receive+0x810>)
 800bc90:	7b93      	ldrb	r3, [r2, #14]
 800bc92:	f043 0320 	orr.w	r3, r3, #32
 800bc96:	7393      	strb	r3, [r2, #14]
 800bc98:	e09c      	b.n	800bdd4 <tcp_receive+0x73c>
                tcplen = TCP_TCPLEN(&inseg);
 800bc9a:	443b      	add	r3, r7
 800bc9c:	4a82      	ldr	r2, [pc, #520]	; (800bea8 <tcp_receive+0x810>)
 800bc9e:	8293      	strh	r3, [r2, #20]
              next = next->next;
 800bca0:	682e      	ldr	r6, [r5, #0]
              tcp_seg_free(prev);
 800bca2:	4628      	mov	r0, r5
 800bca4:	f7fe fcdc 	bl	800a660 <tcp_seg_free>
              next = next->next;
 800bca8:	4635      	mov	r5, r6
            while (next &&
 800bcaa:	b35d      	cbz	r5, 800bd04 <tcp_receive+0x66c>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800bcac:	4a7e      	ldr	r2, [pc, #504]	; (800bea8 <tcp_receive+0x810>)
 800bcae:	8a93      	ldrh	r3, [r2, #20]
 800bcb0:	6912      	ldr	r2, [r2, #16]
 800bcb2:	4413      	add	r3, r2
 800bcb4:	68e9      	ldr	r1, [r5, #12]
 800bcb6:	684a      	ldr	r2, [r1, #4]
 800bcb8:	8928      	ldrh	r0, [r5, #8]
 800bcba:	4402      	add	r2, r0
 800bcbc:	1a9b      	subs	r3, r3, r2
            while (next &&
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	db20      	blt.n	800bd04 <tcp_receive+0x66c>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bcc2:	8988      	ldrh	r0, [r1, #12]
 800bcc4:	f7fd fbb2 	bl	800942c <lwip_htons>
 800bcc8:	f010 0f01 	tst.w	r0, #1
 800bccc:	d0e8      	beq.n	800bca0 <tcp_receive+0x608>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800bcce:	4b76      	ldr	r3, [pc, #472]	; (800bea8 <tcp_receive+0x810>)
 800bcd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcd2:	8998      	ldrh	r0, [r3, #12]
 800bcd4:	f7fd fbaa 	bl	800942c <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bcd8:	f010 0f02 	tst.w	r0, #2
 800bcdc:	d1e0      	bne.n	800bca0 <tcp_receive+0x608>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800bcde:	4e72      	ldr	r6, [pc, #456]	; (800bea8 <tcp_receive+0x810>)
 800bce0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800bce2:	899f      	ldrh	r7, [r3, #12]
 800bce4:	2001      	movs	r0, #1
 800bce6:	f7fd fba1 	bl	800942c <lwip_htons>
 800bcea:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800bcec:	4307      	orrs	r7, r0
 800bcee:	819f      	strh	r7, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800bcf0:	8d37      	ldrh	r7, [r6, #40]	; 0x28
 800bcf2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800bcf4:	8998      	ldrh	r0, [r3, #12]
 800bcf6:	f7fd fb99 	bl	800942c <lwip_htons>
 800bcfa:	f010 0303 	ands.w	r3, r0, #3
 800bcfe:	d0cc      	beq.n	800bc9a <tcp_receive+0x602>
 800bd00:	2301      	movs	r3, #1
 800bd02:	e7ca      	b.n	800bc9a <tcp_receive+0x602>
            if (next &&
 800bd04:	b145      	cbz	r5, 800bd18 <tcp_receive+0x680>
                TCP_SEQ_GT(seqno + tcplen,
 800bd06:	4b68      	ldr	r3, [pc, #416]	; (800bea8 <tcp_receive+0x810>)
 800bd08:	6919      	ldr	r1, [r3, #16]
 800bd0a:	8a9b      	ldrh	r3, [r3, #20]
 800bd0c:	440b      	add	r3, r1
 800bd0e:	68ea      	ldr	r2, [r5, #12]
 800bd10:	6852      	ldr	r2, [r2, #4]
 800bd12:	1a9b      	subs	r3, r3, r2
            if (next &&
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	dc01      	bgt.n	800bd1c <tcp_receive+0x684>
            pcb->ooseq = next;
 800bd18:	6725      	str	r5, [r4, #112]	; 0x70
 800bd1a:	e798      	b.n	800bc4e <tcp_receive+0x5b6>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800bd1c:	1a52      	subs	r2, r2, r1
 800bd1e:	4b62      	ldr	r3, [pc, #392]	; (800bea8 <tcp_receive+0x810>)
 800bd20:	851a      	strh	r2, [r3, #40]	; 0x28
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bd22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd24:	8998      	ldrh	r0, [r3, #12]
 800bd26:	f7fd fb81 	bl	800942c <lwip_htons>
 800bd2a:	f010 0f02 	tst.w	r0, #2
 800bd2e:	d003      	beq.n	800bd38 <tcp_receive+0x6a0>
                inseg.len -= 1;
 800bd30:	4a5d      	ldr	r2, [pc, #372]	; (800bea8 <tcp_receive+0x810>)
 800bd32:	8d13      	ldrh	r3, [r2, #40]	; 0x28
 800bd34:	3b01      	subs	r3, #1
 800bd36:	8513      	strh	r3, [r2, #40]	; 0x28
              pbuf_realloc(inseg.p, inseg.len);
 800bd38:	4f5b      	ldr	r7, [pc, #364]	; (800bea8 <tcp_receive+0x810>)
 800bd3a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800bd3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd3e:	f7fe f8ff 	bl	8009f40 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800bd42:	8d3e      	ldrh	r6, [r7, #40]	; 0x28
 800bd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd46:	8998      	ldrh	r0, [r3, #12]
 800bd48:	f7fd fb70 	bl	800942c <lwip_htons>
 800bd4c:	f010 0303 	ands.w	r3, r0, #3
 800bd50:	d000      	beq.n	800bd54 <tcp_receive+0x6bc>
 800bd52:	2301      	movs	r3, #1
 800bd54:	4433      	add	r3, r6
 800bd56:	b29b      	uxth	r3, r3
 800bd58:	4a53      	ldr	r2, [pc, #332]	; (800bea8 <tcp_receive+0x810>)
 800bd5a:	8293      	strh	r3, [r2, #20]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800bd5c:	6912      	ldr	r2, [r2, #16]
 800bd5e:	4413      	add	r3, r2
 800bd60:	68ea      	ldr	r2, [r5, #12]
 800bd62:	6852      	ldr	r2, [r2, #4]
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d0d7      	beq.n	800bd18 <tcp_receive+0x680>
 800bd68:	4b50      	ldr	r3, [pc, #320]	; (800beac <tcp_receive+0x814>)
 800bd6a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800bd6e:	4950      	ldr	r1, [pc, #320]	; (800beb0 <tcp_receive+0x818>)
 800bd70:	4850      	ldr	r0, [pc, #320]	; (800beb4 <tcp_receive+0x81c>)
 800bd72:	f009 fbe1 	bl	8015538 <printf>
 800bd76:	e7cf      	b.n	800bd18 <tcp_receive+0x680>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800bd78:	4b4c      	ldr	r3, [pc, #304]	; (800beac <tcp_receive+0x814>)
 800bd7a:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800bd7e:	494e      	ldr	r1, [pc, #312]	; (800beb8 <tcp_receive+0x820>)
 800bd80:	484c      	ldr	r0, [pc, #304]	; (800beb4 <tcp_receive+0x81c>)
 800bd82:	f009 fbd9 	bl	8015538 <printf>
 800bd86:	e76b      	b.n	800bc60 <tcp_receive+0x5c8>
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800bd88:	2300      	movs	r3, #0
 800bd8a:	e035      	b.n	800bdf8 <tcp_receive+0x760>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	e041      	b.n	800be14 <tcp_receive+0x77c>
 800bd90:	4b46      	ldr	r3, [pc, #280]	; (800beac <tcp_receive+0x814>)
 800bd92:	f240 52dd 	movw	r2, #1501	; 0x5dd
 800bd96:	4949      	ldr	r1, [pc, #292]	; (800bebc <tcp_receive+0x824>)
 800bd98:	4846      	ldr	r0, [pc, #280]	; (800beb4 <tcp_receive+0x81c>)
 800bd9a:	f009 fbcd 	bl	8015538 <printf>
 800bd9e:	e03c      	b.n	800be1a <tcp_receive+0x782>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800bda0:	2300      	movs	r3, #0
 800bda2:	e043      	b.n	800be2c <tcp_receive+0x794>
              recv_data = cseg->p;
 800bda4:	4b40      	ldr	r3, [pc, #256]	; (800bea8 <tcp_receive+0x810>)
 800bda6:	6319      	str	r1, [r3, #48]	; 0x30
            cseg->p = NULL;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800bdac:	68eb      	ldr	r3, [r5, #12]
 800bdae:	8998      	ldrh	r0, [r3, #12]
 800bdb0:	f7fd fb3c 	bl	800942c <lwip_htons>
 800bdb4:	f010 0f01 	tst.w	r0, #1
 800bdb8:	d007      	beq.n	800bdca <tcp_receive+0x732>
            recv_flags |= TF_GOT_FIN;
 800bdba:	4a3b      	ldr	r2, [pc, #236]	; (800bea8 <tcp_receive+0x810>)
 800bdbc:	7b93      	ldrb	r3, [r2, #14]
 800bdbe:	f043 0320 	orr.w	r3, r3, #32
 800bdc2:	7393      	strb	r3, [r2, #14]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800bdc4:	7d23      	ldrb	r3, [r4, #20]
 800bdc6:	2b04      	cmp	r3, #4
 800bdc8:	d042      	beq.n	800be50 <tcp_receive+0x7b8>
          pcb->ooseq = cseg->next;
 800bdca:	682b      	ldr	r3, [r5, #0]
 800bdcc:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 800bdce:	4628      	mov	r0, r5
 800bdd0:	f7fe fc46 	bl	800a660 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800bdd4:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800bdd6:	2d00      	cmp	r5, #0
 800bdd8:	d03d      	beq.n	800be56 <tcp_receive+0x7be>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800bdda:	68ea      	ldr	r2, [r5, #12]
 800bddc:	6853      	ldr	r3, [r2, #4]
 800bdde:	6a61      	ldr	r1, [r4, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800bde0:	428b      	cmp	r3, r1
 800bde2:	d138      	bne.n	800be56 <tcp_receive+0x7be>
          seqno = pcb->ooseq->tcphdr->seqno;
 800bde4:	4930      	ldr	r1, [pc, #192]	; (800bea8 <tcp_receive+0x810>)
 800bde6:	610b      	str	r3, [r1, #16]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800bde8:	892e      	ldrh	r6, [r5, #8]
 800bdea:	8990      	ldrh	r0, [r2, #12]
 800bdec:	f7fd fb1e 	bl	800942c <lwip_htons>
 800bdf0:	f010 0f03 	tst.w	r0, #3
 800bdf4:	d0c8      	beq.n	800bd88 <tcp_receive+0x6f0>
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	441e      	add	r6, r3
 800bdfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdfc:	4433      	add	r3, r6
 800bdfe:	6263      	str	r3, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800be00:	8d27      	ldrh	r7, [r4, #40]	; 0x28
 800be02:	892e      	ldrh	r6, [r5, #8]
 800be04:	68eb      	ldr	r3, [r5, #12]
 800be06:	8998      	ldrh	r0, [r3, #12]
 800be08:	f7fd fb10 	bl	800942c <lwip_htons>
 800be0c:	f010 0f03 	tst.w	r0, #3
 800be10:	d0bc      	beq.n	800bd8c <tcp_receive+0x6f4>
 800be12:	2301      	movs	r3, #1
 800be14:	441e      	add	r6, r3
 800be16:	42b7      	cmp	r7, r6
 800be18:	d3ba      	bcc.n	800bd90 <tcp_receive+0x6f8>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800be1a:	892e      	ldrh	r6, [r5, #8]
 800be1c:	68eb      	ldr	r3, [r5, #12]
 800be1e:	8998      	ldrh	r0, [r3, #12]
 800be20:	f7fd fb04 	bl	800942c <lwip_htons>
 800be24:	f010 0f03 	tst.w	r0, #3
 800be28:	d0ba      	beq.n	800bda0 <tcp_receive+0x708>
 800be2a:	2301      	movs	r3, #1
 800be2c:	441e      	add	r6, r3
 800be2e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800be30:	1b9b      	subs	r3, r3, r6
 800be32:	8523      	strh	r3, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 800be34:	4620      	mov	r0, r4
 800be36:	f7fe fba3 	bl	800a580 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 800be3a:	6869      	ldr	r1, [r5, #4]
 800be3c:	890b      	ldrh	r3, [r1, #8]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d0b4      	beq.n	800bdac <tcp_receive+0x714>
            if (recv_data) {
 800be42:	4b19      	ldr	r3, [pc, #100]	; (800bea8 <tcp_receive+0x810>)
 800be44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800be46:	2800      	cmp	r0, #0
 800be48:	d0ac      	beq.n	800bda4 <tcp_receive+0x70c>
              pbuf_cat(recv_data, cseg->p);
 800be4a:	f7fe f911 	bl	800a070 <pbuf_cat>
 800be4e:	e7ab      	b.n	800bda8 <tcp_receive+0x710>
              pcb->state = CLOSE_WAIT;
 800be50:	2307      	movs	r3, #7
 800be52:	7523      	strb	r3, [r4, #20]
 800be54:	e7b9      	b.n	800bdca <tcp_receive+0x732>
        tcp_ack(pcb);
 800be56:	7ea3      	ldrb	r3, [r4, #26]
 800be58:	f013 0f01 	tst.w	r3, #1
 800be5c:	d005      	beq.n	800be6a <tcp_receive+0x7d2>
 800be5e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800be62:	f043 0302 	orr.w	r3, r3, #2
 800be66:	76a3      	strb	r3, [r4, #26]
 800be68:	e0ef      	b.n	800c04a <tcp_receive+0x9b2>
 800be6a:	f043 0301 	orr.w	r3, r3, #1
 800be6e:	76a3      	strb	r3, [r4, #26]
 800be70:	e0eb      	b.n	800c04a <tcp_receive+0x9b2>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800be72:	4813      	ldr	r0, [pc, #76]	; (800bec0 <tcp_receive+0x828>)
 800be74:	f7fe fc0b 	bl	800a68e <tcp_seg_copy>
 800be78:	6720      	str	r0, [r4, #112]	; 0x70
 800be7a:	e0e6      	b.n	800c04a <tcp_receive+0x9b2>
              if (inseg.len > next->len) {
 800be7c:	4b0a      	ldr	r3, [pc, #40]	; (800bea8 <tcp_receive+0x810>)
 800be7e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800be80:	892b      	ldrh	r3, [r5, #8]
 800be82:	429a      	cmp	r2, r3
 800be84:	f240 80e1 	bls.w	800c04a <tcp_receive+0x9b2>
                cseg = tcp_seg_copy(&inseg);
 800be88:	480d      	ldr	r0, [pc, #52]	; (800bec0 <tcp_receive+0x828>)
 800be8a:	f7fe fc00 	bl	800a68e <tcp_seg_copy>
                if (cseg != NULL) {
 800be8e:	4603      	mov	r3, r0
 800be90:	2800      	cmp	r0, #0
 800be92:	f000 80da 	beq.w	800c04a <tcp_receive+0x9b2>
                  if (prev != NULL) {
 800be96:	b12e      	cbz	r6, 800bea4 <tcp_receive+0x80c>
                    prev->next = cseg;
 800be98:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
 800be9a:	4629      	mov	r1, r5
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7ff fbb7 	bl	800b610 <tcp_oos_insert_segment>
 800bea2:	e0d2      	b.n	800c04a <tcp_receive+0x9b2>
                    pcb->ooseq = cseg;
 800bea4:	6720      	str	r0, [r4, #112]	; 0x70
 800bea6:	e7f8      	b.n	800be9a <tcp_receive+0x802>
 800bea8:	20004284 	.word	0x20004284
 800beac:	0801d524 	.word	0x0801d524
 800beb0:	0801d638 	.word	0x0801d638
 800beb4:	0801c994 	.word	0x0801c994
 800beb8:	0801d674 	.word	0x0801d674
 800bebc:	0801d694 	.word	0x0801d694
 800bec0:	200042a4 	.word	0x200042a4
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800bec4:	1a99      	subs	r1, r3, r2
 800bec6:	2900      	cmp	r1, #0
 800bec8:	db2e      	blt.n	800bf28 <tcp_receive+0x890>
              if (next->next == NULL &&
 800beca:	6829      	ldr	r1, [r5, #0]
 800becc:	462e      	mov	r6, r5
 800bece:	2900      	cmp	r1, #0
 800bed0:	d03c      	beq.n	800bf4c <tcp_receive+0x8b4>
 800bed2:	460d      	mov	r5, r1
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bed4:	2d00      	cmp	r5, #0
 800bed6:	f000 80b8 	beq.w	800c04a <tcp_receive+0x9b2>
            if (seqno == next->tcphdr->seqno) {
 800beda:	68e8      	ldr	r0, [r5, #12]
 800bedc:	6842      	ldr	r2, [r0, #4]
 800bede:	4b5b      	ldr	r3, [pc, #364]	; (800c04c <tcp_receive+0x9b4>)
 800bee0:	691b      	ldr	r3, [r3, #16]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d0ca      	beq.n	800be7c <tcp_receive+0x7e4>
              if (prev == NULL) {
 800bee6:	2e00      	cmp	r6, #0
 800bee8:	d0ec      	beq.n	800bec4 <tcp_receive+0x82c>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800beea:	68f1      	ldr	r1, [r6, #12]
 800beec:	6849      	ldr	r1, [r1, #4]
 800beee:	1a59      	subs	r1, r3, r1
 800bef0:	2901      	cmp	r1, #1
 800bef2:	d4ea      	bmi.n	800beca <tcp_receive+0x832>
 800bef4:	1a99      	subs	r1, r3, r2
 800bef6:	3101      	adds	r1, #1
 800bef8:	2900      	cmp	r1, #0
 800befa:	dce6      	bgt.n	800beca <tcp_receive+0x832>
                  cseg = tcp_seg_copy(&inseg);
 800befc:	4854      	ldr	r0, [pc, #336]	; (800c050 <tcp_receive+0x9b8>)
 800befe:	f7fe fbc6 	bl	800a68e <tcp_seg_copy>
                  if (cseg != NULL) {
 800bf02:	4604      	mov	r4, r0
 800bf04:	2800      	cmp	r0, #0
 800bf06:	f000 80a0 	beq.w	800c04a <tcp_receive+0x9b2>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800bf0a:	68f3      	ldr	r3, [r6, #12]
 800bf0c:	6859      	ldr	r1, [r3, #4]
 800bf0e:	8932      	ldrh	r2, [r6, #8]
 800bf10:	440a      	add	r2, r1
 800bf12:	4b4e      	ldr	r3, [pc, #312]	; (800c04c <tcp_receive+0x9b4>)
 800bf14:	691b      	ldr	r3, [r3, #16]
 800bf16:	1ad2      	subs	r2, r2, r3
 800bf18:	2a00      	cmp	r2, #0
 800bf1a:	dc10      	bgt.n	800bf3e <tcp_receive+0x8a6>
                    prev->next = cseg;
 800bf1c:	6034      	str	r4, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 800bf1e:	4629      	mov	r1, r5
 800bf20:	4620      	mov	r0, r4
 800bf22:	f7ff fb75 	bl	800b610 <tcp_oos_insert_segment>
 800bf26:	e090      	b.n	800c04a <tcp_receive+0x9b2>
                  cseg = tcp_seg_copy(&inseg);
 800bf28:	4849      	ldr	r0, [pc, #292]	; (800c050 <tcp_receive+0x9b8>)
 800bf2a:	f7fe fbb0 	bl	800a68e <tcp_seg_copy>
                  if (cseg != NULL) {
 800bf2e:	2800      	cmp	r0, #0
 800bf30:	f000 808b 	beq.w	800c04a <tcp_receive+0x9b2>
                    pcb->ooseq = cseg;
 800bf34:	6720      	str	r0, [r4, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800bf36:	4629      	mov	r1, r5
 800bf38:	f7ff fb6a 	bl	800b610 <tcp_oos_insert_segment>
 800bf3c:	e085      	b.n	800c04a <tcp_receive+0x9b2>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800bf3e:	1a5b      	subs	r3, r3, r1
 800bf40:	b299      	uxth	r1, r3
 800bf42:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 800bf44:	6870      	ldr	r0, [r6, #4]
 800bf46:	f7fd fffb 	bl	8009f40 <pbuf_realloc>
 800bf4a:	e7e7      	b.n	800bf1c <tcp_receive+0x884>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800bf4c:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	dc01      	bgt.n	800bf56 <tcp_receive+0x8be>
 800bf52:	460d      	mov	r5, r1
 800bf54:	e7be      	b.n	800bed4 <tcp_receive+0x83c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bf56:	8980      	ldrh	r0, [r0, #12]
 800bf58:	f7fd fa68 	bl	800942c <lwip_htons>
 800bf5c:	f010 0f01 	tst.w	r0, #1
 800bf60:	d173      	bne.n	800c04a <tcp_receive+0x9b2>
                next->next = tcp_seg_copy(&inseg);
 800bf62:	483b      	ldr	r0, [pc, #236]	; (800c050 <tcp_receive+0x9b8>)
 800bf64:	f7fe fb93 	bl	800a68e <tcp_seg_copy>
 800bf68:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 800bf6a:	2800      	cmp	r0, #0
 800bf6c:	d06d      	beq.n	800c04a <tcp_receive+0x9b2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800bf6e:	68eb      	ldr	r3, [r5, #12]
 800bf70:	6859      	ldr	r1, [r3, #4]
 800bf72:	892a      	ldrh	r2, [r5, #8]
 800bf74:	440a      	add	r2, r1
 800bf76:	4b35      	ldr	r3, [pc, #212]	; (800c04c <tcp_receive+0x9b4>)
 800bf78:	691b      	ldr	r3, [r3, #16]
 800bf7a:	1ad2      	subs	r2, r2, r3
 800bf7c:	2a00      	cmp	r2, #0
 800bf7e:	dc3c      	bgt.n	800bffa <tcp_receive+0x962>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800bf80:	4a32      	ldr	r2, [pc, #200]	; (800c04c <tcp_receive+0x9b4>)
 800bf82:	8a93      	ldrh	r3, [r2, #20]
 800bf84:	6912      	ldr	r2, [r2, #16]
 800bf86:	4413      	add	r3, r2
 800bf88:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bf8a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800bf8c:	440a      	add	r2, r1
 800bf8e:	1a9b      	subs	r3, r3, r2
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	dd5a      	ble.n	800c04a <tcp_receive+0x9b2>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800bf94:	682b      	ldr	r3, [r5, #0]
 800bf96:	68db      	ldr	r3, [r3, #12]
 800bf98:	8998      	ldrh	r0, [r3, #12]
 800bf9a:	f7fd fa47 	bl	800942c <lwip_htons>
 800bf9e:	f010 0f01 	tst.w	r0, #1
 800bfa2:	d131      	bne.n	800c008 <tcp_receive+0x970>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800bfa4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bfa6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800bfa8:	4413      	add	r3, r2
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	682a      	ldr	r2, [r5, #0]
 800bfae:	4927      	ldr	r1, [pc, #156]	; (800c04c <tcp_receive+0x9b4>)
 800bfb0:	6909      	ldr	r1, [r1, #16]
 800bfb2:	1a5b      	subs	r3, r3, r1
 800bfb4:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800bfb6:	682b      	ldr	r3, [r5, #0]
 800bfb8:	8919      	ldrh	r1, [r3, #8]
 800bfba:	6858      	ldr	r0, [r3, #4]
 800bfbc:	f7fd ffc0 	bl	8009f40 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800bfc0:	682b      	ldr	r3, [r5, #0]
 800bfc2:	891d      	ldrh	r5, [r3, #8]
 800bfc4:	68db      	ldr	r3, [r3, #12]
 800bfc6:	8998      	ldrh	r0, [r3, #12]
 800bfc8:	f7fd fa30 	bl	800942c <lwip_htons>
 800bfcc:	f010 0303 	ands.w	r3, r0, #3
 800bfd0:	d000      	beq.n	800bfd4 <tcp_receive+0x93c>
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	442b      	add	r3, r5
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	4a1c      	ldr	r2, [pc, #112]	; (800c04c <tcp_receive+0x9b4>)
 800bfda:	8293      	strh	r3, [r2, #20]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bfdc:	6912      	ldr	r2, [r2, #16]
 800bfde:	4413      	add	r3, r2
 800bfe0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bfe2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800bfe4:	440a      	add	r2, r1
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d02f      	beq.n	800c04a <tcp_receive+0x9b2>
 800bfea:	4b1a      	ldr	r3, [pc, #104]	; (800c054 <tcp_receive+0x9bc>)
 800bfec:	f240 627a 	movw	r2, #1658	; 0x67a
 800bff0:	4919      	ldr	r1, [pc, #100]	; (800c058 <tcp_receive+0x9c0>)
 800bff2:	481a      	ldr	r0, [pc, #104]	; (800c05c <tcp_receive+0x9c4>)
 800bff4:	f009 faa0 	bl	8015538 <printf>
 800bff8:	e027      	b.n	800c04a <tcp_receive+0x9b2>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800bffa:	1a5b      	subs	r3, r3, r1
 800bffc:	b299      	uxth	r1, r3
 800bffe:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 800c000:	6868      	ldr	r0, [r5, #4]
 800c002:	f7fd ff9d 	bl	8009f40 <pbuf_realloc>
 800c006:	e7bb      	b.n	800bf80 <tcp_receive+0x8e8>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c008:	682b      	ldr	r3, [r5, #0]
 800c00a:	68db      	ldr	r3, [r3, #12]
 800c00c:	8998      	ldrh	r0, [r3, #12]
 800c00e:	f420 567c 	bic.w	r6, r0, #16128	; 0x3f00
 800c012:	b2b6      	uxth	r6, r6
 800c014:	f7fd fa0a 	bl	800942c <lwip_htons>
 800c018:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800c01c:	f7fd fa06 	bl	800942c <lwip_htons>
 800c020:	682b      	ldr	r3, [r5, #0]
 800c022:	68db      	ldr	r3, [r3, #12]
 800c024:	4306      	orrs	r6, r0
 800c026:	819e      	strh	r6, [r3, #12]
 800c028:	e7bc      	b.n	800bfa4 <tcp_receive+0x90c>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c02a:	4b08      	ldr	r3, [pc, #32]	; (800c04c <tcp_receive+0x9b4>)
 800c02c:	691b      	ldr	r3, [r3, #16]
 800c02e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c030:	1a99      	subs	r1, r3, r2
 800c032:	2900      	cmp	r1, #0
 800c034:	db05      	blt.n	800c042 <tcp_receive+0x9aa>
 800c036:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800c038:	440a      	add	r2, r1
 800c03a:	1a9b      	subs	r3, r3, r2
 800c03c:	3301      	adds	r3, #1
 800c03e:	2b00      	cmp	r3, #0
 800c040:	dd03      	ble.n	800c04a <tcp_receive+0x9b2>
      tcp_ack_now(pcb);
 800c042:	7ea3      	ldrb	r3, [r4, #26]
 800c044:	f043 0302 	orr.w	r3, r3, #2
 800c048:	76a3      	strb	r3, [r4, #26]
}
 800c04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c04c:	20004284 	.word	0x20004284
 800c050:	200042a4 	.word	0x200042a4
 800c054:	0801d524 	.word	0x0801d524
 800c058:	0801d600 	.word	0x0801d600
 800c05c:	0801c994 	.word	0x0801c994

0800c060 <tcp_process>:
{
 800c060:	b570      	push	{r4, r5, r6, lr}
 800c062:	b082      	sub	sp, #8
 800c064:	4604      	mov	r4, r0
  if (flags & TCP_RST) {
 800c066:	4ba5      	ldr	r3, [pc, #660]	; (800c2fc <tcp_process+0x29c>)
 800c068:	7bdb      	ldrb	r3, [r3, #15]
 800c06a:	f013 0f04 	tst.w	r3, #4
 800c06e:	d032      	beq.n	800c0d6 <tcp_process+0x76>
    if (pcb->state == SYN_SENT) {
 800c070:	7d01      	ldrb	r1, [r0, #20]
 800c072:	2902      	cmp	r1, #2
 800c074:	d011      	beq.n	800c09a <tcp_process+0x3a>
      if (seqno == pcb->rcv_nxt) {
 800c076:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800c078:	4ba0      	ldr	r3, [pc, #640]	; (800c2fc <tcp_process+0x29c>)
 800c07a:	691b      	ldr	r3, [r3, #16]
 800c07c:	429a      	cmp	r2, r3
 800c07e:	d015      	beq.n	800c0ac <tcp_process+0x4c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c080:	1a99      	subs	r1, r3, r2
 800c082:	2900      	cmp	r1, #0
 800c084:	db0e      	blt.n	800c0a4 <tcp_process+0x44>
 800c086:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 800c088:	440a      	add	r2, r1
 800c08a:	1a9b      	subs	r3, r3, r2
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	dc09      	bgt.n	800c0a4 <tcp_process+0x44>
        tcp_ack_now(pcb);
 800c090:	7e83      	ldrb	r3, [r0, #26]
 800c092:	f043 0302 	orr.w	r3, r3, #2
 800c096:	7683      	strb	r3, [r0, #26]
    if (acceptable) {
 800c098:	e004      	b.n	800c0a4 <tcp_process+0x44>
      if (ackno == pcb->snd_nxt) {
 800c09a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800c09c:	4b97      	ldr	r3, [pc, #604]	; (800c2fc <tcp_process+0x29c>)
 800c09e:	699b      	ldr	r3, [r3, #24]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d003      	beq.n	800c0ac <tcp_process+0x4c>
      return ERR_OK;
 800c0a4:	2500      	movs	r5, #0
}
 800c0a6:	4628      	mov	r0, r5
 800c0a8:	b002      	add	sp, #8
 800c0aa:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c0ac:	b159      	cbz	r1, 800c0c6 <tcp_process+0x66>
      recv_flags |= TF_RESET;
 800c0ae:	4a93      	ldr	r2, [pc, #588]	; (800c2fc <tcp_process+0x29c>)
 800c0b0:	7b93      	ldrb	r3, [r2, #14]
 800c0b2:	f043 0308 	orr.w	r3, r3, #8
 800c0b6:	7393      	strb	r3, [r2, #14]
      pcb->flags &= ~TF_ACK_DELAY;
 800c0b8:	7ea3      	ldrb	r3, [r4, #26]
 800c0ba:	f023 0301 	bic.w	r3, r3, #1
 800c0be:	76a3      	strb	r3, [r4, #26]
      return ERR_RST;
 800c0c0:	f06f 050d 	mvn.w	r5, #13
 800c0c4:	e7ef      	b.n	800c0a6 <tcp_process+0x46>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c0c6:	4b8e      	ldr	r3, [pc, #568]	; (800c300 <tcp_process+0x2a0>)
 800c0c8:	f240 22e7 	movw	r2, #743	; 0x2e7
 800c0cc:	498d      	ldr	r1, [pc, #564]	; (800c304 <tcp_process+0x2a4>)
 800c0ce:	488e      	ldr	r0, [pc, #568]	; (800c308 <tcp_process+0x2a8>)
 800c0d0:	f009 fa32 	bl	8015538 <printf>
 800c0d4:	e7eb      	b.n	800c0ae <tcp_process+0x4e>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c0d6:	f013 0f02 	tst.w	r3, #2
 800c0da:	d004      	beq.n	800c0e6 <tcp_process+0x86>
 800c0dc:	7d03      	ldrb	r3, [r0, #20]
 800c0de:	3b02      	subs	r3, #2
 800c0e0:	b2db      	uxtb	r3, r3
 800c0e2:	2b01      	cmp	r3, #1
 800c0e4:	d81b      	bhi.n	800c11e <tcp_process+0xbe>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c0e6:	7ea3      	ldrb	r3, [r4, #26]
 800c0e8:	f013 0f10 	tst.w	r3, #16
 800c0ec:	d102      	bne.n	800c0f4 <tcp_process+0x94>
    pcb->tmr = tcp_ticks;
 800c0ee:	4b87      	ldr	r3, [pc, #540]	; (800c30c <tcp_process+0x2ac>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	6223      	str	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	f7ff f968 	bl	800b3d0 <tcp_parseopt>
  switch (pcb->state) {
 800c100:	7d23      	ldrb	r3, [r4, #20]
 800c102:	3b02      	subs	r3, #2
 800c104:	2b07      	cmp	r3, #7
 800c106:	f200 820d 	bhi.w	800c524 <tcp_process+0x4c4>
 800c10a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c10e:	000e      	.short	0x000e
 800c110:	0129009a 	.word	0x0129009a
 800c114:	0190013a 	.word	0x0190013a
 800c118:	01be0129 	.word	0x01be0129
 800c11c:	01f1      	.short	0x01f1
    tcp_ack_now(pcb);
 800c11e:	7e83      	ldrb	r3, [r0, #26]
 800c120:	f043 0302 	orr.w	r3, r3, #2
 800c124:	7683      	strb	r3, [r0, #26]
    return ERR_OK;
 800c126:	2500      	movs	r5, #0
 800c128:	e7bd      	b.n	800c0a6 <tcp_process+0x46>
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c12a:	4b74      	ldr	r3, [pc, #464]	; (800c2fc <tcp_process+0x29c>)
 800c12c:	7bdb      	ldrb	r3, [r3, #15]
 800c12e:	f003 0212 	and.w	r2, r3, #18
 800c132:	2a12      	cmp	r2, #18
 800c134:	d004      	beq.n	800c140 <tcp_process+0xe0>
    else if (flags & TCP_ACK) {
 800c136:	f013 0f10 	tst.w	r3, #16
 800c13a:	d168      	bne.n	800c20e <tcp_process+0x1ae>
  return ERR_OK;
 800c13c:	2500      	movs	r5, #0
 800c13e:	e7b2      	b.n	800c0a6 <tcp_process+0x46>
        && (ackno == pcb->lastack + 1)) {
 800c140:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800c142:	3201      	adds	r2, #1
 800c144:	496d      	ldr	r1, [pc, #436]	; (800c2fc <tcp_process+0x29c>)
 800c146:	6989      	ldr	r1, [r1, #24]
 800c148:	428a      	cmp	r2, r1
 800c14a:	d1f4      	bne.n	800c136 <tcp_process+0xd6>
      pcb->rcv_nxt = seqno + 1;
 800c14c:	4a6b      	ldr	r2, [pc, #428]	; (800c2fc <tcp_process+0x29c>)
 800c14e:	6913      	ldr	r3, [r2, #16]
 800c150:	1c58      	adds	r0, r3, #1
 800c152:	6260      	str	r0, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c154:	62e0      	str	r0, [r4, #44]	; 0x2c
      pcb->lastack = ackno;
 800c156:	6461      	str	r1, [r4, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800c158:	6892      	ldr	r2, [r2, #8]
 800c15a:	89d2      	ldrh	r2, [r2, #14]
 800c15c:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800c160:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c164:	3b01      	subs	r3, #1
 800c166:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800c168:	2304      	movs	r3, #4
 800c16a:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c16c:	18e1      	adds	r1, r4, r3
 800c16e:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800c170:	f7ff f846 	bl	800b200 <tcp_eff_send_mss_impl>
 800c174:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c176:	0043      	lsls	r3, r0, #1
 800c178:	f241 121c 	movw	r2, #4380	; 0x111c
 800c17c:	4293      	cmp	r3, r2
 800c17e:	bf38      	it	cc
 800c180:	4613      	movcc	r3, r2
 800c182:	0080      	lsls	r0, r0, #2
 800c184:	4298      	cmp	r0, r3
 800c186:	bf28      	it	cs
 800c188:	4618      	movcs	r0, r3
 800c18a:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c18e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800c192:	b31b      	cbz	r3, 800c1dc <tcp_process+0x17c>
      --pcb->snd_queuelen;
 800c194:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800c198:	3b01      	subs	r3, #1
 800c19a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 800c19e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
      if (rseg == NULL) {
 800c1a0:	b325      	cbz	r5, 800c1ec <tcp_process+0x18c>
        pcb->unacked = rseg->next;
 800c1a2:	682b      	ldr	r3, [r5, #0]
 800c1a4:	66e3      	str	r3, [r4, #108]	; 0x6c
      tcp_seg_free(rseg);
 800c1a6:	4628      	mov	r0, r5
 800c1a8:	f7fe fa5a 	bl	800a660 <tcp_seg_free>
      if (pcb->unacked == NULL) {
 800c1ac:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c1ae:	b353      	cbz	r3, 800c206 <tcp_process+0x1a6>
        pcb->rtime = 0;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 800c1b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c1b8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800c1bc:	b143      	cbz	r3, 800c1d0 <tcp_process+0x170>
 800c1be:	2200      	movs	r2, #0
 800c1c0:	4621      	mov	r1, r4
 800c1c2:	6920      	ldr	r0, [r4, #16]
 800c1c4:	4798      	blx	r3
 800c1c6:	4605      	mov	r5, r0
      if (err == ERR_ABRT) {
 800c1c8:	f110 0f0d 	cmn.w	r0, #13
 800c1cc:	f43f af6b 	beq.w	800c0a6 <tcp_process+0x46>
      tcp_ack_now(pcb);
 800c1d0:	7ea3      	ldrb	r3, [r4, #26]
 800c1d2:	f043 0302 	orr.w	r3, r3, #2
 800c1d6:	76a3      	strb	r3, [r4, #26]
  return ERR_OK;
 800c1d8:	2500      	movs	r5, #0
      tcp_ack_now(pcb);
 800c1da:	e764      	b.n	800c0a6 <tcp_process+0x46>
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c1dc:	4b48      	ldr	r3, [pc, #288]	; (800c300 <tcp_process+0x2a0>)
 800c1de:	f240 321a 	movw	r2, #794	; 0x31a
 800c1e2:	494b      	ldr	r1, [pc, #300]	; (800c310 <tcp_process+0x2b0>)
 800c1e4:	4848      	ldr	r0, [pc, #288]	; (800c308 <tcp_process+0x2a8>)
 800c1e6:	f009 f9a7 	bl	8015538 <printf>
 800c1ea:	e7d3      	b.n	800c194 <tcp_process+0x134>
        rseg = pcb->unsent;
 800c1ec:	6ea5      	ldr	r5, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800c1ee:	b115      	cbz	r5, 800c1f6 <tcp_process+0x196>
        pcb->unsent = rseg->next;
 800c1f0:	682b      	ldr	r3, [r5, #0]
 800c1f2:	66a3      	str	r3, [r4, #104]	; 0x68
 800c1f4:	e7d7      	b.n	800c1a6 <tcp_process+0x146>
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800c1f6:	4b42      	ldr	r3, [pc, #264]	; (800c300 <tcp_process+0x2a0>)
 800c1f8:	f240 3222 	movw	r2, #802	; 0x322
 800c1fc:	4945      	ldr	r1, [pc, #276]	; (800c314 <tcp_process+0x2b4>)
 800c1fe:	4842      	ldr	r0, [pc, #264]	; (800c308 <tcp_process+0x2a8>)
 800c200:	f009 f99a 	bl	8015538 <printf>
 800c204:	e7f4      	b.n	800c1f0 <tcp_process+0x190>
        pcb->rtime = -1;
 800c206:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c20a:	8623      	strh	r3, [r4, #48]	; 0x30
 800c20c:	e7d4      	b.n	800c1b8 <tcp_process+0x158>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c20e:	483b      	ldr	r0, [pc, #236]	; (800c2fc <tcp_process+0x29c>)
 800c210:	6882      	ldr	r2, [r0, #8]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c212:	4b41      	ldr	r3, [pc, #260]	; (800c318 <tcp_process+0x2b8>)
 800c214:	8a85      	ldrh	r5, [r0, #20]
 800c216:	6901      	ldr	r1, [r0, #16]
 800c218:	8816      	ldrh	r6, [r2, #0]
 800c21a:	9601      	str	r6, [sp, #4]
 800c21c:	8852      	ldrh	r2, [r2, #2]
 800c21e:	9200      	str	r2, [sp, #0]
 800c220:	1d1a      	adds	r2, r3, #4
 800c222:	4429      	add	r1, r5
 800c224:	6980      	ldr	r0, [r0, #24]
 800c226:	f001 fa8d 	bl	800d744 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c22a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800c22e:	2b05      	cmp	r3, #5
 800c230:	d901      	bls.n	800c236 <tcp_process+0x1d6>
  return ERR_OK;
 800c232:	2500      	movs	r5, #0
 800c234:	e737      	b.n	800c0a6 <tcp_process+0x46>
        pcb->rtime = 0;
 800c236:	2500      	movs	r5, #0
 800c238:	8625      	strh	r5, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800c23a:	4620      	mov	r0, r4
 800c23c:	f001 fad8 	bl	800d7f0 <tcp_rexmit_rto>
 800c240:	e731      	b.n	800c0a6 <tcp_process+0x46>
    if (flags & TCP_ACK) {
 800c242:	4b2e      	ldr	r3, [pc, #184]	; (800c2fc <tcp_process+0x29c>)
 800c244:	7bdb      	ldrb	r3, [r3, #15]
 800c246:	f013 0f10 	tst.w	r3, #16
 800c24a:	d078      	beq.n	800c33e <tcp_process+0x2de>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800c24c:	4b2b      	ldr	r3, [pc, #172]	; (800c2fc <tcp_process+0x29c>)
 800c24e:	6998      	ldr	r0, [r3, #24]
 800c250:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c252:	1ac3      	subs	r3, r0, r3
 800c254:	2b01      	cmp	r3, #1
 800c256:	d403      	bmi.n	800c260 <tcp_process+0x200>
 800c258:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c25a:	1ac3      	subs	r3, r0, r3
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	dd0e      	ble.n	800c27e <tcp_process+0x21e>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c260:	4c26      	ldr	r4, [pc, #152]	; (800c2fc <tcp_process+0x29c>)
 800c262:	68a2      	ldr	r2, [r4, #8]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c264:	4b2c      	ldr	r3, [pc, #176]	; (800c318 <tcp_process+0x2b8>)
 800c266:	8aa5      	ldrh	r5, [r4, #20]
 800c268:	6921      	ldr	r1, [r4, #16]
 800c26a:	8814      	ldrh	r4, [r2, #0]
 800c26c:	9401      	str	r4, [sp, #4]
 800c26e:	8852      	ldrh	r2, [r2, #2]
 800c270:	9200      	str	r2, [sp, #0]
 800c272:	1d1a      	adds	r2, r3, #4
 800c274:	4429      	add	r1, r5
 800c276:	f001 fa65 	bl	800d744 <tcp_rst>
  return ERR_OK;
 800c27a:	2500      	movs	r5, #0
 800c27c:	e713      	b.n	800c0a6 <tcp_process+0x46>
        pcb->state = ESTABLISHED;
 800c27e:	2304      	movs	r3, #4
 800c280:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800c282:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c284:	b113      	cbz	r3, 800c28c <tcp_process+0x22c>
 800c286:	699b      	ldr	r3, [r3, #24]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d02f      	beq.n	800c2ec <tcp_process+0x28c>
        if (pcb->listener == NULL) {
 800c28c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d046      	beq.n	800c320 <tcp_process+0x2c0>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c292:	699b      	ldr	r3, [r3, #24]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d04b      	beq.n	800c330 <tcp_process+0x2d0>
 800c298:	2200      	movs	r2, #0
 800c29a:	4621      	mov	r1, r4
 800c29c:	6920      	ldr	r0, [r4, #16]
 800c29e:	4798      	blx	r3
        if (err != ERR_OK) {
 800c2a0:	4605      	mov	r5, r0
 800c2a2:	2800      	cmp	r0, #0
 800c2a4:	d13e      	bne.n	800c324 <tcp_process+0x2c4>
        tcp_receive(pcb);
 800c2a6:	4620      	mov	r0, r4
 800c2a8:	f7ff f9f6 	bl	800b698 <tcp_receive>
        if (recv_acked != 0) {
 800c2ac:	4b13      	ldr	r3, [pc, #76]	; (800c2fc <tcp_process+0x29c>)
 800c2ae:	8b9b      	ldrh	r3, [r3, #28]
 800c2b0:	b113      	cbz	r3, 800c2b8 <tcp_process+0x258>
          recv_acked--;
 800c2b2:	3b01      	subs	r3, #1
 800c2b4:	4a11      	ldr	r2, [pc, #68]	; (800c2fc <tcp_process+0x29c>)
 800c2b6:	8393      	strh	r3, [r2, #28]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c2b8:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 800c2ba:	0053      	lsls	r3, r2, #1
 800c2bc:	f241 111c 	movw	r1, #4380	; 0x111c
 800c2c0:	428b      	cmp	r3, r1
 800c2c2:	bf38      	it	cc
 800c2c4:	460b      	movcc	r3, r1
 800c2c6:	0092      	lsls	r2, r2, #2
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	bf28      	it	cs
 800c2cc:	4613      	movcs	r3, r2
 800c2ce:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        if (recv_flags & TF_GOT_FIN) {
 800c2d2:	4b0a      	ldr	r3, [pc, #40]	; (800c2fc <tcp_process+0x29c>)
 800c2d4:	7b9b      	ldrb	r3, [r3, #14]
 800c2d6:	f013 0f20 	tst.w	r3, #32
 800c2da:	f43f aee4 	beq.w	800c0a6 <tcp_process+0x46>
          tcp_ack_now(pcb);
 800c2de:	7ea3      	ldrb	r3, [r4, #26]
 800c2e0:	f043 0302 	orr.w	r3, r3, #2
 800c2e4:	76a3      	strb	r3, [r4, #26]
          pcb->state = CLOSE_WAIT;
 800c2e6:	2307      	movs	r3, #7
 800c2e8:	7523      	strb	r3, [r4, #20]
 800c2ea:	e6dc      	b.n	800c0a6 <tcp_process+0x46>
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800c2ec:	4b04      	ldr	r3, [pc, #16]	; (800c300 <tcp_process+0x2a0>)
 800c2ee:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c2f2:	490a      	ldr	r1, [pc, #40]	; (800c31c <tcp_process+0x2bc>)
 800c2f4:	4804      	ldr	r0, [pc, #16]	; (800c308 <tcp_process+0x2a8>)
 800c2f6:	f009 f91f 	bl	8015538 <printf>
 800c2fa:	e7c7      	b.n	800c28c <tcp_process+0x22c>
 800c2fc:	20004284 	.word	0x20004284
 800c300:	0801d524 	.word	0x0801d524
 800c304:	0801d6bc 	.word	0x0801d6bc
 800c308:	0801c994 	.word	0x0801c994
 800c30c:	20009714 	.word	0x20009714
 800c310:	0801d6dc 	.word	0x0801d6dc
 800c314:	0801d6f4 	.word	0x0801d6f4
 800c318:	200061f0 	.word	0x200061f0
 800c31c:	0801d708 	.word	0x0801d708
          err = ERR_VAL;
 800c320:	f06f 0505 	mvn.w	r5, #5
          if (err != ERR_ABRT) {
 800c324:	f115 0f0d 	cmn.w	r5, #13
 800c328:	d105      	bne.n	800c336 <tcp_process+0x2d6>
          return ERR_ABRT;
 800c32a:	f06f 050c 	mvn.w	r5, #12
 800c32e:	e6ba      	b.n	800c0a6 <tcp_process+0x46>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c330:	f06f 050f 	mvn.w	r5, #15
 800c334:	e7f6      	b.n	800c324 <tcp_process+0x2c4>
            tcp_abort(pcb);
 800c336:	4620      	mov	r0, r4
 800c338:	f7fe fe6a 	bl	800b010 <tcp_abort>
 800c33c:	e7f5      	b.n	800c32a <tcp_process+0x2ca>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c33e:	f013 0f02 	tst.w	r3, #2
 800c342:	f000 80f1 	beq.w	800c528 <tcp_process+0x4c8>
 800c346:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c348:	3b01      	subs	r3, #1
 800c34a:	4a7c      	ldr	r2, [pc, #496]	; (800c53c <tcp_process+0x4dc>)
 800c34c:	6912      	ldr	r2, [r2, #16]
 800c34e:	4293      	cmp	r3, r2
 800c350:	d001      	beq.n	800c356 <tcp_process+0x2f6>
  return ERR_OK;
 800c352:	2500      	movs	r5, #0
 800c354:	e6a7      	b.n	800c0a6 <tcp_process+0x46>
      tcp_rexmit(pcb);
 800c356:	4620      	mov	r0, r4
 800c358:	f001 fa63 	bl	800d822 <tcp_rexmit>
  return ERR_OK;
 800c35c:	2500      	movs	r5, #0
 800c35e:	e6a2      	b.n	800c0a6 <tcp_process+0x46>
    tcp_receive(pcb);
 800c360:	4620      	mov	r0, r4
 800c362:	f7ff f999 	bl	800b698 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c366:	4b75      	ldr	r3, [pc, #468]	; (800c53c <tcp_process+0x4dc>)
 800c368:	7b9b      	ldrb	r3, [r3, #14]
 800c36a:	f013 0f20 	tst.w	r3, #32
 800c36e:	f000 80dd 	beq.w	800c52c <tcp_process+0x4cc>
      tcp_ack_now(pcb);
 800c372:	7ea3      	ldrb	r3, [r4, #26]
 800c374:	f043 0302 	orr.w	r3, r3, #2
 800c378:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 800c37a:	2307      	movs	r3, #7
 800c37c:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 800c37e:	2500      	movs	r5, #0
 800c380:	e691      	b.n	800c0a6 <tcp_process+0x46>
    tcp_receive(pcb);
 800c382:	4620      	mov	r0, r4
 800c384:	f7ff f988 	bl	800b698 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800c388:	4b6c      	ldr	r3, [pc, #432]	; (800c53c <tcp_process+0x4dc>)
 800c38a:	7b9b      	ldrb	r3, [r3, #14]
 800c38c:	f013 0f20 	tst.w	r3, #32
 800c390:	d038      	beq.n	800c404 <tcp_process+0x3a4>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c392:	4b6a      	ldr	r3, [pc, #424]	; (800c53c <tcp_process+0x4dc>)
 800c394:	7bdb      	ldrb	r3, [r3, #15]
 800c396:	f013 0f10 	tst.w	r3, #16
 800c39a:	d004      	beq.n	800c3a6 <tcp_process+0x346>
 800c39c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800c39e:	4b67      	ldr	r3, [pc, #412]	; (800c53c <tcp_process+0x4dc>)
 800c3a0:	699b      	ldr	r3, [r3, #24]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d007      	beq.n	800c3b6 <tcp_process+0x356>
        tcp_ack_now(pcb);
 800c3a6:	7ea3      	ldrb	r3, [r4, #26]
 800c3a8:	f043 0302 	orr.w	r3, r3, #2
 800c3ac:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 800c3ae:	2308      	movs	r3, #8
 800c3b0:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 800c3b2:	2500      	movs	r5, #0
 800c3b4:	e677      	b.n	800c0a6 <tcp_process+0x46>
          pcb->unsent == NULL) {
 800c3b6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d1f4      	bne.n	800c3a6 <tcp_process+0x346>
        tcp_ack_now(pcb);
 800c3bc:	7ea3      	ldrb	r3, [r4, #26]
 800c3be:	f043 0302 	orr.w	r3, r3, #2
 800c3c2:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	f7fe f9df 	bl	800a788 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c3ca:	4b5d      	ldr	r3, [pc, #372]	; (800c540 <tcp_process+0x4e0>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	42a3      	cmp	r3, r4
 800c3d0:	d005      	beq.n	800c3de <tcp_process+0x37e>
 800c3d2:	b153      	cbz	r3, 800c3ea <tcp_process+0x38a>
 800c3d4:	68da      	ldr	r2, [r3, #12]
 800c3d6:	42a2      	cmp	r2, r4
 800c3d8:	d005      	beq.n	800c3e6 <tcp_process+0x386>
 800c3da:	4613      	mov	r3, r2
 800c3dc:	e7f9      	b.n	800c3d2 <tcp_process+0x372>
 800c3de:	68da      	ldr	r2, [r3, #12]
 800c3e0:	4b57      	ldr	r3, [pc, #348]	; (800c540 <tcp_process+0x4e0>)
 800c3e2:	601a      	str	r2, [r3, #0]
 800c3e4:	e001      	b.n	800c3ea <tcp_process+0x38a>
 800c3e6:	68e2      	ldr	r2, [r4, #12]
 800c3e8:	60da      	str	r2, [r3, #12]
 800c3ea:	4b56      	ldr	r3, [pc, #344]	; (800c544 <tcp_process+0x4e4>)
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c3f0:	230a      	movs	r3, #10
 800c3f2:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c3f4:	4b54      	ldr	r3, [pc, #336]	; (800c548 <tcp_process+0x4e8>)
 800c3f6:	681a      	ldr	r2, [r3, #0]
 800c3f8:	60e2      	str	r2, [r4, #12]
 800c3fa:	601c      	str	r4, [r3, #0]
 800c3fc:	f001 fb52 	bl	800daa4 <tcp_timer_needed>
  return ERR_OK;
 800c400:	2500      	movs	r5, #0
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c402:	e650      	b.n	800c0a6 <tcp_process+0x46>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c404:	4b4d      	ldr	r3, [pc, #308]	; (800c53c <tcp_process+0x4dc>)
 800c406:	7bdb      	ldrb	r3, [r3, #15]
 800c408:	f013 0f10 	tst.w	r3, #16
 800c40c:	f000 8090 	beq.w	800c530 <tcp_process+0x4d0>
 800c410:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800c412:	4b4a      	ldr	r3, [pc, #296]	; (800c53c <tcp_process+0x4dc>)
 800c414:	699b      	ldr	r3, [r3, #24]
 800c416:	429a      	cmp	r2, r3
 800c418:	d001      	beq.n	800c41e <tcp_process+0x3be>
  return ERR_OK;
 800c41a:	2500      	movs	r5, #0
 800c41c:	e643      	b.n	800c0a6 <tcp_process+0x46>
               pcb->unsent == NULL) {
 800c41e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c420:	b10b      	cbz	r3, 800c426 <tcp_process+0x3c6>
  return ERR_OK;
 800c422:	2500      	movs	r5, #0
 800c424:	e63f      	b.n	800c0a6 <tcp_process+0x46>
      pcb->state = FIN_WAIT_2;
 800c426:	2306      	movs	r3, #6
 800c428:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 800c42a:	2500      	movs	r5, #0
 800c42c:	e63b      	b.n	800c0a6 <tcp_process+0x46>
    tcp_receive(pcb);
 800c42e:	4620      	mov	r0, r4
 800c430:	f7ff f932 	bl	800b698 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800c434:	4b41      	ldr	r3, [pc, #260]	; (800c53c <tcp_process+0x4dc>)
 800c436:	7b9b      	ldrb	r3, [r3, #14]
 800c438:	f013 0f20 	tst.w	r3, #32
 800c43c:	d101      	bne.n	800c442 <tcp_process+0x3e2>
  return ERR_OK;
 800c43e:	2500      	movs	r5, #0
 800c440:	e631      	b.n	800c0a6 <tcp_process+0x46>
      tcp_ack_now(pcb);
 800c442:	7ea3      	ldrb	r3, [r4, #26]
 800c444:	f043 0302 	orr.w	r3, r3, #2
 800c448:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 800c44a:	4620      	mov	r0, r4
 800c44c:	f7fe f99c 	bl	800a788 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c450:	4b3b      	ldr	r3, [pc, #236]	; (800c540 <tcp_process+0x4e0>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	42a3      	cmp	r3, r4
 800c456:	d005      	beq.n	800c464 <tcp_process+0x404>
 800c458:	b153      	cbz	r3, 800c470 <tcp_process+0x410>
 800c45a:	68da      	ldr	r2, [r3, #12]
 800c45c:	42a2      	cmp	r2, r4
 800c45e:	d005      	beq.n	800c46c <tcp_process+0x40c>
 800c460:	4613      	mov	r3, r2
 800c462:	e7f9      	b.n	800c458 <tcp_process+0x3f8>
 800c464:	68da      	ldr	r2, [r3, #12]
 800c466:	4b36      	ldr	r3, [pc, #216]	; (800c540 <tcp_process+0x4e0>)
 800c468:	601a      	str	r2, [r3, #0]
 800c46a:	e001      	b.n	800c470 <tcp_process+0x410>
 800c46c:	68e2      	ldr	r2, [r4, #12]
 800c46e:	60da      	str	r2, [r3, #12]
 800c470:	4b34      	ldr	r3, [pc, #208]	; (800c544 <tcp_process+0x4e4>)
 800c472:	2201      	movs	r2, #1
 800c474:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800c476:	230a      	movs	r3, #10
 800c478:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800c47a:	4b33      	ldr	r3, [pc, #204]	; (800c548 <tcp_process+0x4e8>)
 800c47c:	681a      	ldr	r2, [r3, #0]
 800c47e:	60e2      	str	r2, [r4, #12]
 800c480:	601c      	str	r4, [r3, #0]
 800c482:	f001 fb0f 	bl	800daa4 <tcp_timer_needed>
  return ERR_OK;
 800c486:	2500      	movs	r5, #0
 800c488:	e60d      	b.n	800c0a6 <tcp_process+0x46>
    tcp_receive(pcb);
 800c48a:	4620      	mov	r0, r4
 800c48c:	f7ff f904 	bl	800b698 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c490:	4b2a      	ldr	r3, [pc, #168]	; (800c53c <tcp_process+0x4dc>)
 800c492:	7bdb      	ldrb	r3, [r3, #15]
 800c494:	f013 0f10 	tst.w	r3, #16
 800c498:	d04c      	beq.n	800c534 <tcp_process+0x4d4>
 800c49a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800c49c:	4b27      	ldr	r3, [pc, #156]	; (800c53c <tcp_process+0x4dc>)
 800c49e:	699b      	ldr	r3, [r3, #24]
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d001      	beq.n	800c4a8 <tcp_process+0x448>
  return ERR_OK;
 800c4a4:	2500      	movs	r5, #0
 800c4a6:	e5fe      	b.n	800c0a6 <tcp_process+0x46>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c4a8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800c4aa:	b10b      	cbz	r3, 800c4b0 <tcp_process+0x450>
  return ERR_OK;
 800c4ac:	2500      	movs	r5, #0
 800c4ae:	e5fa      	b.n	800c0a6 <tcp_process+0x46>
      tcp_pcb_purge(pcb);
 800c4b0:	4620      	mov	r0, r4
 800c4b2:	f7fe f969 	bl	800a788 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c4b6:	4b22      	ldr	r3, [pc, #136]	; (800c540 <tcp_process+0x4e0>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	42a3      	cmp	r3, r4
 800c4bc:	d005      	beq.n	800c4ca <tcp_process+0x46a>
 800c4be:	b153      	cbz	r3, 800c4d6 <tcp_process+0x476>
 800c4c0:	68da      	ldr	r2, [r3, #12]
 800c4c2:	42a2      	cmp	r2, r4
 800c4c4:	d005      	beq.n	800c4d2 <tcp_process+0x472>
 800c4c6:	4613      	mov	r3, r2
 800c4c8:	e7f9      	b.n	800c4be <tcp_process+0x45e>
 800c4ca:	68da      	ldr	r2, [r3, #12]
 800c4cc:	4b1c      	ldr	r3, [pc, #112]	; (800c540 <tcp_process+0x4e0>)
 800c4ce:	601a      	str	r2, [r3, #0]
 800c4d0:	e001      	b.n	800c4d6 <tcp_process+0x476>
 800c4d2:	68e2      	ldr	r2, [r4, #12]
 800c4d4:	60da      	str	r2, [r3, #12]
 800c4d6:	4b1b      	ldr	r3, [pc, #108]	; (800c544 <tcp_process+0x4e4>)
 800c4d8:	2201      	movs	r2, #1
 800c4da:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800c4dc:	230a      	movs	r3, #10
 800c4de:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800c4e0:	4b19      	ldr	r3, [pc, #100]	; (800c548 <tcp_process+0x4e8>)
 800c4e2:	681a      	ldr	r2, [r3, #0]
 800c4e4:	60e2      	str	r2, [r4, #12]
 800c4e6:	601c      	str	r4, [r3, #0]
 800c4e8:	f001 fadc 	bl	800daa4 <tcp_timer_needed>
  return ERR_OK;
 800c4ec:	2500      	movs	r5, #0
 800c4ee:	e5da      	b.n	800c0a6 <tcp_process+0x46>
    tcp_receive(pcb);
 800c4f0:	4620      	mov	r0, r4
 800c4f2:	f7ff f8d1 	bl	800b698 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c4f6:	4b11      	ldr	r3, [pc, #68]	; (800c53c <tcp_process+0x4dc>)
 800c4f8:	7bdb      	ldrb	r3, [r3, #15]
 800c4fa:	f013 0f10 	tst.w	r3, #16
 800c4fe:	d01b      	beq.n	800c538 <tcp_process+0x4d8>
 800c500:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800c502:	4b0e      	ldr	r3, [pc, #56]	; (800c53c <tcp_process+0x4dc>)
 800c504:	699b      	ldr	r3, [r3, #24]
 800c506:	429a      	cmp	r2, r3
 800c508:	d001      	beq.n	800c50e <tcp_process+0x4ae>
  return ERR_OK;
 800c50a:	2500      	movs	r5, #0
 800c50c:	e5cb      	b.n	800c0a6 <tcp_process+0x46>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c50e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800c510:	b10b      	cbz	r3, 800c516 <tcp_process+0x4b6>
  return ERR_OK;
 800c512:	2500      	movs	r5, #0
 800c514:	e5c7      	b.n	800c0a6 <tcp_process+0x46>
      recv_flags |= TF_CLOSED;
 800c516:	4a09      	ldr	r2, [pc, #36]	; (800c53c <tcp_process+0x4dc>)
 800c518:	7b93      	ldrb	r3, [r2, #14]
 800c51a:	f043 0310 	orr.w	r3, r3, #16
 800c51e:	7393      	strb	r3, [r2, #14]
  return ERR_OK;
 800c520:	2500      	movs	r5, #0
 800c522:	e5c0      	b.n	800c0a6 <tcp_process+0x46>
  switch (pcb->state) {
 800c524:	2500      	movs	r5, #0
 800c526:	e5be      	b.n	800c0a6 <tcp_process+0x46>
  return ERR_OK;
 800c528:	2500      	movs	r5, #0
 800c52a:	e5bc      	b.n	800c0a6 <tcp_process+0x46>
 800c52c:	2500      	movs	r5, #0
 800c52e:	e5ba      	b.n	800c0a6 <tcp_process+0x46>
 800c530:	2500      	movs	r5, #0
 800c532:	e5b8      	b.n	800c0a6 <tcp_process+0x46>
 800c534:	2500      	movs	r5, #0
 800c536:	e5b6      	b.n	800c0a6 <tcp_process+0x46>
 800c538:	2500      	movs	r5, #0
 800c53a:	e5b4      	b.n	800c0a6 <tcp_process+0x46>
 800c53c:	20004284 	.word	0x20004284
 800c540:	20009710 	.word	0x20009710
 800c544:	2000970c 	.word	0x2000970c
 800c548:	20009720 	.word	0x20009720

0800c54c <tcp_input>:
{
 800c54c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c54e:	b083      	sub	sp, #12
 800c550:	4605      	mov	r5, r0
  tcphdr = (struct tcp_hdr *)p->payload;
 800c552:	6842      	ldr	r2, [r0, #4]
 800c554:	4b62      	ldr	r3, [pc, #392]	; (800c6e0 <tcp_input+0x194>)
 800c556:	609a      	str	r2, [r3, #8]
  if (p->len < TCP_HLEN) {
 800c558:	8943      	ldrh	r3, [r0, #10]
 800c55a:	2b13      	cmp	r3, #19
 800c55c:	d804      	bhi.n	800c568 <tcp_input+0x1c>
  pbuf_free(p);
 800c55e:	4628      	mov	r0, r5
 800c560:	f7fd fb9a 	bl	8009c98 <pbuf_free>
}
 800c564:	b003      	add	sp, #12
 800c566:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c568:	4b5e      	ldr	r3, [pc, #376]	; (800c6e4 <tcp_input+0x198>)
 800c56a:	6819      	ldr	r1, [r3, #0]
 800c56c:	6958      	ldr	r0, [r3, #20]
 800c56e:	f002 fb3a 	bl	800ebe6 <ip4_addr_isbroadcast_u32>
 800c572:	2800      	cmp	r0, #0
 800c574:	d1f3      	bne.n	800c55e <tcp_input+0x12>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c576:	4b5b      	ldr	r3, [pc, #364]	; (800c6e4 <tcp_input+0x198>)
 800c578:	695b      	ldr	r3, [r3, #20]
 800c57a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c57e:	2be0      	cmp	r3, #224	; 0xe0
 800c580:	d0ed      	beq.n	800c55e <tcp_input+0x12>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800c582:	4b57      	ldr	r3, [pc, #348]	; (800c6e0 <tcp_input+0x194>)
 800c584:	689b      	ldr	r3, [r3, #8]
 800c586:	8998      	ldrh	r0, [r3, #12]
 800c588:	f7fc ff50 	bl	800942c <lwip_htons>
 800c58c:	f3c0 310f 	ubfx	r1, r0, #12, #16
 800c590:	0089      	lsls	r1, r1, #2
 800c592:	b2c9      	uxtb	r1, r1
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c594:	2913      	cmp	r1, #19
 800c596:	d9e2      	bls.n	800c55e <tcp_input+0x12>
 800c598:	b289      	uxth	r1, r1
 800c59a:	892b      	ldrh	r3, [r5, #8]
 800c59c:	4299      	cmp	r1, r3
 800c59e:	d8de      	bhi.n	800c55e <tcp_input+0x12>
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800c5a0:	f1a1 0314 	sub.w	r3, r1, #20
 800c5a4:	b29b      	uxth	r3, r3
 800c5a6:	4a4e      	ldr	r2, [pc, #312]	; (800c6e0 <tcp_input+0x194>)
 800c5a8:	8193      	strh	r3, [r2, #12]
  tcphdr_opt2 = NULL;
 800c5aa:	2000      	movs	r0, #0
 800c5ac:	6010      	str	r0, [r2, #0]
  if (p->len >= hdrlen_bytes) {
 800c5ae:	896a      	ldrh	r2, [r5, #10]
 800c5b0:	4291      	cmp	r1, r2
 800c5b2:	d930      	bls.n	800c616 <tcp_input+0xca>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c5b4:	682b      	ldr	r3, [r5, #0]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d061      	beq.n	800c67e <tcp_input+0x132>
    pbuf_header(p, -TCP_HLEN);
 800c5ba:	f06f 0113 	mvn.w	r1, #19
 800c5be:	4628      	mov	r0, r5
 800c5c0:	f7fd fb60 	bl	8009c84 <pbuf_header>
    tcphdr_opt1len = p->len;
 800c5c4:	896c      	ldrh	r4, [r5, #10]
 800c5c6:	4b46      	ldr	r3, [pc, #280]	; (800c6e0 <tcp_input+0x194>)
 800c5c8:	80dc      	strh	r4, [r3, #6]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800c5ca:	899f      	ldrh	r7, [r3, #12]
 800c5cc:	1b3e      	subs	r6, r7, r4
 800c5ce:	b2b6      	uxth	r6, r6
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800c5d0:	4261      	negs	r1, r4
 800c5d2:	b209      	sxth	r1, r1
 800c5d4:	4628      	mov	r0, r5
 800c5d6:	f7fd fb55 	bl	8009c84 <pbuf_header>
    if (opt2len > p->next->len) {
 800c5da:	6828      	ldr	r0, [r5, #0]
 800c5dc:	8943      	ldrh	r3, [r0, #10]
 800c5de:	42b3      	cmp	r3, r6
 800c5e0:	d3bd      	bcc.n	800c55e <tcp_input+0x12>
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800c5e2:	6842      	ldr	r2, [r0, #4]
 800c5e4:	4b3e      	ldr	r3, [pc, #248]	; (800c6e0 <tcp_input+0x194>)
 800c5e6:	601a      	str	r2, [r3, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 800c5e8:	1be1      	subs	r1, r4, r7
 800c5ea:	b28c      	uxth	r4, r1
 800c5ec:	b209      	sxth	r1, r1
 800c5ee:	f7fd fb49 	bl	8009c84 <pbuf_header>
    p->tot_len -= opt2len;
 800c5f2:	892b      	ldrh	r3, [r5, #8]
 800c5f4:	441c      	add	r4, r3
 800c5f6:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c5f8:	896b      	ldrh	r3, [r5, #10]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d146      	bne.n	800c68c <tcp_input+0x140>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c5fe:	892a      	ldrh	r2, [r5, #8]
 800c600:	682b      	ldr	r3, [r5, #0]
 800c602:	891b      	ldrh	r3, [r3, #8]
 800c604:	429a      	cmp	r2, r3
 800c606:	d00c      	beq.n	800c622 <tcp_input+0xd6>
 800c608:	4b37      	ldr	r3, [pc, #220]	; (800c6e8 <tcp_input+0x19c>)
 800c60a:	22d0      	movs	r2, #208	; 0xd0
 800c60c:	4937      	ldr	r1, [pc, #220]	; (800c6ec <tcp_input+0x1a0>)
 800c60e:	4838      	ldr	r0, [pc, #224]	; (800c6f0 <tcp_input+0x1a4>)
 800c610:	f008 ff92 	bl	8015538 <printf>
 800c614:	e005      	b.n	800c622 <tcp_input+0xd6>
    tcphdr_opt1len = tcphdr_optlen;
 800c616:	4a32      	ldr	r2, [pc, #200]	; (800c6e0 <tcp_input+0x194>)
 800c618:	80d3      	strh	r3, [r2, #6]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800c61a:	4249      	negs	r1, r1
 800c61c:	4628      	mov	r0, r5
 800c61e:	f7fd fb31 	bl	8009c84 <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c622:	4c2f      	ldr	r4, [pc, #188]	; (800c6e0 <tcp_input+0x194>)
 800c624:	68a6      	ldr	r6, [r4, #8]
 800c626:	8830      	ldrh	r0, [r6, #0]
 800c628:	f7fc ff00 	bl	800942c <lwip_htons>
 800c62c:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c62e:	68a6      	ldr	r6, [r4, #8]
 800c630:	8870      	ldrh	r0, [r6, #2]
 800c632:	f7fc fefb 	bl	800942c <lwip_htons>
 800c636:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c638:	68a6      	ldr	r6, [r4, #8]
 800c63a:	6870      	ldr	r0, [r6, #4]
 800c63c:	f7fc fef9 	bl	8009432 <lwip_htonl>
 800c640:	6070      	str	r0, [r6, #4]
 800c642:	6120      	str	r0, [r4, #16]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c644:	68a6      	ldr	r6, [r4, #8]
 800c646:	68b0      	ldr	r0, [r6, #8]
 800c648:	f7fc fef3 	bl	8009432 <lwip_htonl>
 800c64c:	60b0      	str	r0, [r6, #8]
 800c64e:	61a0      	str	r0, [r4, #24]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c650:	68a6      	ldr	r6, [r4, #8]
 800c652:	89f0      	ldrh	r0, [r6, #14]
 800c654:	f7fc feea 	bl	800942c <lwip_htons>
 800c658:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 800c65a:	68a3      	ldr	r3, [r4, #8]
 800c65c:	8998      	ldrh	r0, [r3, #12]
 800c65e:	f7fc fee5 	bl	800942c <lwip_htons>
 800c662:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 800c666:	73e3      	strb	r3, [r4, #15]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800c668:	892a      	ldrh	r2, [r5, #8]
 800c66a:	f013 0303 	ands.w	r3, r3, #3
 800c66e:	bf18      	it	ne
 800c670:	2301      	movne	r3, #1
 800c672:	4413      	add	r3, r2
 800c674:	82a3      	strh	r3, [r4, #20]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c676:	4b1f      	ldr	r3, [pc, #124]	; (800c6f4 <tcp_input+0x1a8>)
 800c678:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 800c67a:	2600      	movs	r6, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c67c:	e04c      	b.n	800c718 <tcp_input+0x1cc>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c67e:	4b1a      	ldr	r3, [pc, #104]	; (800c6e8 <tcp_input+0x19c>)
 800c680:	22b2      	movs	r2, #178	; 0xb2
 800c682:	491d      	ldr	r1, [pc, #116]	; (800c6f8 <tcp_input+0x1ac>)
 800c684:	481a      	ldr	r0, [pc, #104]	; (800c6f0 <tcp_input+0x1a4>)
 800c686:	f008 ff57 	bl	8015538 <printf>
 800c68a:	e796      	b.n	800c5ba <tcp_input+0x6e>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c68c:	4b16      	ldr	r3, [pc, #88]	; (800c6e8 <tcp_input+0x19c>)
 800c68e:	22cf      	movs	r2, #207	; 0xcf
 800c690:	491a      	ldr	r1, [pc, #104]	; (800c6fc <tcp_input+0x1b0>)
 800c692:	4817      	ldr	r0, [pc, #92]	; (800c6f0 <tcp_input+0x1a4>)
 800c694:	f008 ff50 	bl	8015538 <printf>
 800c698:	e7b1      	b.n	800c5fe <tcp_input+0xb2>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c69a:	4b13      	ldr	r3, [pc, #76]	; (800c6e8 <tcp_input+0x19c>)
 800c69c:	22e2      	movs	r2, #226	; 0xe2
 800c69e:	4918      	ldr	r1, [pc, #96]	; (800c700 <tcp_input+0x1b4>)
 800c6a0:	4813      	ldr	r0, [pc, #76]	; (800c6f0 <tcp_input+0x1a4>)
 800c6a2:	f008 ff49 	bl	8015538 <printf>
 800c6a6:	e03c      	b.n	800c722 <tcp_input+0x1d6>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c6a8:	4b0f      	ldr	r3, [pc, #60]	; (800c6e8 <tcp_input+0x19c>)
 800c6aa:	22e3      	movs	r2, #227	; 0xe3
 800c6ac:	4915      	ldr	r1, [pc, #84]	; (800c704 <tcp_input+0x1b8>)
 800c6ae:	4810      	ldr	r0, [pc, #64]	; (800c6f0 <tcp_input+0x1a4>)
 800c6b0:	f008 ff42 	bl	8015538 <printf>
 800c6b4:	e038      	b.n	800c728 <tcp_input+0x1dc>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c6b6:	4b0c      	ldr	r3, [pc, #48]	; (800c6e8 <tcp_input+0x19c>)
 800c6b8:	22e4      	movs	r2, #228	; 0xe4
 800c6ba:	4913      	ldr	r1, [pc, #76]	; (800c708 <tcp_input+0x1bc>)
 800c6bc:	480c      	ldr	r0, [pc, #48]	; (800c6f0 <tcp_input+0x1a4>)
 800c6be:	f008 ff3b 	bl	8015538 <printf>
 800c6c2:	e034      	b.n	800c72e <tcp_input+0x1e2>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c6c4:	4b08      	ldr	r3, [pc, #32]	; (800c6e8 <tcp_input+0x19c>)
 800c6c6:	22ec      	movs	r2, #236	; 0xec
 800c6c8:	4910      	ldr	r1, [pc, #64]	; (800c70c <tcp_input+0x1c0>)
 800c6ca:	4809      	ldr	r0, [pc, #36]	; (800c6f0 <tcp_input+0x1a4>)
 800c6cc:	f008 ff34 	bl	8015538 <printf>
 800c6d0:	e044      	b.n	800c75c <tcp_input+0x210>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c6d2:	4b05      	ldr	r3, [pc, #20]	; (800c6e8 <tcp_input+0x19c>)
 800c6d4:	22f4      	movs	r2, #244	; 0xf4
 800c6d6:	490e      	ldr	r1, [pc, #56]	; (800c710 <tcp_input+0x1c4>)
 800c6d8:	4805      	ldr	r0, [pc, #20]	; (800c6f0 <tcp_input+0x1a4>)
 800c6da:	f008 ff2d 	bl	8015538 <printf>
 800c6de:	e047      	b.n	800c770 <tcp_input+0x224>
 800c6e0:	20004284 	.word	0x20004284
 800c6e4:	200061e0 	.word	0x200061e0
 800c6e8:	0801d524 	.word	0x0801d524
 800c6ec:	0801d744 	.word	0x0801d744
 800c6f0:	0801c994 	.word	0x0801c994
 800c6f4:	20009710 	.word	0x20009710
 800c6f8:	0801d728 	.word	0x0801d728
 800c6fc:	0801d738 	.word	0x0801d738
 800c700:	0801d764 	.word	0x0801d764
 800c704:	0801d78c 	.word	0x0801d78c
 800c708:	0801d7b8 	.word	0x0801d7b8
 800c70c:	0801d7e0 	.word	0x0801d7e0
 800c710:	0801d80c 	.word	0x0801d80c
    prev = pcb;
 800c714:	4626      	mov	r6, r4
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c716:	68e4      	ldr	r4, [r4, #12]
 800c718:	2c00      	cmp	r4, #0
 800c71a:	d029      	beq.n	800c770 <tcp_input+0x224>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c71c:	7d23      	ldrb	r3, [r4, #20]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d0bb      	beq.n	800c69a <tcp_input+0x14e>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c722:	7d23      	ldrb	r3, [r4, #20]
 800c724:	2b0a      	cmp	r3, #10
 800c726:	d0bf      	beq.n	800c6a8 <tcp_input+0x15c>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c728:	7d23      	ldrb	r3, [r4, #20]
 800c72a:	2b01      	cmp	r3, #1
 800c72c:	d0c3      	beq.n	800c6b6 <tcp_input+0x16a>
    if (pcb->remote_port == tcphdr->src &&
 800c72e:	8b21      	ldrh	r1, [r4, #24]
 800c730:	4b92      	ldr	r3, [pc, #584]	; (800c97c <tcp_input+0x430>)
 800c732:	689b      	ldr	r3, [r3, #8]
 800c734:	881a      	ldrh	r2, [r3, #0]
 800c736:	4291      	cmp	r1, r2
 800c738:	d1ec      	bne.n	800c714 <tcp_input+0x1c8>
        pcb->local_port == tcphdr->dest &&
 800c73a:	8ae2      	ldrh	r2, [r4, #22]
 800c73c:	885b      	ldrh	r3, [r3, #2]
    if (pcb->remote_port == tcphdr->src &&
 800c73e:	429a      	cmp	r2, r3
 800c740:	d1e8      	bne.n	800c714 <tcp_input+0x1c8>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c742:	6862      	ldr	r2, [r4, #4]
 800c744:	4b8e      	ldr	r3, [pc, #568]	; (800c980 <tcp_input+0x434>)
 800c746:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c748:	429a      	cmp	r2, r3
 800c74a:	d1e3      	bne.n	800c714 <tcp_input+0x1c8>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c74c:	6822      	ldr	r2, [r4, #0]
 800c74e:	4b8c      	ldr	r3, [pc, #560]	; (800c980 <tcp_input+0x434>)
 800c750:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c752:	429a      	cmp	r2, r3
 800c754:	d1de      	bne.n	800c714 <tcp_input+0x1c8>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c756:	68e3      	ldr	r3, [r4, #12]
 800c758:	42a3      	cmp	r3, r4
 800c75a:	d0b3      	beq.n	800c6c4 <tcp_input+0x178>
      if (prev != NULL) {
 800c75c:	b12e      	cbz	r6, 800c76a <tcp_input+0x21e>
        prev->next = pcb->next;
 800c75e:	68e3      	ldr	r3, [r4, #12]
 800c760:	60f3      	str	r3, [r6, #12]
        pcb->next = tcp_active_pcbs;
 800c762:	4b88      	ldr	r3, [pc, #544]	; (800c984 <tcp_input+0x438>)
 800c764:	681a      	ldr	r2, [r3, #0]
 800c766:	60e2      	str	r2, [r4, #12]
        tcp_active_pcbs = pcb;
 800c768:	601c      	str	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c76a:	68e3      	ldr	r3, [r4, #12]
 800c76c:	42a3      	cmp	r3, r4
 800c76e:	d0b0      	beq.n	800c6d2 <tcp_input+0x186>
  if (pcb == NULL) {
 800c770:	2c00      	cmp	r4, #0
 800c772:	d04e      	beq.n	800c812 <tcp_input+0x2c6>
  if (pcb != NULL) {
 800c774:	2c00      	cmp	r4, #0
 800c776:	f000 8128 	beq.w	800c9ca <tcp_input+0x47e>
    inseg.next = NULL;
 800c77a:	4b80      	ldr	r3, [pc, #512]	; (800c97c <tcp_input+0x430>)
 800c77c:	2200      	movs	r2, #0
 800c77e:	621a      	str	r2, [r3, #32]
    inseg.len = p->tot_len;
 800c780:	8929      	ldrh	r1, [r5, #8]
 800c782:	8519      	strh	r1, [r3, #40]	; 0x28
    inseg.p = p;
 800c784:	625d      	str	r5, [r3, #36]	; 0x24
    inseg.tcphdr = tcphdr;
 800c786:	6899      	ldr	r1, [r3, #8]
 800c788:	62d9      	str	r1, [r3, #44]	; 0x2c
    recv_data = NULL;
 800c78a:	631a      	str	r2, [r3, #48]	; 0x30
    recv_flags = 0;
 800c78c:	739a      	strb	r2, [r3, #14]
    recv_acked = 0;
 800c78e:	839a      	strh	r2, [r3, #28]
    if (flags & TCP_PSH) {
 800c790:	7bdb      	ldrb	r3, [r3, #15]
 800c792:	f013 0f08 	tst.w	r3, #8
 800c796:	d003      	beq.n	800c7a0 <tcp_input+0x254>
      p->flags |= PBUF_FLAG_PUSH;
 800c798:	7b6b      	ldrb	r3, [r5, #13]
 800c79a:	f043 0301 	orr.w	r3, r3, #1
 800c79e:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 800c7a0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c7a2:	b15b      	cbz	r3, 800c7bc <tcp_input+0x270>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c7a4:	4620      	mov	r0, r4
 800c7a6:	f7fe fb2f 	bl	800ae08 <tcp_process_refused_data>
 800c7aa:	f110 0f0d 	cmn.w	r0, #13
 800c7ae:	d07f      	beq.n	800c8b0 <tcp_input+0x364>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c7b0:	6f63      	ldr	r3, [r4, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c7b2:	b11b      	cbz	r3, 800c7bc <tcp_input+0x270>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c7b4:	4b71      	ldr	r3, [pc, #452]	; (800c97c <tcp_input+0x430>)
 800c7b6:	8a9b      	ldrh	r3, [r3, #20]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d179      	bne.n	800c8b0 <tcp_input+0x364>
    tcp_input_pcb = pcb;
 800c7bc:	4b72      	ldr	r3, [pc, #456]	; (800c988 <tcp_input+0x43c>)
 800c7be:	601c      	str	r4, [r3, #0]
    err = tcp_process(pcb);
 800c7c0:	4620      	mov	r0, r4
 800c7c2:	f7ff fc4d 	bl	800c060 <tcp_process>
    if (err != ERR_ABRT) {
 800c7c6:	f110 0f0d 	cmn.w	r0, #13
 800c7ca:	d013      	beq.n	800c7f4 <tcp_input+0x2a8>
      if (recv_flags & TF_RESET) {
 800c7cc:	4b6b      	ldr	r3, [pc, #428]	; (800c97c <tcp_input+0x430>)
 800c7ce:	7b9b      	ldrb	r3, [r3, #14]
 800c7d0:	f013 0f08 	tst.w	r3, #8
 800c7d4:	d073      	beq.n	800c8be <tcp_input+0x372>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c7d6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800c7da:	b11b      	cbz	r3, 800c7e4 <tcp_input+0x298>
 800c7dc:	f06f 010d 	mvn.w	r1, #13
 800c7e0:	6920      	ldr	r0, [r4, #16]
 800c7e2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c7e4:	4621      	mov	r1, r4
 800c7e6:	4867      	ldr	r0, [pc, #412]	; (800c984 <tcp_input+0x438>)
 800c7e8:	f7fe f9f6 	bl	800abd8 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800c7ec:	4621      	mov	r1, r4
 800c7ee:	2001      	movs	r0, #1
 800c7f0:	f7fd f89e 	bl	8009930 <memp_free>
    tcp_input_pcb = NULL;
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	4b64      	ldr	r3, [pc, #400]	; (800c988 <tcp_input+0x43c>)
 800c7f8:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c7fa:	4b60      	ldr	r3, [pc, #384]	; (800c97c <tcp_input+0x430>)
 800c7fc:	631a      	str	r2, [r3, #48]	; 0x30
    if (inseg.p != NULL)
 800c7fe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c800:	2800      	cmp	r0, #0
 800c802:	f43f aeaf 	beq.w	800c564 <tcp_input+0x18>
      pbuf_free(inseg.p);
 800c806:	f7fd fa47 	bl	8009c98 <pbuf_free>
      inseg.p = NULL;
 800c80a:	4b5c      	ldr	r3, [pc, #368]	; (800c97c <tcp_input+0x430>)
 800c80c:	2200      	movs	r2, #0
 800c80e:	625a      	str	r2, [r3, #36]	; 0x24
 800c810:	e6a8      	b.n	800c564 <tcp_input+0x18>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c812:	4b5e      	ldr	r3, [pc, #376]	; (800c98c <tcp_input+0x440>)
 800c814:	681c      	ldr	r4, [r3, #0]
 800c816:	e00c      	b.n	800c832 <tcp_input+0x2e6>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c818:	4b5d      	ldr	r3, [pc, #372]	; (800c990 <tcp_input+0x444>)
 800c81a:	22fe      	movs	r2, #254	; 0xfe
 800c81c:	495d      	ldr	r1, [pc, #372]	; (800c994 <tcp_input+0x448>)
 800c81e:	485e      	ldr	r0, [pc, #376]	; (800c998 <tcp_input+0x44c>)
 800c820:	f008 fe8a 	bl	8015538 <printf>
      if (pcb->remote_port == tcphdr->src &&
 800c824:	8b21      	ldrh	r1, [r4, #24]
 800c826:	4b55      	ldr	r3, [pc, #340]	; (800c97c <tcp_input+0x430>)
 800c828:	689b      	ldr	r3, [r3, #8]
 800c82a:	881a      	ldrh	r2, [r3, #0]
 800c82c:	4291      	cmp	r1, r2
 800c82e:	d005      	beq.n	800c83c <tcp_input+0x2f0>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c830:	68e4      	ldr	r4, [r4, #12]
 800c832:	b1c4      	cbz	r4, 800c866 <tcp_input+0x31a>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c834:	7d23      	ldrb	r3, [r4, #20]
 800c836:	2b0a      	cmp	r3, #10
 800c838:	d0f4      	beq.n	800c824 <tcp_input+0x2d8>
 800c83a:	e7ed      	b.n	800c818 <tcp_input+0x2cc>
          pcb->local_port == tcphdr->dest &&
 800c83c:	8ae2      	ldrh	r2, [r4, #22]
 800c83e:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800c840:	429a      	cmp	r2, r3
 800c842:	d1f5      	bne.n	800c830 <tcp_input+0x2e4>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c844:	6862      	ldr	r2, [r4, #4]
 800c846:	4b4e      	ldr	r3, [pc, #312]	; (800c980 <tcp_input+0x434>)
 800c848:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c84a:	429a      	cmp	r2, r3
 800c84c:	d1f0      	bne.n	800c830 <tcp_input+0x2e4>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c84e:	6822      	ldr	r2, [r4, #0]
 800c850:	4b4b      	ldr	r3, [pc, #300]	; (800c980 <tcp_input+0x434>)
 800c852:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c854:	429a      	cmp	r2, r3
 800c856:	d1eb      	bne.n	800c830 <tcp_input+0x2e4>
        tcp_timewait_input(pcb);
 800c858:	4620      	mov	r0, r4
 800c85a:	f7fe fe1b 	bl	800b494 <tcp_timewait_input>
        pbuf_free(p);
 800c85e:	4628      	mov	r0, r5
 800c860:	f7fd fa1a 	bl	8009c98 <pbuf_free>
        return;
 800c864:	e67e      	b.n	800c564 <tcp_input+0x18>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c866:	4b4d      	ldr	r3, [pc, #308]	; (800c99c <tcp_input+0x450>)
 800c868:	681e      	ldr	r6, [r3, #0]
 800c86a:	4630      	mov	r0, r6
    prev = NULL;
 800c86c:	4621      	mov	r1, r4
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c86e:	e001      	b.n	800c874 <tcp_input+0x328>
      prev = (struct tcp_pcb *)lpcb;
 800c870:	4601      	mov	r1, r0
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c872:	68c0      	ldr	r0, [r0, #12]
 800c874:	b168      	cbz	r0, 800c892 <tcp_input+0x346>
      if (lpcb->local_port == tcphdr->dest) {
 800c876:	8ac2      	ldrh	r2, [r0, #22]
 800c878:	4b40      	ldr	r3, [pc, #256]	; (800c97c <tcp_input+0x430>)
 800c87a:	689b      	ldr	r3, [r3, #8]
 800c87c:	885b      	ldrh	r3, [r3, #2]
 800c87e:	429a      	cmp	r2, r3
 800c880:	d1f6      	bne.n	800c870 <tcp_input+0x324>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c882:	6803      	ldr	r3, [r0, #0]
 800c884:	4a3e      	ldr	r2, [pc, #248]	; (800c980 <tcp_input+0x434>)
 800c886:	6952      	ldr	r2, [r2, #20]
 800c888:	4293      	cmp	r3, r2
 800c88a:	d002      	beq.n	800c892 <tcp_input+0x346>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c88c:	b108      	cbz	r0, 800c892 <tcp_input+0x346>
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d1ee      	bne.n	800c870 <tcp_input+0x324>
    if (lpcb != NULL) {
 800c892:	2800      	cmp	r0, #0
 800c894:	f43f af6e 	beq.w	800c774 <tcp_input+0x228>
      if (prev != NULL) {
 800c898:	b121      	cbz	r1, 800c8a4 <tcp_input+0x358>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c89a:	68c3      	ldr	r3, [r0, #12]
 800c89c:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c89e:	60c6      	str	r6, [r0, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c8a0:	4b3e      	ldr	r3, [pc, #248]	; (800c99c <tcp_input+0x450>)
 800c8a2:	6018      	str	r0, [r3, #0]
      tcp_listen_input(lpcb);
 800c8a4:	f7fe fe34 	bl	800b510 <tcp_listen_input>
      pbuf_free(p);
 800c8a8:	4628      	mov	r0, r5
 800c8aa:	f7fd f9f5 	bl	8009c98 <pbuf_free>
      return;
 800c8ae:	e659      	b.n	800c564 <tcp_input+0x18>
        if (pcb->rcv_ann_wnd == 0) {
 800c8b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d19e      	bne.n	800c7f4 <tcp_input+0x2a8>
          tcp_send_empty_ack(pcb);
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	f000 fdc2 	bl	800d440 <tcp_send_empty_ack>
        goto aborted;
 800c8bc:	e79a      	b.n	800c7f4 <tcp_input+0x2a8>
        if (recv_acked > 0) {
 800c8be:	4b2f      	ldr	r3, [pc, #188]	; (800c97c <tcp_input+0x430>)
 800c8c0:	8b9a      	ldrh	r2, [r3, #28]
 800c8c2:	b152      	cbz	r2, 800c8da <tcp_input+0x38e>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c8c4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800c8c6:	b12b      	cbz	r3, 800c8d4 <tcp_input+0x388>
 800c8c8:	4621      	mov	r1, r4
 800c8ca:	6920      	ldr	r0, [r4, #16]
 800c8cc:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800c8ce:	f110 0f0d 	cmn.w	r0, #13
 800c8d2:	d08f      	beq.n	800c7f4 <tcp_input+0x2a8>
          recv_acked = 0;
 800c8d4:	4b29      	ldr	r3, [pc, #164]	; (800c97c <tcp_input+0x430>)
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	839a      	strh	r2, [r3, #28]
        if (tcp_input_delayed_close(pcb)) {
 800c8da:	4620      	mov	r0, r4
 800c8dc:	f7fe fdb8 	bl	800b450 <tcp_input_delayed_close>
 800c8e0:	2800      	cmp	r0, #0
 800c8e2:	d187      	bne.n	800c7f4 <tcp_input+0x2a8>
        if (recv_data != NULL) {
 800c8e4:	4b25      	ldr	r3, [pc, #148]	; (800c97c <tcp_input+0x430>)
 800c8e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8e8:	b1f3      	cbz	r3, 800c928 <tcp_input+0x3dc>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c8ea:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c8ec:	b133      	cbz	r3, 800c8fc <tcp_input+0x3b0>
 800c8ee:	4b28      	ldr	r3, [pc, #160]	; (800c990 <tcp_input+0x444>)
 800c8f0:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800c8f4:	492a      	ldr	r1, [pc, #168]	; (800c9a0 <tcp_input+0x454>)
 800c8f6:	4828      	ldr	r0, [pc, #160]	; (800c998 <tcp_input+0x44c>)
 800c8f8:	f008 fe1e 	bl	8015538 <printf>
          if (pcb->flags & TF_RXCLOSED) {
 800c8fc:	7ea3      	ldrb	r3, [r4, #26]
 800c8fe:	f013 0f10 	tst.w	r3, #16
 800c902:	d12a      	bne.n	800c95a <tcp_input+0x40e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c904:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 800c908:	2d00      	cmp	r5, #0
 800c90a:	d02e      	beq.n	800c96a <tcp_input+0x41e>
 800c90c:	2300      	movs	r3, #0
 800c90e:	4a1b      	ldr	r2, [pc, #108]	; (800c97c <tcp_input+0x430>)
 800c910:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c912:	4621      	mov	r1, r4
 800c914:	6920      	ldr	r0, [r4, #16]
 800c916:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 800c918:	f110 0f0d 	cmn.w	r0, #13
 800c91c:	f43f af6a 	beq.w	800c7f4 <tcp_input+0x2a8>
          if (err != ERR_OK) {
 800c920:	b110      	cbz	r0, 800c928 <tcp_input+0x3dc>
            pcb->refused_data = recv_data;
 800c922:	4b16      	ldr	r3, [pc, #88]	; (800c97c <tcp_input+0x430>)
 800c924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c926:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 800c928:	4b14      	ldr	r3, [pc, #80]	; (800c97c <tcp_input+0x430>)
 800c92a:	7b9b      	ldrb	r3, [r3, #14]
 800c92c:	f013 0f20 	tst.w	r3, #32
 800c930:	d006      	beq.n	800c940 <tcp_input+0x3f4>
          if (pcb->refused_data != NULL) {
 800c932:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c934:	2b00      	cmp	r3, #0
 800c936:	d035      	beq.n	800c9a4 <tcp_input+0x458>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c938:	7b5a      	ldrb	r2, [r3, #13]
 800c93a:	f042 0220 	orr.w	r2, r2, #32
 800c93e:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800c940:	4b11      	ldr	r3, [pc, #68]	; (800c988 <tcp_input+0x43c>)
 800c942:	2200      	movs	r2, #0
 800c944:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c946:	4620      	mov	r0, r4
 800c948:	f7fe fd82 	bl	800b450 <tcp_input_delayed_close>
 800c94c:	2800      	cmp	r0, #0
 800c94e:	f47f af51 	bne.w	800c7f4 <tcp_input+0x2a8>
        tcp_output(pcb);
 800c952:	4620      	mov	r0, r4
 800c954:	f000 fdae 	bl	800d4b4 <tcp_output>
 800c958:	e74c      	b.n	800c7f4 <tcp_input+0x2a8>
            pbuf_free(recv_data);
 800c95a:	4b08      	ldr	r3, [pc, #32]	; (800c97c <tcp_input+0x430>)
 800c95c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c95e:	f7fd f99b 	bl	8009c98 <pbuf_free>
            tcp_abort(pcb);
 800c962:	4620      	mov	r0, r4
 800c964:	f7fe fb54 	bl	800b010 <tcp_abort>
            goto aborted;
 800c968:	e744      	b.n	800c7f4 <tcp_input+0x2a8>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c96a:	2300      	movs	r3, #0
 800c96c:	4a03      	ldr	r2, [pc, #12]	; (800c97c <tcp_input+0x430>)
 800c96e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c970:	4621      	mov	r1, r4
 800c972:	4618      	mov	r0, r3
 800c974:	f7fe fa36 	bl	800ade4 <tcp_recv_null>
 800c978:	e7ce      	b.n	800c918 <tcp_input+0x3cc>
 800c97a:	bf00      	nop
 800c97c:	20004284 	.word	0x20004284
 800c980:	200061e0 	.word	0x200061e0
 800c984:	20009710 	.word	0x20009710
 800c988:	20009724 	.word	0x20009724
 800c98c:	20009720 	.word	0x20009720
 800c990:	0801d524 	.word	0x0801d524
 800c994:	0801d838 	.word	0x0801d838
 800c998:	0801c994 	.word	0x0801c994
 800c99c:	20009718 	.word	0x20009718
 800c9a0:	0801d868 	.word	0x0801d868
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c9a4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800c9a6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c9aa:	d001      	beq.n	800c9b0 <tcp_input+0x464>
              pcb->rcv_wnd++;
 800c9ac:	3301      	adds	r3, #1
 800c9ae:	8523      	strh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800c9b0:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 800c9b4:	2d00      	cmp	r5, #0
 800c9b6:	d0c3      	beq.n	800c940 <tcp_input+0x3f4>
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	4621      	mov	r1, r4
 800c9be:	6920      	ldr	r0, [r4, #16]
 800c9c0:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 800c9c2:	f110 0f0d 	cmn.w	r0, #13
 800c9c6:	d1bb      	bne.n	800c940 <tcp_input+0x3f4>
 800c9c8:	e714      	b.n	800c7f4 <tcp_input+0x2a8>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c9ca:	4b0d      	ldr	r3, [pc, #52]	; (800ca00 <tcp_input+0x4b4>)
 800c9cc:	689b      	ldr	r3, [r3, #8]
 800c9ce:	8998      	ldrh	r0, [r3, #12]
 800c9d0:	f7fc fd2c 	bl	800942c <lwip_htons>
 800c9d4:	f010 0f04 	tst.w	r0, #4
 800c9d8:	d003      	beq.n	800c9e2 <tcp_input+0x496>
    pbuf_free(p);
 800c9da:	4628      	mov	r0, r5
 800c9dc:	f7fd f95c 	bl	8009c98 <pbuf_free>
 800c9e0:	e5c0      	b.n	800c564 <tcp_input+0x18>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c9e2:	4807      	ldr	r0, [pc, #28]	; (800ca00 <tcp_input+0x4b4>)
 800c9e4:	6882      	ldr	r2, [r0, #8]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c9e6:	4b07      	ldr	r3, [pc, #28]	; (800ca04 <tcp_input+0x4b8>)
 800c9e8:	8a84      	ldrh	r4, [r0, #20]
 800c9ea:	6901      	ldr	r1, [r0, #16]
 800c9ec:	8816      	ldrh	r6, [r2, #0]
 800c9ee:	9601      	str	r6, [sp, #4]
 800c9f0:	8852      	ldrh	r2, [r2, #2]
 800c9f2:	9200      	str	r2, [sp, #0]
 800c9f4:	1d1a      	adds	r2, r3, #4
 800c9f6:	4421      	add	r1, r4
 800c9f8:	6980      	ldr	r0, [r0, #24]
 800c9fa:	f000 fea3 	bl	800d744 <tcp_rst>
 800c9fe:	e7ec      	b.n	800c9da <tcp_input+0x48e>
 800ca00:	20004284 	.word	0x20004284
 800ca04:	200061f0 	.word	0x200061f0

0800ca08 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800ca08:	4a02      	ldr	r2, [pc, #8]	; (800ca14 <tcp_trigger_input_pcb_close+0xc>)
 800ca0a:	7b93      	ldrb	r3, [r2, #14]
 800ca0c:	f043 0310 	orr.w	r3, r3, #16
 800ca10:	7393      	strb	r3, [r2, #14]
}
 800ca12:	4770      	bx	lr
 800ca14:	20004284 	.word	0x20004284

0800ca18 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800ca18:	b508      	push	{r3, lr}
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800ca1a:	7d03      	ldrb	r3, [r0, #20]
 800ca1c:	2b04      	cmp	r3, #4
 800ca1e:	d005      	beq.n	800ca2c <tcp_write_checks+0x14>
 800ca20:	2b07      	cmp	r3, #7
 800ca22:	d003      	beq.n	800ca2c <tcp_write_checks+0x14>
      (pcb->state != CLOSE_WAIT) &&
 800ca24:	2b02      	cmp	r3, #2
 800ca26:	d001      	beq.n	800ca2c <tcp_write_checks+0x14>
      (pcb->state != SYN_SENT) &&
 800ca28:	2b03      	cmp	r3, #3
 800ca2a:	d139      	bne.n	800caa0 <tcp_write_checks+0x88>
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  } else if (len == 0) {
 800ca2c:	2900      	cmp	r1, #0
 800ca2e:	d03a      	beq.n	800caa6 <tcp_write_checks+0x8e>
    return ERR_OK;
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800ca30:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800ca34:	428b      	cmp	r3, r1
 800ca36:	d308      	bcc.n	800ca4a <tcp_write_checks+0x32>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800ca38:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800ca3c:	2b08      	cmp	r3, #8
 800ca3e:	d80b      	bhi.n	800ca58 <tcp_write_checks+0x40>
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
    return ERR_MEM;
  }
  if (pcb->snd_queuelen != 0) {
 800ca40:	b1f3      	cbz	r3, 800ca80 <tcp_write_checks+0x68>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ca42:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800ca44:	b17b      	cbz	r3, 800ca66 <tcp_write_checks+0x4e>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800ca46:	2000      	movs	r0, #0
 800ca48:	e02e      	b.n	800caa8 <tcp_write_checks+0x90>
    pcb->flags |= TF_NAGLEMEMERR;
 800ca4a:	7e83      	ldrb	r3, [r0, #26]
 800ca4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ca50:	7683      	strb	r3, [r0, #26]
    return ERR_MEM;
 800ca52:	f04f 30ff 	mov.w	r0, #4294967295
 800ca56:	e027      	b.n	800caa8 <tcp_write_checks+0x90>
    pcb->flags |= TF_NAGLEMEMERR;
 800ca58:	7e83      	ldrb	r3, [r0, #26]
 800ca5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ca5e:	7683      	strb	r3, [r0, #26]
    return ERR_MEM;
 800ca60:	f04f 30ff 	mov.w	r0, #4294967295
 800ca64:	e020      	b.n	800caa8 <tcp_write_checks+0x90>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ca66:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800ca68:	b10b      	cbz	r3, 800ca6e <tcp_write_checks+0x56>
  return ERR_OK;
 800ca6a:	2000      	movs	r0, #0
 800ca6c:	e01c      	b.n	800caa8 <tcp_write_checks+0x90>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ca6e:	4b0f      	ldr	r3, [pc, #60]	; (800caac <tcp_write_checks+0x94>)
 800ca70:	f240 1255 	movw	r2, #341	; 0x155
 800ca74:	490e      	ldr	r1, [pc, #56]	; (800cab0 <tcp_write_checks+0x98>)
 800ca76:	480f      	ldr	r0, [pc, #60]	; (800cab4 <tcp_write_checks+0x9c>)
 800ca78:	f008 fd5e 	bl	8015538 <printf>
  return ERR_OK;
 800ca7c:	2000      	movs	r0, #0
 800ca7e:	e013      	b.n	800caa8 <tcp_write_checks+0x90>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800ca80:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800ca82:	b143      	cbz	r3, 800ca96 <tcp_write_checks+0x7e>
 800ca84:	4b09      	ldr	r3, [pc, #36]	; (800caac <tcp_write_checks+0x94>)
 800ca86:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800ca8a:	490b      	ldr	r1, [pc, #44]	; (800cab8 <tcp_write_checks+0xa0>)
 800ca8c:	4809      	ldr	r0, [pc, #36]	; (800cab4 <tcp_write_checks+0x9c>)
 800ca8e:	f008 fd53 	bl	8015538 <printf>
  return ERR_OK;
 800ca92:	2000      	movs	r0, #0
 800ca94:	e008      	b.n	800caa8 <tcp_write_checks+0x90>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800ca96:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d1f3      	bne.n	800ca84 <tcp_write_checks+0x6c>
  return ERR_OK;
 800ca9c:	2000      	movs	r0, #0
 800ca9e:	e003      	b.n	800caa8 <tcp_write_checks+0x90>
    return ERR_CONN;
 800caa0:	f06f 000a 	mvn.w	r0, #10
 800caa4:	e000      	b.n	800caa8 <tcp_write_checks+0x90>
    return ERR_OK;
 800caa6:	2000      	movs	r0, #0
}
 800caa8:	bd08      	pop	{r3, pc}
 800caaa:	bf00      	nop
 800caac:	0801d884 	.word	0x0801d884
 800cab0:	0801d8b8 	.word	0x0801d8b8
 800cab4:	0801c994 	.word	0x0801c994
 800cab8:	0801d8f4 	.word	0x0801d8f4

0800cabc <tcp_pbuf_prealloc>:
{
 800cabc:	b570      	push	{r4, r5, r6, lr}
 800cabe:	460c      	mov	r4, r1
 800cac0:	461e      	mov	r6, r3
 800cac2:	f89d 3018 	ldrb.w	r3, [sp, #24]
  if (length < max_length) {
 800cac6:	4291      	cmp	r1, r2
 800cac8:	d215      	bcs.n	800caf6 <tcp_pbuf_prealloc+0x3a>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800caca:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800cace:	f011 0f02 	tst.w	r1, #2
 800cad2:	d108      	bne.n	800cae6 <tcp_pbuf_prealloc+0x2a>
        (!(pcb->flags & TF_NODELAY) &&
 800cad4:	9904      	ldr	r1, [sp, #16]
 800cad6:	7e89      	ldrb	r1, [r1, #26]
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800cad8:	f011 0f40 	tst.w	r1, #64	; 0x40
 800cadc:	d126      	bne.n	800cb2c <tcp_pbuf_prealloc+0x70>
        (!(pcb->flags & TF_NODELAY) &&
 800cade:	b113      	cbz	r3, 800cae6 <tcp_pbuf_prealloc+0x2a>
          pcb->unsent != NULL ||
 800cae0:	9b04      	ldr	r3, [sp, #16]
 800cae2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 800cae4:	b1e3      	cbz	r3, 800cb20 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800cae6:	f204 211b 	addw	r1, r4, #539	; 0x21b
 800caea:	f021 0103 	bic.w	r1, r1, #3
 800caee:	428a      	cmp	r2, r1
 800caf0:	bf28      	it	cs
 800caf2:	460a      	movcs	r2, r1
 800caf4:	b291      	uxth	r1, r2
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800caf6:	2200      	movs	r2, #0
 800caf8:	f7fd f932 	bl	8009d60 <pbuf_alloc>
  if (p == NULL) {
 800cafc:	4605      	mov	r5, r0
 800cafe:	b168      	cbz	r0, 800cb1c <tcp_pbuf_prealloc+0x60>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800cb00:	6803      	ldr	r3, [r0, #0]
 800cb02:	b133      	cbz	r3, 800cb12 <tcp_pbuf_prealloc+0x56>
 800cb04:	4b0a      	ldr	r3, [pc, #40]	; (800cb30 <tcp_pbuf_prealloc+0x74>)
 800cb06:	f44f 7288 	mov.w	r2, #272	; 0x110
 800cb0a:	490a      	ldr	r1, [pc, #40]	; (800cb34 <tcp_pbuf_prealloc+0x78>)
 800cb0c:	480a      	ldr	r0, [pc, #40]	; (800cb38 <tcp_pbuf_prealloc+0x7c>)
 800cb0e:	f008 fd13 	bl	8015538 <printf>
  *oversize = p->len - length;
 800cb12:	896b      	ldrh	r3, [r5, #10]
 800cb14:	1b1b      	subs	r3, r3, r4
 800cb16:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 800cb18:	812c      	strh	r4, [r5, #8]
 800cb1a:	816c      	strh	r4, [r5, #10]
}
 800cb1c:	4628      	mov	r0, r5
 800cb1e:	bd70      	pop	{r4, r5, r6, pc}
          pcb->unacked != NULL))) {
 800cb20:	9b04      	ldr	r3, [sp, #16]
 800cb22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d1de      	bne.n	800cae6 <tcp_pbuf_prealloc+0x2a>
  u16_t alloc = length;
 800cb28:	4621      	mov	r1, r4
 800cb2a:	e7e4      	b.n	800caf6 <tcp_pbuf_prealloc+0x3a>
 800cb2c:	4621      	mov	r1, r4
 800cb2e:	e7e2      	b.n	800caf6 <tcp_pbuf_prealloc+0x3a>
 800cb30:	0801d884 	.word	0x0801d884
 800cb34:	0801d928 	.word	0x0801d928
 800cb38:	0801c994 	.word	0x0801c994

0800cb3c <tcp_create_segment>:
{
 800cb3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb40:	4607      	mov	r7, r0
 800cb42:	460e      	mov	r6, r1
 800cb44:	4690      	mov	r8, r2
 800cb46:	4699      	mov	r9, r3
 800cb48:	f89d a020 	ldrb.w	sl, [sp, #32]
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800cb4c:	2003      	movs	r0, #3
 800cb4e:	f7fc fed5 	bl	80098fc <memp_malloc>
 800cb52:	4604      	mov	r4, r0
 800cb54:	2800      	cmp	r0, #0
 800cb56:	d036      	beq.n	800cbc6 <tcp_create_segment+0x8a>
 800cb58:	ea4f 058a 	mov.w	r5, sl, lsl #2
 800cb5c:	f005 0504 	and.w	r5, r5, #4
  seg->flags = optflags;
 800cb60:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800cb64:	2300      	movs	r3, #0
 800cb66:	6003      	str	r3, [r0, #0]
  seg->p = p;
 800cb68:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800cb6a:	8933      	ldrh	r3, [r6, #8]
 800cb6c:	fa1f fa85 	uxth.w	sl, r5
 800cb70:	4553      	cmp	r3, sl
 800cb72:	d32c      	bcc.n	800cbce <tcp_create_segment+0x92>
  seg->len = p->tot_len - optlen;
 800cb74:	8931      	ldrh	r1, [r6, #8]
 800cb76:	eba1 010a 	sub.w	r1, r1, sl
 800cb7a:	8121      	strh	r1, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 800cb7c:	2114      	movs	r1, #20
 800cb7e:	4630      	mov	r0, r6
 800cb80:	f7fd f880 	bl	8009c84 <pbuf_header>
 800cb84:	bb50      	cbnz	r0, 800cbdc <tcp_create_segment+0xa0>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800cb86:	6863      	ldr	r3, [r4, #4]
 800cb88:	685e      	ldr	r6, [r3, #4]
 800cb8a:	60e6      	str	r6, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800cb8c:	8af8      	ldrh	r0, [r7, #22]
 800cb8e:	f7fc fc4d 	bl	800942c <lwip_htons>
 800cb92:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800cb94:	68e6      	ldr	r6, [r4, #12]
 800cb96:	8b38      	ldrh	r0, [r7, #24]
 800cb98:	f7fc fc48 	bl	800942c <lwip_htons>
 800cb9c:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800cb9e:	68e6      	ldr	r6, [r4, #12]
 800cba0:	4648      	mov	r0, r9
 800cba2:	f7fc fc46 	bl	8009432 <lwip_htonl>
 800cba6:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800cba8:	08a8      	lsrs	r0, r5, #2
 800cbaa:	3005      	adds	r0, #5
 800cbac:	68e5      	ldr	r5, [r4, #12]
 800cbae:	ea48 3000 	orr.w	r0, r8, r0, lsl #12
 800cbb2:	f7fc fc3b 	bl	800942c <lwip_htons>
 800cbb6:	81a8      	strh	r0, [r5, #12]
  seg->tcphdr->urgp = 0;
 800cbb8:	68e3      	ldr	r3, [r4, #12]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	749a      	strb	r2, [r3, #18]
 800cbbe:	74da      	strb	r2, [r3, #19]
}
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 800cbc6:	4630      	mov	r0, r6
 800cbc8:	f7fd f866 	bl	8009c98 <pbuf_free>
    return NULL;
 800cbcc:	e7f8      	b.n	800cbc0 <tcp_create_segment+0x84>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800cbce:	4b06      	ldr	r3, [pc, #24]	; (800cbe8 <tcp_create_segment+0xac>)
 800cbd0:	22ba      	movs	r2, #186	; 0xba
 800cbd2:	4906      	ldr	r1, [pc, #24]	; (800cbec <tcp_create_segment+0xb0>)
 800cbd4:	4806      	ldr	r0, [pc, #24]	; (800cbf0 <tcp_create_segment+0xb4>)
 800cbd6:	f008 fcaf 	bl	8015538 <printf>
 800cbda:	e7cb      	b.n	800cb74 <tcp_create_segment+0x38>
    tcp_seg_free(seg);
 800cbdc:	4620      	mov	r0, r4
 800cbde:	f7fd fd3f 	bl	800a660 <tcp_seg_free>
    return NULL;
 800cbe2:	2400      	movs	r4, #0
 800cbe4:	e7ec      	b.n	800cbc0 <tcp_create_segment+0x84>
 800cbe6:	bf00      	nop
 800cbe8:	0801d884 	.word	0x0801d884
 800cbec:	0801d93c 	.word	0x0801d93c
 800cbf0:	0801c994 	.word	0x0801c994

0800cbf4 <tcp_output_alloc_header>:
{
 800cbf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbf8:	4605      	mov	r5, r0
 800cbfa:	460c      	mov	r4, r1
 800cbfc:	4698      	mov	r8, r3
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800cbfe:	4411      	add	r1, r2
 800cc00:	b289      	uxth	r1, r1
 800cc02:	3114      	adds	r1, #20
 800cc04:	2200      	movs	r2, #0
 800cc06:	b289      	uxth	r1, r1
 800cc08:	2001      	movs	r0, #1
 800cc0a:	f7fd f8a9 	bl	8009d60 <pbuf_alloc>
  if (p != NULL) {
 800cc0e:	4607      	mov	r7, r0
 800cc10:	b348      	cbz	r0, 800cc66 <tcp_output_alloc_header+0x72>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800cc12:	f104 0313 	add.w	r3, r4, #19
 800cc16:	8942      	ldrh	r2, [r0, #10]
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	da27      	bge.n	800cc6c <tcp_output_alloc_header+0x78>
    tcphdr = (struct tcp_hdr *)p->payload;
 800cc1c:	687e      	ldr	r6, [r7, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 800cc1e:	8ae8      	ldrh	r0, [r5, #22]
 800cc20:	f7fc fc04 	bl	800942c <lwip_htons>
 800cc24:	8030      	strh	r0, [r6, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800cc26:	8b28      	ldrh	r0, [r5, #24]
 800cc28:	f7fc fc00 	bl	800942c <lwip_htons>
 800cc2c:	8070      	strh	r0, [r6, #2]
    tcphdr->seqno = seqno_be;
 800cc2e:	f8c6 8004 	str.w	r8, [r6, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800cc32:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800cc34:	f7fc fbfd 	bl	8009432 <lwip_htonl>
 800cc38:	60b0      	str	r0, [r6, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800cc3a:	08a4      	lsrs	r4, r4, #2
 800cc3c:	3405      	adds	r4, #5
 800cc3e:	0324      	lsls	r4, r4, #12
 800cc40:	b2a4      	uxth	r4, r4
 800cc42:	f044 0010 	orr.w	r0, r4, #16
 800cc46:	f7fc fbf1 	bl	800942c <lwip_htons>
 800cc4a:	81b0      	strh	r0, [r6, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800cc4c:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 800cc4e:	f7fc fbed 	bl	800942c <lwip_htons>
 800cc52:	81f0      	strh	r0, [r6, #14]
    tcphdr->chksum = 0;
 800cc54:	2300      	movs	r3, #0
 800cc56:	7433      	strb	r3, [r6, #16]
 800cc58:	7473      	strb	r3, [r6, #17]
    tcphdr->urgp = 0;
 800cc5a:	74b3      	strb	r3, [r6, #18]
 800cc5c:	74f3      	strb	r3, [r6, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cc5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cc60:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 800cc62:	4413      	add	r3, r2
 800cc64:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 800cc66:	4638      	mov	r0, r7
 800cc68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800cc6c:	4b03      	ldr	r3, [pc, #12]	; (800cc7c <tcp_output_alloc_header+0x88>)
 800cc6e:	2272      	movs	r2, #114	; 0x72
 800cc70:	4903      	ldr	r1, [pc, #12]	; (800cc80 <tcp_output_alloc_header+0x8c>)
 800cc72:	4804      	ldr	r0, [pc, #16]	; (800cc84 <tcp_output_alloc_header+0x90>)
 800cc74:	f008 fc60 	bl	8015538 <printf>
 800cc78:	e7d0      	b.n	800cc1c <tcp_output_alloc_header+0x28>
 800cc7a:	bf00      	nop
 800cc7c:	0801d884 	.word	0x0801d884
 800cc80:	0801d954 	.word	0x0801d954
 800cc84:	0801c994 	.word	0x0801c994

0800cc88 <tcp_output_segment>:
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800cc88:	6843      	ldr	r3, [r0, #4]
 800cc8a:	89db      	ldrh	r3, [r3, #14]
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	d001      	beq.n	800cc94 <tcp_output_segment+0xc>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800cc90:	2000      	movs	r0, #0
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
}
 800cc92:	4770      	bx	lr
{
 800cc94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc96:	b085      	sub	sp, #20
 800cc98:	4604      	mov	r4, r0
 800cc9a:	460d      	mov	r5, r1
 800cc9c:	4616      	mov	r6, r2
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800cc9e:	68c7      	ldr	r7, [r0, #12]
 800cca0:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800cca2:	f7fc fbc6 	bl	8009432 <lwip_htonl>
 800cca6:	60b8      	str	r0, [r7, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800cca8:	68e7      	ldr	r7, [r4, #12]
 800ccaa:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 800ccac:	f7fc fbbe 	bl	800942c <lwip_htons>
 800ccb0:	81f8      	strh	r0, [r7, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ccb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ccb4:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 800ccb6:	4413      	add	r3, r2
 800ccb8:	62eb      	str	r3, [r5, #44]	; 0x2c
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ccba:	68e7      	ldr	r7, [r4, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ccbc:	7aa3      	ldrb	r3, [r4, #10]
 800ccbe:	f013 0f01 	tst.w	r3, #1
 800ccc2:	d125      	bne.n	800cd10 <tcp_output_segment+0x88>
  if (pcb->rtime < 0) {
 800ccc4:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	db2c      	blt.n	800cd26 <tcp_output_segment+0x9e>
  if (pcb->rttest == 0) {
 800cccc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d02c      	beq.n	800cd2c <tcp_output_segment+0xa4>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ccd2:	68e3      	ldr	r3, [r4, #12]
 800ccd4:	6862      	ldr	r2, [r4, #4]
 800ccd6:	6851      	ldr	r1, [r2, #4]
 800ccd8:	1a5b      	subs	r3, r3, r1
 800ccda:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800ccdc:	8951      	ldrh	r1, [r2, #10]
 800ccde:	1ac9      	subs	r1, r1, r3
 800cce0:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
 800cce2:	6861      	ldr	r1, [r4, #4]
 800cce4:	890a      	ldrh	r2, [r1, #8]
 800cce6:	1ad3      	subs	r3, r2, r3
 800cce8:	810b      	strh	r3, [r1, #8]
  seg->p->payload = seg->tcphdr;
 800ccea:	6862      	ldr	r2, [r4, #4]
 800ccec:	68e3      	ldr	r3, [r4, #12]
 800ccee:	6053      	str	r3, [r2, #4]
  seg->tcphdr->chksum = 0;
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	741a      	strb	r2, [r3, #16]
 800ccf4:	745a      	strb	r2, [r3, #17]
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ccf6:	9602      	str	r6, [sp, #8]
 800ccf8:	2306      	movs	r3, #6
 800ccfa:	9301      	str	r3, [sp, #4]
 800ccfc:	7a6b      	ldrb	r3, [r5, #9]
 800ccfe:	9300      	str	r3, [sp, #0]
 800cd00:	7aab      	ldrb	r3, [r5, #10]
 800cd02:	1d2a      	adds	r2, r5, #4
 800cd04:	4629      	mov	r1, r5
 800cd06:	6860      	ldr	r0, [r4, #4]
 800cd08:	f001 ff58 	bl	800ebbc <ip4_output_if>
}
 800cd0c:	b005      	add	sp, #20
 800cd0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800cd10:	1d29      	adds	r1, r5, #4
 800cd12:	f44f 7006 	mov.w	r0, #536	; 0x218
 800cd16:	f7fe fa73 	bl	800b200 <tcp_eff_send_mss_impl>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800cd1a:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800cd1e:	f7fc fb88 	bl	8009432 <lwip_htonl>
 800cd22:	6178      	str	r0, [r7, #20]
    opts += 1;
 800cd24:	e7ce      	b.n	800ccc4 <tcp_output_segment+0x3c>
    pcb->rtime = 0;
 800cd26:	2300      	movs	r3, #0
 800cd28:	862b      	strh	r3, [r5, #48]	; 0x30
 800cd2a:	e7cf      	b.n	800cccc <tcp_output_segment+0x44>
    pcb->rttest = tcp_ticks;
 800cd2c:	4b04      	ldr	r3, [pc, #16]	; (800cd40 <tcp_output_segment+0xb8>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	636b      	str	r3, [r5, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800cd32:	68e3      	ldr	r3, [r4, #12]
 800cd34:	6858      	ldr	r0, [r3, #4]
 800cd36:	f7fc fb7c 	bl	8009432 <lwip_htonl>
 800cd3a:	63a8      	str	r0, [r5, #56]	; 0x38
 800cd3c:	e7c9      	b.n	800ccd2 <tcp_output_segment+0x4a>
 800cd3e:	bf00      	nop
 800cd40:	20009714 	.word	0x20009714

0800cd44 <tcp_write>:
{
 800cd44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd48:	b091      	sub	sp, #68	; 0x44
 800cd4a:	4680      	mov	r8, r0
 800cd4c:	9108      	str	r1, [sp, #32]
 800cd4e:	4692      	mov	sl, r2
 800cd50:	9307      	str	r3, [sp, #28]
  u16_t oversize = 0;
 800cd52:	2300      	movs	r3, #0
 800cd54:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800cd58:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800cd5c:	085b      	lsrs	r3, r3, #1
 800cd5e:	f8b0 b032 	ldrh.w	fp, [r0, #50]	; 0x32
 800cd62:	455b      	cmp	r3, fp
 800cd64:	bf28      	it	cs
 800cd66:	465b      	movcs	r3, fp
  mss_local = mss_local ? mss_local : pcb->mss;
 800cd68:	b103      	cbz	r3, 800cd6c <tcp_write+0x28>
 800cd6a:	469b      	mov	fp, r3
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800cd6c:	9b08      	ldr	r3, [sp, #32]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	f000 808a 	beq.w	800ce88 <tcp_write+0x144>
  err = tcp_write_checks(pcb, len);
 800cd74:	4651      	mov	r1, sl
 800cd76:	4640      	mov	r0, r8
 800cd78:	f7ff fe4e 	bl	800ca18 <tcp_write_checks>
  if (err != ERR_OK) {
 800cd7c:	900a      	str	r0, [sp, #40]	; 0x28
 800cd7e:	2800      	cmp	r0, #0
 800cd80:	f040 818d 	bne.w	800d09e <tcp_write+0x35a>
  queuelen = pcb->snd_queuelen;
 800cd84:	f8b8 6062 	ldrh.w	r6, [r8, #98]	; 0x62
  if (pcb->unsent != NULL) {
 800cd88:	f8d8 9068 	ldr.w	r9, [r8, #104]	; 0x68
 800cd8c:	f1b9 0f00 	cmp.w	r9, #0
 800cd90:	f000 80cc 	beq.w	800cf2c <tcp_write+0x1e8>
 800cd94:	464b      	mov	r3, r9
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cd96:	9309      	str	r3, [sp, #36]	; 0x24
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d1fb      	bne.n	800cd96 <tcp_write+0x52>
 800cd9e:	4699      	mov	r9, r3
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800cda0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cda2:	7a9c      	ldrb	r4, [r3, #10]
 800cda4:	00a4      	lsls	r4, r4, #2
 800cda6:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800cdaa:	891b      	ldrh	r3, [r3, #8]
 800cdac:	4423      	add	r3, r4
 800cdae:	459b      	cmp	fp, r3
 800cdb0:	db75      	blt.n	800ce9e <tcp_write+0x15a>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800cdb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdb4:	891b      	ldrh	r3, [r3, #8]
 800cdb6:	441c      	add	r4, r3
 800cdb8:	b2a4      	uxth	r4, r4
 800cdba:	ebab 0404 	sub.w	r4, fp, r4
 800cdbe:	b2a1      	uxth	r1, r4
 800cdc0:	910c      	str	r1, [sp, #48]	; 0x30
    oversize = pcb->unsent_oversize;
 800cdc2:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 800cdc6:	930b      	str	r3, [sp, #44]	; 0x2c
 800cdc8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d076      	beq.n	800cebe <tcp_write+0x17a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800cdd0:	428b      	cmp	r3, r1
 800cdd2:	d86c      	bhi.n	800ceae <tcp_write+0x16a>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800cdd4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800cdd8:	461a      	mov	r2, r3
 800cdda:	4553      	cmp	r3, sl
 800cddc:	bf28      	it	cs
 800cdde:	4652      	movcs	r2, sl
 800cde0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cde2:	428a      	cmp	r2, r1
 800cde4:	bf28      	it	cs
 800cde6:	460a      	movcs	r2, r1
 800cde8:	b292      	uxth	r2, r2
 800cdea:	920b      	str	r2, [sp, #44]	; 0x2c
      oversize -= oversize_used;
 800cdec:	1a9b      	subs	r3, r3, r2
 800cdee:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 800cdf2:	1a8b      	subs	r3, r1, r2
 800cdf4:	b29b      	uxth	r3, r3
 800cdf6:	930c      	str	r3, [sp, #48]	; 0x30
      seg = last_unsent;
 800cdf8:	9f09      	ldr	r7, [sp, #36]	; 0x24
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800cdfa:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800cdfe:	b113      	cbz	r3, 800ce06 <tcp_write+0xc2>
 800ce00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce02:	4553      	cmp	r3, sl
 800ce04:	d15d      	bne.n	800cec2 <tcp_write+0x17e>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800ce06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce08:	4552      	cmp	r2, sl
 800ce0a:	f080 8156 	bcs.w	800d0ba <tcp_write+0x376>
 800ce0e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ce10:	2900      	cmp	r1, #0
 800ce12:	f000 815b 	beq.w	800d0cc <tcp_write+0x388>
 800ce16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce18:	891b      	ldrh	r3, [r3, #8]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	f000 8158 	beq.w	800d0d0 <tcp_write+0x38c>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800ce20:	ebaa 0402 	sub.w	r4, sl, r2
 800ce24:	428c      	cmp	r4, r1
 800ce26:	bfa8      	it	ge
 800ce28:	460c      	movge	r4, r1
 800ce2a:	b2a5      	uxth	r5, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ce2c:	9b07      	ldr	r3, [sp, #28]
 800ce2e:	f013 0f01 	tst.w	r3, #1
 800ce32:	d14e      	bne.n	800ced2 <tcp_write+0x18e>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800ce34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce36:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800ce3a:	464a      	mov	r2, r9
 800ce3c:	4613      	mov	r3, r2
 800ce3e:	6812      	ldr	r2, [r2, #0]
 800ce40:	2a00      	cmp	r2, #0
 800ce42:	d1fb      	bne.n	800ce3c <tcp_write+0xf8>
 800ce44:	4691      	mov	r9, r2
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800ce46:	7b1a      	ldrb	r2, [r3, #12]
 800ce48:	2a01      	cmp	r2, #1
 800ce4a:	d105      	bne.n	800ce58 <tcp_write+0x114>
 800ce4c:	685a      	ldr	r2, [r3, #4]
 800ce4e:	895b      	ldrh	r3, [r3, #10]
 800ce50:	4413      	add	r3, r2
 800ce52:	9a08      	ldr	r2, [sp, #32]
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d05c      	beq.n	800cf12 <tcp_write+0x1ce>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800ce58:	2201      	movs	r2, #1
 800ce5a:	4629      	mov	r1, r5
 800ce5c:	2004      	movs	r0, #4
 800ce5e:	f7fc ff7f 	bl	8009d60 <pbuf_alloc>
 800ce62:	4681      	mov	r9, r0
 800ce64:	2800      	cmp	r0, #0
 800ce66:	f000 81ef 	beq.w	800d248 <tcp_write+0x504>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800ce6a:	9b08      	ldr	r3, [sp, #32]
 800ce6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce6e:	4413      	add	r3, r2
 800ce70:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 800ce72:	f7fd f8dd 	bl	800a030 <pbuf_clen>
 800ce76:	4406      	add	r6, r0
 800ce78:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	930c      	str	r3, [sp, #48]	; 0x30
      pos += seglen;
 800ce7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce80:	195c      	adds	r4, r3, r5
 800ce82:	b2a4      	uxth	r4, r4
      seg = last_unsent;
 800ce84:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ce86:	e11b      	b.n	800d0c0 <tcp_write+0x37c>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800ce88:	4ba1      	ldr	r3, [pc, #644]	; (800d110 <tcp_write+0x3cc>)
 800ce8a:	f240 1291 	movw	r2, #401	; 0x191
 800ce8e:	49a1      	ldr	r1, [pc, #644]	; (800d114 <tcp_write+0x3d0>)
 800ce90:	48a1      	ldr	r0, [pc, #644]	; (800d118 <tcp_write+0x3d4>)
 800ce92:	f008 fb51 	bl	8015538 <printf>
 800ce96:	f06f 030f 	mvn.w	r3, #15
 800ce9a:	930a      	str	r3, [sp, #40]	; 0x28
 800ce9c:	e0ff      	b.n	800d09e <tcp_write+0x35a>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800ce9e:	4b9c      	ldr	r3, [pc, #624]	; (800d110 <tcp_write+0x3cc>)
 800cea0:	f240 12c7 	movw	r2, #455	; 0x1c7
 800cea4:	499d      	ldr	r1, [pc, #628]	; (800d11c <tcp_write+0x3d8>)
 800cea6:	489c      	ldr	r0, [pc, #624]	; (800d118 <tcp_write+0x3d4>)
 800cea8:	f008 fb46 	bl	8015538 <printf>
 800ceac:	e781      	b.n	800cdb2 <tcp_write+0x6e>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800ceae:	4b98      	ldr	r3, [pc, #608]	; (800d110 <tcp_write+0x3cc>)
 800ceb0:	f240 12d9 	movw	r2, #473	; 0x1d9
 800ceb4:	499a      	ldr	r1, [pc, #616]	; (800d120 <tcp_write+0x3dc>)
 800ceb6:	4898      	ldr	r0, [pc, #608]	; (800d118 <tcp_write+0x3d4>)
 800ceb8:	f008 fb3e 	bl	8015538 <printf>
 800cebc:	e78a      	b.n	800cdd4 <tcp_write+0x90>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800cebe:	464f      	mov	r7, r9
 800cec0:	e79b      	b.n	800cdfa <tcp_write+0xb6>
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800cec2:	4b93      	ldr	r3, [pc, #588]	; (800d110 <tcp_write+0x3cc>)
 800cec4:	f240 12e1 	movw	r2, #481	; 0x1e1
 800cec8:	4996      	ldr	r1, [pc, #600]	; (800d124 <tcp_write+0x3e0>)
 800ceca:	4893      	ldr	r0, [pc, #588]	; (800d118 <tcp_write+0x3d4>)
 800cecc:	f008 fb34 	bl	8015538 <printf>
 800ced0:	e799      	b.n	800ce06 <tcp_write+0xc2>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800ced2:	2301      	movs	r3, #1
 800ced4:	9302      	str	r3, [sp, #8]
 800ced6:	9b07      	ldr	r3, [sp, #28]
 800ced8:	9301      	str	r3, [sp, #4]
 800ceda:	f8cd 8000 	str.w	r8, [sp]
 800cede:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800cee2:	460a      	mov	r2, r1
 800cee4:	4629      	mov	r1, r5
 800cee6:	2004      	movs	r0, #4
 800cee8:	f7ff fde8 	bl	800cabc <tcp_pbuf_prealloc>
 800ceec:	4681      	mov	r9, r0
 800ceee:	2800      	cmp	r0, #0
 800cef0:	f000 81a8 	beq.w	800d244 <tcp_write+0x500>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800cef4:	462a      	mov	r2, r5
 800cef6:	9b08      	ldr	r3, [sp, #32]
 800cef8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cefa:	1859      	adds	r1, r3, r1
 800cefc:	6840      	ldr	r0, [r0, #4]
 800cefe:	f008 faf9 	bl	80154f4 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800cf02:	4648      	mov	r0, r9
 800cf04:	f7fd f894 	bl	800a030 <pbuf_clen>
 800cf08:	4406      	add	r6, r0
 800cf0a:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	930c      	str	r3, [sp, #48]	; 0x30
 800cf10:	e7b5      	b.n	800ce7e <tcp_write+0x13a>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800cf12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf14:	b90b      	cbnz	r3, 800cf1a <tcp_write+0x1d6>
          extendlen = seglen;
 800cf16:	950c      	str	r5, [sp, #48]	; 0x30
 800cf18:	e7b1      	b.n	800ce7e <tcp_write+0x13a>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800cf1a:	4b7d      	ldr	r3, [pc, #500]	; (800d110 <tcp_write+0x3cc>)
 800cf1c:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800cf20:	4981      	ldr	r1, [pc, #516]	; (800d128 <tcp_write+0x3e4>)
 800cf22:	487d      	ldr	r0, [pc, #500]	; (800d118 <tcp_write+0x3d4>)
 800cf24:	f008 fb08 	bl	8015538 <printf>
          extendlen = seglen;
 800cf28:	950c      	str	r5, [sp, #48]	; 0x30
 800cf2a:	e7a8      	b.n	800ce7e <tcp_write+0x13a>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800cf2c:	f8b8 4064 	ldrh.w	r4, [r8, #100]	; 0x64
 800cf30:	b92c      	cbnz	r4, 800cf3e <tcp_write+0x1fa>
  u16_t extendlen = 0;
 800cf32:	940c      	str	r4, [sp, #48]	; 0x30
  u16_t oversize_used = 0;
 800cf34:	940b      	str	r4, [sp, #44]	; 0x2c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800cf36:	464f      	mov	r7, r9
 800cf38:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800cf3c:	e0c0      	b.n	800d0c0 <tcp_write+0x37c>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800cf3e:	4b74      	ldr	r3, [pc, #464]	; (800d110 <tcp_write+0x3cc>)
 800cf40:	f44f 7209 	mov.w	r2, #548	; 0x224
 800cf44:	4979      	ldr	r1, [pc, #484]	; (800d12c <tcp_write+0x3e8>)
 800cf46:	4874      	ldr	r0, [pc, #464]	; (800d118 <tcp_write+0x3d4>)
 800cf48:	f008 faf6 	bl	8015538 <printf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800cf4c:	464f      	mov	r7, r9
 800cf4e:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  u16_t extendlen = 0;
 800cf52:	2400      	movs	r4, #0
 800cf54:	940c      	str	r4, [sp, #48]	; 0x30
  u16_t oversize_used = 0;
 800cf56:	940b      	str	r4, [sp, #44]	; 0x2c
 800cf58:	e0b2      	b.n	800d0c0 <tcp_write+0x37c>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800cf5a:	9b06      	ldr	r3, [sp, #24]
 800cf5c:	fab3 f383 	clz	r3, r3
 800cf60:	095b      	lsrs	r3, r3, #5
 800cf62:	9302      	str	r3, [sp, #8]
 800cf64:	9b07      	ldr	r3, [sp, #28]
 800cf66:	9301      	str	r3, [sp, #4]
 800cf68:	f8cd 8000 	str.w	r8, [sp]
 800cf6c:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800cf70:	465a      	mov	r2, fp
 800cf72:	4629      	mov	r1, r5
 800cf74:	2000      	movs	r0, #0
 800cf76:	f7ff fda1 	bl	800cabc <tcp_pbuf_prealloc>
 800cf7a:	4607      	mov	r7, r0
 800cf7c:	2800      	cmp	r0, #0
 800cf7e:	f000 8165 	beq.w	800d24c <tcp_write+0x508>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800cf82:	8943      	ldrh	r3, [r0, #10]
 800cf84:	42ab      	cmp	r3, r5
 800cf86:	d306      	bcc.n	800cf96 <tcp_write+0x252>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800cf88:	462a      	mov	r2, r5
 800cf8a:	9b08      	ldr	r3, [sp, #32]
 800cf8c:	1919      	adds	r1, r3, r4
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f008 fab0 	bl	80154f4 <memcpy>
 800cf94:	e025      	b.n	800cfe2 <tcp_write+0x29e>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800cf96:	4b5e      	ldr	r3, [pc, #376]	; (800d110 <tcp_write+0x3cc>)
 800cf98:	f44f 7210 	mov.w	r2, #576	; 0x240
 800cf9c:	4964      	ldr	r1, [pc, #400]	; (800d130 <tcp_write+0x3ec>)
 800cf9e:	485e      	ldr	r0, [pc, #376]	; (800d118 <tcp_write+0x3d4>)
 800cfa0:	f008 faca 	bl	8015538 <printf>
 800cfa4:	e7f0      	b.n	800cf88 <tcp_write+0x244>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800cfa6:	4b5a      	ldr	r3, [pc, #360]	; (800d110 <tcp_write+0x3cc>)
 800cfa8:	f240 224b 	movw	r2, #587	; 0x24b
 800cfac:	4961      	ldr	r1, [pc, #388]	; (800d134 <tcp_write+0x3f0>)
 800cfae:	485a      	ldr	r0, [pc, #360]	; (800d118 <tcp_write+0x3d4>)
 800cfb0:	f008 fac2 	bl	8015538 <printf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	4629      	mov	r1, r5
 800cfb8:	2000      	movs	r0, #0
 800cfba:	f7fc fed1 	bl	8009d60 <pbuf_alloc>
 800cfbe:	4681      	mov	r9, r0
 800cfc0:	2800      	cmp	r0, #0
 800cfc2:	f000 8146 	beq.w	800d252 <tcp_write+0x50e>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800cfc6:	9b08      	ldr	r3, [sp, #32]
 800cfc8:	4423      	add	r3, r4
 800cfca:	6043      	str	r3, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cfcc:	2200      	movs	r2, #0
 800cfce:	4611      	mov	r1, r2
 800cfd0:	4610      	mov	r0, r2
 800cfd2:	f7fc fec5 	bl	8009d60 <pbuf_alloc>
 800cfd6:	4607      	mov	r7, r0
 800cfd8:	2800      	cmp	r0, #0
 800cfda:	d032      	beq.n	800d042 <tcp_write+0x2fe>
      pbuf_cat(p/*header*/, p2/*data*/);
 800cfdc:	4649      	mov	r1, r9
 800cfde:	f7fd f847 	bl	800a070 <pbuf_cat>
    queuelen += pbuf_clen(p);
 800cfe2:	4638      	mov	r0, r7
 800cfe4:	f7fd f824 	bl	800a030 <pbuf_clen>
 800cfe8:	4406      	add	r6, r0
 800cfea:	b2b6      	uxth	r6, r6
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800cfec:	2e09      	cmp	r6, #9
 800cfee:	d82e      	bhi.n	800d04e <tcp_write+0x30a>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800cff0:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 800cff4:	2200      	movs	r2, #0
 800cff6:	9200      	str	r2, [sp, #0]
 800cff8:	4423      	add	r3, r4
 800cffa:	4639      	mov	r1, r7
 800cffc:	4640      	mov	r0, r8
 800cffe:	f7ff fd9d 	bl	800cb3c <tcp_create_segment>
 800d002:	4607      	mov	r7, r0
 800d004:	2800      	cmp	r0, #0
 800d006:	f000 8127 	beq.w	800d258 <tcp_write+0x514>
    if (queue == NULL) {
 800d00a:	9b06      	ldr	r3, [sp, #24]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d052      	beq.n	800d0b6 <tcp_write+0x372>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800d010:	9b05      	ldr	r3, [sp, #20]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d047      	beq.n	800d0a6 <tcp_write+0x362>
      prev_seg->next = seg;
 800d016:	9b05      	ldr	r3, [sp, #20]
 800d018:	601f      	str	r7, [r3, #0]
    pos += seglen;
 800d01a:	442c      	add	r4, r5
 800d01c:	b2a4      	uxth	r4, r4
    prev_seg = seg;
 800d01e:	9705      	str	r7, [sp, #20]
  while (pos < len) {
 800d020:	4554      	cmp	r4, sl
 800d022:	d258      	bcs.n	800d0d6 <tcp_write+0x392>
    u16_t left = len - pos;
 800d024:	ebaa 0504 	sub.w	r5, sl, r4
 800d028:	b2ad      	uxth	r5, r5
    u16_t seglen = LWIP_MIN(left, max_len);
 800d02a:	455d      	cmp	r5, fp
 800d02c:	bf28      	it	cs
 800d02e:	465d      	movcs	r5, fp
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d030:	9b07      	ldr	r3, [sp, #28]
 800d032:	f013 0f01 	tst.w	r3, #1
 800d036:	d190      	bne.n	800cf5a <tcp_write+0x216>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800d038:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d0b9      	beq.n	800cfb4 <tcp_write+0x270>
 800d040:	e7b1      	b.n	800cfa6 <tcp_write+0x262>
 800d042:	4648      	mov	r0, r9
 800d044:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
        pbuf_free(p2);
 800d048:	f7fc fe26 	bl	8009c98 <pbuf_free>
        goto memerr;
 800d04c:	e004      	b.n	800d058 <tcp_write+0x314>
 800d04e:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
      pbuf_free(p);
 800d052:	4638      	mov	r0, r7
 800d054:	f7fc fe20 	bl	8009c98 <pbuf_free>
  pcb->flags |= TF_NAGLEMEMERR;
 800d058:	f898 301a 	ldrb.w	r3, [r8, #26]
 800d05c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d060:	f888 301a 	strb.w	r3, [r8, #26]
  if (concat_p != NULL) {
 800d064:	f1b9 0f00 	cmp.w	r9, #0
 800d068:	d002      	beq.n	800d070 <tcp_write+0x32c>
    pbuf_free(concat_p);
 800d06a:	4648      	mov	r0, r9
 800d06c:	f7fc fe14 	bl	8009c98 <pbuf_free>
  if (queue != NULL) {
 800d070:	9b06      	ldr	r3, [sp, #24]
 800d072:	b113      	cbz	r3, 800d07a <tcp_write+0x336>
    tcp_segs_free(queue);
 800d074:	4618      	mov	r0, r3
 800d076:	f7fd fb00 	bl	800a67a <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800d07a:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
 800d07e:	2b00      	cmp	r3, #0
 800d080:	f000 80f8 	beq.w	800d274 <tcp_write+0x530>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800d084:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 800d088:	2b00      	cmp	r3, #0
 800d08a:	f040 80f7 	bne.w	800d27c <tcp_write+0x538>
 800d08e:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
 800d092:	2b00      	cmp	r3, #0
 800d094:	f000 80e3 	beq.w	800d25e <tcp_write+0x51a>
  return ERR_MEM;
 800d098:	f04f 33ff 	mov.w	r3, #4294967295
 800d09c:	930a      	str	r3, [sp, #40]	; 0x28
}
 800d09e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d0a0:	b011      	add	sp, #68	; 0x44
 800d0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800d0a6:	4b1a      	ldr	r3, [pc, #104]	; (800d110 <tcp_write+0x3cc>)
 800d0a8:	f240 2285 	movw	r2, #645	; 0x285
 800d0ac:	4922      	ldr	r1, [pc, #136]	; (800d138 <tcp_write+0x3f4>)
 800d0ae:	481a      	ldr	r0, [pc, #104]	; (800d118 <tcp_write+0x3d4>)
 800d0b0:	f008 fa42 	bl	8015538 <printf>
 800d0b4:	e7af      	b.n	800d016 <tcp_write+0x2d2>
      queue = seg;
 800d0b6:	9006      	str	r0, [sp, #24]
 800d0b8:	e7af      	b.n	800d01a <tcp_write+0x2d6>
 800d0ba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  u16_t extendlen = 0;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	930c      	str	r3, [sp, #48]	; 0x30
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	9306      	str	r3, [sp, #24]
 800d0c4:	9305      	str	r3, [sp, #20]
 800d0c6:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800d0ca:	e7a9      	b.n	800d020 <tcp_write+0x2dc>
 800d0cc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d0ce:	e7f7      	b.n	800d0c0 <tcp_write+0x37c>
  u16_t extendlen = 0;
 800d0d0:	930c      	str	r3, [sp, #48]	; 0x30
 800d0d2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d0d4:	e7f4      	b.n	800d0c0 <tcp_write+0x37c>
 800d0d6:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
  if (oversize_used > 0) {
 800d0da:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800d0dc:	2d00      	cmp	r5, #0
 800d0de:	d032      	beq.n	800d146 <tcp_write+0x402>
    for (p = last_unsent->p; p; p = p->next) {
 800d0e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0e2:	685c      	ldr	r4, [r3, #4]
 800d0e4:	f8dd b020 	ldr.w	fp, [sp, #32]
 800d0e8:	e000      	b.n	800d0ec <tcp_write+0x3a8>
 800d0ea:	6824      	ldr	r4, [r4, #0]
 800d0ec:	b334      	cbz	r4, 800d13c <tcp_write+0x3f8>
      p->tot_len += oversize_used;
 800d0ee:	8923      	ldrh	r3, [r4, #8]
 800d0f0:	442b      	add	r3, r5
 800d0f2:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 800d0f4:	6823      	ldr	r3, [r4, #0]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d1f7      	bne.n	800d0ea <tcp_write+0x3a6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800d0fa:	6860      	ldr	r0, [r4, #4]
 800d0fc:	8963      	ldrh	r3, [r4, #10]
 800d0fe:	462a      	mov	r2, r5
 800d100:	4659      	mov	r1, fp
 800d102:	4418      	add	r0, r3
 800d104:	f008 f9f6 	bl	80154f4 <memcpy>
        p->len += oversize_used;
 800d108:	8963      	ldrh	r3, [r4, #10]
 800d10a:	442b      	add	r3, r5
 800d10c:	8163      	strh	r3, [r4, #10]
 800d10e:	e7ec      	b.n	800d0ea <tcp_write+0x3a6>
 800d110:	0801d884 	.word	0x0801d884
 800d114:	0801d984 	.word	0x0801d984
 800d118:	0801c994 	.word	0x0801c994
 800d11c:	0801d9b8 	.word	0x0801d9b8
 800d120:	0801d9d0 	.word	0x0801d9d0
 800d124:	0801d9f0 	.word	0x0801d9f0
 800d128:	0801da10 	.word	0x0801da10
 800d12c:	0801da3c 	.word	0x0801da3c
 800d130:	0801da6c 	.word	0x0801da6c
 800d134:	0801daac 	.word	0x0801daac
 800d138:	0801dabc 	.word	0x0801dabc
    last_unsent->len += oversize_used;
 800d13c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d13e:	8913      	ldrh	r3, [r2, #8]
 800d140:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d142:	4419      	add	r1, r3
 800d144:	8111      	strh	r1, [r2, #8]
  pcb->unsent_oversize = oversize;
 800d146:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800d14a:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
  if (concat_p != NULL) {
 800d14e:	f1b9 0f00 	cmp.w	r9, #0
 800d152:	d041      	beq.n	800d1d8 <tcp_write+0x494>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800d154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d156:	2b00      	cmp	r3, #0
 800d158:	d036      	beq.n	800d1c8 <tcp_write+0x484>
    pbuf_cat(last_unsent->p, concat_p);
 800d15a:	4649      	mov	r1, r9
 800d15c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d15e:	6860      	ldr	r0, [r4, #4]
 800d160:	f7fc ff86 	bl	800a070 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800d164:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 800d168:	8922      	ldrh	r2, [r4, #8]
 800d16a:	4413      	add	r3, r2
 800d16c:	8123      	strh	r3, [r4, #8]
  if (last_unsent == NULL) {
 800d16e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d170:	2b00      	cmp	r3, #0
 800d172:	d057      	beq.n	800d224 <tcp_write+0x4e0>
    last_unsent->next = queue;
 800d174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d176:	461a      	mov	r2, r3
 800d178:	9b06      	ldr	r3, [sp, #24]
 800d17a:	6013      	str	r3, [r2, #0]
  pcb->snd_lbb += len;
 800d17c:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 800d180:	4453      	add	r3, sl
 800d182:	f8c8 3058 	str.w	r3, [r8, #88]	; 0x58
  pcb->snd_buf -= len;
 800d186:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 800d18a:	eba3 0a0a 	sub.w	sl, r3, sl
 800d18e:	f8a8 a060 	strh.w	sl, [r8, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 800d192:	f8a8 6062 	strh.w	r6, [r8, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 800d196:	b11e      	cbz	r6, 800d1a0 <tcp_write+0x45c>
    LWIP_ASSERT("tcp_write: valid queue length",
 800d198:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d045      	beq.n	800d22c <tcp_write+0x4e8>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800d1a0:	2f00      	cmp	r7, #0
 800d1a2:	f43f af7c 	beq.w	800d09e <tcp_write+0x35a>
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	f43f af78 	beq.w	800d09e <tcp_write+0x35a>
 800d1ae:	9a07      	ldr	r2, [sp, #28]
 800d1b0:	f012 0f02 	tst.w	r2, #2
 800d1b4:	f47f af73 	bne.w	800d09e <tcp_write+0x35a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800d1b8:	899c      	ldrh	r4, [r3, #12]
 800d1ba:	2008      	movs	r0, #8
 800d1bc:	f7fc f936 	bl	800942c <lwip_htons>
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	4304      	orrs	r4, r0
 800d1c4:	819c      	strh	r4, [r3, #12]
 800d1c6:	e76a      	b.n	800d09e <tcp_write+0x35a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800d1c8:	4b2e      	ldr	r3, [pc, #184]	; (800d284 <tcp_write+0x540>)
 800d1ca:	f240 22ba 	movw	r2, #698	; 0x2ba
 800d1ce:	492e      	ldr	r1, [pc, #184]	; (800d288 <tcp_write+0x544>)
 800d1d0:	482e      	ldr	r0, [pc, #184]	; (800d28c <tcp_write+0x548>)
 800d1d2:	f008 f9b1 	bl	8015538 <printf>
 800d1d6:	e7c0      	b.n	800d15a <tcp_write+0x416>
  } else if (extendlen > 0) {
 800d1d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d0c7      	beq.n	800d16e <tcp_write+0x42a>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800d1de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1e0:	b12b      	cbz	r3, 800d1ee <tcp_write+0x4aa>
 800d1e2:	685b      	ldr	r3, [r3, #4]
 800d1e4:	b11b      	cbz	r3, 800d1ee <tcp_write+0x4aa>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d1e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d1ec:	e00b      	b.n	800d206 <tcp_write+0x4c2>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800d1ee:	4b25      	ldr	r3, [pc, #148]	; (800d284 <tcp_write+0x540>)
 800d1f0:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 800d1f4:	4926      	ldr	r1, [pc, #152]	; (800d290 <tcp_write+0x54c>)
 800d1f6:	4825      	ldr	r0, [pc, #148]	; (800d28c <tcp_write+0x548>)
 800d1f8:	f008 f99e 	bl	8015538 <printf>
 800d1fc:	e7f3      	b.n	800d1e6 <tcp_write+0x4a2>
      p->tot_len += extendlen;
 800d1fe:	891a      	ldrh	r2, [r3, #8]
 800d200:	4402      	add	r2, r0
 800d202:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d204:	460b      	mov	r3, r1
 800d206:	6819      	ldr	r1, [r3, #0]
 800d208:	2900      	cmp	r1, #0
 800d20a:	d1f8      	bne.n	800d1fe <tcp_write+0x4ba>
    p->tot_len += extendlen;
 800d20c:	891a      	ldrh	r2, [r3, #8]
 800d20e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d210:	440a      	add	r2, r1
 800d212:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800d214:	895a      	ldrh	r2, [r3, #10]
 800d216:	440a      	add	r2, r1
 800d218:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800d21a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d21c:	8913      	ldrh	r3, [r2, #8]
 800d21e:	440b      	add	r3, r1
 800d220:	8113      	strh	r3, [r2, #8]
 800d222:	e7a4      	b.n	800d16e <tcp_write+0x42a>
    pcb->unsent = queue;
 800d224:	9b06      	ldr	r3, [sp, #24]
 800d226:	f8c8 3068 	str.w	r3, [r8, #104]	; 0x68
 800d22a:	e7a7      	b.n	800d17c <tcp_write+0x438>
    LWIP_ASSERT("tcp_write: valid queue length",
 800d22c:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
 800d230:	2b00      	cmp	r3, #0
 800d232:	d1b5      	bne.n	800d1a0 <tcp_write+0x45c>
 800d234:	4b13      	ldr	r3, [pc, #76]	; (800d284 <tcp_write+0x540>)
 800d236:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800d23a:	4916      	ldr	r1, [pc, #88]	; (800d294 <tcp_write+0x550>)
 800d23c:	4813      	ldr	r0, [pc, #76]	; (800d28c <tcp_write+0x548>)
 800d23e:	f008 f97b 	bl	8015538 <printf>
 800d242:	e7ad      	b.n	800d1a0 <tcp_write+0x45c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800d244:	9006      	str	r0, [sp, #24]
 800d246:	e707      	b.n	800d058 <tcp_write+0x314>
 800d248:	9006      	str	r0, [sp, #24]
 800d24a:	e705      	b.n	800d058 <tcp_write+0x314>
 800d24c:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 800d250:	e702      	b.n	800d058 <tcp_write+0x314>
 800d252:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 800d256:	e6ff      	b.n	800d058 <tcp_write+0x314>
 800d258:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 800d25c:	e6fc      	b.n	800d058 <tcp_write+0x314>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800d25e:	4b09      	ldr	r3, [pc, #36]	; (800d284 <tcp_write+0x540>)
 800d260:	f240 3201 	movw	r2, #769	; 0x301
 800d264:	490b      	ldr	r1, [pc, #44]	; (800d294 <tcp_write+0x550>)
 800d266:	4809      	ldr	r0, [pc, #36]	; (800d28c <tcp_write+0x548>)
 800d268:	f008 f966 	bl	8015538 <printf>
  return ERR_MEM;
 800d26c:	f04f 33ff 	mov.w	r3, #4294967295
 800d270:	930a      	str	r3, [sp, #40]	; 0x28
 800d272:	e714      	b.n	800d09e <tcp_write+0x35a>
 800d274:	f04f 33ff 	mov.w	r3, #4294967295
 800d278:	930a      	str	r3, [sp, #40]	; 0x28
 800d27a:	e710      	b.n	800d09e <tcp_write+0x35a>
 800d27c:	f04f 33ff 	mov.w	r3, #4294967295
 800d280:	930a      	str	r3, [sp, #40]	; 0x28
 800d282:	e70c      	b.n	800d09e <tcp_write+0x35a>
 800d284:	0801d884 	.word	0x0801d884
 800d288:	0801dad0 	.word	0x0801dad0
 800d28c:	0801c994 	.word	0x0801c994
 800d290:	0801db08 	.word	0x0801db08
 800d294:	0801db40 	.word	0x0801db40

0800d298 <tcp_enqueue_flags>:
{
 800d298:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d29c:	b083      	sub	sp, #12
 800d29e:	4604      	mov	r4, r0
 800d2a0:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d2a2:	f011 0703 	ands.w	r7, r1, #3
 800d2a6:	d052      	beq.n	800d34e <tcp_enqueue_flags+0xb6>
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800d2a8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800d2ac:	2b08      	cmp	r3, #8
 800d2ae:	d902      	bls.n	800d2b6 <tcp_enqueue_flags+0x1e>
 800d2b0:	f015 0f01 	tst.w	r5, #1
 800d2b4:	d053      	beq.n	800d35e <tcp_enqueue_flags+0xc6>
  if (flags & TCP_SYN) {
 800d2b6:	f015 0802 	ands.w	r8, r5, #2
 800d2ba:	d001      	beq.n	800d2c0 <tcp_enqueue_flags+0x28>
    optflags = TF_SEG_OPTS_MSS;
 800d2bc:	f04f 0801 	mov.w	r8, #1
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d2c0:	ea4f 0688 	mov.w	r6, r8, lsl #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d2c4:	f006 0604 	and.w	r6, r6, #4
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	4631      	mov	r1, r6
 800d2cc:	4610      	mov	r0, r2
 800d2ce:	f7fc fd47 	bl	8009d60 <pbuf_alloc>
 800d2d2:	4681      	mov	r9, r0
 800d2d4:	2800      	cmp	r0, #0
 800d2d6:	d049      	beq.n	800d36c <tcp_enqueue_flags+0xd4>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d2d8:	8943      	ldrh	r3, [r0, #10]
 800d2da:	429e      	cmp	r6, r3
 800d2dc:	d84d      	bhi.n	800d37a <tcp_enqueue_flags+0xe2>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d2de:	f8cd 8000 	str.w	r8, [sp]
 800d2e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d2e4:	462a      	mov	r2, r5
 800d2e6:	4649      	mov	r1, r9
 800d2e8:	4620      	mov	r0, r4
 800d2ea:	f7ff fc27 	bl	800cb3c <tcp_create_segment>
 800d2ee:	4606      	mov	r6, r0
 800d2f0:	2800      	cmp	r0, #0
 800d2f2:	d04a      	beq.n	800d38a <tcp_enqueue_flags+0xf2>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d2f4:	68c3      	ldr	r3, [r0, #12]
 800d2f6:	f013 0f03 	tst.w	r3, #3
 800d2fa:	d14d      	bne.n	800d398 <tcp_enqueue_flags+0x100>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d2fc:	8933      	ldrh	r3, [r6, #8]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d152      	bne.n	800d3a8 <tcp_enqueue_flags+0x110>
  if (pcb->unsent == NULL) {
 800d302:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800d304:	2b00      	cmp	r3, #0
 800d306:	d057      	beq.n	800d3b8 <tcp_enqueue_flags+0x120>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d308:	461a      	mov	r2, r3
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d1fb      	bne.n	800d308 <tcp_enqueue_flags+0x70>
    useg->next = seg;
 800d310:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 800d312:	2300      	movs	r3, #0
 800d314:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d318:	b117      	cbz	r7, 800d320 <tcp_enqueue_flags+0x88>
    pcb->snd_lbb++;
 800d31a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d31c:	3301      	adds	r3, #1
 800d31e:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 800d320:	f015 0f01 	tst.w	r5, #1
 800d324:	d003      	beq.n	800d32e <tcp_enqueue_flags+0x96>
    pcb->flags |= TF_FIN;
 800d326:	7ea3      	ldrb	r3, [r4, #26]
 800d328:	f043 0320 	orr.w	r3, r3, #32
 800d32c:	76a3      	strb	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d32e:	6870      	ldr	r0, [r6, #4]
 800d330:	f7fc fe7e 	bl	800a030 <pbuf_clen>
 800d334:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800d338:	4418      	add	r0, r3
 800d33a:	b280      	uxth	r0, r0
 800d33c:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 800d340:	2800      	cmp	r0, #0
 800d342:	d048      	beq.n	800d3d6 <tcp_enqueue_flags+0x13e>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d344:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d346:	2b00      	cmp	r3, #0
 800d348:	d038      	beq.n	800d3bc <tcp_enqueue_flags+0x124>
  return ERR_OK;
 800d34a:	2000      	movs	r0, #0
 800d34c:	e044      	b.n	800d3d8 <tcp_enqueue_flags+0x140>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d34e:	4b24      	ldr	r3, [pc, #144]	; (800d3e0 <tcp_enqueue_flags+0x148>)
 800d350:	f240 321a 	movw	r2, #794	; 0x31a
 800d354:	4923      	ldr	r1, [pc, #140]	; (800d3e4 <tcp_enqueue_flags+0x14c>)
 800d356:	4824      	ldr	r0, [pc, #144]	; (800d3e8 <tcp_enqueue_flags+0x150>)
 800d358:	f008 f8ee 	bl	8015538 <printf>
 800d35c:	e7a4      	b.n	800d2a8 <tcp_enqueue_flags+0x10>
    pcb->flags |= TF_NAGLEMEMERR;
 800d35e:	7ea3      	ldrb	r3, [r4, #26]
 800d360:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d364:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 800d366:	f04f 30ff 	mov.w	r0, #4294967295
 800d36a:	e035      	b.n	800d3d8 <tcp_enqueue_flags+0x140>
    pcb->flags |= TF_NAGLEMEMERR;
 800d36c:	7ea3      	ldrb	r3, [r4, #26]
 800d36e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d372:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 800d374:	f04f 30ff 	mov.w	r0, #4294967295
 800d378:	e02e      	b.n	800d3d8 <tcp_enqueue_flags+0x140>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d37a:	4b19      	ldr	r3, [pc, #100]	; (800d3e0 <tcp_enqueue_flags+0x148>)
 800d37c:	f44f 7250 	mov.w	r2, #832	; 0x340
 800d380:	491a      	ldr	r1, [pc, #104]	; (800d3ec <tcp_enqueue_flags+0x154>)
 800d382:	4819      	ldr	r0, [pc, #100]	; (800d3e8 <tcp_enqueue_flags+0x150>)
 800d384:	f008 f8d8 	bl	8015538 <printf>
 800d388:	e7a9      	b.n	800d2de <tcp_enqueue_flags+0x46>
    pcb->flags |= TF_NAGLEMEMERR;
 800d38a:	7ea3      	ldrb	r3, [r4, #26]
 800d38c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d390:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 800d392:	f04f 30ff 	mov.w	r0, #4294967295
 800d396:	e01f      	b.n	800d3d8 <tcp_enqueue_flags+0x140>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d398:	4b11      	ldr	r3, [pc, #68]	; (800d3e0 <tcp_enqueue_flags+0x148>)
 800d39a:	f240 3249 	movw	r2, #841	; 0x349
 800d39e:	4914      	ldr	r1, [pc, #80]	; (800d3f0 <tcp_enqueue_flags+0x158>)
 800d3a0:	4811      	ldr	r0, [pc, #68]	; (800d3e8 <tcp_enqueue_flags+0x150>)
 800d3a2:	f008 f8c9 	bl	8015538 <printf>
 800d3a6:	e7a9      	b.n	800d2fc <tcp_enqueue_flags+0x64>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d3a8:	4b0d      	ldr	r3, [pc, #52]	; (800d3e0 <tcp_enqueue_flags+0x148>)
 800d3aa:	f240 324a 	movw	r2, #842	; 0x34a
 800d3ae:	4911      	ldr	r1, [pc, #68]	; (800d3f4 <tcp_enqueue_flags+0x15c>)
 800d3b0:	480d      	ldr	r0, [pc, #52]	; (800d3e8 <tcp_enqueue_flags+0x150>)
 800d3b2:	f008 f8c1 	bl	8015538 <printf>
 800d3b6:	e7a4      	b.n	800d302 <tcp_enqueue_flags+0x6a>
    pcb->unsent = seg;
 800d3b8:	66a6      	str	r6, [r4, #104]	; 0x68
 800d3ba:	e7aa      	b.n	800d312 <tcp_enqueue_flags+0x7a>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d3bc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800d3be:	b10b      	cbz	r3, 800d3c4 <tcp_enqueue_flags+0x12c>
  return ERR_OK;
 800d3c0:	2000      	movs	r0, #0
 800d3c2:	e009      	b.n	800d3d8 <tcp_enqueue_flags+0x140>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d3c4:	4b06      	ldr	r3, [pc, #24]	; (800d3e0 <tcp_enqueue_flags+0x148>)
 800d3c6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800d3ca:	490b      	ldr	r1, [pc, #44]	; (800d3f8 <tcp_enqueue_flags+0x160>)
 800d3cc:	4806      	ldr	r0, [pc, #24]	; (800d3e8 <tcp_enqueue_flags+0x150>)
 800d3ce:	f008 f8b3 	bl	8015538 <printf>
  return ERR_OK;
 800d3d2:	2000      	movs	r0, #0
 800d3d4:	e000      	b.n	800d3d8 <tcp_enqueue_flags+0x140>
 800d3d6:	2000      	movs	r0, #0
}
 800d3d8:	b003      	add	sp, #12
 800d3da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3de:	bf00      	nop
 800d3e0:	0801d884 	.word	0x0801d884
 800d3e4:	0801db60 	.word	0x0801db60
 800d3e8:	0801c994 	.word	0x0801c994
 800d3ec:	0801dbb8 	.word	0x0801dbb8
 800d3f0:	0801dbf4 	.word	0x0801dbf4
 800d3f4:	0801dc0c 	.word	0x0801dc0c
 800d3f8:	0801dc38 	.word	0x0801dc38

0800d3fc <tcp_send_fin>:
{
 800d3fc:	b570      	push	{r4, r5, r6, lr}
 800d3fe:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 800d400:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800d402:	b153      	cbz	r3, 800d41a <tcp_send_fin+0x1e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d404:	461c      	mov	r4, r3
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d1fb      	bne.n	800d404 <tcp_send_fin+0x8>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d40c:	68e3      	ldr	r3, [r4, #12]
 800d40e:	8998      	ldrh	r0, [r3, #12]
 800d410:	f7fc f80c 	bl	800942c <lwip_htons>
 800d414:	f010 0f07 	tst.w	r0, #7
 800d418:	d004      	beq.n	800d424 <tcp_send_fin+0x28>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d41a:	2101      	movs	r1, #1
 800d41c:	4628      	mov	r0, r5
 800d41e:	f7ff ff3b 	bl	800d298 <tcp_enqueue_flags>
}
 800d422:	bd70      	pop	{r4, r5, r6, pc}
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d424:	68e3      	ldr	r3, [r4, #12]
 800d426:	899e      	ldrh	r6, [r3, #12]
 800d428:	2001      	movs	r0, #1
 800d42a:	f7fb ffff 	bl	800942c <lwip_htons>
 800d42e:	68e3      	ldr	r3, [r4, #12]
 800d430:	4306      	orrs	r6, r0
 800d432:	819e      	strh	r6, [r3, #12]
      pcb->flags |= TF_FIN;
 800d434:	7eab      	ldrb	r3, [r5, #26]
 800d436:	f043 0320 	orr.w	r3, r3, #32
 800d43a:	76ab      	strb	r3, [r5, #26]
      return ERR_OK;
 800d43c:	2000      	movs	r0, #0
 800d43e:	e7f0      	b.n	800d422 <tcp_send_fin+0x26>

0800d440 <tcp_send_empty_ack>:
{
 800d440:	b570      	push	{r4, r5, r6, lr}
 800d442:	b084      	sub	sp, #16
 800d444:	4604      	mov	r4, r0
  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d446:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800d448:	f7fb fff3 	bl	8009432 <lwip_htonl>
 800d44c:	4603      	mov	r3, r0
 800d44e:	2200      	movs	r2, #0
 800d450:	4611      	mov	r1, r2
 800d452:	4620      	mov	r0, r4
 800d454:	f7ff fbce 	bl	800cbf4 <tcp_output_alloc_header>
  if (p == NULL) {
 800d458:	b1e0      	cbz	r0, 800d494 <tcp_send_empty_ack+0x54>
 800d45a:	4606      	mov	r6, r0
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800d45c:	1d25      	adds	r5, r4, #4
 800d45e:	4628      	mov	r0, r5
 800d460:	f001 fa24 	bl	800e8ac <ip4_route>
  if (netif == NULL) {
 800d464:	b1e8      	cbz	r0, 800d4a2 <tcp_send_empty_ack+0x62>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800d466:	9002      	str	r0, [sp, #8]
 800d468:	2306      	movs	r3, #6
 800d46a:	9301      	str	r3, [sp, #4]
 800d46c:	7a63      	ldrb	r3, [r4, #9]
 800d46e:	9300      	str	r3, [sp, #0]
 800d470:	7aa3      	ldrb	r3, [r4, #10]
 800d472:	462a      	mov	r2, r5
 800d474:	4621      	mov	r1, r4
 800d476:	4630      	mov	r0, r6
 800d478:	f001 fba0 	bl	800ebbc <ip4_output_if>
 800d47c:	4605      	mov	r5, r0
  pbuf_free(p);
 800d47e:	4630      	mov	r0, r6
 800d480:	f7fc fc0a 	bl	8009c98 <pbuf_free>
  if (err != ERR_OK) {
 800d484:	b185      	cbz	r5, 800d4a8 <tcp_send_empty_ack+0x68>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800d486:	7ea3      	ldrb	r3, [r4, #26]
 800d488:	f043 0303 	orr.w	r3, r3, #3
 800d48c:	76a3      	strb	r3, [r4, #26]
}
 800d48e:	4628      	mov	r0, r5
 800d490:	b004      	add	sp, #16
 800d492:	bd70      	pop	{r4, r5, r6, pc}
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800d494:	7ea3      	ldrb	r3, [r4, #26]
 800d496:	f043 0303 	orr.w	r3, r3, #3
 800d49a:	76a3      	strb	r3, [r4, #26]
    return ERR_BUF;
 800d49c:	f06f 0501 	mvn.w	r5, #1
 800d4a0:	e7f5      	b.n	800d48e <tcp_send_empty_ack+0x4e>
    err = ERR_RTE;
 800d4a2:	f06f 0503 	mvn.w	r5, #3
 800d4a6:	e7ea      	b.n	800d47e <tcp_send_empty_ack+0x3e>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800d4a8:	7ea3      	ldrb	r3, [r4, #26]
 800d4aa:	f023 0303 	bic.w	r3, r3, #3
 800d4ae:	76a3      	strb	r3, [r4, #26]
 800d4b0:	e7ed      	b.n	800d48e <tcp_send_empty_ack+0x4e>
	...

0800d4b4 <tcp_output>:
{
 800d4b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4b8:	4605      	mov	r5, r0
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d4ba:	7d03      	ldrb	r3, [r0, #20]
 800d4bc:	2b01      	cmp	r3, #1
 800d4be:	d054      	beq.n	800d56a <tcp_output+0xb6>
  if (tcp_input_pcb == pcb) {
 800d4c0:	4b9b      	ldr	r3, [pc, #620]	; (800d730 <tcp_output+0x27c>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	42ab      	cmp	r3, r5
 800d4c6:	f000 812b 	beq.w	800d720 <tcp_output+0x26c>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d4ca:	f8b5 9048 	ldrh.w	r9, [r5, #72]	; 0x48
 800d4ce:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 800d4d2:	4599      	cmp	r9, r3
 800d4d4:	bf28      	it	cs
 800d4d6:	4699      	movcs	r9, r3
 800d4d8:	46c8      	mov	r8, r9
  seg = pcb->unsent;
 800d4da:	6eac      	ldr	r4, [r5, #104]	; 0x68
  if (pcb->flags & TF_ACK_NOW &&
 800d4dc:	7eab      	ldrb	r3, [r5, #26]
 800d4de:	f013 0f02 	tst.w	r3, #2
 800d4e2:	d00b      	beq.n	800d4fc <tcp_output+0x48>
 800d4e4:	2c00      	cmp	r4, #0
 800d4e6:	d048      	beq.n	800d57a <tcp_output+0xc6>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800d4e8:	68e3      	ldr	r3, [r4, #12]
 800d4ea:	6858      	ldr	r0, [r3, #4]
 800d4ec:	f7fb ffa1 	bl	8009432 <lwip_htonl>
 800d4f0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800d4f2:	1ac3      	subs	r3, r0, r3
 800d4f4:	8922      	ldrh	r2, [r4, #8]
 800d4f6:	4413      	add	r3, r2
     (seg == NULL ||
 800d4f8:	454b      	cmp	r3, r9
 800d4fa:	d83e      	bhi.n	800d57a <tcp_output+0xc6>
  useg = pcb->unacked;
 800d4fc:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
  if (useg != NULL) {
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d040      	beq.n	800d584 <tcp_output+0xd0>
    for (; useg->next != NULL; useg = useg->next);
 800d502:	461e      	mov	r6, r3
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d1fb      	bne.n	800d502 <tcp_output+0x4e>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800d50a:	1d28      	adds	r0, r5, #4
 800d50c:	f001 f9ce 	bl	800e8ac <ip4_route>
  if (netif == NULL) {
 800d510:	4607      	mov	r7, r0
 800d512:	2800      	cmp	r0, #0
 800d514:	f000 8106 	beq.w	800d724 <tcp_output+0x270>
  if (ip_addr_isany(&pcb->local_ip)) {
 800d518:	b10d      	cbz	r5, 800d51e <tcp_output+0x6a>
 800d51a:	682b      	ldr	r3, [r5, #0]
 800d51c:	b92b      	cbnz	r3, 800d52a <tcp_output+0x76>
    if (local_ip == NULL) {
 800d51e:	f117 0f04 	cmn.w	r7, #4
 800d522:	f000 8102 	beq.w	800d72a <tcp_output+0x276>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	602b      	str	r3, [r5, #0]
  if (seg != NULL &&
 800d52a:	2c00      	cmp	r4, #0
 800d52c:	f000 8089 	beq.w	800d642 <tcp_output+0x18e>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800d530:	68e3      	ldr	r3, [r4, #12]
 800d532:	6858      	ldr	r0, [r3, #4]
 800d534:	f7fb ff7d 	bl	8009432 <lwip_htonl>
 800d538:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800d53a:	1ac3      	subs	r3, r0, r3
 800d53c:	8922      	ldrh	r2, [r4, #8]
 800d53e:	4413      	add	r3, r2
  if (seg != NULL &&
 800d540:	454b      	cmp	r3, r9
 800d542:	d97e      	bls.n	800d642 <tcp_output+0x18e>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800d544:	f1b9 0f00 	cmp.w	r9, #0
 800d548:	d07b      	beq.n	800d642 <tcp_output+0x18e>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800d54a:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 800d54e:	4599      	cmp	r9, r3
 800d550:	d177      	bne.n	800d642 <tcp_output+0x18e>
 800d552:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800d554:	2b00      	cmp	r3, #0
 800d556:	d174      	bne.n	800d642 <tcp_output+0x18e>
    if (pcb->persist_backoff == 0) {
 800d558:	f895 3095 	ldrb.w	r3, [r5, #149]	; 0x95
 800d55c:	bb5b      	cbnz	r3, 800d5b6 <tcp_output+0x102>
      pcb->persist_cnt = 0;
 800d55e:	f885 3094 	strb.w	r3, [r5, #148]	; 0x94
      pcb->persist_backoff = 1;
 800d562:	2301      	movs	r3, #1
 800d564:	f885 3095 	strb.w	r3, [r5, #149]	; 0x95
    goto output_done;
 800d568:	e025      	b.n	800d5b6 <tcp_output+0x102>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d56a:	4b72      	ldr	r3, [pc, #456]	; (800d734 <tcp_output+0x280>)
 800d56c:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800d570:	4971      	ldr	r1, [pc, #452]	; (800d738 <tcp_output+0x284>)
 800d572:	4872      	ldr	r0, [pc, #456]	; (800d73c <tcp_output+0x288>)
 800d574:	f007 ffe0 	bl	8015538 <printf>
 800d578:	e7a2      	b.n	800d4c0 <tcp_output+0xc>
     return tcp_send_empty_ack(pcb);
 800d57a:	4628      	mov	r0, r5
 800d57c:	f7ff ff60 	bl	800d440 <tcp_send_empty_ack>
 800d580:	4603      	mov	r3, r0
 800d582:	e021      	b.n	800d5c8 <tcp_output+0x114>
  useg = pcb->unacked;
 800d584:	461e      	mov	r6, r3
 800d586:	e7c0      	b.n	800d50a <tcp_output+0x56>
    LWIP_ASSERT("RST not expected here!",
 800d588:	4b6a      	ldr	r3, [pc, #424]	; (800d734 <tcp_output+0x280>)
 800d58a:	f240 4245 	movw	r2, #1093	; 0x445
 800d58e:	496c      	ldr	r1, [pc, #432]	; (800d740 <tcp_output+0x28c>)
 800d590:	486a      	ldr	r0, [pc, #424]	; (800d73c <tcp_output+0x288>)
 800d592:	f007 ffd1 	bl	8015538 <printf>
 800d596:	e067      	b.n	800d668 <tcp_output+0x1b4>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d598:	8911      	ldrh	r1, [r2, #8]
 800d59a:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
 800d59c:	4291      	cmp	r1, r2
 800d59e:	d26f      	bcs.n	800d680 <tcp_output+0x1cc>
 800d5a0:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
 800d5a4:	2a00      	cmp	r2, #0
 800d5a6:	d06b      	beq.n	800d680 <tcp_output+0x1cc>
 800d5a8:	f8b5 2062 	ldrh.w	r2, [r5, #98]	; 0x62
 800d5ac:	2a08      	cmp	r2, #8
 800d5ae:	d867      	bhi.n	800d680 <tcp_output+0x1cc>
 800d5b0:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800d5b4:	d164      	bne.n	800d680 <tcp_output+0x1cc>
  if (pcb->unsent == NULL) {
 800d5b6:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	f000 80ae 	beq.w	800d71a <tcp_output+0x266>
  pcb->flags &= ~TF_NAGLEMEMERR;
 800d5be:	7eab      	ldrb	r3, [r5, #26]
 800d5c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5c4:	76ab      	strb	r3, [r5, #26]
  return ERR_OK;
 800d5c6:	2300      	movs	r3, #0
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d5ce:	68e3      	ldr	r3, [r4, #12]
 800d5d0:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 800d5d4:	2010      	movs	r0, #16
 800d5d6:	f7fb ff29 	bl	800942c <lwip_htons>
 800d5da:	68e3      	ldr	r3, [r4, #12]
 800d5dc:	ea49 0900 	orr.w	r9, r9, r0
 800d5e0:	f8a3 900c 	strh.w	r9, [r3, #12]
 800d5e4:	e04f      	b.n	800d686 <tcp_output+0x1d2>
      pcb->flags |= TF_NAGLEMEMERR;
 800d5e6:	7eaa      	ldrb	r2, [r5, #26]
 800d5e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d5ec:	76aa      	strb	r2, [r5, #26]
      return err;
 800d5ee:	e7eb      	b.n	800d5c8 <tcp_output+0x114>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d5f0:	2000      	movs	r0, #0
 800d5f2:	e068      	b.n	800d6c6 <tcp_output+0x212>
      pcb->snd_nxt = snd_nxt;
 800d5f4:	64e8      	str	r0, [r5, #76]	; 0x4c
 800d5f6:	e06c      	b.n	800d6d2 <tcp_output+0x21e>
    if (TCP_TCPLEN(seg) > 0) {
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	e074      	b.n	800d6e6 <tcp_output+0x232>
        pcb->unacked = seg;
 800d5fc:	66ec      	str	r4, [r5, #108]	; 0x6c
        useg = seg;
 800d5fe:	4626      	mov	r6, r4
 800d600:	e01e      	b.n	800d640 <tcp_output+0x18c>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d602:	f105 0a6c 	add.w	sl, r5, #108	; 0x6c
          while (*cur_seg &&
 800d606:	f8da 3000 	ldr.w	r3, [sl]
 800d60a:	b183      	cbz	r3, 800d62e <tcp_output+0x17a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d60c:	68db      	ldr	r3, [r3, #12]
 800d60e:	6858      	ldr	r0, [r3, #4]
 800d610:	f7fb ff0f 	bl	8009432 <lwip_htonl>
 800d614:	4681      	mov	r9, r0
 800d616:	68e3      	ldr	r3, [r4, #12]
 800d618:	6858      	ldr	r0, [r3, #4]
 800d61a:	f7fb ff0a 	bl	8009432 <lwip_htonl>
 800d61e:	eba9 0900 	sub.w	r9, r9, r0
          while (*cur_seg &&
 800d622:	f1b9 0f00 	cmp.w	r9, #0
 800d626:	da02      	bge.n	800d62e <tcp_output+0x17a>
              cur_seg = &((*cur_seg)->next );
 800d628:	f8da a000 	ldr.w	sl, [sl]
 800d62c:	e7eb      	b.n	800d606 <tcp_output+0x152>
          seg->next = (*cur_seg);
 800d62e:	f8da 3000 	ldr.w	r3, [sl]
 800d632:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
 800d634:	f8ca 4000 	str.w	r4, [sl]
 800d638:	e002      	b.n	800d640 <tcp_output+0x18c>
      tcp_seg_free(seg);
 800d63a:	4620      	mov	r0, r4
 800d63c:	f7fd f810 	bl	800a660 <tcp_seg_free>
    seg = pcb->unsent;
 800d640:	6eac      	ldr	r4, [r5, #104]	; 0x68
  while (seg != NULL &&
 800d642:	2c00      	cmp	r4, #0
 800d644:	d0b7      	beq.n	800d5b6 <tcp_output+0x102>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d646:	68e3      	ldr	r3, [r4, #12]
 800d648:	6858      	ldr	r0, [r3, #4]
 800d64a:	f7fb fef2 	bl	8009432 <lwip_htonl>
 800d64e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800d650:	1ac0      	subs	r0, r0, r3
 800d652:	8923      	ldrh	r3, [r4, #8]
 800d654:	4418      	add	r0, r3
  while (seg != NULL &&
 800d656:	4540      	cmp	r0, r8
 800d658:	d8ad      	bhi.n	800d5b6 <tcp_output+0x102>
    LWIP_ASSERT("RST not expected here!",
 800d65a:	68e3      	ldr	r3, [r4, #12]
 800d65c:	8998      	ldrh	r0, [r3, #12]
 800d65e:	f7fb fee5 	bl	800942c <lwip_htons>
 800d662:	f010 0f04 	tst.w	r0, #4
 800d666:	d18f      	bne.n	800d588 <tcp_output+0xd4>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d668:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800d66a:	b14b      	cbz	r3, 800d680 <tcp_output+0x1cc>
 800d66c:	7eab      	ldrb	r3, [r5, #26]
 800d66e:	f013 0f44 	tst.w	r3, #68	; 0x44
 800d672:	d105      	bne.n	800d680 <tcp_output+0x1cc>
 800d674:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 800d676:	2a00      	cmp	r2, #0
 800d678:	d092      	beq.n	800d5a0 <tcp_output+0xec>
 800d67a:	6811      	ldr	r1, [r2, #0]
 800d67c:	2900      	cmp	r1, #0
 800d67e:	d08b      	beq.n	800d598 <tcp_output+0xe4>
    if (pcb->state != SYN_SENT) {
 800d680:	7d2b      	ldrb	r3, [r5, #20]
 800d682:	2b02      	cmp	r3, #2
 800d684:	d1a3      	bne.n	800d5ce <tcp_output+0x11a>
    err = tcp_output_segment(seg, pcb, netif);
 800d686:	463a      	mov	r2, r7
 800d688:	4629      	mov	r1, r5
 800d68a:	4620      	mov	r0, r4
 800d68c:	f7ff fafc 	bl	800cc88 <tcp_output_segment>
    if (err != ERR_OK) {
 800d690:	4603      	mov	r3, r0
 800d692:	2800      	cmp	r0, #0
 800d694:	d1a7      	bne.n	800d5e6 <tcp_output+0x132>
    pcb->unsent = seg->next;
 800d696:	6823      	ldr	r3, [r4, #0]
 800d698:	66ab      	str	r3, [r5, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800d69a:	7d2b      	ldrb	r3, [r5, #20]
 800d69c:	2b02      	cmp	r3, #2
 800d69e:	d003      	beq.n	800d6a8 <tcp_output+0x1f4>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800d6a0:	7eab      	ldrb	r3, [r5, #26]
 800d6a2:	f023 0303 	bic.w	r3, r3, #3
 800d6a6:	76ab      	strb	r3, [r5, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d6a8:	68e3      	ldr	r3, [r4, #12]
 800d6aa:	6858      	ldr	r0, [r3, #4]
 800d6ac:	f7fb fec1 	bl	8009432 <lwip_htonl>
 800d6b0:	4681      	mov	r9, r0
 800d6b2:	f8b4 a008 	ldrh.w	sl, [r4, #8]
 800d6b6:	68e3      	ldr	r3, [r4, #12]
 800d6b8:	8998      	ldrh	r0, [r3, #12]
 800d6ba:	f7fb feb7 	bl	800942c <lwip_htons>
 800d6be:	f010 0f03 	tst.w	r0, #3
 800d6c2:	d095      	beq.n	800d5f0 <tcp_output+0x13c>
 800d6c4:	2001      	movs	r0, #1
 800d6c6:	4450      	add	r0, sl
 800d6c8:	4448      	add	r0, r9
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d6ca:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800d6cc:	1a1b      	subs	r3, r3, r0
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	db90      	blt.n	800d5f4 <tcp_output+0x140>
    if (TCP_TCPLEN(seg) > 0) {
 800d6d2:	f8b4 9008 	ldrh.w	r9, [r4, #8]
 800d6d6:	68e3      	ldr	r3, [r4, #12]
 800d6d8:	8998      	ldrh	r0, [r3, #12]
 800d6da:	f7fb fea7 	bl	800942c <lwip_htons>
 800d6de:	f010 0f03 	tst.w	r0, #3
 800d6e2:	d089      	beq.n	800d5f8 <tcp_output+0x144>
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	eb19 0f03 	cmn.w	r9, r3
 800d6ea:	d0a6      	beq.n	800d63a <tcp_output+0x186>
      seg->next = NULL;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
 800d6f0:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d082      	beq.n	800d5fc <tcp_output+0x148>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d6f6:	68e3      	ldr	r3, [r4, #12]
 800d6f8:	6858      	ldr	r0, [r3, #4]
 800d6fa:	f7fb fe9a 	bl	8009432 <lwip_htonl>
 800d6fe:	4681      	mov	r9, r0
 800d700:	68f3      	ldr	r3, [r6, #12]
 800d702:	6858      	ldr	r0, [r3, #4]
 800d704:	f7fb fe95 	bl	8009432 <lwip_htonl>
 800d708:	eba9 0900 	sub.w	r9, r9, r0
 800d70c:	f1b9 0f00 	cmp.w	r9, #0
 800d710:	f6ff af77 	blt.w	800d602 <tcp_output+0x14e>
          useg->next = seg;
 800d714:	6034      	str	r4, [r6, #0]
          useg = useg->next;
 800d716:	4626      	mov	r6, r4
 800d718:	e792      	b.n	800d640 <tcp_output+0x18c>
    pcb->unsent_oversize = 0;
 800d71a:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
 800d71e:	e74e      	b.n	800d5be <tcp_output+0x10a>
    return ERR_OK;
 800d720:	2300      	movs	r3, #0
 800d722:	e751      	b.n	800d5c8 <tcp_output+0x114>
    return ERR_RTE;
 800d724:	f06f 0303 	mvn.w	r3, #3
 800d728:	e74e      	b.n	800d5c8 <tcp_output+0x114>
      return ERR_RTE;
 800d72a:	f06f 0303 	mvn.w	r3, #3
 800d72e:	e74b      	b.n	800d5c8 <tcp_output+0x114>
 800d730:	20009724 	.word	0x20009724
 800d734:	0801d884 	.word	0x0801d884
 800d738:	0801dc60 	.word	0x0801dc60
 800d73c:	0801c994 	.word	0x0801c994
 800d740:	0801dc88 	.word	0x0801dc88

0800d744 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800d744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d748:	b085      	sub	sp, #20
 800d74a:	4680      	mov	r8, r0
 800d74c:	460f      	mov	r7, r1
 800d74e:	4691      	mov	r9, r2
 800d750:	461d      	mov	r5, r3
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800d752:	2200      	movs	r2, #0
 800d754:	2114      	movs	r1, #20
 800d756:	2001      	movs	r0, #1
 800d758:	f7fc fb02 	bl	8009d60 <pbuf_alloc>
  if (p == NULL) {
 800d75c:	b3b0      	cbz	r0, 800d7cc <tcp_rst+0x88>
 800d75e:	4606      	mov	r6, r0
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d760:	8943      	ldrh	r3, [r0, #10]
 800d762:	2b13      	cmp	r3, #19
 800d764:	d935      	bls.n	800d7d2 <tcp_rst+0x8e>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800d766:	6874      	ldr	r4, [r6, #4]
  tcphdr->src = lwip_htons(local_port);
 800d768:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 800d76c:	f7fb fe5e 	bl	800942c <lwip_htons>
 800d770:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800d772:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800d776:	f7fb fe59 	bl	800942c <lwip_htons>
 800d77a:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800d77c:	4640      	mov	r0, r8
 800d77e:	f7fb fe58 	bl	8009432 <lwip_htonl>
 800d782:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800d784:	4638      	mov	r0, r7
 800d786:	f7fb fe54 	bl	8009432 <lwip_htonl>
 800d78a:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800d78c:	f245 0014 	movw	r0, #20500	; 0x5014
 800d790:	f7fb fe4c 	bl	800942c <lwip_htons>
 800d794:	81a0      	strh	r0, [r4, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800d796:	2300      	movs	r3, #0
 800d798:	2208      	movs	r2, #8
 800d79a:	73a2      	strb	r2, [r4, #14]
 800d79c:	2260      	movs	r2, #96	; 0x60
 800d79e:	73e2      	strb	r2, [r4, #15]
#endif
  tcphdr->chksum = 0;
 800d7a0:	7423      	strb	r3, [r4, #16]
 800d7a2:	7463      	strb	r3, [r4, #17]
  tcphdr->urgp = 0;
 800d7a4:	74a3      	strb	r3, [r4, #18]
 800d7a6:	74e3      	strb	r3, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800d7a8:	4628      	mov	r0, r5
 800d7aa:	f001 f87f 	bl	800e8ac <ip4_route>
  if (netif != NULL) {
 800d7ae:	b150      	cbz	r0, 800d7c6 <tcp_rst+0x82>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800d7b0:	9002      	str	r0, [sp, #8]
 800d7b2:	2306      	movs	r3, #6
 800d7b4:	9301      	str	r3, [sp, #4]
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	9300      	str	r3, [sp, #0]
 800d7ba:	23ff      	movs	r3, #255	; 0xff
 800d7bc:	462a      	mov	r2, r5
 800d7be:	4649      	mov	r1, r9
 800d7c0:	4630      	mov	r0, r6
 800d7c2:	f001 f9fb 	bl	800ebbc <ip4_output_if>
  }
  pbuf_free(p);
 800d7c6:	4630      	mov	r0, r6
 800d7c8:	f7fc fa66 	bl	8009c98 <pbuf_free>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d7cc:	b005      	add	sp, #20
 800d7ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d7d2:	4b04      	ldr	r3, [pc, #16]	; (800d7e4 <tcp_rst+0xa0>)
 800d7d4:	f240 524c 	movw	r2, #1356	; 0x54c
 800d7d8:	4903      	ldr	r1, [pc, #12]	; (800d7e8 <tcp_rst+0xa4>)
 800d7da:	4804      	ldr	r0, [pc, #16]	; (800d7ec <tcp_rst+0xa8>)
 800d7dc:	f007 feac 	bl	8015538 <printf>
 800d7e0:	e7c1      	b.n	800d766 <tcp_rst+0x22>
 800d7e2:	bf00      	nop
 800d7e4:	0801d884 	.word	0x0801d884
 800d7e8:	0801d954 	.word	0x0801d954
 800d7ec:	0801c994 	.word	0x0801c994

0800d7f0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d7f0:	b508      	push	{r3, lr}
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800d7f2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800d7f4:	b1a3      	cbz	r3, 800d820 <tcp_rexmit_rto+0x30>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800d7f6:	461a      	mov	r2, r3
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d1fb      	bne.n	800d7f6 <tcp_rexmit_rto+0x6>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d7fe:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800d800:	6013      	str	r3, [r2, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d802:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800d804:	6683      	str	r3, [r0, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d806:	2300      	movs	r3, #0
 800d808:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d80a:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800d80e:	2bff      	cmp	r3, #255	; 0xff
 800d810:	d002      	beq.n	800d818 <tcp_rexmit_rto+0x28>
    ++pcb->nrtx;
 800d812:	3301      	adds	r3, #1
 800d814:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d818:	2300      	movs	r3, #0
 800d81a:	6343      	str	r3, [r0, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800d81c:	f7ff fe4a 	bl	800d4b4 <tcp_output>
}
 800d820:	bd08      	pop	{r3, pc}

0800d822 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800d824:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
 800d826:	b316      	cbz	r6, 800d86e <tcp_rexmit+0x4c>
 800d828:	4607      	mov	r7, r0
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 800d82a:	6833      	ldr	r3, [r6, #0]
 800d82c:	66c3      	str	r3, [r0, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800d82e:	f100 0568 	add.w	r5, r0, #104	; 0x68
  while (*cur_seg &&
 800d832:	682b      	ldr	r3, [r5, #0]
 800d834:	b16b      	cbz	r3, 800d852 <tcp_rexmit+0x30>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d836:	68db      	ldr	r3, [r3, #12]
 800d838:	6858      	ldr	r0, [r3, #4]
 800d83a:	f7fb fdfa 	bl	8009432 <lwip_htonl>
 800d83e:	4604      	mov	r4, r0
 800d840:	68f3      	ldr	r3, [r6, #12]
 800d842:	6858      	ldr	r0, [r3, #4]
 800d844:	f7fb fdf5 	bl	8009432 <lwip_htonl>
 800d848:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 800d84a:	2c00      	cmp	r4, #0
 800d84c:	da01      	bge.n	800d852 <tcp_rexmit+0x30>
      cur_seg = &((*cur_seg)->next );
 800d84e:	682d      	ldr	r5, [r5, #0]
 800d850:	e7ef      	b.n	800d832 <tcp_rexmit+0x10>
  }
  seg->next = *cur_seg;
 800d852:	682b      	ldr	r3, [r5, #0]
 800d854:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800d856:	602e      	str	r6, [r5, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d858:	6833      	ldr	r3, [r6, #0]
 800d85a:	b14b      	cbz	r3, 800d870 <tcp_rexmit+0x4e>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d85c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800d860:	2bff      	cmp	r3, #255	; 0xff
 800d862:	d002      	beq.n	800d86a <tcp_rexmit+0x48>
    ++pcb->nrtx;
 800d864:	3301      	adds	r3, #1
 800d866:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d86a:	2300      	movs	r3, #0
 800d86c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800d86e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 800d870:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800d874:	e7f2      	b.n	800d85c <tcp_rexmit+0x3a>

0800d876 <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d876:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800d878:	b33b      	cbz	r3, 800d8ca <tcp_rexmit_fast+0x54>
{
 800d87a:	b510      	push	{r4, lr}
 800d87c:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d87e:	7e83      	ldrb	r3, [r0, #26]
 800d880:	f013 0f04 	tst.w	r3, #4
 800d884:	d000      	beq.n	800d888 <tcp_rexmit_fast+0x12>
    pcb->flags |= TF_INFR;

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
  }
}
 800d886:	bd10      	pop	{r4, pc}
    tcp_rexmit(pcb);
 800d888:	f7ff ffcb 	bl	800d822 <tcp_rexmit>
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d88c:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 800d890:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800d894:	4293      	cmp	r3, r2
 800d896:	bf28      	it	cs
 800d898:	4613      	movcs	r3, r2
 800d89a:	085b      	lsrs	r3, r3, #1
 800d89c:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800d8a0:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 800d8a2:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800d8a6:	d202      	bcs.n	800d8ae <tcp_rexmit_fast+0x38>
      pcb->ssthresh = 2*pcb->mss;
 800d8a8:	0053      	lsls	r3, r2, #1
 800d8aa:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d8ae:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 800d8b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d8b6:	441a      	add	r2, r3
 800d8b8:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800d8bc:	7ea3      	ldrb	r3, [r4, #26]
 800d8be:	f043 0304 	orr.w	r3, r3, #4
 800d8c2:	76a3      	strb	r3, [r4, #26]
    pcb->rtime = 0;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	8623      	strh	r3, [r4, #48]	; 0x30
}
 800d8c8:	e7dd      	b.n	800d886 <tcp_rexmit_fast+0x10>
 800d8ca:	4770      	bx	lr

0800d8cc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d8cc:	b570      	push	{r4, r5, r6, lr}
 800d8ce:	b084      	sub	sp, #16
 800d8d0:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d8d2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800d8d4:	3801      	subs	r0, #1
 800d8d6:	f7fb fdac 	bl	8009432 <lwip_htonl>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	2200      	movs	r2, #0
 800d8de:	4611      	mov	r1, r2
 800d8e0:	4620      	mov	r0, r4
 800d8e2:	f7ff f987 	bl	800cbf4 <tcp_output_alloc_header>
  if (p == NULL) {
 800d8e6:	b1d0      	cbz	r0, 800d91e <tcp_keepalive+0x52>
 800d8e8:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800d8ea:	1d26      	adds	r6, r4, #4
 800d8ec:	4630      	mov	r0, r6
 800d8ee:	f000 ffdd 	bl	800e8ac <ip4_route>
  if (netif == NULL) {
 800d8f2:	b188      	cbz	r0, 800d918 <tcp_keepalive+0x4c>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800d8f4:	9002      	str	r0, [sp, #8]
 800d8f6:	2306      	movs	r3, #6
 800d8f8:	9301      	str	r3, [sp, #4]
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	9300      	str	r3, [sp, #0]
 800d8fe:	7aa3      	ldrb	r3, [r4, #10]
 800d900:	4632      	mov	r2, r6
 800d902:	4621      	mov	r1, r4
 800d904:	4628      	mov	r0, r5
 800d906:	f001 f959 	bl	800ebbc <ip4_output_if>
 800d90a:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800d90c:	4628      	mov	r0, r5
 800d90e:	f7fc f9c3 	bl	8009c98 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800d912:	4620      	mov	r0, r4
 800d914:	b004      	add	sp, #16
 800d916:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 800d918:	f06f 0403 	mvn.w	r4, #3
 800d91c:	e7f6      	b.n	800d90c <tcp_keepalive+0x40>
    return ERR_MEM;
 800d91e:	f04f 34ff 	mov.w	r4, #4294967295
 800d922:	e7f6      	b.n	800d912 <tcp_keepalive+0x46>

0800d924 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d928:	b084      	sub	sp, #16
 800d92a:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800d92c:	6ec5      	ldr	r5, [r0, #108]	; 0x6c

  if (seg == NULL) {
 800d92e:	b16d      	cbz	r5, 800d94c <tcp_zero_window_probe+0x28>
    seg = pcb->unsent;
  }
  if (seg == NULL) {
 800d930:	2d00      	cmp	r5, #0
 800d932:	d05c      	beq.n	800d9ee <tcp_zero_window_probe+0xca>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d934:	68eb      	ldr	r3, [r5, #12]
 800d936:	8998      	ldrh	r0, [r3, #12]
 800d938:	f7fb fd78 	bl	800942c <lwip_htons>
 800d93c:	f010 0f01 	tst.w	r0, #1
 800d940:	d006      	beq.n	800d950 <tcp_zero_window_probe+0x2c>
 800d942:	892b      	ldrh	r3, [r5, #8]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d040      	beq.n	800d9ca <tcp_zero_window_probe+0xa6>
 800d948:	2200      	movs	r2, #0
 800d94a:	e002      	b.n	800d952 <tcp_zero_window_probe+0x2e>
    seg = pcb->unsent;
 800d94c:	6e85      	ldr	r5, [r0, #104]	; 0x68
 800d94e:	e7ef      	b.n	800d930 <tcp_zero_window_probe+0xc>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d950:	2200      	movs	r2, #0
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d952:	f002 06ff 	and.w	r6, r2, #255	; 0xff

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800d956:	68eb      	ldr	r3, [r5, #12]
 800d958:	685b      	ldr	r3, [r3, #4]
 800d95a:	f082 0201 	eor.w	r2, r2, #1
 800d95e:	2100      	movs	r1, #0
 800d960:	4620      	mov	r0, r4
 800d962:	f7ff f947 	bl	800cbf4 <tcp_output_alloc_header>
  if (p == NULL) {
 800d966:	4607      	mov	r7, r0
 800d968:	2800      	cmp	r0, #0
 800d96a:	d042      	beq.n	800d9f2 <tcp_zero_window_probe+0xce>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d96c:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800d970:	b36e      	cbz	r6, 800d9ce <tcp_zero_window_probe+0xaa>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d972:	f8b8 600c 	ldrh.w	r6, [r8, #12]
 800d976:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800d97a:	b2b6      	uxth	r6, r6
 800d97c:	2011      	movs	r0, #17
 800d97e:	f7fb fd55 	bl	800942c <lwip_htons>
 800d982:	4306      	orrs	r6, r0
 800d984:	f8a8 600c 	strh.w	r6, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d988:	68eb      	ldr	r3, [r5, #12]
 800d98a:	6858      	ldr	r0, [r3, #4]
 800d98c:	f7fb fd51 	bl	8009432 <lwip_htonl>
 800d990:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d992:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d994:	1a1b      	subs	r3, r3, r0
 800d996:	2b00      	cmp	r3, #0
 800d998:	db24      	blt.n	800d9e4 <tcp_zero_window_probe+0xc0>
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800d99a:	1d25      	adds	r5, r4, #4
 800d99c:	4628      	mov	r0, r5
 800d99e:	f000 ff85 	bl	800e8ac <ip4_route>
  if (netif == NULL) {
 800d9a2:	b308      	cbz	r0, 800d9e8 <tcp_zero_window_probe+0xc4>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d9a4:	9002      	str	r0, [sp, #8]
 800d9a6:	2306      	movs	r3, #6
 800d9a8:	9301      	str	r3, [sp, #4]
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	9300      	str	r3, [sp, #0]
 800d9ae:	7aa3      	ldrb	r3, [r4, #10]
 800d9b0:	462a      	mov	r2, r5
 800d9b2:	4621      	mov	r1, r4
 800d9b4:	4638      	mov	r0, r7
 800d9b6:	f001 f901 	bl	800ebbc <ip4_output_if>
 800d9ba:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800d9bc:	4638      	mov	r0, r7
 800d9be:	f7fc f96b 	bl	8009c98 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800d9c2:	4620      	mov	r0, r4
 800d9c4:	b004      	add	sp, #16
 800d9c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d9ca:	2201      	movs	r2, #1
 800d9cc:	e7c1      	b.n	800d952 <tcp_zero_window_probe+0x2e>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d9ce:	6868      	ldr	r0, [r5, #4]
 800d9d0:	8903      	ldrh	r3, [r0, #8]
 800d9d2:	892a      	ldrh	r2, [r5, #8]
 800d9d4:	1a9b      	subs	r3, r3, r2
 800d9d6:	b29b      	uxth	r3, r3
 800d9d8:	2201      	movs	r2, #1
 800d9da:	f108 0114 	add.w	r1, r8, #20
 800d9de:	f7fc fc19 	bl	800a214 <pbuf_copy_partial>
 800d9e2:	e7d1      	b.n	800d988 <tcp_zero_window_probe+0x64>
    pcb->snd_nxt = snd_nxt;
 800d9e4:	64e0      	str	r0, [r4, #76]	; 0x4c
 800d9e6:	e7d8      	b.n	800d99a <tcp_zero_window_probe+0x76>
    err = ERR_RTE;
 800d9e8:	f06f 0403 	mvn.w	r4, #3
 800d9ec:	e7e6      	b.n	800d9bc <tcp_zero_window_probe+0x98>
    return ERR_OK;
 800d9ee:	2400      	movs	r4, #0
 800d9f0:	e7e7      	b.n	800d9c2 <tcp_zero_window_probe+0x9e>
    return ERR_MEM;
 800d9f2:	f04f 34ff 	mov.w	r4, #4294967295
 800d9f6:	e7e4      	b.n	800d9c2 <tcp_zero_window_probe+0x9e>

0800d9f8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9fc:	4605      	mov	r5, r0
 800d9fe:	4688      	mov	r8, r1
 800da00:	4617      	mov	r7, r2
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800da02:	2006      	movs	r0, #6
 800da04:	f7fb ff7a 	bl	80098fc <memp_malloc>
  if (timeout == NULL) {
 800da08:	b1d0      	cbz	r0, 800da40 <sys_timeout+0x48>
 800da0a:	4604      	mov	r4, r0
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  now = sys_now();
 800da0c:	f002 f942 	bl	800fc94 <sys_now>
  if (next_timeout == NULL) {
 800da10:	4b20      	ldr	r3, [pc, #128]	; (800da94 <sys_timeout+0x9c>)
 800da12:	681e      	ldr	r6, [r3, #0]
 800da14:	b1de      	cbz	r6, 800da4e <sys_timeout+0x56>
    diff = 0;
    timeouts_last_time = now;
  } else {
    diff = now - timeouts_last_time;
 800da16:	4b1f      	ldr	r3, [pc, #124]	; (800da94 <sys_timeout+0x9c>)
 800da18:	685b      	ldr	r3, [r3, #4]
 800da1a:	1ac3      	subs	r3, r0, r3
  }

  timeout->next = NULL;
 800da1c:	2200      	movs	r2, #0
 800da1e:	6022      	str	r2, [r4, #0]
  timeout->h = handler;
 800da20:	f8c4 8008 	str.w	r8, [r4, #8]
  timeout->arg = arg;
 800da24:	60e7      	str	r7, [r4, #12]
  timeout->time = msecs + diff;
 800da26:	442b      	add	r3, r5
 800da28:	6063      	str	r3, [r4, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800da2a:	b19e      	cbz	r6, 800da54 <sys_timeout+0x5c>
    next_timeout = timeout;
    return;
  }

  if (next_timeout->time > msecs) {
 800da2c:	6870      	ldr	r0, [r6, #4]
 800da2e:	42a8      	cmp	r0, r5
 800da30:	d921      	bls.n	800da76 <sys_timeout+0x7e>
    next_timeout->time -= msecs;
 800da32:	1b40      	subs	r0, r0, r5
 800da34:	6070      	str	r0, [r6, #4]
    timeout->next = next_timeout;
 800da36:	6026      	str	r6, [r4, #0]
    next_timeout = timeout;
 800da38:	4b16      	ldr	r3, [pc, #88]	; (800da94 <sys_timeout+0x9c>)
 800da3a:	601c      	str	r4, [r3, #0]
        t->next = timeout;
        break;
      }
    }
  }
}
 800da3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800da40:	4b15      	ldr	r3, [pc, #84]	; (800da98 <sys_timeout+0xa0>)
 800da42:	22d4      	movs	r2, #212	; 0xd4
 800da44:	4915      	ldr	r1, [pc, #84]	; (800da9c <sys_timeout+0xa4>)
 800da46:	4816      	ldr	r0, [pc, #88]	; (800daa0 <sys_timeout+0xa8>)
 800da48:	f007 fd76 	bl	8015538 <printf>
    return;
 800da4c:	e7f6      	b.n	800da3c <sys_timeout+0x44>
    timeouts_last_time = now;
 800da4e:	6058      	str	r0, [r3, #4]
    diff = 0;
 800da50:	2300      	movs	r3, #0
 800da52:	e7e3      	b.n	800da1c <sys_timeout+0x24>
    next_timeout = timeout;
 800da54:	4b0f      	ldr	r3, [pc, #60]	; (800da94 <sys_timeout+0x9c>)
 800da56:	601c      	str	r4, [r3, #0]
    return;
 800da58:	e7f0      	b.n	800da3c <sys_timeout+0x44>
        if (t->next != NULL) {
 800da5a:	b131      	cbz	r1, 800da6a <sys_timeout+0x72>
          t->next->time -= timeout->time;
 800da5c:	6848      	ldr	r0, [r1, #4]
 800da5e:	1ac3      	subs	r3, r0, r3
 800da60:	604b      	str	r3, [r1, #4]
        timeout->next = t->next;
 800da62:	6813      	ldr	r3, [r2, #0]
 800da64:	6023      	str	r3, [r4, #0]
        t->next = timeout;
 800da66:	6014      	str	r4, [r2, #0]
        break;
 800da68:	e7e8      	b.n	800da3c <sys_timeout+0x44>
        } else if (timeout->time > msecs) {
 800da6a:	42ab      	cmp	r3, r5
 800da6c:	d9f9      	bls.n	800da62 <sys_timeout+0x6a>
          timeout->time = msecs + next_timeout->time;
 800da6e:	6873      	ldr	r3, [r6, #4]
 800da70:	441d      	add	r5, r3
 800da72:	6065      	str	r5, [r4, #4]
 800da74:	e7f5      	b.n	800da62 <sys_timeout+0x6a>
    for (t = next_timeout; t != NULL; t = t->next) {
 800da76:	4632      	mov	r2, r6
 800da78:	2a00      	cmp	r2, #0
 800da7a:	d0df      	beq.n	800da3c <sys_timeout+0x44>
      timeout->time -= t->time;
 800da7c:	6851      	ldr	r1, [r2, #4]
 800da7e:	6863      	ldr	r3, [r4, #4]
 800da80:	1a5b      	subs	r3, r3, r1
 800da82:	6063      	str	r3, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800da84:	6811      	ldr	r1, [r2, #0]
 800da86:	2900      	cmp	r1, #0
 800da88:	d0e7      	beq.n	800da5a <sys_timeout+0x62>
 800da8a:	6848      	ldr	r0, [r1, #4]
 800da8c:	4283      	cmp	r3, r0
 800da8e:	d3e4      	bcc.n	800da5a <sys_timeout+0x62>
    for (t = next_timeout; t != NULL; t = t->next) {
 800da90:	460a      	mov	r2, r1
 800da92:	e7f1      	b.n	800da78 <sys_timeout+0x80>
 800da94:	200042b8 	.word	0x200042b8
 800da98:	0801dca0 	.word	0x0801dca0
 800da9c:	0801dcd4 	.word	0x0801dcd4
 800daa0:	0801c994 	.word	0x0801c994

0800daa4 <tcp_timer_needed>:
{
 800daa4:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800daa6:	4b0a      	ldr	r3, [pc, #40]	; (800dad0 <tcp_timer_needed+0x2c>)
 800daa8:	689b      	ldr	r3, [r3, #8]
 800daaa:	b953      	cbnz	r3, 800dac2 <tcp_timer_needed+0x1e>
 800daac:	4b09      	ldr	r3, [pc, #36]	; (800dad4 <tcp_timer_needed+0x30>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	b143      	cbz	r3, 800dac4 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800dab2:	4b07      	ldr	r3, [pc, #28]	; (800dad0 <tcp_timer_needed+0x2c>)
 800dab4:	2201      	movs	r2, #1
 800dab6:	609a      	str	r2, [r3, #8]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dab8:	2200      	movs	r2, #0
 800daba:	4907      	ldr	r1, [pc, #28]	; (800dad8 <tcp_timer_needed+0x34>)
 800dabc:	20fa      	movs	r0, #250	; 0xfa
 800dabe:	f7ff ff9b 	bl	800d9f8 <sys_timeout>
}
 800dac2:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800dac4:	4b05      	ldr	r3, [pc, #20]	; (800dadc <tcp_timer_needed+0x38>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d1f2      	bne.n	800dab2 <tcp_timer_needed+0xe>
 800dacc:	e7f9      	b.n	800dac2 <tcp_timer_needed+0x1e>
 800dace:	bf00      	nop
 800dad0:	200042b8 	.word	0x200042b8
 800dad4:	20009710 	.word	0x20009710
 800dad8:	0800dae1 	.word	0x0800dae1
 800dadc:	20009720 	.word	0x20009720

0800dae0 <tcpip_tcp_timer>:
{
 800dae0:	b508      	push	{r3, lr}
  tcp_tmr();
 800dae2:	f7fd fa07 	bl	800aef4 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800dae6:	4b08      	ldr	r3, [pc, #32]	; (800db08 <tcpip_tcp_timer+0x28>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	b12b      	cbz	r3, 800daf8 <tcpip_tcp_timer+0x18>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800daec:	2200      	movs	r2, #0
 800daee:	4907      	ldr	r1, [pc, #28]	; (800db0c <tcpip_tcp_timer+0x2c>)
 800daf0:	20fa      	movs	r0, #250	; 0xfa
 800daf2:	f7ff ff81 	bl	800d9f8 <sys_timeout>
}
 800daf6:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800daf8:	4b05      	ldr	r3, [pc, #20]	; (800db10 <tcpip_tcp_timer+0x30>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d1f5      	bne.n	800daec <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 800db00:	4b04      	ldr	r3, [pc, #16]	; (800db14 <tcpip_tcp_timer+0x34>)
 800db02:	2200      	movs	r2, #0
 800db04:	609a      	str	r2, [r3, #8]
}
 800db06:	e7f6      	b.n	800daf6 <tcpip_tcp_timer+0x16>
 800db08:	20009710 	.word	0x20009710
 800db0c:	0800dae1 	.word	0x0800dae1
 800db10:	20009720 	.word	0x20009720
 800db14:	200042b8 	.word	0x200042b8

0800db18 <sys_timeouts_init>:
{
 800db18:	b510      	push	{r4, lr}
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800db1a:	2401      	movs	r4, #1
 800db1c:	e008      	b.n	800db30 <sys_timeouts_init+0x18>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800db1e:	4b08      	ldr	r3, [pc, #32]	; (800db40 <sys_timeouts_init+0x28>)
 800db20:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 800db24:	4907      	ldr	r1, [pc, #28]	; (800db44 <sys_timeouts_init+0x2c>)
 800db26:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 800db2a:	f7ff ff65 	bl	800d9f8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800db2e:	3401      	adds	r4, #1
 800db30:	2c02      	cmp	r4, #2
 800db32:	d9f4      	bls.n	800db1e <sys_timeouts_init+0x6>
  timeouts_last_time = sys_now();
 800db34:	f002 f8ae 	bl	800fc94 <sys_now>
 800db38:	4b03      	ldr	r3, [pc, #12]	; (800db48 <sys_timeouts_init+0x30>)
 800db3a:	6058      	str	r0, [r3, #4]
}
 800db3c:	bd10      	pop	{r4, pc}
 800db3e:	bf00      	nop
 800db40:	0801c904 	.word	0x0801c904
 800db44:	0800db4d 	.word	0x0800db4d
 800db48:	200042b8 	.word	0x200042b8

0800db4c <cyclic_timer>:
{
 800db4c:	b510      	push	{r4, lr}
 800db4e:	4604      	mov	r4, r0
  cyclic->handler();
 800db50:	6843      	ldr	r3, [r0, #4]
 800db52:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800db54:	4622      	mov	r2, r4
 800db56:	4902      	ldr	r1, [pc, #8]	; (800db60 <cyclic_timer+0x14>)
 800db58:	6820      	ldr	r0, [r4, #0]
 800db5a:	f7ff ff4d 	bl	800d9f8 <sys_timeout>
}
 800db5e:	bd10      	pop	{r4, pc}
 800db60:	0800db4d 	.word	0x0800db4d

0800db64 <sys_check_timeouts>:
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
  if (next_timeout) {
 800db64:	4b13      	ldr	r3, [pc, #76]	; (800dbb4 <sys_check_timeouts+0x50>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	b31b      	cbz	r3, 800dbb2 <sys_check_timeouts+0x4e>
{
 800db6a:	b570      	push	{r4, r5, r6, lr}
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800db6c:	f002 f892 	bl	800fc94 <sys_now>
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800db70:	4b10      	ldr	r3, [pc, #64]	; (800dbb4 <sys_check_timeouts+0x50>)
 800db72:	685d      	ldr	r5, [r3, #4]
 800db74:	1b45      	subs	r5, r0, r5
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800db76:	4b10      	ldr	r3, [pc, #64]	; (800dbb8 <sys_check_timeouts+0x54>)
 800db78:	781b      	ldrb	r3, [r3, #0]
 800db7a:	b9b3      	cbnz	r3, 800dbaa <sys_check_timeouts+0x46>
      had_one = 0;
      tmptimeout = next_timeout;
 800db7c:	4b0d      	ldr	r3, [pc, #52]	; (800dbb4 <sys_check_timeouts+0x50>)
 800db7e:	6819      	ldr	r1, [r3, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800db80:	b1b1      	cbz	r1, 800dbb0 <sys_check_timeouts+0x4c>
 800db82:	684b      	ldr	r3, [r1, #4]
 800db84:	42ab      	cmp	r3, r5
 800db86:	d813      	bhi.n	800dbb0 <sys_check_timeouts+0x4c>
        /* timeout has expired */
        had_one = 1;
        timeouts_last_time += tmptimeout->time;
 800db88:	4a0a      	ldr	r2, [pc, #40]	; (800dbb4 <sys_check_timeouts+0x50>)
 800db8a:	6854      	ldr	r4, [r2, #4]
 800db8c:	441c      	add	r4, r3
 800db8e:	6054      	str	r4, [r2, #4]
        diff -= tmptimeout->time;
 800db90:	1aed      	subs	r5, r5, r3
        next_timeout = tmptimeout->next;
 800db92:	680b      	ldr	r3, [r1, #0]
 800db94:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800db96:	688c      	ldr	r4, [r1, #8]
        arg = tmptimeout->arg;
 800db98:	68ce      	ldr	r6, [r1, #12]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800db9a:	2006      	movs	r0, #6
 800db9c:	f7fb fec8 	bl	8009930 <memp_free>
        if (handler != NULL) {
 800dba0:	2c00      	cmp	r4, #0
 800dba2:	d0e8      	beq.n	800db76 <sys_check_timeouts+0x12>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800dba4:	4630      	mov	r0, r6
 800dba6:	47a0      	blx	r4
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800dba8:	e7e5      	b.n	800db76 <sys_check_timeouts+0x12>
      PBUF_CHECK_FREE_OOSEQ();
 800dbaa:	f7fc f81b 	bl	8009be4 <pbuf_free_ooseq>
 800dbae:	e7e5      	b.n	800db7c <sys_check_timeouts+0x18>
  }
}
 800dbb0:	bd70      	pop	{r4, r5, r6, pc}
 800dbb2:	4770      	bx	lr
 800dbb4:	200042b8 	.word	0x200042b8
 800dbb8:	20009708 	.word	0x20009708

0800dbbc <udp_input_local_match>:
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800dbbc:	4613      	mov	r3, r2
 800dbbe:	b16a      	cbz	r2, 800dbdc <udp_input_local_match+0x20>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dbc0:	b1a8      	cbz	r0, 800dbee <udp_input_local_match+0x32>
 800dbc2:	6803      	ldr	r3, [r0, #0]
 800dbc4:	b1ab      	cbz	r3, 800dbf2 <udp_input_local_match+0x36>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800dbc6:	4a11      	ldr	r2, [pc, #68]	; (800dc0c <udp_input_local_match+0x50>)
 800dbc8:	6952      	ldr	r2, [r2, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dbca:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dbce:	d012      	beq.n	800dbf6 <udp_input_local_match+0x3a>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800dbd0:	6889      	ldr	r1, [r1, #8]
 800dbd2:	4053      	eors	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800dbd4:	420b      	tst	r3, r1
 800dbd6:	d010      	beq.n	800dbfa <udp_input_local_match+0x3e>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
      return 1;
    }
  }

  return 0;
 800dbd8:	2000      	movs	r0, #0
 800dbda:	4770      	bx	lr
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dbdc:	b178      	cbz	r0, 800dbfe <udp_input_local_match+0x42>
 800dbde:	6802      	ldr	r2, [r0, #0]
 800dbe0:	b17a      	cbz	r2, 800dc02 <udp_input_local_match+0x46>
 800dbe2:	490a      	ldr	r1, [pc, #40]	; (800dc0c <udp_input_local_match+0x50>)
 800dbe4:	6949      	ldr	r1, [r1, #20]
 800dbe6:	428a      	cmp	r2, r1
 800dbe8:	d00d      	beq.n	800dc06 <udp_input_local_match+0x4a>
  return 0;
 800dbea:	4618      	mov	r0, r3
 800dbec:	4770      	bx	lr
          return 1;
 800dbee:	2001      	movs	r0, #1
 800dbf0:	4770      	bx	lr
 800dbf2:	2001      	movs	r0, #1
 800dbf4:	4770      	bx	lr
 800dbf6:	2001      	movs	r0, #1
 800dbf8:	4770      	bx	lr
 800dbfa:	2001      	movs	r0, #1
 800dbfc:	4770      	bx	lr
      return 1;
 800dbfe:	2001      	movs	r0, #1
 800dc00:	4770      	bx	lr
 800dc02:	2001      	movs	r0, #1
 800dc04:	4770      	bx	lr
 800dc06:	2001      	movs	r0, #1
}
 800dc08:	4770      	bx	lr
 800dc0a:	bf00      	nop
 800dc0c:	200061e0 	.word	0x200061e0

0800dc10 <udp_init>:
}
 800dc10:	4770      	bx	lr
	...

0800dc14 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800dc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc18:	b085      	sub	sp, #20
 800dc1a:	4681      	mov	r9, r0
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800dc1c:	8943      	ldrh	r3, [r0, #10]
 800dc1e:	2b07      	cmp	r3, #7
 800dc20:	d917      	bls.n	800dc52 <udp_input+0x3e>
 800dc22:	460f      	mov	r7, r1
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
 800dc24:	6844      	ldr	r4, [r0, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800dc26:	4b43      	ldr	r3, [pc, #268]	; (800dd34 <udp_input+0x120>)
 800dc28:	6819      	ldr	r1, [r3, #0]
 800dc2a:	6958      	ldr	r0, [r3, #20]
 800dc2c:	f000 ffdb 	bl	800ebe6 <ip4_addr_isbroadcast_u32>
 800dc30:	4680      	mov	r8, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800dc32:	8820      	ldrh	r0, [r4, #0]
 800dc34:	f7fb fbfa 	bl	800942c <lwip_htons>
 800dc38:	4682      	mov	sl, r0
  dest = lwip_ntohs(udphdr->dest);
 800dc3a:	8860      	ldrh	r0, [r4, #2]
 800dc3c:	f7fb fbf6 	bl	800942c <lwip_htons>
 800dc40:	4605      	mov	r5, r0
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc42:	4b3d      	ldr	r3, [pc, #244]	; (800dd38 <udp_input+0x124>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	9303      	str	r3, [sp, #12]
 800dc48:	461c      	mov	r4, r3
  uncon_pcb = NULL;
 800dc4a:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 800dc4e:	465e      	mov	r6, fp
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc50:	e009      	b.n	800dc66 <udp_input+0x52>
    pbuf_free(p);
 800dc52:	f7fc f821 	bl	8009c98 <pbuf_free>
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800dc56:	b005      	add	sp, #20
 800dc58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((pcb->remote_port == src) &&
 800dc5c:	8aa3      	ldrh	r3, [r4, #20]
 800dc5e:	4553      	cmp	r3, sl
 800dc60:	d015      	beq.n	800dc8e <udp_input+0x7a>
    prev = pcb;
 800dc62:	4626      	mov	r6, r4
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc64:	68e4      	ldr	r4, [r4, #12]
 800dc66:	b1fc      	cbz	r4, 800dca8 <udp_input+0x94>
    if ((pcb->local_port == dest) &&
 800dc68:	8a63      	ldrh	r3, [r4, #18]
 800dc6a:	42ab      	cmp	r3, r5
 800dc6c:	d1f9      	bne.n	800dc62 <udp_input+0x4e>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800dc6e:	4642      	mov	r2, r8
 800dc70:	4639      	mov	r1, r7
 800dc72:	4620      	mov	r0, r4
 800dc74:	f7ff ffa2 	bl	800dbbc <udp_input_local_match>
    if ((pcb->local_port == dest) &&
 800dc78:	2800      	cmp	r0, #0
 800dc7a:	d0f2      	beq.n	800dc62 <udp_input+0x4e>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800dc7c:	7c23      	ldrb	r3, [r4, #16]
 800dc7e:	f013 0f04 	tst.w	r3, #4
 800dc82:	d1eb      	bne.n	800dc5c <udp_input+0x48>
 800dc84:	f1bb 0f00 	cmp.w	fp, #0
 800dc88:	d1e8      	bne.n	800dc5c <udp_input+0x48>
        uncon_pcb = pcb;
 800dc8a:	46a3      	mov	fp, r4
 800dc8c:	e7e6      	b.n	800dc5c <udp_input+0x48>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800dc8e:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 800dc90:	b11b      	cbz	r3, 800dc9a <udp_input+0x86>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800dc92:	4a28      	ldr	r2, [pc, #160]	; (800dd34 <udp_input+0x120>)
 800dc94:	6912      	ldr	r2, [r2, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800dc96:	4293      	cmp	r3, r2
 800dc98:	d1e3      	bne.n	800dc62 <udp_input+0x4e>
        if (prev != NULL) {
 800dc9a:	b12e      	cbz	r6, 800dca8 <udp_input+0x94>
          prev->next = pcb->next;
 800dc9c:	68e3      	ldr	r3, [r4, #12]
 800dc9e:	60f3      	str	r3, [r6, #12]
          pcb->next = udp_pcbs;
 800dca0:	9b03      	ldr	r3, [sp, #12]
 800dca2:	60e3      	str	r3, [r4, #12]
          udp_pcbs = pcb;
 800dca4:	4b24      	ldr	r3, [pc, #144]	; (800dd38 <udp_input+0x124>)
 800dca6:	601c      	str	r4, [r3, #0]
  if (pcb == NULL) {
 800dca8:	b18c      	cbz	r4, 800dcce <udp_input+0xba>
  if (pcb != NULL) {
 800dcaa:	b194      	cbz	r4, 800dcd2 <udp_input+0xbe>
    if (pbuf_header(p, -UDP_HLEN)) {
 800dcac:	f06f 0107 	mvn.w	r1, #7
 800dcb0:	4648      	mov	r0, r9
 800dcb2:	f7fb ffe7 	bl	8009c84 <pbuf_header>
 800dcb6:	b9a8      	cbnz	r0, 800dce4 <udp_input+0xd0>
    if (pcb != NULL) {
 800dcb8:	b31c      	cbz	r4, 800dd02 <udp_input+0xee>
      if (pcb->recv != NULL) {
 800dcba:	69a5      	ldr	r5, [r4, #24]
 800dcbc:	b1ed      	cbz	r5, 800dcfa <udp_input+0xe6>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800dcbe:	69e0      	ldr	r0, [r4, #28]
 800dcc0:	f8cd a000 	str.w	sl, [sp]
 800dcc4:	4b1d      	ldr	r3, [pc, #116]	; (800dd3c <udp_input+0x128>)
 800dcc6:	464a      	mov	r2, r9
 800dcc8:	4621      	mov	r1, r4
 800dcca:	47a8      	blx	r5
 800dccc:	e7c3      	b.n	800dc56 <udp_input+0x42>
    pcb = uncon_pcb;
 800dcce:	465c      	mov	r4, fp
 800dcd0:	e7eb      	b.n	800dcaa <udp_input+0x96>
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800dcd2:	687a      	ldr	r2, [r7, #4]
 800dcd4:	4b17      	ldr	r3, [pc, #92]	; (800dd34 <udp_input+0x120>)
 800dcd6:	695b      	ldr	r3, [r3, #20]
  if (for_us) {
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	d0e7      	beq.n	800dcac <udp_input+0x98>
    pbuf_free(p);
 800dcdc:	4648      	mov	r0, r9
 800dcde:	f7fb ffdb 	bl	8009c98 <pbuf_free>
  return;
 800dce2:	e7b8      	b.n	800dc56 <udp_input+0x42>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800dce4:	4b16      	ldr	r3, [pc, #88]	; (800dd40 <udp_input+0x12c>)
 800dce6:	f240 1255 	movw	r2, #341	; 0x155
 800dcea:	4916      	ldr	r1, [pc, #88]	; (800dd44 <udp_input+0x130>)
 800dcec:	4816      	ldr	r0, [pc, #88]	; (800dd48 <udp_input+0x134>)
 800dcee:	f007 fc23 	bl	8015538 <printf>
      pbuf_free(p);
 800dcf2:	4648      	mov	r0, r9
 800dcf4:	f7fb ffd0 	bl	8009c98 <pbuf_free>
      goto end;
 800dcf8:	e7ad      	b.n	800dc56 <udp_input+0x42>
        pbuf_free(p);
 800dcfa:	4648      	mov	r0, r9
 800dcfc:	f7fb ffcc 	bl	8009c98 <pbuf_free>
        goto end;
 800dd00:	e7a9      	b.n	800dc56 <udp_input+0x42>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800dd02:	f1b8 0f00 	cmp.w	r8, #0
 800dd06:	d105      	bne.n	800dd14 <udp_input+0x100>
 800dd08:	4b0a      	ldr	r3, [pc, #40]	; (800dd34 <udp_input+0x120>)
 800dd0a:	695b      	ldr	r3, [r3, #20]
 800dd0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dd10:	2be0      	cmp	r3, #224	; 0xe0
 800dd12:	d103      	bne.n	800dd1c <udp_input+0x108>
      pbuf_free(p);
 800dd14:	4648      	mov	r0, r9
 800dd16:	f7fb ffbf 	bl	8009c98 <pbuf_free>
 800dd1a:	e79c      	b.n	800dc56 <udp_input+0x42>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800dd1c:	4b05      	ldr	r3, [pc, #20]	; (800dd34 <udp_input+0x120>)
 800dd1e:	8999      	ldrh	r1, [r3, #12]
 800dd20:	3108      	adds	r1, #8
 800dd22:	b209      	sxth	r1, r1
 800dd24:	4648      	mov	r0, r9
 800dd26:	f7fb ffb2 	bl	8009c8e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800dd2a:	2103      	movs	r1, #3
 800dd2c:	4648      	mov	r0, r9
 800dd2e:	f000 fdb1 	bl	800e894 <icmp_dest_unreach>
 800dd32:	e7ef      	b.n	800dd14 <udp_input+0x100>
 800dd34:	200061e0 	.word	0x200061e0
 800dd38:	20009728 	.word	0x20009728
 800dd3c:	200061f0 	.word	0x200061f0
 800dd40:	0801dd14 	.word	0x0801dd14
 800dd44:	0801dd44 	.word	0x0801dd44
 800dd48:	0801c994 	.word	0x0801c994

0800dd4c <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800dd4c:	b1b8      	cbz	r0, 800dd7e <udp_netif_ip_addr_changed+0x32>
 800dd4e:	4602      	mov	r2, r0
 800dd50:	6803      	ldr	r3, [r0, #0]
 800dd52:	b1a3      	cbz	r3, 800dd7e <udp_netif_ip_addr_changed+0x32>
 800dd54:	b199      	cbz	r1, 800dd7e <udp_netif_ip_addr_changed+0x32>
 800dd56:	680b      	ldr	r3, [r1, #0]
 800dd58:	b18b      	cbz	r3, 800dd7e <udp_netif_ip_addr_changed+0x32>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800dd5a:	4b09      	ldr	r3, [pc, #36]	; (800dd80 <udp_netif_ip_addr_changed+0x34>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	b16b      	cbz	r3, 800dd7c <udp_netif_ip_addr_changed+0x30>
{
 800dd60:	b410      	push	{r4}
 800dd62:	e001      	b.n	800dd68 <udp_netif_ip_addr_changed+0x1c>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800dd64:	68db      	ldr	r3, [r3, #12]
 800dd66:	b133      	cbz	r3, 800dd76 <udp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800dd68:	681c      	ldr	r4, [r3, #0]
 800dd6a:	6810      	ldr	r0, [r2, #0]
 800dd6c:	4284      	cmp	r4, r0
 800dd6e:	d1f9      	bne.n	800dd64 <udp_netif_ip_addr_changed+0x18>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800dd70:	6808      	ldr	r0, [r1, #0]
 800dd72:	6018      	str	r0, [r3, #0]
 800dd74:	e7f6      	b.n	800dd64 <udp_netif_ip_addr_changed+0x18>
      }
    }
  }
}
 800dd76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd7a:	4770      	bx	lr
 800dd7c:	4770      	bx	lr
 800dd7e:	4770      	bx	lr
 800dd80:	20009728 	.word	0x20009728

0800dd84 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800dd84:	b510      	push	{r4, lr}
 800dd86:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800dd88:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800dd8c:	4b09      	ldr	r3, [pc, #36]	; (800ddb4 <etharp_free_entry+0x30>)
 800dd8e:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 800dd92:	b138      	cbz	r0, 800dda4 <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800dd94:	f7fb ff80 	bl	8009c98 <pbuf_free>
    arp_table[i].q = NULL;
 800dd98:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800dd9c:	00db      	lsls	r3, r3, #3
 800dd9e:	4a05      	ldr	r2, [pc, #20]	; (800ddb4 <etharp_free_entry+0x30>)
 800dda0:	2100      	movs	r1, #0
 800dda2:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800dda4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800dda8:	4802      	ldr	r0, [pc, #8]	; (800ddb4 <etharp_free_entry+0x30>)
 800ddaa:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800ddae:	2300      	movs	r3, #0
 800ddb0:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ddb2:	bd10      	pop	{r4, pc}
 800ddb4:	200042c4 	.word	0x200042c4

0800ddb8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800ddb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddbc:	4606      	mov	r6, r0
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ddbe:	f04f 0c00 	mov.w	ip, #0
 800ddc2:	46e3      	mov	fp, ip
 800ddc4:	46e1      	mov	r9, ip
  s8_t old_queue = ARP_TABLE_SIZE;
 800ddc6:	f04f 0e0a 	mov.w	lr, #10
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ddca:	4663      	mov	r3, ip
  s8_t empty = ARP_TABLE_SIZE;
 800ddcc:	4675      	mov	r5, lr
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ddce:	46f0      	mov	r8, lr
 800ddd0:	46f2      	mov	sl, lr
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ddd2:	e003      	b.n	800dddc <etharp_find_entry+0x24>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ddd4:	b968      	cbnz	r0, 800ddf2 <etharp_find_entry+0x3a>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800ddd6:	b25d      	sxtb	r5, r3
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ddd8:	3301      	adds	r3, #1
 800ddda:	b2db      	uxtb	r3, r3
 800dddc:	2b09      	cmp	r3, #9
 800ddde:	d843      	bhi.n	800de68 <etharp_find_entry+0xb0>
    u8_t state = arp_table[i].state;
 800dde0:	461a      	mov	r2, r3
 800dde2:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800dde6:	4c57      	ldr	r4, [pc, #348]	; (800df44 <etharp_find_entry+0x18c>)
 800dde8:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800ddec:	7d00      	ldrb	r0, [r0, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ddee:	2d0a      	cmp	r5, #10
 800ddf0:	d0f0      	beq.n	800ddd4 <etharp_find_entry+0x1c>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ddf2:	2800      	cmp	r0, #0
 800ddf4:	d0f0      	beq.n	800ddd8 <etharp_find_entry+0x20>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ddf6:	b146      	cbz	r6, 800de0a <etharp_find_entry+0x52>
 800ddf8:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 800ddfc:	4c51      	ldr	r4, [pc, #324]	; (800df44 <etharp_find_entry+0x18c>)
 800ddfe:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
 800de02:	6864      	ldr	r4, [r4, #4]
 800de04:	6837      	ldr	r7, [r6, #0]
 800de06:	42a7      	cmp	r7, r4
 800de08:	d00f      	beq.n	800de2a <etharp_find_entry+0x72>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800de0a:	2801      	cmp	r0, #1
 800de0c:	d00f      	beq.n	800de2e <etharp_find_entry+0x76>
            old_pending = i;
            age_pending = arp_table[i].ctime;
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800de0e:	2801      	cmp	r0, #1
 800de10:	d9e2      	bls.n	800ddd8 <etharp_find_entry+0x20>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800de12:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800de16:	484b      	ldr	r0, [pc, #300]	; (800df44 <etharp_find_entry+0x18c>)
 800de18:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800de1c:	8a52      	ldrh	r2, [r2, #18]
 800de1e:	4562      	cmp	r2, ip
 800de20:	d3da      	bcc.n	800ddd8 <etharp_find_entry+0x20>
            old_stable = i;
 800de22:	fa4f f883 	sxtb.w	r8, r3
            age_stable = arp_table[i].ctime;
 800de26:	4694      	mov	ip, r2
 800de28:	e7d6      	b.n	800ddd8 <etharp_find_entry+0x20>
        return i;
 800de2a:	b258      	sxtb	r0, r3
 800de2c:	e03f      	b.n	800deae <etharp_find_entry+0xf6>
        if (arp_table[i].q != NULL) {
 800de2e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 800de32:	4c44      	ldr	r4, [pc, #272]	; (800df44 <etharp_find_entry+0x18c>)
 800de34:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
 800de38:	b150      	cbz	r0, 800de50 <etharp_find_entry+0x98>
          if (arp_table[i].ctime >= age_queue) {
 800de3a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800de3e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800de42:	8a52      	ldrh	r2, [r2, #18]
 800de44:	454a      	cmp	r2, r9
 800de46:	d3c7      	bcc.n	800ddd8 <etharp_find_entry+0x20>
            old_queue = i;
 800de48:	fa4f fe83 	sxtb.w	lr, r3
            age_queue = arp_table[i].ctime;
 800de4c:	4691      	mov	r9, r2
 800de4e:	e7c3      	b.n	800ddd8 <etharp_find_entry+0x20>
          if (arp_table[i].ctime >= age_pending) {
 800de50:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800de54:	483b      	ldr	r0, [pc, #236]	; (800df44 <etharp_find_entry+0x18c>)
 800de56:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800de5a:	8a52      	ldrh	r2, [r2, #18]
 800de5c:	455a      	cmp	r2, fp
 800de5e:	d3bb      	bcc.n	800ddd8 <etharp_find_entry+0x20>
            old_pending = i;
 800de60:	fa4f fa83 	sxtb.w	sl, r3
            age_pending = arp_table[i].ctime;
 800de64:	4693      	mov	fp, r2
 800de66:	e7b7      	b.n	800ddd8 <etharp_find_entry+0x20>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800de68:	f011 0f02 	tst.w	r1, #2
 800de6c:	d163      	bne.n	800df36 <etharp_find_entry+0x17e>
 800de6e:	2d0a      	cmp	r5, #10
 800de70:	d01f      	beq.n	800deb2 <etharp_find_entry+0xfa>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800de72:	2d09      	cmp	r5, #9
 800de74:	dc23      	bgt.n	800debe <etharp_find_entry+0x106>
    i = empty;
 800de76:	b2ed      	uxtb	r5, r5
    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800de78:	2d09      	cmp	r5, #9
 800de7a:	d84c      	bhi.n	800df16 <etharp_find_entry+0x15e>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800de7c:	462c      	mov	r4, r5
 800de7e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800de82:	4a30      	ldr	r2, [pc, #192]	; (800df44 <etharp_find_entry+0x18c>)
 800de84:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800de88:	7d1b      	ldrb	r3, [r3, #20]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d14b      	bne.n	800df26 <etharp_find_entry+0x16e>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800de8e:	b136      	cbz	r6, 800de9e <etharp_find_entry+0xe6>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800de90:	6831      	ldr	r1, [r6, #0]
 800de92:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800de96:	4a2b      	ldr	r2, [pc, #172]	; (800df44 <etharp_find_entry+0x18c>)
 800de98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800de9c:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800de9e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800dea2:	4b28      	ldr	r3, [pc, #160]	; (800df44 <etharp_find_entry+0x18c>)
 800dea4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800dea8:	2300      	movs	r3, #0
 800deaa:	8263      	strh	r3, [r4, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800deac:	b268      	sxtb	r0, r5
}
 800deae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800deb2:	f011 0f01 	tst.w	r1, #1
 800deb6:	d1dc      	bne.n	800de72 <etharp_find_entry+0xba>
    return (s8_t)ERR_MEM;
 800deb8:	f04f 30ff 	mov.w	r0, #4294967295
 800debc:	e7f7      	b.n	800deae <etharp_find_entry+0xf6>
    if (old_stable < ARP_TABLE_SIZE) {
 800debe:	f1b8 0f09 	cmp.w	r8, #9
 800dec2:	dc14      	bgt.n	800deee <etharp_find_entry+0x136>
      i = old_stable;
 800dec4:	fa5f f588 	uxtb.w	r5, r8
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800dec8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800decc:	4b1d      	ldr	r3, [pc, #116]	; (800df44 <etharp_find_entry+0x18c>)
 800dece:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800ded2:	b133      	cbz	r3, 800dee2 <etharp_find_entry+0x12a>
 800ded4:	4b1c      	ldr	r3, [pc, #112]	; (800df48 <etharp_find_entry+0x190>)
 800ded6:	f240 126f 	movw	r2, #367	; 0x16f
 800deda:	491c      	ldr	r1, [pc, #112]	; (800df4c <etharp_find_entry+0x194>)
 800dedc:	481c      	ldr	r0, [pc, #112]	; (800df50 <etharp_find_entry+0x198>)
 800dede:	f007 fb2b 	bl	8015538 <printf>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800dee2:	2d09      	cmp	r5, #9
 800dee4:	d80f      	bhi.n	800df06 <etharp_find_entry+0x14e>
    etharp_free_entry(i);
 800dee6:	4628      	mov	r0, r5
 800dee8:	f7ff ff4c 	bl	800dd84 <etharp_free_entry>
 800deec:	e7c4      	b.n	800de78 <etharp_find_entry+0xc0>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800deee:	f1ba 0f09 	cmp.w	sl, #9
 800def2:	dc02      	bgt.n	800defa <etharp_find_entry+0x142>
      i = old_pending;
 800def4:	fa5f f58a 	uxtb.w	r5, sl
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
 800def8:	e7f3      	b.n	800dee2 <etharp_find_entry+0x12a>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800defa:	f1be 0f09 	cmp.w	lr, #9
 800defe:	dc1d      	bgt.n	800df3c <etharp_find_entry+0x184>
      i = old_queue;
 800df00:	fa5f f58e 	uxtb.w	r5, lr
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
 800df04:	e7ed      	b.n	800dee2 <etharp_find_entry+0x12a>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800df06:	4b10      	ldr	r3, [pc, #64]	; (800df48 <etharp_find_entry+0x190>)
 800df08:	f240 1281 	movw	r2, #385	; 0x181
 800df0c:	4911      	ldr	r1, [pc, #68]	; (800df54 <etharp_find_entry+0x19c>)
 800df0e:	4810      	ldr	r0, [pc, #64]	; (800df50 <etharp_find_entry+0x198>)
 800df10:	f007 fb12 	bl	8015538 <printf>
 800df14:	e7e7      	b.n	800dee6 <etharp_find_entry+0x12e>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800df16:	4b0c      	ldr	r3, [pc, #48]	; (800df48 <etharp_find_entry+0x190>)
 800df18:	f240 1285 	movw	r2, #389	; 0x185
 800df1c:	490d      	ldr	r1, [pc, #52]	; (800df54 <etharp_find_entry+0x19c>)
 800df1e:	480c      	ldr	r0, [pc, #48]	; (800df50 <etharp_find_entry+0x198>)
 800df20:	f007 fb0a 	bl	8015538 <printf>
 800df24:	e7aa      	b.n	800de7c <etharp_find_entry+0xc4>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800df26:	4b08      	ldr	r3, [pc, #32]	; (800df48 <etharp_find_entry+0x190>)
 800df28:	f44f 72c3 	mov.w	r2, #390	; 0x186
 800df2c:	490a      	ldr	r1, [pc, #40]	; (800df58 <etharp_find_entry+0x1a0>)
 800df2e:	4808      	ldr	r0, [pc, #32]	; (800df50 <etharp_find_entry+0x198>)
 800df30:	f007 fb02 	bl	8015538 <printf>
 800df34:	e7ab      	b.n	800de8e <etharp_find_entry+0xd6>
    return (s8_t)ERR_MEM;
 800df36:	f04f 30ff 	mov.w	r0, #4294967295
 800df3a:	e7b8      	b.n	800deae <etharp_find_entry+0xf6>
      return (s8_t)ERR_MEM;
 800df3c:	f04f 30ff 	mov.w	r0, #4294967295
 800df40:	e7b5      	b.n	800deae <etharp_find_entry+0xf6>
 800df42:	bf00      	nop
 800df44:	200042c4 	.word	0x200042c4
 800df48:	0801dd88 	.word	0x0801dd88
 800df4c:	0801ddc0 	.word	0x0801ddc0
 800df50:	0801c994 	.word	0x0801c994
 800df54:	0801ddd8 	.word	0x0801ddd8
 800df58:	0801ddec 	.word	0x0801ddec

0800df5c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800df5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df5e:	b083      	sub	sp, #12
 800df60:	4604      	mov	r4, r0
 800df62:	460e      	mov	r6, r1
 800df64:	4615      	mov	r5, r2
 800df66:	461f      	mov	r7, r3
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800df68:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 800df6c:	2a06      	cmp	r2, #6
 800df6e:	d13e      	bne.n	800dfee <etharp_update_arp_entry+0x92>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800df70:	2e00      	cmp	r6, #0
 800df72:	d044      	beq.n	800dffe <etharp_update_arp_entry+0xa2>
 800df74:	6830      	ldr	r0, [r6, #0]
 800df76:	2800      	cmp	r0, #0
 800df78:	d041      	beq.n	800dffe <etharp_update_arp_entry+0xa2>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800df7a:	4621      	mov	r1, r4
 800df7c:	f000 fe33 	bl	800ebe6 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800df80:	2800      	cmp	r0, #0
 800df82:	d13c      	bne.n	800dffe <etharp_update_arp_entry+0xa2>
      ip4_addr_ismulticast(ipaddr)) {
 800df84:	6832      	ldr	r2, [r6, #0]
 800df86:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800df8a:	2ae0      	cmp	r2, #224	; 0xe0
 800df8c:	d037      	beq.n	800dffe <etharp_update_arp_entry+0xa2>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800df8e:	4622      	mov	r2, r4
 800df90:	4639      	mov	r1, r7
 800df92:	4630      	mov	r0, r6
 800df94:	f7ff ff10 	bl	800ddb8 <etharp_find_entry>
  /* bail out if no entry could be found */
  if (i < 0) {
 800df98:	2800      	cmp	r0, #0
 800df9a:	db26      	blt.n	800dfea <etharp_update_arp_entry+0x8e>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800df9c:	4a1a      	ldr	r2, [pc, #104]	; (800e008 <etharp_update_arp_entry+0xac>)
 800df9e:	eb00 0640 	add.w	r6, r0, r0, lsl #1
 800dfa2:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
 800dfa6:	2302      	movs	r3, #2
 800dfa8:	750b      	strb	r3, [r1, #20]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800dfaa:	608c      	str	r4, [r1, #8]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800dfac:	00f3      	lsls	r3, r6, #3
 800dfae:	3308      	adds	r3, #8
 800dfb0:	4413      	add	r3, r2
 800dfb2:	682f      	ldr	r7, [r5, #0]
 800dfb4:	605f      	str	r7, [r3, #4]
 800dfb6:	88af      	ldrh	r7, [r5, #4]
 800dfb8:	811f      	strh	r7, [r3, #8]
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	824b      	strh	r3, [r1, #18]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800dfbe:	f852 6036 	ldr.w	r6, [r2, r6, lsl #3]
 800dfc2:	b1fe      	cbz	r6, 800e004 <etharp_update_arp_entry+0xa8>
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
 800dfc4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800dfc8:	00c0      	lsls	r0, r0, #3
 800dfca:	461f      	mov	r7, r3
 800dfcc:	5013      	str	r3, [r2, r0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800dfce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dfd2:	9300      	str	r3, [sp, #0]
 800dfd4:	462b      	mov	r3, r5
 800dfd6:	f104 0225 	add.w	r2, r4, #37	; 0x25
 800dfda:	4631      	mov	r1, r6
 800dfdc:	4620      	mov	r0, r4
 800dfde:	f001 fb19 	bl	800f614 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800dfe2:	4630      	mov	r0, r6
 800dfe4:	f7fb fe58 	bl	8009c98 <pbuf_free>
  }
  return ERR_OK;
 800dfe8:	4638      	mov	r0, r7
}
 800dfea:	b003      	add	sp, #12
 800dfec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800dfee:	4b07      	ldr	r3, [pc, #28]	; (800e00c <etharp_update_arp_entry+0xb0>)
 800dff0:	f240 12ab 	movw	r2, #427	; 0x1ab
 800dff4:	4906      	ldr	r1, [pc, #24]	; (800e010 <etharp_update_arp_entry+0xb4>)
 800dff6:	4807      	ldr	r0, [pc, #28]	; (800e014 <etharp_update_arp_entry+0xb8>)
 800dff8:	f007 fa9e 	bl	8015538 <printf>
 800dffc:	e7b8      	b.n	800df70 <etharp_update_arp_entry+0x14>
    return ERR_ARG;
 800dffe:	f06f 000f 	mvn.w	r0, #15
 800e002:	e7f2      	b.n	800dfea <etharp_update_arp_entry+0x8e>
  return ERR_OK;
 800e004:	2000      	movs	r0, #0
 800e006:	e7f0      	b.n	800dfea <etharp_update_arp_entry+0x8e>
 800e008:	200042c4 	.word	0x200042c4
 800e00c:	0801dd88 	.word	0x0801dd88
 800e010:	0801de18 	.word	0x0801de18
 800e014:	0801c994 	.word	0x0801c994

0800e018 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e01c:	b082      	sub	sp, #8
 800e01e:	460f      	mov	r7, r1
 800e020:	4690      	mov	r8, r2
 800e022:	461d      	mov	r5, r3
 800e024:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e028:	4681      	mov	r9, r0
 800e02a:	2800      	cmp	r0, #0
 800e02c:	d041      	beq.n	800e0b2 <etharp_raw+0x9a>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e02e:	2200      	movs	r2, #0
 800e030:	211c      	movs	r1, #28
 800e032:	2002      	movs	r0, #2
 800e034:	f7fb fe94 	bl	8009d60 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e038:	4606      	mov	r6, r0
 800e03a:	2800      	cmp	r0, #0
 800e03c:	d051      	beq.n	800e0e2 <etharp_raw+0xca>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e03e:	8943      	ldrh	r3, [r0, #10]
 800e040:	2b1b      	cmp	r3, #27
 800e042:	d93e      	bls.n	800e0c2 <etharp_raw+0xaa>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e044:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e046:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800e04a:	f7fb f9ef 	bl	800942c <lwip_htons>
 800e04e:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e050:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
 800e054:	2b06      	cmp	r3, #6
 800e056:	d13c      	bne.n	800e0d2 <etharp_raw+0xba>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800e058:	682b      	ldr	r3, [r5, #0]
 800e05a:	60a3      	str	r3, [r4, #8]
 800e05c:	88ab      	ldrh	r3, [r5, #4]
 800e05e:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800e060:	f8da 3000 	ldr.w	r3, [sl]
 800e064:	f8c4 3012 	str.w	r3, [r4, #18]
 800e068:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800e06c:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800e06e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800e076:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800e07c:	2500      	movs	r5, #0
 800e07e:	7025      	strb	r5, [r4, #0]
 800e080:	2301      	movs	r3, #1
 800e082:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e084:	2308      	movs	r3, #8
 800e086:	70a3      	strb	r3, [r4, #2]
 800e088:	70e5      	strb	r5, [r4, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e08a:	2306      	movs	r3, #6
 800e08c:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e08e:	2304      	movs	r3, #4
 800e090:	7163      	strb	r3, [r4, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e092:	f640 0306 	movw	r3, #2054	; 0x806
 800e096:	9300      	str	r3, [sp, #0]
 800e098:	4643      	mov	r3, r8
 800e09a:	463a      	mov	r2, r7
 800e09c:	4631      	mov	r1, r6
 800e09e:	4648      	mov	r0, r9
 800e0a0:	f001 fab8 	bl	800f614 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e0a4:	4630      	mov	r0, r6
 800e0a6:	f7fb fdf7 	bl	8009c98 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800e0aa:	4628      	mov	r0, r5
}
 800e0ac:	b002      	add	sp, #8
 800e0ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e0b2:	4b0d      	ldr	r3, [pc, #52]	; (800e0e8 <etharp_raw+0xd0>)
 800e0b4:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800e0b8:	490c      	ldr	r1, [pc, #48]	; (800e0ec <etharp_raw+0xd4>)
 800e0ba:	480d      	ldr	r0, [pc, #52]	; (800e0f0 <etharp_raw+0xd8>)
 800e0bc:	f007 fa3c 	bl	8015538 <printf>
 800e0c0:	e7b5      	b.n	800e02e <etharp_raw+0x16>
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e0c2:	4b09      	ldr	r3, [pc, #36]	; (800e0e8 <etharp_raw+0xd0>)
 800e0c4:	f240 4263 	movw	r2, #1123	; 0x463
 800e0c8:	490a      	ldr	r1, [pc, #40]	; (800e0f4 <etharp_raw+0xdc>)
 800e0ca:	4809      	ldr	r0, [pc, #36]	; (800e0f0 <etharp_raw+0xd8>)
 800e0cc:	f007 fa34 	bl	8015538 <printf>
 800e0d0:	e7b8      	b.n	800e044 <etharp_raw+0x2c>
  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e0d2:	4b05      	ldr	r3, [pc, #20]	; (800e0e8 <etharp_raw+0xd0>)
 800e0d4:	f240 426a 	movw	r2, #1130	; 0x46a
 800e0d8:	4907      	ldr	r1, [pc, #28]	; (800e0f8 <etharp_raw+0xe0>)
 800e0da:	4805      	ldr	r0, [pc, #20]	; (800e0f0 <etharp_raw+0xd8>)
 800e0dc:	f007 fa2c 	bl	8015538 <printf>
 800e0e0:	e7ba      	b.n	800e058 <etharp_raw+0x40>
    return ERR_MEM;
 800e0e2:	f04f 30ff 	mov.w	r0, #4294967295
 800e0e6:	e7e1      	b.n	800e0ac <etharp_raw+0x94>
 800e0e8:	0801dd88 	.word	0x0801dd88
 800e0ec:	0801de3c 	.word	0x0801de3c
 800e0f0:	0801c994 	.word	0x0801c994
 800e0f4:	0801de4c 	.word	0x0801de4c
 800e0f8:	0801de80 	.word	0x0801de80

0800e0fc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800e0fc:	b530      	push	{r4, r5, lr}
 800e0fe:	b085      	sub	sp, #20
 800e100:	4604      	mov	r4, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e102:	f100 0325 	add.w	r3, r0, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e106:	3404      	adds	r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e108:	2501      	movs	r5, #1
 800e10a:	9503      	str	r5, [sp, #12]
 800e10c:	9102      	str	r1, [sp, #8]
 800e10e:	4904      	ldr	r1, [pc, #16]	; (800e120 <etharp_request_dst+0x24>)
 800e110:	9101      	str	r1, [sp, #4]
 800e112:	9400      	str	r4, [sp, #0]
 800e114:	4619      	mov	r1, r3
 800e116:	f7ff ff7f 	bl	800e018 <etharp_raw>
                    ipaddr, ARP_REQUEST);
}
 800e11a:	b005      	add	sp, #20
 800e11c:	bd30      	pop	{r4, r5, pc}
 800e11e:	bf00      	nop
 800e120:	0801c92c 	.word	0x0801c92c

0800e124 <etharp_cleanup_netif>:
{
 800e124:	b538      	push	{r3, r4, r5, lr}
 800e126:	4605      	mov	r5, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e128:	2400      	movs	r4, #0
 800e12a:	e001      	b.n	800e130 <etharp_cleanup_netif+0xc>
 800e12c:	3401      	adds	r4, #1
 800e12e:	b2e4      	uxtb	r4, r4
 800e130:	2c09      	cmp	r4, #9
 800e132:	d812      	bhi.n	800e15a <etharp_cleanup_netif+0x36>
    u8_t state = arp_table[i].state;
 800e134:	4620      	mov	r0, r4
 800e136:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e13a:	4a08      	ldr	r2, [pc, #32]	; (800e15c <etharp_cleanup_netif+0x38>)
 800e13c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e140:	7d1b      	ldrb	r3, [r3, #20]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e142:	2b00      	cmp	r3, #0
 800e144:	d0f2      	beq.n	800e12c <etharp_cleanup_netif+0x8>
 800e146:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e14a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e14e:	689b      	ldr	r3, [r3, #8]
 800e150:	42ab      	cmp	r3, r5
 800e152:	d1eb      	bne.n	800e12c <etharp_cleanup_netif+0x8>
      etharp_free_entry(i);
 800e154:	f7ff fe16 	bl	800dd84 <etharp_free_entry>
 800e158:	e7e8      	b.n	800e12c <etharp_cleanup_netif+0x8>
}
 800e15a:	bd38      	pop	{r3, r4, r5, pc}
 800e15c:	200042c4 	.word	0x200042c4

0800e160 <etharp_input>:
{
 800e160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e164:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e166:	b1a9      	cbz	r1, 800e194 <etharp_input+0x34>
 800e168:	4604      	mov	r4, r0
 800e16a:	460e      	mov	r6, r1
  hdr = (struct etharp_hdr *)p->payload;
 800e16c:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800e16e:	882b      	ldrh	r3, [r5, #0]
 800e170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e174:	d108      	bne.n	800e188 <etharp_input+0x28>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e176:	792b      	ldrb	r3, [r5, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800e178:	2b06      	cmp	r3, #6
 800e17a:	d105      	bne.n	800e188 <etharp_input+0x28>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e17c:	796b      	ldrb	r3, [r5, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e17e:	2b04      	cmp	r3, #4
 800e180:	d102      	bne.n	800e188 <etharp_input+0x28>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e182:	886b      	ldrh	r3, [r5, #2]
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e184:	2b08      	cmp	r3, #8
 800e186:	d00d      	beq.n	800e1a4 <etharp_input+0x44>
    pbuf_free(p);
 800e188:	4620      	mov	r0, r4
 800e18a:	f7fb fd85 	bl	8009c98 <pbuf_free>
}
 800e18e:	b006      	add	sp, #24
 800e190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e194:	4b1d      	ldr	r3, [pc, #116]	; (800e20c <etharp_input+0xac>)
 800e196:	f44f 7222 	mov.w	r2, #648	; 0x288
 800e19a:	491d      	ldr	r1, [pc, #116]	; (800e210 <etharp_input+0xb0>)
 800e19c:	481d      	ldr	r0, [pc, #116]	; (800e214 <etharp_input+0xb4>)
 800e19e:	f007 f9cb 	bl	8015538 <printf>
 800e1a2:	e7f4      	b.n	800e18e <etharp_input+0x2e>
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800e1a4:	f8d5 300e 	ldr.w	r3, [r5, #14]
 800e1a8:	9305      	str	r3, [sp, #20]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800e1aa:	69af      	ldr	r7, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e1ac:	684b      	ldr	r3, [r1, #4]
 800e1ae:	b983      	cbnz	r3, 800e1d2 <etharp_input+0x72>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e1b0:	f105 0808 	add.w	r8, r5, #8
    for_us = 0;
 800e1b4:	2700      	movs	r7, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e1b6:	2302      	movs	r3, #2
 800e1b8:	4642      	mov	r2, r8
 800e1ba:	a905      	add	r1, sp, #20
 800e1bc:	4630      	mov	r0, r6
 800e1be:	f7ff fecd 	bl	800df5c <etharp_update_arp_entry>
  switch (hdr->opcode) {
 800e1c2:	88eb      	ldrh	r3, [r5, #6]
 800e1c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e1c8:	d00e      	beq.n	800e1e8 <etharp_input+0x88>
  pbuf_free(p);
 800e1ca:	4620      	mov	r0, r4
 800e1cc:	f7fb fd64 	bl	8009c98 <pbuf_free>
 800e1d0:	e7dd      	b.n	800e18e <etharp_input+0x2e>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e1d2:	42bb      	cmp	r3, r7
 800e1d4:	bf14      	ite	ne
 800e1d6:	2700      	movne	r7, #0
 800e1d8:	2701      	moveq	r7, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e1da:	f105 0808 	add.w	r8, r5, #8
 800e1de:	b10f      	cbz	r7, 800e1e4 <etharp_input+0x84>
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	e7e9      	b.n	800e1b8 <etharp_input+0x58>
 800e1e4:	2302      	movs	r3, #2
 800e1e6:	e7e7      	b.n	800e1b8 <etharp_input+0x58>
    if (for_us) {
 800e1e8:	2f00      	cmp	r7, #0
 800e1ea:	d0ee      	beq.n	800e1ca <etharp_input+0x6a>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e1ec:	f106 0125 	add.w	r1, r6, #37	; 0x25
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e1f0:	1d33      	adds	r3, r6, #4
      etharp_raw(netif,
 800e1f2:	2202      	movs	r2, #2
 800e1f4:	9203      	str	r2, [sp, #12]
 800e1f6:	aa05      	add	r2, sp, #20
 800e1f8:	9202      	str	r2, [sp, #8]
 800e1fa:	f8cd 8004 	str.w	r8, [sp, #4]
 800e1fe:	9300      	str	r3, [sp, #0]
 800e200:	460b      	mov	r3, r1
 800e202:	4642      	mov	r2, r8
 800e204:	4630      	mov	r0, r6
 800e206:	f7ff ff07 	bl	800e018 <etharp_raw>
 800e20a:	e7de      	b.n	800e1ca <etharp_input+0x6a>
 800e20c:	0801dd88 	.word	0x0801dd88
 800e210:	0801de3c 	.word	0x0801de3c
 800e214:	0801c994 	.word	0x0801c994

0800e218 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e218:	b508      	push	{r3, lr}
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e21a:	4a02      	ldr	r2, [pc, #8]	; (800e224 <etharp_request+0xc>)
 800e21c:	f7ff ff6e 	bl	800e0fc <etharp_request_dst>
}
 800e220:	bd08      	pop	{r3, pc}
 800e222:	bf00      	nop
 800e224:	0801c924 	.word	0x0801c924

0800e228 <etharp_tmr>:
{
 800e228:	b510      	push	{r4, lr}
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e22a:	2400      	movs	r4, #0
 800e22c:	e005      	b.n	800e23a <etharp_tmr+0x12>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e22e:	2b04      	cmp	r3, #4
 800e230:	d922      	bls.n	800e278 <etharp_tmr+0x50>
        etharp_free_entry(i);
 800e232:	f7ff fda7 	bl	800dd84 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e236:	3401      	adds	r4, #1
 800e238:	b2e4      	uxtb	r4, r4
 800e23a:	2c09      	cmp	r4, #9
 800e23c:	d83d      	bhi.n	800e2ba <etharp_tmr+0x92>
    u8_t state = arp_table[i].state;
 800e23e:	4620      	mov	r0, r4
 800e240:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e244:	00da      	lsls	r2, r3, #3
 800e246:	4b1d      	ldr	r3, [pc, #116]	; (800e2bc <etharp_tmr+0x94>)
 800e248:	4413      	add	r3, r2
 800e24a:	7d1b      	ldrb	r3, [r3, #20]
    if (state != ETHARP_STATE_EMPTY
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d0f2      	beq.n	800e236 <etharp_tmr+0xe>
      arp_table[i].ctime++;
 800e250:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800e254:	00d3      	lsls	r3, r2, #3
 800e256:	4a19      	ldr	r2, [pc, #100]	; (800e2bc <etharp_tmr+0x94>)
 800e258:	441a      	add	r2, r3
 800e25a:	8a53      	ldrh	r3, [r2, #18]
 800e25c:	3301      	adds	r3, #1
 800e25e:	b29b      	uxth	r3, r3
 800e260:	8253      	strh	r3, [r2, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e262:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800e266:	d2e4      	bcs.n	800e232 <etharp_tmr+0xa>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e268:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800e26c:	00d1      	lsls	r1, r2, #3
 800e26e:	4a13      	ldr	r2, [pc, #76]	; (800e2bc <etharp_tmr+0x94>)
 800e270:	440a      	add	r2, r1
 800e272:	7d12      	ldrb	r2, [r2, #20]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e274:	2a01      	cmp	r2, #1
 800e276:	d0da      	beq.n	800e22e <etharp_tmr+0x6>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e278:	2a03      	cmp	r2, #3
 800e27a:	d00e      	beq.n	800e29a <etharp_tmr+0x72>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800e27c:	2a04      	cmp	r2, #4
 800e27e:	d014      	beq.n	800e2aa <etharp_tmr+0x82>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e280:	2a01      	cmp	r2, #1
 800e282:	d1d8      	bne.n	800e236 <etharp_tmr+0xe>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e284:	4b0d      	ldr	r3, [pc, #52]	; (800e2bc <etharp_tmr+0x94>)
 800e286:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800e28a:	00d1      	lsls	r1, r2, #3
 800e28c:	4419      	add	r1, r3
 800e28e:	460b      	mov	r3, r1
 800e290:	3104      	adds	r1, #4
 800e292:	6898      	ldr	r0, [r3, #8]
 800e294:	f7ff ffc0 	bl	800e218 <etharp_request>
 800e298:	e7cd      	b.n	800e236 <etharp_tmr+0xe>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e29a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800e29e:	00c2      	lsls	r2, r0, #3
 800e2a0:	4b06      	ldr	r3, [pc, #24]	; (800e2bc <etharp_tmr+0x94>)
 800e2a2:	4413      	add	r3, r2
 800e2a4:	2204      	movs	r2, #4
 800e2a6:	751a      	strb	r2, [r3, #20]
 800e2a8:	e7c5      	b.n	800e236 <etharp_tmr+0xe>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e2aa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800e2ae:	00c2      	lsls	r2, r0, #3
 800e2b0:	4b02      	ldr	r3, [pc, #8]	; (800e2bc <etharp_tmr+0x94>)
 800e2b2:	4413      	add	r3, r2
 800e2b4:	2202      	movs	r2, #2
 800e2b6:	751a      	strb	r2, [r3, #20]
 800e2b8:	e7bd      	b.n	800e236 <etharp_tmr+0xe>
}
 800e2ba:	bd10      	pop	{r4, pc}
 800e2bc:	200042c4 	.word	0x200042c4

0800e2c0 <etharp_output_to_arp_index>:
{
 800e2c0:	b570      	push	{r4, r5, r6, lr}
 800e2c2:	b082      	sub	sp, #8
 800e2c4:	4605      	mov	r5, r0
 800e2c6:	460e      	mov	r6, r1
 800e2c8:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e2ca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e2ce:	4b2f      	ldr	r3, [pc, #188]	; (800e38c <etharp_output_to_arp_index+0xcc>)
 800e2d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2d4:	7d1b      	ldrb	r3, [r3, #20]
 800e2d6:	2b01      	cmp	r3, #1
 800e2d8:	d919      	bls.n	800e30e <etharp_output_to_arp_index+0x4e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e2da:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e2de:	4a2b      	ldr	r2, [pc, #172]	; (800e38c <etharp_output_to_arp_index+0xcc>)
 800e2e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e2e4:	7d1b      	ldrb	r3, [r3, #20]
 800e2e6:	2b02      	cmp	r3, #2
 800e2e8:	d019      	beq.n	800e31e <etharp_output_to_arp_index+0x5e>
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800e2ea:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e2ee:	00db      	lsls	r3, r3, #3
 800e2f0:	3308      	adds	r3, #8
 800e2f2:	4c26      	ldr	r4, [pc, #152]	; (800e38c <etharp_output_to_arp_index+0xcc>)
 800e2f4:	4423      	add	r3, r4
 800e2f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e2fa:	9200      	str	r2, [sp, #0]
 800e2fc:	3304      	adds	r3, #4
 800e2fe:	f105 0225 	add.w	r2, r5, #37	; 0x25
 800e302:	4631      	mov	r1, r6
 800e304:	4628      	mov	r0, r5
 800e306:	f001 f985 	bl	800f614 <ethernet_output>
}
 800e30a:	b002      	add	sp, #8
 800e30c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e30e:	4b20      	ldr	r3, [pc, #128]	; (800e390 <etharp_output_to_arp_index+0xd0>)
 800e310:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800e314:	491f      	ldr	r1, [pc, #124]	; (800e394 <etharp_output_to_arp_index+0xd4>)
 800e316:	4820      	ldr	r0, [pc, #128]	; (800e398 <etharp_output_to_arp_index+0xd8>)
 800e318:	f007 f90e 	bl	8015538 <printf>
 800e31c:	e7dd      	b.n	800e2da <etharp_output_to_arp_index+0x1a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800e31e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e322:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e326:	8a5b      	ldrh	r3, [r3, #18]
 800e328:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800e32c:	d81b      	bhi.n	800e366 <etharp_output_to_arp_index+0xa6>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800e32e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800e332:	d3da      	bcc.n	800e2ea <etharp_output_to_arp_index+0x2a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e334:	4b15      	ldr	r3, [pc, #84]	; (800e38c <etharp_output_to_arp_index+0xcc>)
 800e336:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800e33a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800e33e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800e342:	00d2      	lsls	r2, r2, #3
 800e344:	3208      	adds	r2, #8
 800e346:	441a      	add	r2, r3
 800e348:	3204      	adds	r2, #4
 800e34a:	3104      	adds	r1, #4
 800e34c:	4628      	mov	r0, r5
 800e34e:	f7ff fed5 	bl	800e0fc <etharp_request_dst>
 800e352:	2800      	cmp	r0, #0
 800e354:	d1c9      	bne.n	800e2ea <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e356:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e35a:	4a0c      	ldr	r2, [pc, #48]	; (800e38c <etharp_output_to_arp_index+0xcc>)
 800e35c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e360:	2203      	movs	r2, #3
 800e362:	751a      	strb	r2, [r3, #20]
 800e364:	e7c1      	b.n	800e2ea <etharp_output_to_arp_index+0x2a>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e366:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800e36a:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800e36e:	3104      	adds	r1, #4
 800e370:	4628      	mov	r0, r5
 800e372:	f7ff ff51 	bl	800e218 <etharp_request>
 800e376:	2800      	cmp	r0, #0
 800e378:	d1b7      	bne.n	800e2ea <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e37a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e37e:	4a03      	ldr	r2, [pc, #12]	; (800e38c <etharp_output_to_arp_index+0xcc>)
 800e380:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e384:	2203      	movs	r2, #3
 800e386:	751a      	strb	r2, [r3, #20]
 800e388:	e7af      	b.n	800e2ea <etharp_output_to_arp_index+0x2a>
 800e38a:	bf00      	nop
 800e38c:	200042c4 	.word	0x200042c4
 800e390:	0801dd88 	.word	0x0801dd88
 800e394:	0801df08 	.word	0x0801df08
 800e398:	0801c994 	.word	0x0801c994

0800e39c <etharp_query>:
{
 800e39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3a0:	b082      	sub	sp, #8
 800e3a2:	4606      	mov	r6, r0
 800e3a4:	460d      	mov	r5, r1
 800e3a6:	4690      	mov	r8, r2
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800e3a8:	f100 0925 	add.w	r9, r0, #37	; 0x25
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e3ac:	4601      	mov	r1, r0
 800e3ae:	6828      	ldr	r0, [r5, #0]
 800e3b0:	f000 fc19 	bl	800ebe6 <ip4_addr_isbroadcast_u32>
 800e3b4:	2800      	cmp	r0, #0
 800e3b6:	f040 80b3 	bne.w	800e520 <etharp_query+0x184>
      ip4_addr_ismulticast(ipaddr) ||
 800e3ba:	682b      	ldr	r3, [r5, #0]
 800e3bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e3c0:	2ae0      	cmp	r2, #224	; 0xe0
 800e3c2:	f000 80b0 	beq.w	800e526 <etharp_query+0x18a>
      ip4_addr_ismulticast(ipaddr) ||
 800e3c6:	2d00      	cmp	r5, #0
 800e3c8:	f000 80b0 	beq.w	800e52c <etharp_query+0x190>
      ip4_addr_isany(ipaddr)) {
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	f000 80b0 	beq.w	800e532 <etharp_query+0x196>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e3d2:	4632      	mov	r2, r6
 800e3d4:	2101      	movs	r1, #1
 800e3d6:	4628      	mov	r0, r5
 800e3d8:	f7ff fcee 	bl	800ddb8 <etharp_find_entry>
  if (i < 0) {
 800e3dc:	1e04      	subs	r4, r0, #0
 800e3de:	db5c      	blt.n	800e49a <etharp_query+0xfe>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e3e0:	4627      	mov	r7, r4
 800e3e2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e3e6:	4a56      	ldr	r2, [pc, #344]	; (800e540 <etharp_query+0x1a4>)
 800e3e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e3ec:	7d1b      	ldrb	r3, [r3, #20]
 800e3ee:	b94b      	cbnz	r3, 800e404 <etharp_query+0x68>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e3f0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e3f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e3f8:	f04f 0a01 	mov.w	sl, #1
 800e3fc:	f883 a014 	strb.w	sl, [r3, #20]
    arp_table[i].netif = netif;
 800e400:	609e      	str	r6, [r3, #8]
 800e402:	e001      	b.n	800e408 <etharp_query+0x6c>
  int is_new_entry = 0;
 800e404:	f04f 0a00 	mov.w	sl, #0
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e408:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 800e40c:	4a4c      	ldr	r2, [pc, #304]	; (800e540 <etharp_query+0x1a4>)
 800e40e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e412:	7d1b      	ldrb	r3, [r3, #20]
 800e414:	b1b3      	cbz	r3, 800e444 <etharp_query+0xa8>
  if (is_new_entry || (q == NULL)) {
 800e416:	f1ba 0f00 	cmp.w	sl, #0
 800e41a:	d11b      	bne.n	800e454 <etharp_query+0xb8>
 800e41c:	f1b8 0f00 	cmp.w	r8, #0
 800e420:	d018      	beq.n	800e454 <etharp_query+0xb8>
  err_t result = ERR_MEM;
 800e422:	f04f 35ff 	mov.w	r5, #4294967295
  LWIP_ASSERT("q != NULL", q != NULL);
 800e426:	f1b8 0f00 	cmp.w	r8, #0
 800e42a:	d01d      	beq.n	800e468 <etharp_query+0xcc>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e42c:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 800e430:	4a43      	ldr	r2, [pc, #268]	; (800e540 <etharp_query+0x1a4>)
 800e432:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e436:	7d1b      	ldrb	r3, [r3, #20]
 800e438:	2b01      	cmp	r3, #1
 800e43a:	d81d      	bhi.n	800e478 <etharp_query+0xdc>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e43c:	2b01      	cmp	r3, #1
 800e43e:	d044      	beq.n	800e4ca <etharp_query+0x12e>
 800e440:	462c      	mov	r4, r5
 800e442:	e02a      	b.n	800e49a <etharp_query+0xfe>
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e444:	4b3f      	ldr	r3, [pc, #252]	; (800e544 <etharp_query+0x1a8>)
 800e446:	f240 32c7 	movw	r2, #967	; 0x3c7
 800e44a:	493f      	ldr	r1, [pc, #252]	; (800e548 <etharp_query+0x1ac>)
 800e44c:	483f      	ldr	r0, [pc, #252]	; (800e54c <etharp_query+0x1b0>)
 800e44e:	f007 f873 	bl	8015538 <printf>
 800e452:	e7e0      	b.n	800e416 <etharp_query+0x7a>
    result = etharp_request(netif, ipaddr);
 800e454:	4629      	mov	r1, r5
 800e456:	4630      	mov	r0, r6
 800e458:	f7ff fede 	bl	800e218 <etharp_request>
 800e45c:	4605      	mov	r5, r0
    if (q == NULL) {
 800e45e:	f1b8 0f00 	cmp.w	r8, #0
 800e462:	d1e0      	bne.n	800e426 <etharp_query+0x8a>
      return result;
 800e464:	4604      	mov	r4, r0
 800e466:	e018      	b.n	800e49a <etharp_query+0xfe>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e468:	4b36      	ldr	r3, [pc, #216]	; (800e544 <etharp_query+0x1a8>)
 800e46a:	f240 32db 	movw	r2, #987	; 0x3db
 800e46e:	4938      	ldr	r1, [pc, #224]	; (800e550 <etharp_query+0x1b4>)
 800e470:	4836      	ldr	r0, [pc, #216]	; (800e54c <etharp_query+0x1b0>)
 800e472:	f007 f861 	bl	8015538 <printf>
 800e476:	e7d9      	b.n	800e42c <etharp_query+0x90>
    ETHARP_SET_HINT(netif, i);
 800e478:	f882 40f0 	strb.w	r4, [r2, #240]	; 0xf0
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e47c:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 800e480:	00db      	lsls	r3, r3, #3
 800e482:	3308      	adds	r3, #8
 800e484:	4413      	add	r3, r2
 800e486:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e48a:	9200      	str	r2, [sp, #0]
 800e48c:	3304      	adds	r3, #4
 800e48e:	464a      	mov	r2, r9
 800e490:	4641      	mov	r1, r8
 800e492:	4630      	mov	r0, r6
 800e494:	f001 f8be 	bl	800f614 <ethernet_output>
 800e498:	4604      	mov	r4, r0
}
 800e49a:	4620      	mov	r0, r4
 800e49c:	b002      	add	sp, #8
 800e49e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e4a2:	4b28      	ldr	r3, [pc, #160]	; (800e544 <etharp_query+0x1a8>)
 800e4a4:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800e4a8:	492a      	ldr	r1, [pc, #168]	; (800e554 <etharp_query+0x1b8>)
 800e4aa:	4828      	ldr	r0, [pc, #160]	; (800e54c <etharp_query+0x1b0>)
 800e4ac:	f007 f844 	bl	8015538 <printf>
      if (p->type != PBUF_ROM) {
 800e4b0:	7b23      	ldrb	r3, [r4, #12]
 800e4b2:	2b01      	cmp	r3, #1
 800e4b4:	d11e      	bne.n	800e4f4 <etharp_query+0x158>
      p = p->next;
 800e4b6:	6824      	ldr	r4, [r4, #0]
    while (p) {
 800e4b8:	b14c      	cbz	r4, 800e4ce <etharp_query+0x132>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e4ba:	8962      	ldrh	r2, [r4, #10]
 800e4bc:	8923      	ldrh	r3, [r4, #8]
 800e4be:	429a      	cmp	r2, r3
 800e4c0:	d1f6      	bne.n	800e4b0 <etharp_query+0x114>
 800e4c2:	6823      	ldr	r3, [r4, #0]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d1ec      	bne.n	800e4a2 <etharp_query+0x106>
 800e4c8:	e7f2      	b.n	800e4b0 <etharp_query+0x114>
    p = q;
 800e4ca:	4644      	mov	r4, r8
 800e4cc:	e7f4      	b.n	800e4b8 <etharp_query+0x11c>
    int copy_needed = 0;
 800e4ce:	2300      	movs	r3, #0
    if (copy_needed) {
 800e4d0:	b193      	cbz	r3, 800e4f8 <etharp_query+0x15c>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	8921      	ldrh	r1, [r4, #8]
 800e4d6:	2002      	movs	r0, #2
 800e4d8:	f7fb fc42 	bl	8009d60 <pbuf_alloc>
      if (p != NULL) {
 800e4dc:	4604      	mov	r4, r0
 800e4de:	b178      	cbz	r0, 800e500 <etharp_query+0x164>
        if (pbuf_copy(p, q) != ERR_OK) {
 800e4e0:	4641      	mov	r1, r8
 800e4e2:	f7fb fdff 	bl	800a0e4 <pbuf_copy>
 800e4e6:	b158      	cbz	r0, 800e500 <etharp_query+0x164>
          pbuf_free(p);
 800e4e8:	4620      	mov	r0, r4
 800e4ea:	f7fb fbd5 	bl	8009c98 <pbuf_free>
      result = ERR_MEM;
 800e4ee:	f04f 34ff 	mov.w	r4, #4294967295
 800e4f2:	e7d2      	b.n	800e49a <etharp_query+0xfe>
        copy_needed = 1;
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	e7eb      	b.n	800e4d0 <etharp_query+0x134>
      pbuf_ref(p);
 800e4f8:	4640      	mov	r0, r8
 800e4fa:	f7fb fda1 	bl	800a040 <pbuf_ref>
      p = q;
 800e4fe:	4644      	mov	r4, r8
    if (p != NULL) {
 800e500:	b1d4      	cbz	r4, 800e538 <etharp_query+0x19c>
      if (arp_table[i].q != NULL) {
 800e502:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 800e506:	4a0e      	ldr	r2, [pc, #56]	; (800e540 <etharp_query+0x1a4>)
 800e508:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e50c:	b108      	cbz	r0, 800e512 <etharp_query+0x176>
        pbuf_free(arp_table[i].q);
 800e50e:	f7fb fbc3 	bl	8009c98 <pbuf_free>
      arp_table[i].q = p;
 800e512:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 800e516:	4a0a      	ldr	r2, [pc, #40]	; (800e540 <etharp_query+0x1a4>)
 800e518:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
      result = ERR_OK;
 800e51c:	2400      	movs	r4, #0
 800e51e:	e7bc      	b.n	800e49a <etharp_query+0xfe>
    return ERR_ARG;
 800e520:	f06f 040f 	mvn.w	r4, #15
 800e524:	e7b9      	b.n	800e49a <etharp_query+0xfe>
 800e526:	f06f 040f 	mvn.w	r4, #15
 800e52a:	e7b6      	b.n	800e49a <etharp_query+0xfe>
 800e52c:	f06f 040f 	mvn.w	r4, #15
 800e530:	e7b3      	b.n	800e49a <etharp_query+0xfe>
 800e532:	f06f 040f 	mvn.w	r4, #15
 800e536:	e7b0      	b.n	800e49a <etharp_query+0xfe>
      result = ERR_MEM;
 800e538:	f04f 34ff 	mov.w	r4, #4294967295
 800e53c:	e7ad      	b.n	800e49a <etharp_query+0xfe>
 800e53e:	bf00      	nop
 800e540:	200042c4 	.word	0x200042c4
 800e544:	0801dd88 	.word	0x0801dd88
 800e548:	0801df38 	.word	0x0801df38
 800e54c:	0801c994 	.word	0x0801c994
 800e550:	0801df60 	.word	0x0801df60
 800e554:	0801df6c 	.word	0x0801df6c

0800e558 <etharp_output>:
{
 800e558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e55a:	b085      	sub	sp, #20
 800e55c:	460e      	mov	r6, r1
 800e55e:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e560:	4607      	mov	r7, r0
 800e562:	2800      	cmp	r0, #0
 800e564:	d031      	beq.n	800e5ca <etharp_output+0x72>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e566:	2e00      	cmp	r6, #0
 800e568:	d037      	beq.n	800e5da <etharp_output+0x82>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e56a:	2d00      	cmp	r5, #0
 800e56c:	d03d      	beq.n	800e5ea <etharp_output+0x92>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e56e:	4639      	mov	r1, r7
 800e570:	6828      	ldr	r0, [r5, #0]
 800e572:	f000 fb38 	bl	800ebe6 <ip4_addr_isbroadcast_u32>
 800e576:	2800      	cmp	r0, #0
 800e578:	d17e      	bne.n	800e678 <etharp_output+0x120>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e57a:	682b      	ldr	r3, [r5, #0]
 800e57c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e580:	2ae0      	cmp	r2, #224	; 0xe0
 800e582:	d03a      	beq.n	800e5fa <etharp_output+0xa2>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e584:	687a      	ldr	r2, [r7, #4]
 800e586:	68b9      	ldr	r1, [r7, #8]
 800e588:	405a      	eors	r2, r3
 800e58a:	420a      	tst	r2, r1
 800e58c:	d009      	beq.n	800e5a2 <etharp_output+0x4a>
        !ip4_addr_islinklocal(ipaddr)) {
 800e58e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e590:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800e594:	4293      	cmp	r3, r2
 800e596:	d004      	beq.n	800e5a2 <etharp_output+0x4a>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d078      	beq.n	800e690 <etharp_output+0x138>
            dst_addr = netif_ip4_gw(netif);
 800e59e:	f107 050c 	add.w	r5, r7, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e5a2:	4b3d      	ldr	r3, [pc, #244]	; (800e698 <etharp_output+0x140>)
 800e5a4:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 800e5a8:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800e5ac:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e5b0:	7d1b      	ldrb	r3, [r3, #20]
 800e5b2:	2b01      	cmp	r3, #1
 800e5b4:	d958      	bls.n	800e668 <etharp_output+0x110>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800e5b6:	6828      	ldr	r0, [r5, #0]
 800e5b8:	460b      	mov	r3, r1
 800e5ba:	4937      	ldr	r1, [pc, #220]	; (800e698 <etharp_output+0x140>)
 800e5bc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800e5c0:	685b      	ldr	r3, [r3, #4]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e5c2:	4298      	cmp	r0, r3
 800e5c4:	d02f      	beq.n	800e626 <etharp_output+0xce>
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	e034      	b.n	800e634 <etharp_output+0xdc>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e5ca:	4b34      	ldr	r3, [pc, #208]	; (800e69c <etharp_output+0x144>)
 800e5cc:	f240 321b 	movw	r2, #795	; 0x31b
 800e5d0:	4933      	ldr	r1, [pc, #204]	; (800e6a0 <etharp_output+0x148>)
 800e5d2:	4834      	ldr	r0, [pc, #208]	; (800e6a4 <etharp_output+0x14c>)
 800e5d4:	f006 ffb0 	bl	8015538 <printf>
 800e5d8:	e7c5      	b.n	800e566 <etharp_output+0xe>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e5da:	4b30      	ldr	r3, [pc, #192]	; (800e69c <etharp_output+0x144>)
 800e5dc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e5e0:	4931      	ldr	r1, [pc, #196]	; (800e6a8 <etharp_output+0x150>)
 800e5e2:	4830      	ldr	r0, [pc, #192]	; (800e6a4 <etharp_output+0x14c>)
 800e5e4:	f006 ffa8 	bl	8015538 <printf>
 800e5e8:	e7bf      	b.n	800e56a <etharp_output+0x12>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e5ea:	4b2c      	ldr	r3, [pc, #176]	; (800e69c <etharp_output+0x144>)
 800e5ec:	f240 321d 	movw	r2, #797	; 0x31d
 800e5f0:	492e      	ldr	r1, [pc, #184]	; (800e6ac <etharp_output+0x154>)
 800e5f2:	482c      	ldr	r0, [pc, #176]	; (800e6a4 <etharp_output+0x14c>)
 800e5f4:	f006 ffa0 	bl	8015538 <printf>
 800e5f8:	e7b9      	b.n	800e56e <etharp_output+0x16>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800e600:	2300      	movs	r3, #0
 800e602:	f88d 3009 	strb.w	r3, [sp, #9]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e606:	235e      	movs	r3, #94	; 0x5e
 800e608:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e60c:	786b      	ldrb	r3, [r5, #1]
 800e60e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e612:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e616:	78ab      	ldrb	r3, [r5, #2]
 800e618:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e61c:	78eb      	ldrb	r3, [r5, #3]
 800e61e:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800e622:	ab02      	add	r3, sp, #8
 800e624:	e029      	b.n	800e67a <etharp_output+0x122>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e626:	4631      	mov	r1, r6
 800e628:	4638      	mov	r0, r7
 800e62a:	f7ff fe49 	bl	800e2c0 <etharp_output_to_arp_index>
 800e62e:	e02d      	b.n	800e68c <etharp_output+0x134>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e630:	3301      	adds	r3, #1
 800e632:	b25b      	sxtb	r3, r3
 800e634:	2b09      	cmp	r3, #9
 800e636:	dc19      	bgt.n	800e66c <etharp_output+0x114>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e638:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800e63c:	4c16      	ldr	r4, [pc, #88]	; (800e698 <etharp_output+0x140>)
 800e63e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800e642:	7d02      	ldrb	r2, [r0, #20]
 800e644:	2a01      	cmp	r2, #1
 800e646:	d9f3      	bls.n	800e630 <etharp_output+0xd8>
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800e648:	6828      	ldr	r0, [r5, #0]
 800e64a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800e64e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800e652:	6852      	ldr	r2, [r2, #4]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e654:	4290      	cmp	r0, r2
 800e656:	d1eb      	bne.n	800e630 <etharp_output+0xd8>
        ETHARP_SET_HINT(netif, i);
 800e658:	b2da      	uxtb	r2, r3
 800e65a:	f884 20f0 	strb.w	r2, [r4, #240]	; 0xf0
        return etharp_output_to_arp_index(netif, q, i);
 800e65e:	4631      	mov	r1, r6
 800e660:	4638      	mov	r0, r7
 800e662:	f7ff fe2d 	bl	800e2c0 <etharp_output_to_arp_index>
 800e666:	e011      	b.n	800e68c <etharp_output+0x134>
 800e668:	2300      	movs	r3, #0
 800e66a:	e7e3      	b.n	800e634 <etharp_output+0xdc>
    return etharp_query(netif, dst_addr, q);
 800e66c:	4632      	mov	r2, r6
 800e66e:	4629      	mov	r1, r5
 800e670:	4638      	mov	r0, r7
 800e672:	f7ff fe93 	bl	800e39c <etharp_query>
 800e676:	e009      	b.n	800e68c <etharp_output+0x134>
    dest = (const struct eth_addr *)&ethbroadcast;
 800e678:	4b0d      	ldr	r3, [pc, #52]	; (800e6b0 <etharp_output+0x158>)
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800e67a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e67e:	9200      	str	r2, [sp, #0]
 800e680:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800e684:	4631      	mov	r1, r6
 800e686:	4638      	mov	r0, r7
 800e688:	f000 ffc4 	bl	800f614 <ethernet_output>
}
 800e68c:	b005      	add	sp, #20
 800e68e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return ERR_RTE;
 800e690:	f06f 0003 	mvn.w	r0, #3
 800e694:	e7fa      	b.n	800e68c <etharp_output+0x134>
 800e696:	bf00      	nop
 800e698:	200042c4 	.word	0x200042c4
 800e69c:	0801dd88 	.word	0x0801dd88
 800e6a0:	0801de3c 	.word	0x0801de3c
 800e6a4:	0801c994 	.word	0x0801c994
 800e6a8:	0801df60 	.word	0x0801df60
 800e6ac:	0801dee8 	.word	0x0801dee8
 800e6b0:	0801c924 	.word	0x0801c924

0800e6b4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6b8:	b086      	sub	sp, #24
 800e6ba:	4606      	mov	r6, r0
 800e6bc:	4688      	mov	r8, r1
 800e6be:	4617      	mov	r7, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	2124      	movs	r1, #36	; 0x24
 800e6c4:	2001      	movs	r0, #1
 800e6c6:	f7fb fb4b 	bl	8009d60 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800e6ca:	b3a0      	cbz	r0, 800e736 <icmp_send_response+0x82>
 800e6cc:	4605      	mov	r5, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e6ce:	8943      	ldrh	r3, [r0, #10]
 800e6d0:	2b23      	cmp	r3, #35	; 0x23
 800e6d2:	d933      	bls.n	800e73c <icmp_send_response+0x88>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e6d4:	f8d6 c004 	ldr.w	ip, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e6d8:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 800e6da:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
 800e6de:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	7123      	strb	r3, [r4, #4]
 800e6e4:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800e6e6:	71a3      	strb	r3, [r4, #6]
 800e6e8:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e6ea:	686b      	ldr	r3, [r5, #4]
 800e6ec:	6872      	ldr	r2, [r6, #4]
 800e6ee:	6816      	ldr	r6, [r2, #0]
 800e6f0:	6850      	ldr	r0, [r2, #4]
 800e6f2:	6891      	ldr	r1, [r2, #8]
 800e6f4:	68d7      	ldr	r7, [r2, #12]
 800e6f6:	609e      	str	r6, [r3, #8]
 800e6f8:	60d8      	str	r0, [r3, #12]
 800e6fa:	6119      	str	r1, [r3, #16]
 800e6fc:	615f      	str	r7, [r3, #20]
 800e6fe:	6916      	ldr	r6, [r2, #16]
 800e700:	6950      	ldr	r0, [r2, #20]
 800e702:	6991      	ldr	r1, [r2, #24]
 800e704:	619e      	str	r6, [r3, #24]
 800e706:	61d8      	str	r0, [r3, #28]
 800e708:	6219      	str	r1, [r3, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e70a:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800e70e:	9305      	str	r3, [sp, #20]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e710:	a805      	add	r0, sp, #20
 800e712:	f000 f8cb 	bl	800e8ac <ip4_route>
#endif
  if (netif != NULL) {
 800e716:	b158      	cbz	r0, 800e730 <icmp_send_response+0x7c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e718:	2100      	movs	r1, #0
 800e71a:	70a1      	strb	r1, [r4, #2]
 800e71c:	70e1      	strb	r1, [r4, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e71e:	9002      	str	r0, [sp, #8]
 800e720:	2301      	movs	r3, #1
 800e722:	9301      	str	r3, [sp, #4]
 800e724:	9100      	str	r1, [sp, #0]
 800e726:	23ff      	movs	r3, #255	; 0xff
 800e728:	aa05      	add	r2, sp, #20
 800e72a:	4628      	mov	r0, r5
 800e72c:	f000 fa46 	bl	800ebbc <ip4_output_if>
  }
  pbuf_free(q);
 800e730:	4628      	mov	r0, r5
 800e732:	f7fb fab1 	bl	8009c98 <pbuf_free>
}
 800e736:	b006      	add	sp, #24
 800e738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e73c:	4b03      	ldr	r3, [pc, #12]	; (800e74c <icmp_send_response+0x98>)
 800e73e:	f240 1261 	movw	r2, #353	; 0x161
 800e742:	4903      	ldr	r1, [pc, #12]	; (800e750 <icmp_send_response+0x9c>)
 800e744:	4803      	ldr	r0, [pc, #12]	; (800e754 <icmp_send_response+0xa0>)
 800e746:	f006 fef7 	bl	8015538 <printf>
 800e74a:	e7c3      	b.n	800e6d4 <icmp_send_response+0x20>
 800e74c:	0801df88 	.word	0x0801df88
 800e750:	0801dfc0 	.word	0x0801dfc0
 800e754:	0801c994 	.word	0x0801c994

0800e758 <icmp_input>:
{
 800e758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e75c:	b084      	sub	sp, #16
 800e75e:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 800e760:	4b47      	ldr	r3, [pc, #284]	; (800e880 <icmp_input+0x128>)
 800e762:	689e      	ldr	r6, [r3, #8]
  hlen = IPH_HL(iphdr_in) * 4;
 800e764:	7834      	ldrb	r4, [r6, #0]
 800e766:	f004 040f 	and.w	r4, r4, #15
 800e76a:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 800e76c:	2c13      	cmp	r4, #19
 800e76e:	d915      	bls.n	800e79c <icmp_input+0x44>
 800e770:	460f      	mov	r7, r1
  if (p->len < sizeof(u16_t)*2) {
 800e772:	8943      	ldrh	r3, [r0, #10]
 800e774:	2b03      	cmp	r3, #3
 800e776:	d911      	bls.n	800e79c <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 800e778:	6843      	ldr	r3, [r0, #4]
 800e77a:	781b      	ldrb	r3, [r3, #0]
  switch (type) {
 800e77c:	2b08      	cmp	r3, #8
 800e77e:	d15d      	bne.n	800e83c <icmp_input+0xe4>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e780:	4b3f      	ldr	r3, [pc, #252]	; (800e880 <icmp_input+0x128>)
 800e782:	6958      	ldr	r0, [r3, #20]
 800e784:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800e788:	2be0      	cmp	r3, #224	; 0xe0
 800e78a:	d037      	beq.n	800e7fc <icmp_input+0xa4>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e78c:	4b3c      	ldr	r3, [pc, #240]	; (800e880 <icmp_input+0x128>)
 800e78e:	6819      	ldr	r1, [r3, #0]
 800e790:	f000 fa29 	bl	800ebe6 <ip4_addr_isbroadcast_u32>
 800e794:	bb90      	cbnz	r0, 800e7fc <icmp_input+0xa4>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e796:	892b      	ldrh	r3, [r5, #8]
 800e798:	2b07      	cmp	r3, #7
 800e79a:	d805      	bhi.n	800e7a8 <icmp_input+0x50>
  pbuf_free(p);
 800e79c:	4628      	mov	r0, r5
 800e79e:	f7fb fa7b 	bl	8009c98 <pbuf_free>
}
 800e7a2:	b004      	add	sp, #16
 800e7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800e7a8:	f104 010e 	add.w	r1, r4, #14
 800e7ac:	4628      	mov	r0, r5
 800e7ae:	f7fb fa69 	bl	8009c84 <pbuf_header>
 800e7b2:	b3a8      	cbz	r0, 800e820 <icmp_input+0xc8>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800e7b4:	8929      	ldrh	r1, [r5, #8]
 800e7b6:	4421      	add	r1, r4
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	b289      	uxth	r1, r1
 800e7bc:	2002      	movs	r0, #2
 800e7be:	f7fb facf 	bl	8009d60 <pbuf_alloc>
      if (r == NULL) {
 800e7c2:	4680      	mov	r8, r0
 800e7c4:	b1d0      	cbz	r0, 800e7fc <icmp_input+0xa4>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e7c6:	8942      	ldrh	r2, [r0, #10]
 800e7c8:	f104 0308 	add.w	r3, r4, #8
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d313      	bcc.n	800e7f8 <icmp_input+0xa0>
      MEMCPY(r->payload, iphdr_in, hlen);
 800e7d0:	4622      	mov	r2, r4
 800e7d2:	4631      	mov	r1, r6
 800e7d4:	6840      	ldr	r0, [r0, #4]
 800e7d6:	f006 fe8d 	bl	80154f4 <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 800e7da:	4261      	negs	r1, r4
 800e7dc:	4640      	mov	r0, r8
 800e7de:	f7fb fa51 	bl	8009c84 <pbuf_header>
 800e7e2:	b978      	cbnz	r0, 800e804 <icmp_input+0xac>
      if (pbuf_copy(r, p) != ERR_OK) {
 800e7e4:	4629      	mov	r1, r5
 800e7e6:	4640      	mov	r0, r8
 800e7e8:	f7fb fc7c 	bl	800a0e4 <pbuf_copy>
 800e7ec:	b9a0      	cbnz	r0, 800e818 <icmp_input+0xc0>
      pbuf_free(p);
 800e7ee:	4628      	mov	r0, r5
 800e7f0:	f7fb fa52 	bl	8009c98 <pbuf_free>
      p = r;
 800e7f4:	4645      	mov	r5, r8
 800e7f6:	e01b      	b.n	800e830 <icmp_input+0xd8>
        pbuf_free(r);
 800e7f8:	f7fb fa4e 	bl	8009c98 <pbuf_free>
  pbuf_free(p);
 800e7fc:	4628      	mov	r0, r5
 800e7fe:	f7fb fa4b 	bl	8009c98 <pbuf_free>
  return;
 800e802:	e7ce      	b.n	800e7a2 <icmp_input+0x4a>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e804:	4b1f      	ldr	r3, [pc, #124]	; (800e884 <icmp_input+0x12c>)
 800e806:	22af      	movs	r2, #175	; 0xaf
 800e808:	491f      	ldr	r1, [pc, #124]	; (800e888 <icmp_input+0x130>)
 800e80a:	4820      	ldr	r0, [pc, #128]	; (800e88c <icmp_input+0x134>)
 800e80c:	f006 fe94 	bl	8015538 <printf>
        pbuf_free(r);
 800e810:	4640      	mov	r0, r8
 800e812:	f7fb fa41 	bl	8009c98 <pbuf_free>
        goto icmperr;
 800e816:	e7f1      	b.n	800e7fc <icmp_input+0xa4>
        pbuf_free(r);
 800e818:	4640      	mov	r0, r8
 800e81a:	f7fb fa3d 	bl	8009c98 <pbuf_free>
        goto icmperr;
 800e81e:	e7ed      	b.n	800e7fc <icmp_input+0xa4>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800e820:	f5c4 417f 	rsb	r1, r4, #65280	; 0xff00
 800e824:	31f2      	adds	r1, #242	; 0xf2
 800e826:	b209      	sxth	r1, r1
 800e828:	4628      	mov	r0, r5
 800e82a:	f7fb fa2b 	bl	8009c84 <pbuf_header>
 800e82e:	b948      	cbnz	r0, 800e844 <icmp_input+0xec>
    iecho = (struct icmp_echo_hdr *)p->payload;
 800e830:	686e      	ldr	r6, [r5, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 800e832:	4621      	mov	r1, r4
 800e834:	4628      	mov	r0, r5
 800e836:	f7fb fa25 	bl	8009c84 <pbuf_header>
 800e83a:	b150      	cbz	r0, 800e852 <icmp_input+0xfa>
  pbuf_free(p);
 800e83c:	4628      	mov	r0, r5
 800e83e:	f7fb fa2b 	bl	8009c98 <pbuf_free>
  return;
 800e842:	e7ae      	b.n	800e7a2 <icmp_input+0x4a>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e844:	4b0f      	ldr	r3, [pc, #60]	; (800e884 <icmp_input+0x12c>)
 800e846:	22c0      	movs	r2, #192	; 0xc0
 800e848:	4911      	ldr	r1, [pc, #68]	; (800e890 <icmp_input+0x138>)
 800e84a:	4810      	ldr	r0, [pc, #64]	; (800e88c <icmp_input+0x134>)
 800e84c:	f006 fe74 	bl	8015538 <printf>
        goto icmperr;
 800e850:	e7d4      	b.n	800e7fc <icmp_input+0xa4>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800e852:	6868      	ldr	r0, [r5, #4]
      ip4_addr_copy(iphdr->src, *src);
 800e854:	490a      	ldr	r1, [pc, #40]	; (800e880 <icmp_input+0x128>)
 800e856:	694b      	ldr	r3, [r1, #20]
 800e858:	60c3      	str	r3, [r0, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e85a:	690b      	ldr	r3, [r1, #16]
 800e85c:	6103      	str	r3, [r0, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e85e:	2200      	movs	r2, #0
 800e860:	7032      	strb	r2, [r6, #0]
      iecho->chksum = 0;
 800e862:	70b2      	strb	r2, [r6, #2]
 800e864:	70f2      	strb	r2, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800e866:	23ff      	movs	r3, #255	; 0xff
 800e868:	7203      	strb	r3, [r0, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800e86a:	7282      	strb	r2, [r0, #10]
 800e86c:	72c2      	strb	r2, [r0, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e86e:	9702      	str	r7, [sp, #8]
 800e870:	2001      	movs	r0, #1
 800e872:	9001      	str	r0, [sp, #4]
 800e874:	9200      	str	r2, [sp, #0]
 800e876:	3114      	adds	r1, #20
 800e878:	4628      	mov	r0, r5
 800e87a:	f000 f99f 	bl	800ebbc <ip4_output_if>
      if (ret != ERR_OK) {
 800e87e:	e7dd      	b.n	800e83c <icmp_input+0xe4>
 800e880:	200061e0 	.word	0x200061e0
 800e884:	0801df88 	.word	0x0801df88
 800e888:	0801dfec 	.word	0x0801dfec
 800e88c:	0801c994 	.word	0x0801c994
 800e890:	0801e024 	.word	0x0801e024

0800e894 <icmp_dest_unreach>:
{
 800e894:	b508      	push	{r3, lr}
 800e896:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 800e898:	2103      	movs	r1, #3
 800e89a:	f7ff ff0b 	bl	800e6b4 <icmp_send_response>
}
 800e89e:	bd08      	pop	{r3, pc}

0800e8a0 <icmp_time_exceeded>:
{
 800e8a0:	b508      	push	{r3, lr}
 800e8a2:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 800e8a4:	210b      	movs	r1, #11
 800e8a6:	f7ff ff05 	bl	800e6b4 <icmp_send_response>
}
 800e8aa:	bd08      	pop	{r3, pc}

0800e8ac <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e8ac:	b430      	push	{r4, r5}
 800e8ae:	4604      	mov	r4, r0
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800e8b0:	4b14      	ldr	r3, [pc, #80]	; (800e904 <ip4_route+0x58>)
 800e8b2:	6818      	ldr	r0, [r3, #0]
 800e8b4:	e000      	b.n	800e8b8 <ip4_route+0xc>
 800e8b6:	6800      	ldr	r0, [r0, #0]
 800e8b8:	b1b0      	cbz	r0, 800e8e8 <ip4_route+0x3c>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e8ba:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 800e8be:	f013 0f01 	tst.w	r3, #1
 800e8c2:	d0f8      	beq.n	800e8b6 <ip4_route+0xa>
 800e8c4:	f013 0f04 	tst.w	r3, #4
 800e8c8:	d0f5      	beq.n	800e8b6 <ip4_route+0xa>
 800e8ca:	6842      	ldr	r2, [r0, #4]
 800e8cc:	2a00      	cmp	r2, #0
 800e8ce:	d0f2      	beq.n	800e8b6 <ip4_route+0xa>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e8d0:	6821      	ldr	r1, [r4, #0]
 800e8d2:	6885      	ldr	r5, [r0, #8]
 800e8d4:	404a      	eors	r2, r1
 800e8d6:	422a      	tst	r2, r5
 800e8d8:	d012      	beq.n	800e900 <ip4_route+0x54>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e8da:	f013 0f02 	tst.w	r3, #2
 800e8de:	d1ea      	bne.n	800e8b6 <ip4_route+0xa>
 800e8e0:	68c3      	ldr	r3, [r0, #12]
 800e8e2:	4299      	cmp	r1, r3
 800e8e4:	d1e7      	bne.n	800e8b6 <ip4_route+0xa>
 800e8e6:	e00b      	b.n	800e900 <ip4_route+0x54>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e8e8:	4b07      	ldr	r3, [pc, #28]	; (800e908 <ip4_route+0x5c>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	b143      	cbz	r3, 800e900 <ip4_route+0x54>
 800e8ee:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800e8f2:	f002 0205 	and.w	r2, r2, #5
 800e8f6:	2a05      	cmp	r2, #5
 800e8f8:	d102      	bne.n	800e900 <ip4_route+0x54>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800e8fa:	685a      	ldr	r2, [r3, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e8fc:	b102      	cbz	r2, 800e900 <ip4_route+0x54>
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
 800e8fe:	4618      	mov	r0, r3
}
 800e900:	bc30      	pop	{r4, r5}
 800e902:	4770      	bx	lr
 800e904:	20009700 	.word	0x20009700
 800e908:	20009704 	.word	0x20009704

0800e90c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e90c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e910:	4605      	mov	r5, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e912:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 800e916:	f898 3000 	ldrb.w	r3, [r8]
 800e91a:	091a      	lsrs	r2, r3, #4
 800e91c:	2a04      	cmp	r2, #4
 800e91e:	d004      	beq.n	800e92a <ip4_input+0x1e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e920:	f7fb f9ba 	bl	8009c98 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 800e924:	2000      	movs	r0, #0
 800e926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e92a:	460e      	mov	r6, r1
  iphdr_hlen = IPH_HL(iphdr);
 800e92c:	f003 030f 	and.w	r3, r3, #15
  iphdr_hlen *= 4;
 800e930:	009f      	lsls	r7, r3, #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e932:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 800e936:	f7fa fd79 	bl	800942c <lwip_htons>
 800e93a:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 800e93c:	892b      	ldrh	r3, [r5, #8]
 800e93e:	4283      	cmp	r3, r0
 800e940:	d816      	bhi.n	800e970 <ip4_input+0x64>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e942:	896b      	ldrh	r3, [r5, #10]
 800e944:	42bb      	cmp	r3, r7
 800e946:	d318      	bcc.n	800e97a <ip4_input+0x6e>
 800e948:	892b      	ldrh	r3, [r5, #8]
 800e94a:	42a3      	cmp	r3, r4
 800e94c:	d315      	bcc.n	800e97a <ip4_input+0x6e>
 800e94e:	2f13      	cmp	r7, #19
 800e950:	d913      	bls.n	800e97a <ip4_input+0x6e>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e952:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e956:	4a5a      	ldr	r2, [pc, #360]	; (800eac0 <ip4_input+0x1b4>)
 800e958:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e95a:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800e95e:	6111      	str	r1, [r2, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e960:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e964:	2be0      	cmp	r3, #224	; 0xe0
 800e966:	d00c      	beq.n	800e982 <ip4_input+0x76>
    netif = inp;
 800e968:	4634      	mov	r4, r6
    int first = 1;
 800e96a:	f04f 0901 	mov.w	r9, #1
 800e96e:	e016      	b.n	800e99e <ip4_input+0x92>
    pbuf_realloc(p, iphdr_len);
 800e970:	4601      	mov	r1, r0
 800e972:	4628      	mov	r0, r5
 800e974:	f7fb fae4 	bl	8009f40 <pbuf_realloc>
 800e978:	e7e3      	b.n	800e942 <ip4_input+0x36>
    pbuf_free(p);
 800e97a:	4628      	mov	r0, r5
 800e97c:	f7fb f98c 	bl	8009c98 <pbuf_free>
    return ERR_OK;
 800e980:	e7d0      	b.n	800e924 <ip4_input+0x18>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e982:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
 800e986:	f013 0f01 	tst.w	r3, #1
 800e98a:	d025      	beq.n	800e9d8 <ip4_input+0xcc>
 800e98c:	6873      	ldr	r3, [r6, #4]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d167      	bne.n	800ea62 <ip4_input+0x156>
      netif = NULL;
 800e992:	2400      	movs	r4, #0
 800e994:	e021      	b.n	800e9da <ip4_input+0xce>
        netif = netif->next;
 800e996:	6824      	ldr	r4, [r4, #0]
      if (netif == inp) {
 800e998:	42b4      	cmp	r4, r6
 800e99a:	d01b      	beq.n	800e9d4 <ip4_input+0xc8>
    } while (netif != NULL);
 800e99c:	b1ec      	cbz	r4, 800e9da <ip4_input+0xce>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e99e:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800e9a2:	f013 0f01 	tst.w	r3, #1
 800e9a6:	d009      	beq.n	800e9bc <ip4_input+0xb0>
 800e9a8:	6863      	ldr	r3, [r4, #4]
 800e9aa:	b13b      	cbz	r3, 800e9bc <ip4_input+0xb0>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e9ac:	4a44      	ldr	r2, [pc, #272]	; (800eac0 <ip4_input+0x1b4>)
 800e9ae:	6950      	ldr	r0, [r2, #20]
 800e9b0:	4283      	cmp	r3, r0
 800e9b2:	d012      	beq.n	800e9da <ip4_input+0xce>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e9b4:	4621      	mov	r1, r4
 800e9b6:	f000 f916 	bl	800ebe6 <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e9ba:	b970      	cbnz	r0, 800e9da <ip4_input+0xce>
      if (first) {
 800e9bc:	f1b9 0f00 	cmp.w	r9, #0
 800e9c0:	d0e9      	beq.n	800e996 <ip4_input+0x8a>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800e9c2:	4b3f      	ldr	r3, [pc, #252]	; (800eac0 <ip4_input+0x1b4>)
 800e9c4:	7d1b      	ldrb	r3, [r3, #20]
 800e9c6:	2b7f      	cmp	r3, #127	; 0x7f
 800e9c8:	d04d      	beq.n	800ea66 <ip4_input+0x15a>
        netif = netif_list;
 800e9ca:	4b3e      	ldr	r3, [pc, #248]	; (800eac4 <ip4_input+0x1b8>)
 800e9cc:	681c      	ldr	r4, [r3, #0]
        first = 0;
 800e9ce:	f04f 0900 	mov.w	r9, #0
 800e9d2:	e7e1      	b.n	800e998 <ip4_input+0x8c>
        netif = netif->next;
 800e9d4:	6824      	ldr	r4, [r4, #0]
 800e9d6:	e7e1      	b.n	800e99c <ip4_input+0x90>
      netif = NULL;
 800e9d8:	2400      	movs	r4, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e9da:	4631      	mov	r1, r6
 800e9dc:	4b38      	ldr	r3, [pc, #224]	; (800eac0 <ip4_input+0x1b4>)
 800e9de:	6918      	ldr	r0, [r3, #16]
 800e9e0:	f000 f901 	bl	800ebe6 <ip4_addr_isbroadcast_u32>
 800e9e4:	2800      	cmp	r0, #0
 800e9e6:	d140      	bne.n	800ea6a <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e9e8:	4b35      	ldr	r3, [pc, #212]	; (800eac0 <ip4_input+0x1b4>)
 800e9ea:	691b      	ldr	r3, [r3, #16]
 800e9ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e9f0:	2be0      	cmp	r3, #224	; 0xe0
 800e9f2:	d03a      	beq.n	800ea6a <ip4_input+0x15e>
  if (netif == NULL) {
 800e9f4:	2c00      	cmp	r4, #0
 800e9f6:	d03c      	beq.n	800ea72 <ip4_input+0x166>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e9f8:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800e9fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ea00:	b29b      	uxth	r3, r3
 800ea02:	b13b      	cbz	r3, 800ea14 <ip4_input+0x108>
    p = ip4_reass(p);
 800ea04:	4628      	mov	r0, r5
 800ea06:	f000 fbeb 	bl	800f1e0 <ip4_reass>
    if (p == NULL) {
 800ea0a:	4605      	mov	r5, r0
 800ea0c:	2800      	cmp	r0, #0
 800ea0e:	d089      	beq.n	800e924 <ip4_input+0x18>
    iphdr = (struct ip_hdr *)p->payload;
 800ea10:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_netif = netif;
 800ea14:	4a2a      	ldr	r2, [pc, #168]	; (800eac0 <ip4_input+0x1b4>)
 800ea16:	6014      	str	r4, [r2, #0]
  ip_data.current_input_netif = inp;
 800ea18:	6056      	str	r6, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800ea1a:	f8c2 8008 	str.w	r8, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800ea1e:	f898 3000 	ldrb.w	r3, [r8]
 800ea22:	f003 030f 	and.w	r3, r3, #15
 800ea26:	009b      	lsls	r3, r3, #2
 800ea28:	8193      	strh	r3, [r2, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800ea2a:	4279      	negs	r1, r7
 800ea2c:	4628      	mov	r0, r5
 800ea2e:	f7fb f929 	bl	8009c84 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 800ea32:	f898 3009 	ldrb.w	r3, [r8, #9]
 800ea36:	2b06      	cmp	r3, #6
 800ea38:	d02c      	beq.n	800ea94 <ip4_input+0x188>
 800ea3a:	2b11      	cmp	r3, #17
 800ea3c:	d01d      	beq.n	800ea7a <ip4_input+0x16e>
 800ea3e:	2b01      	cmp	r3, #1
 800ea40:	d02d      	beq.n	800ea9e <ip4_input+0x192>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ea42:	4621      	mov	r1, r4
 800ea44:	4b1e      	ldr	r3, [pc, #120]	; (800eac0 <ip4_input+0x1b4>)
 800ea46:	6958      	ldr	r0, [r3, #20]
 800ea48:	f000 f8cd 	bl	800ebe6 <ip4_addr_isbroadcast_u32>
 800ea4c:	b928      	cbnz	r0, 800ea5a <ip4_input+0x14e>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ea4e:	4b1c      	ldr	r3, [pc, #112]	; (800eac0 <ip4_input+0x1b4>)
 800ea50:	695b      	ldr	r3, [r3, #20]
 800ea52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ea56:	2be0      	cmp	r3, #224	; 0xe0
 800ea58:	d126      	bne.n	800eaa8 <ip4_input+0x19c>
      pbuf_free(p);
 800ea5a:	4628      	mov	r0, r5
 800ea5c:	f7fb f91c 	bl	8009c98 <pbuf_free>
 800ea60:	e00f      	b.n	800ea82 <ip4_input+0x176>
      netif = inp;
 800ea62:	4634      	mov	r4, r6
 800ea64:	e7b9      	b.n	800e9da <ip4_input+0xce>
          netif = NULL;
 800ea66:	2400      	movs	r4, #0
 800ea68:	e7b7      	b.n	800e9da <ip4_input+0xce>
      pbuf_free(p);
 800ea6a:	4628      	mov	r0, r5
 800ea6c:	f7fb f914 	bl	8009c98 <pbuf_free>
      return ERR_OK;
 800ea70:	e758      	b.n	800e924 <ip4_input+0x18>
    pbuf_free(p);
 800ea72:	4628      	mov	r0, r5
 800ea74:	f7fb f910 	bl	8009c98 <pbuf_free>
    return ERR_OK;
 800ea78:	e754      	b.n	800e924 <ip4_input+0x18>
      udp_input(p, inp);
 800ea7a:	4631      	mov	r1, r6
 800ea7c:	4628      	mov	r0, r5
 800ea7e:	f7ff f8c9 	bl	800dc14 <udp_input>
  ip_data.current_netif = NULL;
 800ea82:	4b0f      	ldr	r3, [pc, #60]	; (800eac0 <ip4_input+0x1b4>)
 800ea84:	2200      	movs	r2, #0
 800ea86:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800ea88:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800ea8a:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ea8c:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800ea8e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800ea90:	615a      	str	r2, [r3, #20]
  return ERR_OK;
 800ea92:	e747      	b.n	800e924 <ip4_input+0x18>
      tcp_input(p, inp);
 800ea94:	4631      	mov	r1, r6
 800ea96:	4628      	mov	r0, r5
 800ea98:	f7fd fd58 	bl	800c54c <tcp_input>
      break;
 800ea9c:	e7f1      	b.n	800ea82 <ip4_input+0x176>
      icmp_input(p, inp);
 800ea9e:	4631      	mov	r1, r6
 800eaa0:	4628      	mov	r0, r5
 800eaa2:	f7ff fe59 	bl	800e758 <icmp_input>
      break;
 800eaa6:	e7ec      	b.n	800ea82 <ip4_input+0x176>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800eaa8:	4639      	mov	r1, r7
 800eaaa:	4628      	mov	r0, r5
 800eaac:	f7fb f8ef 	bl	8009c8e <pbuf_header_force>
        p->payload = iphdr;
 800eab0:	f8c5 8004 	str.w	r8, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800eab4:	2102      	movs	r1, #2
 800eab6:	4628      	mov	r0, r5
 800eab8:	f7ff feec 	bl	800e894 <icmp_dest_unreach>
 800eabc:	e7cd      	b.n	800ea5a <ip4_input+0x14e>
 800eabe:	bf00      	nop
 800eac0:	200061e0 	.word	0x200061e0
 800eac4:	20009700 	.word	0x20009700

0800eac8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800eac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eacc:	b083      	sub	sp, #12
 800eace:	4604      	mov	r4, r0
 800ead0:	460f      	mov	r7, r1
 800ead2:	4616      	mov	r6, r2
 800ead4:	4699      	mov	r9, r3
 800ead6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800eada:	89c2      	ldrh	r2, [r0, #14]
 800eadc:	2a01      	cmp	r2, #1
 800eade:	d13f      	bne.n	800eb60 <ip4_output_if_src+0x98>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800eae0:	2e00      	cmp	r6, #0
 800eae2:	d051      	beq.n	800eb88 <ip4_output_if_src+0xc0>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800eae4:	2114      	movs	r1, #20
 800eae6:	4620      	mov	r0, r4
 800eae8:	f7fb f8cc 	bl	8009c84 <pbuf_header>
 800eaec:	2800      	cmp	r0, #0
 800eaee:	d156      	bne.n	800eb9e <ip4_output_if_src+0xd6>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 800eaf0:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800eaf2:	8963      	ldrh	r3, [r4, #10]
 800eaf4:	2b13      	cmp	r3, #19
 800eaf6:	d93b      	bls.n	800eb70 <ip4_output_if_src+0xa8>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800eaf8:	f885 9008 	strb.w	r9, [r5, #8]
    IPH_PROTO_SET(iphdr, proto);
 800eafc:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800eb00:	726b      	strb	r3, [r5, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800eb02:	6833      	ldr	r3, [r6, #0]
 800eb04:	612b      	str	r3, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800eb06:	2345      	movs	r3, #69	; 0x45
 800eb08:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 800eb0a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800eb0e:	706b      	strb	r3, [r5, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800eb10:	8920      	ldrh	r0, [r4, #8]
 800eb12:	f7fa fc8b 	bl	800942c <lwip_htons>
 800eb16:	8068      	strh	r0, [r5, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800eb18:	2300      	movs	r3, #0
 800eb1a:	71ab      	strb	r3, [r5, #6]
 800eb1c:	71eb      	strb	r3, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800eb1e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 800ebb8 <ip4_output_if_src+0xf0>
 800eb22:	f8b9 0000 	ldrh.w	r0, [r9]
 800eb26:	f7fa fc81 	bl	800942c <lwip_htons>
 800eb2a:	80a8      	strh	r0, [r5, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800eb2c:	f8b9 3000 	ldrh.w	r3, [r9]
 800eb30:	3301      	adds	r3, #1
 800eb32:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 800eb36:	b31f      	cbz	r7, 800eb80 <ip4_output_if_src+0xb8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	60eb      	str	r3, [r5, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	72ab      	strb	r3, [r5, #10]
 800eb40:	72eb      	strb	r3, [r5, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800eb42:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
 800eb46:	b113      	cbz	r3, 800eb4e <ip4_output_if_src+0x86>
 800eb48:	8922      	ldrh	r2, [r4, #8]
 800eb4a:	4293      	cmp	r3, r2
 800eb4c:	d321      	bcc.n	800eb92 <ip4_output_if_src+0xca>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800eb4e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800eb52:	4632      	mov	r2, r6
 800eb54:	4621      	mov	r1, r4
 800eb56:	4640      	mov	r0, r8
 800eb58:	4798      	blx	r3
}
 800eb5a:	b003      	add	sp, #12
 800eb5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800eb60:	4b10      	ldr	r3, [pc, #64]	; (800eba4 <ip4_output_if_src+0xdc>)
 800eb62:	f240 3233 	movw	r2, #819	; 0x333
 800eb66:	4910      	ldr	r1, [pc, #64]	; (800eba8 <ip4_output_if_src+0xe0>)
 800eb68:	4810      	ldr	r0, [pc, #64]	; (800ebac <ip4_output_if_src+0xe4>)
 800eb6a:	f006 fce5 	bl	8015538 <printf>
 800eb6e:	e7b7      	b.n	800eae0 <ip4_output_if_src+0x18>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800eb70:	4b0c      	ldr	r3, [pc, #48]	; (800eba4 <ip4_output_if_src+0xdc>)
 800eb72:	f44f 7258 	mov.w	r2, #864	; 0x360
 800eb76:	490e      	ldr	r1, [pc, #56]	; (800ebb0 <ip4_output_if_src+0xe8>)
 800eb78:	480c      	ldr	r0, [pc, #48]	; (800ebac <ip4_output_if_src+0xe4>)
 800eb7a:	f006 fcdd 	bl	8015538 <printf>
 800eb7e:	e7bb      	b.n	800eaf8 <ip4_output_if_src+0x30>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800eb80:	4b0c      	ldr	r3, [pc, #48]	; (800ebb4 <ip4_output_if_src+0xec>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	60eb      	str	r3, [r5, #12]
 800eb86:	e7d9      	b.n	800eb3c <ip4_output_if_src+0x74>
    iphdr = (struct ip_hdr *)p->payload;
 800eb88:	6863      	ldr	r3, [r4, #4]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800eb8a:	691b      	ldr	r3, [r3, #16]
 800eb8c:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 800eb8e:	ae01      	add	r6, sp, #4
 800eb90:	e7d7      	b.n	800eb42 <ip4_output_if_src+0x7a>
    return ip4_frag(p, netif, dest);
 800eb92:	4632      	mov	r2, r6
 800eb94:	4641      	mov	r1, r8
 800eb96:	4620      	mov	r0, r4
 800eb98:	f000 fbf2 	bl	800f380 <ip4_frag>
 800eb9c:	e7dd      	b.n	800eb5a <ip4_output_if_src+0x92>
      return ERR_BUF;
 800eb9e:	f06f 0001 	mvn.w	r0, #1
 800eba2:	e7da      	b.n	800eb5a <ip4_output_if_src+0x92>
 800eba4:	0801e058 	.word	0x0801e058
 800eba8:	0801e08c 	.word	0x0801e08c
 800ebac:	0801c994 	.word	0x0801c994
 800ebb0:	0801e098 	.word	0x0801e098
 800ebb4:	0801c920 	.word	0x0801c920
 800ebb8:	200043b6 	.word	0x200043b6

0800ebbc <ip4_output_if>:
{
 800ebbc:	b530      	push	{r4, r5, lr}
 800ebbe:	b085      	sub	sp, #20
 800ebc0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  if (dest != LWIP_IP_HDRINCL) {
 800ebc2:	4615      	mov	r5, r2
 800ebc4:	b11a      	cbz	r2, 800ebce <ip4_output_if+0x12>
    if (ip4_addr_isany(src)) {
 800ebc6:	b109      	cbz	r1, 800ebcc <ip4_output_if+0x10>
 800ebc8:	680a      	ldr	r2, [r1, #0]
 800ebca:	b902      	cbnz	r2, 800ebce <ip4_output_if+0x12>
      src_used = netif_ip4_addr(netif);
 800ebcc:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800ebce:	9402      	str	r4, [sp, #8]
 800ebd0:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 800ebd4:	9201      	str	r2, [sp, #4]
 800ebd6:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800ebda:	9200      	str	r2, [sp, #0]
 800ebdc:	462a      	mov	r2, r5
 800ebde:	f7ff ff73 	bl	800eac8 <ip4_output_if_src>
}
 800ebe2:	b005      	add	sp, #20
 800ebe4:	bd30      	pop	{r4, r5, pc}

0800ebe6 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800ebe6:	4603      	mov	r3, r0
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800ebe8:	1e42      	subs	r2, r0, #1
 800ebea:	f112 0f03 	cmn.w	r2, #3
 800ebee:	d812      	bhi.n	800ec16 <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800ebf0:	f891 002b 	ldrb.w	r0, [r1, #43]	; 0x2b
 800ebf4:	f010 0002 	ands.w	r0, r0, #2
 800ebf8:	d014      	beq.n	800ec24 <ip4_addr_isbroadcast_u32+0x3e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800ebfa:	684a      	ldr	r2, [r1, #4]
 800ebfc:	429a      	cmp	r2, r3
 800ebfe:	d00c      	beq.n	800ec1a <ip4_addr_isbroadcast_u32+0x34>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800ec00:	6888      	ldr	r0, [r1, #8]
 800ec02:	405a      	eors	r2, r3
 800ec04:	4202      	tst	r2, r0
 800ec06:	d10a      	bne.n	800ec1e <ip4_addr_isbroadcast_u32+0x38>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ec08:	43c2      	mvns	r2, r0
 800ec0a:	ea23 0300 	bic.w	r3, r3, r0
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d007      	beq.n	800ec22 <ip4_addr_isbroadcast_u32+0x3c>
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 800ec12:	2000      	movs	r0, #0
 800ec14:	4770      	bx	lr
    return 1;
 800ec16:	2001      	movs	r0, #1
 800ec18:	4770      	bx	lr
    return 0;
 800ec1a:	2000      	movs	r0, #0
 800ec1c:	4770      	bx	lr
    return 0;
 800ec1e:	2000      	movs	r0, #0
 800ec20:	4770      	bx	lr
    return 1;
 800ec22:	2001      	movs	r0, #1
  }
}
 800ec24:	4770      	bx	lr
	...

0800ec28 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 800ec28:	b570      	push	{r4, r5, r6, lr}
 800ec2a:	b084      	sub	sp, #16
 800ec2c:	460c      	mov	r4, r1
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;

  c = *cp;
 800ec2e:	7803      	ldrb	r3, [r0, #0]
  u32_t *pp = parts;
 800ec30:	466e      	mov	r6, sp
 800ec32:	e03b      	b.n	800ecac <ip4addr_aton+0x84>
      return 0;
    }
    val = 0;
    base = 10;
    if (c == '0') {
      c = *++cp;
 800ec34:	1c42      	adds	r2, r0, #1
 800ec36:	7843      	ldrb	r3, [r0, #1]
      if (c == 'x' || c == 'X') {
 800ec38:	2b78      	cmp	r3, #120	; 0x78
 800ec3a:	d004      	beq.n	800ec46 <ip4addr_aton+0x1e>
 800ec3c:	2b58      	cmp	r3, #88	; 0x58
 800ec3e:	d002      	beq.n	800ec46 <ip4addr_aton+0x1e>
      c = *++cp;
 800ec40:	4610      	mov	r0, r2
        base = 16;
        c = *++cp;
      } else {
        base = 8;
 800ec42:	2108      	movs	r1, #8
 800ec44:	e03a      	b.n	800ecbc <ip4addr_aton+0x94>
        c = *++cp;
 800ec46:	7883      	ldrb	r3, [r0, #2]
 800ec48:	3002      	adds	r0, #2
        base = 16;
 800ec4a:	2110      	movs	r1, #16
        c = *++cp;
 800ec4c:	e036      	b.n	800ecbc <ip4addr_aton+0x94>
    }
    for (;;) {
      if (isdigit(c)) {
        val = (val * base) + (u32_t)(c - '0');
        c = *++cp;
      } else if (base == 16 && isxdigit(c)) {
 800ec4e:	2910      	cmp	r1, #16
 800ec50:	d123      	bne.n	800ec9a <ip4addr_aton+0x72>
 800ec52:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ec56:	b2d2      	uxtb	r2, r2
 800ec58:	2a05      	cmp	r2, #5
 800ec5a:	d904      	bls.n	800ec66 <ip4addr_aton+0x3e>
 800ec5c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ec60:	b2d2      	uxtb	r2, r2
 800ec62:	2a05      	cmp	r2, #5
 800ec64:	d819      	bhi.n	800ec9a <ip4addr_aton+0x72>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 800ec66:	012d      	lsls	r5, r5, #4
 800ec68:	f103 020a 	add.w	r2, r3, #10
 800ec6c:	3b61      	subs	r3, #97	; 0x61
 800ec6e:	b2db      	uxtb	r3, r3
 800ec70:	2b19      	cmp	r3, #25
 800ec72:	d810      	bhi.n	800ec96 <ip4addr_aton+0x6e>
 800ec74:	2361      	movs	r3, #97	; 0x61
 800ec76:	1ad2      	subs	r2, r2, r3
 800ec78:	4315      	orrs	r5, r2
        c = *++cp;
 800ec7a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
      if (isdigit(c)) {
 800ec7e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800ec82:	b2d2      	uxtb	r2, r2
 800ec84:	2a09      	cmp	r2, #9
 800ec86:	d8e2      	bhi.n	800ec4e <ip4addr_aton+0x26>
        val = (val * base) + (u32_t)(c - '0');
 800ec88:	fb05 3201 	mla	r2, r5, r1, r3
 800ec8c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
        c = *++cp;
 800ec90:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800ec94:	e7f3      	b.n	800ec7e <ip4addr_aton+0x56>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 800ec96:	2341      	movs	r3, #65	; 0x41
 800ec98:	e7ed      	b.n	800ec76 <ip4addr_aton+0x4e>
      } else {
        break;
      }
    }
    if (c == '.') {
 800ec9a:	2b2e      	cmp	r3, #46	; 0x2e
 800ec9c:	d110      	bne.n	800ecc0 <ip4addr_aton+0x98>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 800ec9e:	ab03      	add	r3, sp, #12
 800eca0:	429e      	cmp	r6, r3
 800eca2:	d25f      	bcs.n	800ed64 <ip4addr_aton+0x13c>
        return 0;
      }
      *pp++ = val;
 800eca4:	f846 5b04 	str.w	r5, [r6], #4
      c = *++cp;
 800eca8:	7843      	ldrb	r3, [r0, #1]
 800ecaa:	3001      	adds	r0, #1
    if (!isdigit(c)) {
 800ecac:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800ecb0:	b2d2      	uxtb	r2, r2
 800ecb2:	2a09      	cmp	r2, #9
 800ecb4:	d854      	bhi.n	800ed60 <ip4addr_aton+0x138>
    if (c == '0') {
 800ecb6:	2b30      	cmp	r3, #48	; 0x30
 800ecb8:	d0bc      	beq.n	800ec34 <ip4addr_aton+0xc>
    base = 10;
 800ecba:	210a      	movs	r1, #10
        base = 8;
 800ecbc:	2500      	movs	r5, #0
 800ecbe:	e7de      	b.n	800ec7e <ip4addr_aton+0x56>
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 800ecc0:	b15b      	cbz	r3, 800ecda <ip4addr_aton+0xb2>
 800ecc2:	2b20      	cmp	r3, #32
 800ecc4:	d009      	beq.n	800ecda <ip4addr_aton+0xb2>
 800ecc6:	2b0c      	cmp	r3, #12
 800ecc8:	d007      	beq.n	800ecda <ip4addr_aton+0xb2>
 800ecca:	2b0a      	cmp	r3, #10
 800eccc:	d005      	beq.n	800ecda <ip4addr_aton+0xb2>
 800ecce:	2b0d      	cmp	r3, #13
 800ecd0:	d003      	beq.n	800ecda <ip4addr_aton+0xb2>
 800ecd2:	2b09      	cmp	r3, #9
 800ecd4:	d001      	beq.n	800ecda <ip4addr_aton+0xb2>
 800ecd6:	2b0b      	cmp	r3, #11
 800ecd8:	d147      	bne.n	800ed6a <ip4addr_aton+0x142>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 800ecda:	4668      	mov	r0, sp
 800ecdc:	1a30      	subs	r0, r6, r0
 800ecde:	1080      	asrs	r0, r0, #2
 800ece0:	3001      	adds	r0, #1
 800ece2:	2804      	cmp	r0, #4
 800ece4:	d834      	bhi.n	800ed50 <ip4addr_aton+0x128>
 800ece6:	e8df f000 	tbb	[pc, r0]
 800ecea:	0b3e      	.short	0x0b3e
 800ecec:	1303      	.short	0x1303
 800ecee:	21          	.byte	0x21
 800ecef:	00          	.byte	0x00

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 800ecf0:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
 800ecf4:	d23b      	bcs.n	800ed6e <ip4addr_aton+0x146>
      return 0;
    }
    if (parts[0] > 0xff) {
 800ecf6:	9b00      	ldr	r3, [sp, #0]
 800ecf8:	2bff      	cmp	r3, #255	; 0xff
 800ecfa:	d83a      	bhi.n	800ed72 <ip4addr_aton+0x14a>
      return 0;
    }
    val |= parts[0] << 24;
 800ecfc:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
    break;
  default:
    LWIP_ASSERT("unhandled", 0);
    break;
  }
  if (addr) {
 800ed00:	2c00      	cmp	r4, #0
 800ed02:	d046      	beq.n	800ed92 <ip4addr_aton+0x16a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 800ed04:	4628      	mov	r0, r5
 800ed06:	f7fa fb94 	bl	8009432 <lwip_htonl>
 800ed0a:	6020      	str	r0, [r4, #0]
  }
  return 1;
 800ed0c:	2001      	movs	r0, #1
 800ed0e:	e02a      	b.n	800ed66 <ip4addr_aton+0x13e>
    if (val > 0xffff) {
 800ed10:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800ed14:	d22f      	bcs.n	800ed76 <ip4addr_aton+0x14e>
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 800ed16:	9a00      	ldr	r2, [sp, #0]
 800ed18:	2aff      	cmp	r2, #255	; 0xff
 800ed1a:	d82e      	bhi.n	800ed7a <ip4addr_aton+0x152>
 800ed1c:	9b01      	ldr	r3, [sp, #4]
 800ed1e:	2bff      	cmp	r3, #255	; 0xff
 800ed20:	d82d      	bhi.n	800ed7e <ip4addr_aton+0x156>
    val |= (parts[0] << 24) | (parts[1] << 16);
 800ed22:	041b      	lsls	r3, r3, #16
 800ed24:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ed28:	431d      	orrs	r5, r3
    break;
 800ed2a:	e7e9      	b.n	800ed00 <ip4addr_aton+0xd8>
    if (val > 0xff) {
 800ed2c:	2dff      	cmp	r5, #255	; 0xff
 800ed2e:	d828      	bhi.n	800ed82 <ip4addr_aton+0x15a>
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 800ed30:	9900      	ldr	r1, [sp, #0]
 800ed32:	29ff      	cmp	r1, #255	; 0xff
 800ed34:	d827      	bhi.n	800ed86 <ip4addr_aton+0x15e>
 800ed36:	9b01      	ldr	r3, [sp, #4]
 800ed38:	2bff      	cmp	r3, #255	; 0xff
 800ed3a:	d826      	bhi.n	800ed8a <ip4addr_aton+0x162>
 800ed3c:	9a02      	ldr	r2, [sp, #8]
 800ed3e:	2aff      	cmp	r2, #255	; 0xff
 800ed40:	d825      	bhi.n	800ed8e <ip4addr_aton+0x166>
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 800ed42:	041b      	lsls	r3, r3, #16
 800ed44:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800ed48:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ed4c:	431d      	orrs	r5, r3
    break;
 800ed4e:	e7d7      	b.n	800ed00 <ip4addr_aton+0xd8>
    LWIP_ASSERT("unhandled", 0);
 800ed50:	4b11      	ldr	r3, [pc, #68]	; (800ed98 <ip4addr_aton+0x170>)
 800ed52:	f240 1203 	movw	r2, #259	; 0x103
 800ed56:	4911      	ldr	r1, [pc, #68]	; (800ed9c <ip4addr_aton+0x174>)
 800ed58:	4811      	ldr	r0, [pc, #68]	; (800eda0 <ip4addr_aton+0x178>)
 800ed5a:	f006 fbed 	bl	8015538 <printf>
    break;
 800ed5e:	e7cf      	b.n	800ed00 <ip4addr_aton+0xd8>
      return 0;
 800ed60:	2000      	movs	r0, #0
 800ed62:	e000      	b.n	800ed66 <ip4addr_aton+0x13e>
        return 0;
 800ed64:	2000      	movs	r0, #0
}
 800ed66:	b004      	add	sp, #16
 800ed68:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 800ed6a:	2000      	movs	r0, #0
 800ed6c:	e7fb      	b.n	800ed66 <ip4addr_aton+0x13e>
      return 0;
 800ed6e:	2000      	movs	r0, #0
 800ed70:	e7f9      	b.n	800ed66 <ip4addr_aton+0x13e>
      return 0;
 800ed72:	2000      	movs	r0, #0
 800ed74:	e7f7      	b.n	800ed66 <ip4addr_aton+0x13e>
      return 0;
 800ed76:	2000      	movs	r0, #0
 800ed78:	e7f5      	b.n	800ed66 <ip4addr_aton+0x13e>
      return 0;
 800ed7a:	2000      	movs	r0, #0
 800ed7c:	e7f3      	b.n	800ed66 <ip4addr_aton+0x13e>
 800ed7e:	2000      	movs	r0, #0
 800ed80:	e7f1      	b.n	800ed66 <ip4addr_aton+0x13e>
      return 0;
 800ed82:	2000      	movs	r0, #0
 800ed84:	e7ef      	b.n	800ed66 <ip4addr_aton+0x13e>
      return 0;
 800ed86:	2000      	movs	r0, #0
 800ed88:	e7ed      	b.n	800ed66 <ip4addr_aton+0x13e>
 800ed8a:	2000      	movs	r0, #0
 800ed8c:	e7eb      	b.n	800ed66 <ip4addr_aton+0x13e>
 800ed8e:	2000      	movs	r0, #0
 800ed90:	e7e9      	b.n	800ed66 <ip4addr_aton+0x13e>
  return 1;
 800ed92:	2001      	movs	r0, #1
 800ed94:	e7e7      	b.n	800ed66 <ip4addr_aton+0x13e>
 800ed96:	bf00      	nop
 800ed98:	0801e0c8 	.word	0x0801e0c8
 800ed9c:	0801e104 	.word	0x0801e104
 800eda0:	0801c994 	.word	0x0801c994

0800eda4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800eda4:	b538      	push	{r3, r4, r5, lr}
 800eda6:	4604      	mov	r4, r0
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800eda8:	4b0c      	ldr	r3, [pc, #48]	; (800eddc <ip_reass_dequeue_datagram+0x38>)
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	4283      	cmp	r3, r0
 800edae:	d008      	beq.n	800edc2 <ip_reass_dequeue_datagram+0x1e>
 800edb0:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800edb2:	b151      	cbz	r1, 800edca <ip_reass_dequeue_datagram+0x26>
    prev->next = ipr->next;
 800edb4:	6823      	ldr	r3, [r4, #0]
 800edb6:	602b      	str	r3, [r5, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800edb8:	4621      	mov	r1, r4
 800edba:	2004      	movs	r0, #4
 800edbc:	f7fa fdb8 	bl	8009930 <memp_free>
}
 800edc0:	bd38      	pop	{r3, r4, r5, pc}
    reassdatagrams = ipr->next;
 800edc2:	6802      	ldr	r2, [r0, #0]
 800edc4:	4b05      	ldr	r3, [pc, #20]	; (800eddc <ip_reass_dequeue_datagram+0x38>)
 800edc6:	601a      	str	r2, [r3, #0]
 800edc8:	e7f6      	b.n	800edb8 <ip_reass_dequeue_datagram+0x14>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800edca:	4b05      	ldr	r3, [pc, #20]	; (800ede0 <ip_reass_dequeue_datagram+0x3c>)
 800edcc:	f240 1245 	movw	r2, #325	; 0x145
 800edd0:	4904      	ldr	r1, [pc, #16]	; (800ede4 <ip_reass_dequeue_datagram+0x40>)
 800edd2:	4805      	ldr	r0, [pc, #20]	; (800ede8 <ip_reass_dequeue_datagram+0x44>)
 800edd4:	f006 fbb0 	bl	8015538 <printf>
 800edd8:	e7ec      	b.n	800edb4 <ip_reass_dequeue_datagram+0x10>
 800edda:	bf00      	nop
 800eddc:	200043b8 	.word	0x200043b8
 800ede0:	0801e110 	.word	0x0801e110
 800ede4:	0801e14c 	.word	0x0801e14c
 800ede8:	0801c994 	.word	0x0801c994

0800edec <ip_reass_free_complete_datagram>:
{
 800edec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edf0:	4680      	mov	r8, r0
 800edf2:	4689      	mov	r9, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800edf4:	4281      	cmp	r1, r0
 800edf6:	d015      	beq.n	800ee24 <ip_reass_free_complete_datagram+0x38>
  if (prev != NULL) {
 800edf8:	f1b9 0f00 	cmp.w	r9, #0
 800edfc:	d009      	beq.n	800ee12 <ip_reass_free_complete_datagram+0x26>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800edfe:	f8d9 3000 	ldr.w	r3, [r9]
 800ee02:	4543      	cmp	r3, r8
 800ee04:	d005      	beq.n	800ee12 <ip_reass_free_complete_datagram+0x26>
 800ee06:	4b30      	ldr	r3, [pc, #192]	; (800eec8 <ip_reass_free_complete_datagram+0xdc>)
 800ee08:	22ad      	movs	r2, #173	; 0xad
 800ee0a:	4930      	ldr	r1, [pc, #192]	; (800eecc <ip_reass_free_complete_datagram+0xe0>)
 800ee0c:	4830      	ldr	r0, [pc, #192]	; (800eed0 <ip_reass_free_complete_datagram+0xe4>)
 800ee0e:	f006 fb93 	bl	8015538 <printf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800ee12:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ee16:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 800ee18:	889a      	ldrh	r2, [r3, #4]
 800ee1a:	b152      	cbz	r2, 800ee32 <ip_reass_free_complete_datagram+0x46>
  u16_t pbufs_freed = 0;
 800ee1c:	2600      	movs	r6, #0
  p = ipr->p;
 800ee1e:	f8d8 5004 	ldr.w	r5, [r8, #4]
  while (p != NULL) {
 800ee22:	e02e      	b.n	800ee82 <ip_reass_free_complete_datagram+0x96>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ee24:	4b28      	ldr	r3, [pc, #160]	; (800eec8 <ip_reass_free_complete_datagram+0xdc>)
 800ee26:	22ab      	movs	r2, #171	; 0xab
 800ee28:	492a      	ldr	r1, [pc, #168]	; (800eed4 <ip_reass_free_complete_datagram+0xe8>)
 800ee2a:	4829      	ldr	r0, [pc, #164]	; (800eed0 <ip_reass_free_complete_datagram+0xe4>)
 800ee2c:	f006 fb84 	bl	8015538 <printf>
 800ee30:	e7e2      	b.n	800edf8 <ip_reass_free_complete_datagram+0xc>
    ipr->p = iprh->next_pbuf;
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	f8c8 3004 	str.w	r3, [r8, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800ee38:	4643      	mov	r3, r8
 800ee3a:	686a      	ldr	r2, [r5, #4]
 800ee3c:	f853 1f08 	ldr.w	r1, [r3, #8]!
 800ee40:	685e      	ldr	r6, [r3, #4]
 800ee42:	689c      	ldr	r4, [r3, #8]
 800ee44:	68d8      	ldr	r0, [r3, #12]
 800ee46:	6011      	str	r1, [r2, #0]
 800ee48:	6056      	str	r6, [r2, #4]
 800ee4a:	6094      	str	r4, [r2, #8]
 800ee4c:	60d0      	str	r0, [r2, #12]
 800ee4e:	6919      	ldr	r1, [r3, #16]
 800ee50:	6111      	str	r1, [r2, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800ee52:	2101      	movs	r1, #1
 800ee54:	4628      	mov	r0, r5
 800ee56:	f7ff fd23 	bl	800e8a0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800ee5a:	4628      	mov	r0, r5
 800ee5c:	f7fb f8e8 	bl	800a030 <pbuf_clen>
 800ee60:	4606      	mov	r6, r0
    pbuf_free(p);
 800ee62:	4628      	mov	r0, r5
 800ee64:	f7fa ff18 	bl	8009c98 <pbuf_free>
 800ee68:	e7d9      	b.n	800ee1e <ip_reass_free_complete_datagram+0x32>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ee6a:	4b17      	ldr	r3, [pc, #92]	; (800eec8 <ip_reass_free_complete_datagram+0xdc>)
 800ee6c:	22cc      	movs	r2, #204	; 0xcc
 800ee6e:	491a      	ldr	r1, [pc, #104]	; (800eed8 <ip_reass_free_complete_datagram+0xec>)
 800ee70:	4817      	ldr	r0, [pc, #92]	; (800eed0 <ip_reass_free_complete_datagram+0xe4>)
 800ee72:	f006 fb61 	bl	8015538 <printf>
    pbufs_freed += clen;
 800ee76:	4434      	add	r4, r6
 800ee78:	b2a6      	uxth	r6, r4
    pbuf_free(pcur);
 800ee7a:	4628      	mov	r0, r5
 800ee7c:	f7fa ff0c 	bl	8009c98 <pbuf_free>
    p = iprh->next_pbuf;
 800ee80:	463d      	mov	r5, r7
  while (p != NULL) {
 800ee82:	b155      	cbz	r5, 800ee9a <ip_reass_free_complete_datagram+0xae>
    iprh = (struct ip_reass_helper *)p->payload;
 800ee84:	686b      	ldr	r3, [r5, #4]
    p = iprh->next_pbuf;
 800ee86:	681f      	ldr	r7, [r3, #0]
    clen = pbuf_clen(pcur);
 800ee88:	4628      	mov	r0, r5
 800ee8a:	f7fb f8d1 	bl	800a030 <pbuf_clen>
 800ee8e:	4604      	mov	r4, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ee90:	1833      	adds	r3, r6, r0
 800ee92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee96:	dbee      	blt.n	800ee76 <ip_reass_free_complete_datagram+0x8a>
 800ee98:	e7e7      	b.n	800ee6a <ip_reass_free_complete_datagram+0x7e>
  ip_reass_dequeue_datagram(ipr, prev);
 800ee9a:	4649      	mov	r1, r9
 800ee9c:	4640      	mov	r0, r8
 800ee9e:	f7ff ff81 	bl	800eda4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800eea2:	4b0e      	ldr	r3, [pc, #56]	; (800eedc <ip_reass_free_complete_datagram+0xf0>)
 800eea4:	889b      	ldrh	r3, [r3, #4]
 800eea6:	42b3      	cmp	r3, r6
 800eea8:	d306      	bcc.n	800eeb8 <ip_reass_free_complete_datagram+0xcc>
  ip_reass_pbufcount -= pbufs_freed;
 800eeaa:	4a0c      	ldr	r2, [pc, #48]	; (800eedc <ip_reass_free_complete_datagram+0xf0>)
 800eeac:	8893      	ldrh	r3, [r2, #4]
 800eeae:	1b9b      	subs	r3, r3, r6
 800eeb0:	8093      	strh	r3, [r2, #4]
}
 800eeb2:	4630      	mov	r0, r6
 800eeb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800eeb8:	4b03      	ldr	r3, [pc, #12]	; (800eec8 <ip_reass_free_complete_datagram+0xdc>)
 800eeba:	22d2      	movs	r2, #210	; 0xd2
 800eebc:	4908      	ldr	r1, [pc, #32]	; (800eee0 <ip_reass_free_complete_datagram+0xf4>)
 800eebe:	4804      	ldr	r0, [pc, #16]	; (800eed0 <ip_reass_free_complete_datagram+0xe4>)
 800eec0:	f006 fb3a 	bl	8015538 <printf>
 800eec4:	e7f1      	b.n	800eeaa <ip_reass_free_complete_datagram+0xbe>
 800eec6:	bf00      	nop
 800eec8:	0801e110 	.word	0x0801e110
 800eecc:	0801e174 	.word	0x0801e174
 800eed0:	0801c994 	.word	0x0801c994
 800eed4:	0801e168 	.word	0x0801e168
 800eed8:	0801e188 	.word	0x0801e188
 800eedc:	200043b8 	.word	0x200043b8
 800eee0:	0801e1a8 	.word	0x0801e1a8

0800eee4 <ip_reass_remove_oldest_datagram>:
{
 800eee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eee8:	4606      	mov	r6, r0
 800eeea:	4688      	mov	r8, r1
  int pbufs_freed = 0, pbufs_freed_current;
 800eeec:	2700      	movs	r7, #0
 800eeee:	e02b      	b.n	800ef48 <ip_reass_remove_oldest_datagram+0x64>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800eef0:	699a      	ldr	r2, [r3, #24]
 800eef2:	f8d6 c010 	ldr.w	ip, [r6, #16]
 800eef6:	4562      	cmp	r2, ip
 800eef8:	d111      	bne.n	800ef1e <ip_reass_remove_oldest_datagram+0x3a>
 800eefa:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 800eefe:	88b2      	ldrh	r2, [r6, #4]
 800ef00:	4594      	cmp	ip, r2
 800ef02:	d10c      	bne.n	800ef1e <ip_reass_remove_oldest_datagram+0x3a>
 800ef04:	e001      	b.n	800ef0a <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 800ef06:	4629      	mov	r1, r5
          oldest = r;
 800ef08:	4618      	mov	r0, r3
      if (r->next != NULL) {
 800ef0a:	681a      	ldr	r2, [r3, #0]
 800ef0c:	b192      	cbz	r2, 800ef34 <ip_reass_remove_oldest_datagram+0x50>
 800ef0e:	461d      	mov	r5, r3
 800ef10:	4613      	mov	r3, r2
    while (r != NULL) {
 800ef12:	b18b      	cbz	r3, 800ef38 <ip_reass_remove_oldest_datagram+0x54>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ef14:	695a      	ldr	r2, [r3, #20]
 800ef16:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 800ef1a:	4562      	cmp	r2, ip
 800ef1c:	d0e8      	beq.n	800eef0 <ip_reass_remove_oldest_datagram+0xc>
        other_datagrams++;
 800ef1e:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800ef20:	2800      	cmp	r0, #0
 800ef22:	d0f0      	beq.n	800ef06 <ip_reass_remove_oldest_datagram+0x22>
        } else if (r->timer <= oldest->timer) {
 800ef24:	f893 c01f 	ldrb.w	ip, [r3, #31]
 800ef28:	7fc2      	ldrb	r2, [r0, #31]
 800ef2a:	4594      	cmp	ip, r2
 800ef2c:	d8ed      	bhi.n	800ef0a <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 800ef2e:	4629      	mov	r1, r5
          oldest = r;
 800ef30:	4618      	mov	r0, r3
 800ef32:	e7ea      	b.n	800ef0a <ip_reass_remove_oldest_datagram+0x26>
      if (r->next != NULL) {
 800ef34:	462b      	mov	r3, r5
 800ef36:	e7ea      	b.n	800ef0e <ip_reass_remove_oldest_datagram+0x2a>
    if (oldest != NULL) {
 800ef38:	b110      	cbz	r0, 800ef40 <ip_reass_remove_oldest_datagram+0x5c>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800ef3a:	f7ff ff57 	bl	800edec <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800ef3e:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800ef40:	4547      	cmp	r7, r8
 800ef42:	da08      	bge.n	800ef56 <ip_reass_remove_oldest_datagram+0x72>
 800ef44:	2c01      	cmp	r4, #1
 800ef46:	dd06      	ble.n	800ef56 <ip_reass_remove_oldest_datagram+0x72>
    r = reassdatagrams;
 800ef48:	4b04      	ldr	r3, [pc, #16]	; (800ef5c <ip_reass_remove_oldest_datagram+0x78>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
    other_datagrams = 0;
 800ef4c:	2400      	movs	r4, #0
    oldest_prev = NULL;
 800ef4e:	4621      	mov	r1, r4
    prev = NULL;
 800ef50:	4625      	mov	r5, r4
    oldest = NULL;
 800ef52:	4620      	mov	r0, r4
    while (r != NULL) {
 800ef54:	e7dd      	b.n	800ef12 <ip_reass_remove_oldest_datagram+0x2e>
}
 800ef56:	4638      	mov	r0, r7
 800ef58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef5c:	200043b8 	.word	0x200043b8

0800ef60 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800ef60:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800ef62:	4604      	mov	r4, r0
 800ef64:	b120      	cbz	r0, 800ef70 <ip_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 800ef66:	4621      	mov	r1, r4
 800ef68:	2005      	movs	r0, #5
 800ef6a:	f7fa fce1 	bl	8009930 <memp_free>
}
 800ef6e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800ef70:	4b03      	ldr	r3, [pc, #12]	; (800ef80 <ip_frag_free_pbuf_custom_ref+0x20>)
 800ef72:	f240 22ae 	movw	r2, #686	; 0x2ae
 800ef76:	4903      	ldr	r1, [pc, #12]	; (800ef84 <ip_frag_free_pbuf_custom_ref+0x24>)
 800ef78:	4803      	ldr	r0, [pc, #12]	; (800ef88 <ip_frag_free_pbuf_custom_ref+0x28>)
 800ef7a:	f006 fadd 	bl	8015538 <printf>
 800ef7e:	e7f2      	b.n	800ef66 <ip_frag_free_pbuf_custom_ref+0x6>
 800ef80:	0801e110 	.word	0x0801e110
 800ef84:	0801cc88 	.word	0x0801cc88
 800ef88:	0801c994 	.word	0x0801c994

0800ef8c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ef8c:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ef8e:	4604      	mov	r4, r0
 800ef90:	b138      	cbz	r0, 800efa2 <ipfrag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 800ef92:	6960      	ldr	r0, [r4, #20]
 800ef94:	b108      	cbz	r0, 800ef9a <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 800ef96:	f7fa fe7f 	bl	8009c98 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ef9a:	4620      	mov	r0, r4
 800ef9c:	f7ff ffe0 	bl	800ef60 <ip_frag_free_pbuf_custom_ref>
}
 800efa0:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800efa2:	4b04      	ldr	r3, [pc, #16]	; (800efb4 <ipfrag_free_pbuf_custom+0x28>)
 800efa4:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800efa8:	4903      	ldr	r1, [pc, #12]	; (800efb8 <ipfrag_free_pbuf_custom+0x2c>)
 800efaa:	4804      	ldr	r0, [pc, #16]	; (800efbc <ipfrag_free_pbuf_custom+0x30>)
 800efac:	f006 fac4 	bl	8015538 <printf>
 800efb0:	e7ef      	b.n	800ef92 <ipfrag_free_pbuf_custom+0x6>
 800efb2:	bf00      	nop
 800efb4:	0801e110 	.word	0x0801e110
 800efb8:	0801e1c4 	.word	0x0801e1c4
 800efbc:	0801c994 	.word	0x0801c994

0800efc0 <ip_reass_chain_frag_into_datagram_and_validate>:
{
 800efc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efc4:	4681      	mov	r9, r0
 800efc6:	4688      	mov	r8, r1
 800efc8:	4692      	mov	sl, r2
  fraghdr = (struct ip_hdr*)new_p->payload;
 800efca:	684c      	ldr	r4, [r1, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800efcc:	8860      	ldrh	r0, [r4, #2]
 800efce:	f7fa fa2d 	bl	800942c <lwip_htons>
 800efd2:	7823      	ldrb	r3, [r4, #0]
 800efd4:	f003 030f 	and.w	r3, r3, #15
 800efd8:	eba0 0383 	sub.w	r3, r0, r3, lsl #2
 800efdc:	b29f      	uxth	r7, r3
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800efde:	88e0      	ldrh	r0, [r4, #6]
 800efe0:	f7fa fa24 	bl	800942c <lwip_htons>
 800efe4:	f3c0 040c 	ubfx	r4, r0, #0, #13
 800efe8:	00e4      	lsls	r4, r4, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 800efea:	f8d8 6004 	ldr.w	r6, [r8, #4]
  iprh->next_pbuf = NULL;
 800efee:	2500      	movs	r5, #0
 800eff0:	7035      	strb	r5, [r6, #0]
 800eff2:	7075      	strb	r5, [r6, #1]
 800eff4:	70b5      	strb	r5, [r6, #2]
 800eff6:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 800eff8:	80b4      	strh	r4, [r6, #4]
  iprh->end = offset + len;
 800effa:	193b      	adds	r3, r7, r4
 800effc:	b298      	uxth	r0, r3
 800effe:	80f3      	strh	r3, [r6, #6]
  for (q = ipr->p; q != NULL;) {
 800f000:	f8d9 1004 	ldr.w	r1, [r9, #4]
  int valid = 1;
 800f004:	2701      	movs	r7, #1
  for (q = ipr->p; q != NULL;) {
 800f006:	e020      	b.n	800f04a <ip_reass_chain_frag_into_datagram_and_validate+0x8a>
      iprh->next_pbuf = q;
 800f008:	6031      	str	r1, [r6, #0]
      if (iprh_prev != NULL) {
 800f00a:	b1b5      	cbz	r5, 800f03a <ip_reass_chain_frag_into_datagram_and_validate+0x7a>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f00c:	88ea      	ldrh	r2, [r5, #6]
 800f00e:	42a2      	cmp	r2, r4
 800f010:	d87c      	bhi.n	800f10c <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
 800f012:	889b      	ldrh	r3, [r3, #4]
 800f014:	4298      	cmp	r0, r3
 800f016:	d879      	bhi.n	800f10c <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
        iprh_prev->next_pbuf = new_p;
 800f018:	f8c5 8000 	str.w	r8, [r5]
        if (iprh_prev->end != iprh->start) {
 800f01c:	88b3      	ldrh	r3, [r6, #4]
 800f01e:	429a      	cmp	r2, r3
 800f020:	d000      	beq.n	800f024 <ip_reass_chain_frag_into_datagram_and_validate+0x64>
          valid = 0;
 800f022:	2700      	movs	r7, #0
  if (q == NULL) {
 800f024:	b319      	cbz	r1, 800f06e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f026:	f1ba 0f00 	cmp.w	sl, #0
 800f02a:	d142      	bne.n	800f0b2 <ip_reass_chain_frag_into_datagram_and_validate+0xf2>
 800f02c:	f899 301e 	ldrb.w	r3, [r9, #30]
 800f030:	f013 0f01 	tst.w	r3, #1
 800f034:	d13d      	bne.n	800f0b2 <ip_reass_chain_frag_into_datagram_and_validate+0xf2>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f036:	4650      	mov	r0, sl
 800f038:	e074      	b.n	800f124 <ip_reass_chain_frag_into_datagram_and_validate+0x164>
        if (iprh->end > iprh_tmp->start) {
 800f03a:	889b      	ldrh	r3, [r3, #4]
 800f03c:	4298      	cmp	r0, r3
 800f03e:	d865      	bhi.n	800f10c <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
        ipr->p = new_p;
 800f040:	f8c9 8004 	str.w	r8, [r9, #4]
 800f044:	e7ee      	b.n	800f024 <ip_reass_chain_frag_into_datagram_and_validate+0x64>
    q = iprh_tmp->next_pbuf;
 800f046:	6819      	ldr	r1, [r3, #0]
    iprh_prev = iprh_tmp;
 800f048:	461d      	mov	r5, r3
  for (q = ipr->p; q != NULL;) {
 800f04a:	2900      	cmp	r1, #0
 800f04c:	d0ea      	beq.n	800f024 <ip_reass_chain_frag_into_datagram_and_validate+0x64>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800f04e:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 800f050:	889a      	ldrh	r2, [r3, #4]
 800f052:	42a2      	cmp	r2, r4
 800f054:	d8d8      	bhi.n	800f008 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    } else if (iprh->start == iprh_tmp->start) {
 800f056:	42a2      	cmp	r2, r4
 800f058:	d058      	beq.n	800f10c <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    } else if (iprh->start < iprh_tmp->end) {
 800f05a:	88d9      	ldrh	r1, [r3, #6]
 800f05c:	42a1      	cmp	r1, r4
 800f05e:	d855      	bhi.n	800f10c <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
      if (iprh_prev != NULL) {
 800f060:	2d00      	cmp	r5, #0
 800f062:	d0f0      	beq.n	800f046 <ip_reass_chain_frag_into_datagram_and_validate+0x86>
        if (iprh_prev->end != iprh_tmp->start) {
 800f064:	88e9      	ldrh	r1, [r5, #6]
 800f066:	428a      	cmp	r2, r1
 800f068:	d0ed      	beq.n	800f046 <ip_reass_chain_frag_into_datagram_and_validate+0x86>
          valid = 0;
 800f06a:	2700      	movs	r7, #0
 800f06c:	e7eb      	b.n	800f046 <ip_reass_chain_frag_into_datagram_and_validate+0x86>
    if (iprh_prev != NULL) {
 800f06e:	b19d      	cbz	r5, 800f098 <ip_reass_chain_frag_into_datagram_and_validate+0xd8>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f070:	88ea      	ldrh	r2, [r5, #6]
 800f072:	88b3      	ldrh	r3, [r6, #4]
 800f074:	429a      	cmp	r2, r3
 800f076:	d807      	bhi.n	800f088 <ip_reass_chain_frag_into_datagram_and_validate+0xc8>
      iprh_prev->next_pbuf = new_p;
 800f078:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 800f07c:	88ea      	ldrh	r2, [r5, #6]
 800f07e:	88b3      	ldrh	r3, [r6, #4]
 800f080:	429a      	cmp	r2, r3
 800f082:	d0d0      	beq.n	800f026 <ip_reass_chain_frag_into_datagram_and_validate+0x66>
        valid = 0;
 800f084:	2700      	movs	r7, #0
 800f086:	e7ce      	b.n	800f026 <ip_reass_chain_frag_into_datagram_and_validate+0x66>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f088:	4b27      	ldr	r3, [pc, #156]	; (800f128 <ip_reass_chain_frag_into_datagram_and_validate+0x168>)
 800f08a:	f240 12ab 	movw	r2, #427	; 0x1ab
 800f08e:	4927      	ldr	r1, [pc, #156]	; (800f12c <ip_reass_chain_frag_into_datagram_and_validate+0x16c>)
 800f090:	4827      	ldr	r0, [pc, #156]	; (800f130 <ip_reass_chain_frag_into_datagram_and_validate+0x170>)
 800f092:	f006 fa51 	bl	8015538 <printf>
 800f096:	e7ef      	b.n	800f078 <ip_reass_chain_frag_into_datagram_and_validate+0xb8>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f098:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f09c:	b133      	cbz	r3, 800f0ac <ip_reass_chain_frag_into_datagram_and_validate+0xec>
 800f09e:	4b22      	ldr	r3, [pc, #136]	; (800f128 <ip_reass_chain_frag_into_datagram_and_validate+0x168>)
 800f0a0:	f240 12b3 	movw	r2, #435	; 0x1b3
 800f0a4:	4923      	ldr	r1, [pc, #140]	; (800f134 <ip_reass_chain_frag_into_datagram_and_validate+0x174>)
 800f0a6:	4822      	ldr	r0, [pc, #136]	; (800f130 <ip_reass_chain_frag_into_datagram_and_validate+0x170>)
 800f0a8:	f006 fa46 	bl	8015538 <printf>
      ipr->p = new_p;
 800f0ac:	f8c9 8004 	str.w	r8, [r9, #4]
 800f0b0:	e7b9      	b.n	800f026 <ip_reass_chain_frag_into_datagram_and_validate+0x66>
    if (valid) {
 800f0b2:	b34f      	cbz	r7, 800f108 <ip_reass_chain_frag_into_datagram_and_validate+0x148>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800f0b4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f0b8:	b31b      	cbz	r3, 800f102 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
 800f0ba:	6858      	ldr	r0, [r3, #4]
 800f0bc:	8883      	ldrh	r3, [r0, #4]
 800f0be:	bb13      	cbnz	r3, 800f106 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
        q = iprh->next_pbuf;
 800f0c0:	6832      	ldr	r2, [r6, #0]
        while (q != NULL) {
 800f0c2:	b14a      	cbz	r2, 800f0d8 <ip_reass_chain_frag_into_datagram_and_validate+0x118>
          iprh = (struct ip_reass_helper*)q->payload;
 800f0c4:	6853      	ldr	r3, [r2, #4]
          if (iprh_prev->end != iprh->start) {
 800f0c6:	88f1      	ldrh	r1, [r6, #6]
 800f0c8:	889a      	ldrh	r2, [r3, #4]
 800f0ca:	4291      	cmp	r1, r2
 800f0cc:	d102      	bne.n	800f0d4 <ip_reass_chain_frag_into_datagram_and_validate+0x114>
          q = iprh->next_pbuf;
 800f0ce:	681a      	ldr	r2, [r3, #0]
          iprh = (struct ip_reass_helper*)q->payload;
 800f0d0:	461e      	mov	r6, r3
 800f0d2:	e7f6      	b.n	800f0c2 <ip_reass_chain_frag_into_datagram_and_validate+0x102>
 800f0d4:	461e      	mov	r6, r3
            valid = 0;
 800f0d6:	2700      	movs	r7, #0
        if (valid) {
 800f0d8:	b1b7      	cbz	r7, 800f108 <ip_reass_chain_frag_into_datagram_and_validate+0x148>
          LWIP_ASSERT("sanity check",
 800f0da:	42b0      	cmp	r0, r6
 800f0dc:	d009      	beq.n	800f0f2 <ip_reass_chain_frag_into_datagram_and_validate+0x132>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f0de:	6833      	ldr	r3, [r6, #0]
 800f0e0:	b193      	cbz	r3, 800f108 <ip_reass_chain_frag_into_datagram_and_validate+0x148>
 800f0e2:	4b11      	ldr	r3, [pc, #68]	; (800f128 <ip_reass_chain_frag_into_datagram_and_validate+0x168>)
 800f0e4:	f240 12d7 	movw	r2, #471	; 0x1d7
 800f0e8:	4913      	ldr	r1, [pc, #76]	; (800f138 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 800f0ea:	4811      	ldr	r0, [pc, #68]	; (800f130 <ip_reass_chain_frag_into_datagram_and_validate+0x170>)
 800f0ec:	f006 fa24 	bl	8015538 <printf>
 800f0f0:	e00a      	b.n	800f108 <ip_reass_chain_frag_into_datagram_and_validate+0x148>
          LWIP_ASSERT("sanity check",
 800f0f2:	4b0d      	ldr	r3, [pc, #52]	; (800f128 <ip_reass_chain_frag_into_datagram_and_validate+0x168>)
 800f0f4:	f240 12d5 	movw	r2, #469	; 0x1d5
 800f0f8:	4910      	ldr	r1, [pc, #64]	; (800f13c <ip_reass_chain_frag_into_datagram_and_validate+0x17c>)
 800f0fa:	480d      	ldr	r0, [pc, #52]	; (800f130 <ip_reass_chain_frag_into_datagram_and_validate+0x170>)
 800f0fc:	f006 fa1c 	bl	8015538 <printf>
 800f100:	e7ed      	b.n	800f0de <ip_reass_chain_frag_into_datagram_and_validate+0x11e>
        valid = 0;
 800f102:	2700      	movs	r7, #0
 800f104:	e000      	b.n	800f108 <ip_reass_chain_frag_into_datagram_and_validate+0x148>
 800f106:	2700      	movs	r7, #0
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f108:	4638      	mov	r0, r7
 800f10a:	e00b      	b.n	800f124 <ip_reass_chain_frag_into_datagram_and_validate+0x164>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800f10c:	4640      	mov	r0, r8
 800f10e:	f7fa ff8f 	bl	800a030 <pbuf_clen>
 800f112:	4a0b      	ldr	r2, [pc, #44]	; (800f140 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 800f114:	8893      	ldrh	r3, [r2, #4]
 800f116:	1a1b      	subs	r3, r3, r0
 800f118:	8093      	strh	r3, [r2, #4]
  pbuf_free(new_p);
 800f11a:	4640      	mov	r0, r8
 800f11c:	f7fa fdbc 	bl	8009c98 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f120:	f04f 30ff 	mov.w	r0, #4294967295
}
 800f124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f128:	0801e110 	.word	0x0801e110
 800f12c:	0801e1d0 	.word	0x0801e1d0
 800f130:	0801c994 	.word	0x0801c994
 800f134:	0801e1f0 	.word	0x0801e1f0
 800f138:	0801e238 	.word	0x0801e238
 800f13c:	0801e228 	.word	0x0801e228
 800f140:	200043b8 	.word	0x200043b8

0800f144 <ip_frag_alloc_pbuf_custom_ref>:
{
 800f144:	b508      	push	{r3, lr}
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800f146:	2005      	movs	r0, #5
 800f148:	f7fa fbd8 	bl	80098fc <memp_malloc>
}
 800f14c:	bd08      	pop	{r3, pc}
	...

0800f150 <ip_reass_enqueue_new_datagram>:
{
 800f150:	b570      	push	{r4, r5, r6, lr}
 800f152:	4605      	mov	r5, r0
 800f154:	460e      	mov	r6, r1
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f156:	2004      	movs	r0, #4
 800f158:	f7fa fbd0 	bl	80098fc <memp_malloc>
  if (ipr == NULL) {
 800f15c:	4604      	mov	r4, r0
 800f15e:	b1c8      	cbz	r0, 800f194 <ip_reass_enqueue_new_datagram+0x44>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f160:	2300      	movs	r3, #0
 800f162:	6063      	str	r3, [r4, #4]
 800f164:	60a3      	str	r3, [r4, #8]
 800f166:	60e3      	str	r3, [r4, #12]
 800f168:	6123      	str	r3, [r4, #16]
 800f16a:	6163      	str	r3, [r4, #20]
 800f16c:	61a3      	str	r3, [r4, #24]
 800f16e:	61e3      	str	r3, [r4, #28]
  ipr->timer = IP_REASS_MAXAGE;
 800f170:	2303      	movs	r3, #3
 800f172:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 800f174:	4b0e      	ldr	r3, [pc, #56]	; (800f1b0 <ip_reass_enqueue_new_datagram+0x60>)
 800f176:	681a      	ldr	r2, [r3, #0]
 800f178:	6022      	str	r2, [r4, #0]
  reassdatagrams = ipr;
 800f17a:	601c      	str	r4, [r3, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f17c:	682b      	ldr	r3, [r5, #0]
 800f17e:	6868      	ldr	r0, [r5, #4]
 800f180:	68a9      	ldr	r1, [r5, #8]
 800f182:	68ea      	ldr	r2, [r5, #12]
 800f184:	60a3      	str	r3, [r4, #8]
 800f186:	60e0      	str	r0, [r4, #12]
 800f188:	6121      	str	r1, [r4, #16]
 800f18a:	6162      	str	r2, [r4, #20]
 800f18c:	692b      	ldr	r3, [r5, #16]
 800f18e:	61a3      	str	r3, [r4, #24]
}
 800f190:	4620      	mov	r0, r4
 800f192:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f194:	4631      	mov	r1, r6
 800f196:	4628      	mov	r0, r5
 800f198:	f7ff fea4 	bl	800eee4 <ip_reass_remove_oldest_datagram>
 800f19c:	42b0      	cmp	r0, r6
 800f19e:	da02      	bge.n	800f1a6 <ip_reass_enqueue_new_datagram+0x56>
    if (ipr == NULL)
 800f1a0:	2c00      	cmp	r4, #0
 800f1a2:	d1dd      	bne.n	800f160 <ip_reass_enqueue_new_datagram+0x10>
 800f1a4:	e7f4      	b.n	800f190 <ip_reass_enqueue_new_datagram+0x40>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f1a6:	2004      	movs	r0, #4
 800f1a8:	f7fa fba8 	bl	80098fc <memp_malloc>
 800f1ac:	4604      	mov	r4, r0
 800f1ae:	e7f7      	b.n	800f1a0 <ip_reass_enqueue_new_datagram+0x50>
 800f1b0:	200043b8 	.word	0x200043b8

0800f1b4 <ip_reass_tmr>:
{
 800f1b4:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800f1b6:	4b09      	ldr	r3, [pc, #36]	; (800f1dc <ip_reass_tmr+0x28>)
 800f1b8:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 800f1ba:	2400      	movs	r4, #0
  while (r != NULL) {
 800f1bc:	e004      	b.n	800f1c8 <ip_reass_tmr+0x14>
      r = r->next;
 800f1be:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 800f1c0:	4621      	mov	r1, r4
 800f1c2:	f7ff fe13 	bl	800edec <ip_reass_free_complete_datagram>
      r = r->next;
 800f1c6:	4628      	mov	r0, r5
  while (r != NULL) {
 800f1c8:	b138      	cbz	r0, 800f1da <ip_reass_tmr+0x26>
    if (r->timer > 0) {
 800f1ca:	7fc3      	ldrb	r3, [r0, #31]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d0f6      	beq.n	800f1be <ip_reass_tmr+0xa>
      r->timer--;
 800f1d0:	3b01      	subs	r3, #1
 800f1d2:	77c3      	strb	r3, [r0, #31]
      prev = r;
 800f1d4:	4604      	mov	r4, r0
      r = r->next;
 800f1d6:	6800      	ldr	r0, [r0, #0]
 800f1d8:	e7f6      	b.n	800f1c8 <ip_reass_tmr+0x14>
}
 800f1da:	bd38      	pop	{r3, r4, r5, pc}
 800f1dc:	200043b8 	.word	0x200043b8

0800f1e0 <ip4_reass>:
{
 800f1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1e4:	4606      	mov	r6, r0
  fraghdr = (struct ip_hdr*)p->payload;
 800f1e6:	6845      	ldr	r5, [r0, #4]
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800f1e8:	782b      	ldrb	r3, [r5, #0]
 800f1ea:	f003 030f 	and.w	r3, r3, #15
 800f1ee:	2b05      	cmp	r3, #5
 800f1f0:	d126      	bne.n	800f240 <ip4_reass+0x60>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800f1f2:	88e8      	ldrh	r0, [r5, #6]
 800f1f4:	f7fa f91a 	bl	800942c <lwip_htons>
 800f1f8:	f3c0 070c 	ubfx	r7, r0, #0, #13
 800f1fc:	00ff      	lsls	r7, r7, #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800f1fe:	8868      	ldrh	r0, [r5, #2]
 800f200:	f7fa f914 	bl	800942c <lwip_htons>
 800f204:	f895 9000 	ldrb.w	r9, [r5]
 800f208:	f009 090f 	and.w	r9, r9, #15
 800f20c:	eba0 0989 	sub.w	r9, r0, r9, lsl #2
 800f210:	fa1f f989 	uxth.w	r9, r9
  clen = pbuf_clen(p);
 800f214:	4630      	mov	r0, r6
 800f216:	f7fa ff0b 	bl	800a030 <pbuf_clen>
 800f21a:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f21c:	4b57      	ldr	r3, [pc, #348]	; (800f37c <ip4_reass+0x19c>)
 800f21e:	889b      	ldrh	r3, [r3, #4]
 800f220:	4403      	add	r3, r0
 800f222:	2b0a      	cmp	r3, #10
 800f224:	dc02      	bgt.n	800f22c <ip4_reass+0x4c>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f226:	4b55      	ldr	r3, [pc, #340]	; (800f37c <ip4_reass+0x19c>)
 800f228:	681c      	ldr	r4, [r3, #0]
 800f22a:	e011      	b.n	800f250 <ip4_reass+0x70>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f22c:	4601      	mov	r1, r0
 800f22e:	4628      	mov	r0, r5
 800f230:	f7ff fe58 	bl	800eee4 <ip_reass_remove_oldest_datagram>
 800f234:	b120      	cbz	r0, 800f240 <ip4_reass+0x60>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f236:	4b51      	ldr	r3, [pc, #324]	; (800f37c <ip4_reass+0x19c>)
 800f238:	889b      	ldrh	r3, [r3, #4]
 800f23a:	4443      	add	r3, r8
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f23c:	2b0a      	cmp	r3, #10
 800f23e:	ddf2      	ble.n	800f226 <ip4_reass+0x46>
  pbuf_free(p);
 800f240:	4630      	mov	r0, r6
 800f242:	f7fa fd29 	bl	8009c98 <pbuf_free>
  return NULL;
 800f246:	2600      	movs	r6, #0
}
 800f248:	4630      	mov	r0, r6
 800f24a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f24e:	6824      	ldr	r4, [r4, #0]
 800f250:	b15c      	cbz	r4, 800f26a <ip4_reass+0x8a>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f252:	6962      	ldr	r2, [r4, #20]
 800f254:	68eb      	ldr	r3, [r5, #12]
 800f256:	429a      	cmp	r2, r3
 800f258:	d1f9      	bne.n	800f24e <ip4_reass+0x6e>
 800f25a:	69a2      	ldr	r2, [r4, #24]
 800f25c:	692b      	ldr	r3, [r5, #16]
 800f25e:	429a      	cmp	r2, r3
 800f260:	d1f5      	bne.n	800f24e <ip4_reass+0x6e>
 800f262:	89a2      	ldrh	r2, [r4, #12]
 800f264:	88ab      	ldrh	r3, [r5, #4]
 800f266:	429a      	cmp	r2, r3
 800f268:	d1f1      	bne.n	800f24e <ip4_reass+0x6e>
  if (ipr == NULL) {
 800f26a:	b36c      	cbz	r4, 800f2c8 <ip4_reass+0xe8>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f26c:	88e8      	ldrh	r0, [r5, #6]
 800f26e:	f7fa f8dd 	bl	800942c <lwip_htons>
 800f272:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800f276:	b378      	cbz	r0, 800f2d8 <ip4_reass+0xf8>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f278:	88ed      	ldrh	r5, [r5, #6]
 800f27a:	f005 0520 	and.w	r5, r5, #32
 800f27e:	2d00      	cmp	r5, #0
 800f280:	bf0c      	ite	eq
 800f282:	2201      	moveq	r2, #1
 800f284:	2200      	movne	r2, #0
  if (is_last) {
 800f286:	d108      	bne.n	800f29a <ip4_reass+0xba>
    u16_t datagram_len = (u16_t)(offset + len);
 800f288:	eb07 0309 	add.w	r3, r7, r9
 800f28c:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f28e:	429f      	cmp	r7, r3
 800f290:	d8d6      	bhi.n	800f240 <ip4_reass+0x60>
 800f292:	f64f 71eb 	movw	r1, #65515	; 0xffeb
 800f296:	428b      	cmp	r3, r1
 800f298:	d8d2      	bhi.n	800f240 <ip4_reass+0x60>
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f29a:	4631      	mov	r1, r6
 800f29c:	4620      	mov	r0, r4
 800f29e:	f7ff fe8f 	bl	800efc0 <ip_reass_chain_frag_into_datagram_and_validate>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f2a2:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f2a6:	d0cb      	beq.n	800f240 <ip4_reass+0x60>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f2a8:	4b34      	ldr	r3, [pc, #208]	; (800f37c <ip4_reass+0x19c>)
 800f2aa:	889a      	ldrh	r2, [r3, #4]
 800f2ac:	4490      	add	r8, r2
 800f2ae:	f8a3 8004 	strh.w	r8, [r3, #4]
  if (is_last) {
 800f2b2:	b92d      	cbnz	r5, 800f2c0 <ip4_reass+0xe0>
    u16_t datagram_len = (u16_t)(offset + len);
 800f2b4:	444f      	add	r7, r9
    ipr->datagram_len = datagram_len;
 800f2b6:	83a7      	strh	r7, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f2b8:	7fa3      	ldrb	r3, [r4, #30]
 800f2ba:	f043 0301 	orr.w	r3, r3, #1
 800f2be:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f2c0:	2801      	cmp	r0, #1
 800f2c2:	d01b      	beq.n	800f2fc <ip4_reass+0x11c>
  return NULL;
 800f2c4:	2600      	movs	r6, #0
 800f2c6:	e7bf      	b.n	800f248 <ip4_reass+0x68>
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f2c8:	4641      	mov	r1, r8
 800f2ca:	4628      	mov	r0, r5
 800f2cc:	f7ff ff40 	bl	800f150 <ip_reass_enqueue_new_datagram>
    if (ipr == NULL) {
 800f2d0:	4604      	mov	r4, r0
 800f2d2:	2800      	cmp	r0, #0
 800f2d4:	d1d0      	bne.n	800f278 <ip4_reass+0x98>
 800f2d6:	e7b3      	b.n	800f240 <ip4_reass+0x60>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f2d8:	89e0      	ldrh	r0, [r4, #14]
 800f2da:	f7fa f8a7 	bl	800942c <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f2de:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800f2e2:	2800      	cmp	r0, #0
 800f2e4:	d0c8      	beq.n	800f278 <ip4_reass+0x98>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f2e6:	682b      	ldr	r3, [r5, #0]
 800f2e8:	6868      	ldr	r0, [r5, #4]
 800f2ea:	68a9      	ldr	r1, [r5, #8]
 800f2ec:	68ea      	ldr	r2, [r5, #12]
 800f2ee:	60a3      	str	r3, [r4, #8]
 800f2f0:	60e0      	str	r0, [r4, #12]
 800f2f2:	6121      	str	r1, [r4, #16]
 800f2f4:	6162      	str	r2, [r4, #20]
 800f2f6:	692b      	ldr	r3, [r5, #16]
 800f2f8:	61a3      	str	r3, [r4, #24]
 800f2fa:	e7bd      	b.n	800f278 <ip4_reass+0x98>
    ipr->datagram_len += IP_HLEN;
 800f2fc:	8ba3      	ldrh	r3, [r4, #28]
 800f2fe:	3314      	adds	r3, #20
 800f300:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800f302:	6863      	ldr	r3, [r4, #4]
 800f304:	685e      	ldr	r6, [r3, #4]
 800f306:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f308:	4623      	mov	r3, r4
 800f30a:	f853 2f08 	ldr.w	r2, [r3, #8]!
 800f30e:	685f      	ldr	r7, [r3, #4]
 800f310:	6898      	ldr	r0, [r3, #8]
 800f312:	68d9      	ldr	r1, [r3, #12]
 800f314:	6032      	str	r2, [r6, #0]
 800f316:	6077      	str	r7, [r6, #4]
 800f318:	60b0      	str	r0, [r6, #8]
 800f31a:	60f1      	str	r1, [r6, #12]
 800f31c:	691a      	ldr	r2, [r3, #16]
 800f31e:	6132      	str	r2, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800f320:	8ba0      	ldrh	r0, [r4, #28]
 800f322:	f7fa f883 	bl	800942c <lwip_htons>
 800f326:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f328:	2300      	movs	r3, #0
 800f32a:	71b3      	strb	r3, [r6, #6]
 800f32c:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f32e:	72b3      	strb	r3, [r6, #10]
 800f330:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 800f332:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 800f334:	e00a      	b.n	800f34c <ip4_reass+0x16c>
      iprh = (struct ip_reass_helper*)r->payload;
 800f336:	686f      	ldr	r7, [r5, #4]
      pbuf_header(r, -IP_HLEN);
 800f338:	f06f 0113 	mvn.w	r1, #19
 800f33c:	4628      	mov	r0, r5
 800f33e:	f7fa fca1 	bl	8009c84 <pbuf_header>
      pbuf_cat(p, r);
 800f342:	4629      	mov	r1, r5
 800f344:	4630      	mov	r0, r6
 800f346:	f7fa fe93 	bl	800a070 <pbuf_cat>
      r = iprh->next_pbuf;
 800f34a:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 800f34c:	2d00      	cmp	r5, #0
 800f34e:	d1f2      	bne.n	800f336 <ip4_reass+0x156>
    if (ipr == reassdatagrams) {
 800f350:	4b0a      	ldr	r3, [pc, #40]	; (800f37c <ip4_reass+0x19c>)
 800f352:	6819      	ldr	r1, [r3, #0]
 800f354:	42a1      	cmp	r1, r4
 800f356:	d005      	beq.n	800f364 <ip4_reass+0x184>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f358:	b129      	cbz	r1, 800f366 <ip4_reass+0x186>
        if (ipr_prev->next == ipr) {
 800f35a:	680b      	ldr	r3, [r1, #0]
 800f35c:	42a3      	cmp	r3, r4
 800f35e:	d002      	beq.n	800f366 <ip4_reass+0x186>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f360:	4619      	mov	r1, r3
 800f362:	e7f9      	b.n	800f358 <ip4_reass+0x178>
      ipr_prev = NULL;
 800f364:	4629      	mov	r1, r5
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f366:	4620      	mov	r0, r4
 800f368:	f7ff fd1c 	bl	800eda4 <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 800f36c:	4630      	mov	r0, r6
 800f36e:	f7fa fe5f 	bl	800a030 <pbuf_clen>
 800f372:	4a02      	ldr	r2, [pc, #8]	; (800f37c <ip4_reass+0x19c>)
 800f374:	8893      	ldrh	r3, [r2, #4]
 800f376:	1a1b      	subs	r3, r3, r0
 800f378:	8093      	strh	r3, [r2, #4]
    return p;
 800f37a:	e765      	b.n	800f248 <ip4_reass+0x68>
 800f37c:	200043b8 	.word	0x200043b8

0800f380 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f384:	b08d      	sub	sp, #52	; 0x34
 800f386:	4606      	mov	r6, r0
 800f388:	9107      	str	r1, [sp, #28]
 800f38a:	920b      	str	r2, [sp, #44]	; 0x2c
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800f38c:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 800f38e:	3b14      	subs	r3, #20
 800f390:	d451      	bmi.n	800f436 <ip4_frag+0xb6>
 800f392:	10da      	asrs	r2, r3, #3
 800f394:	9206      	str	r2, [sp, #24]
 800f396:	f3c3 03cf 	ubfx	r3, r3, #3, #16
 800f39a:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f39c:	f8d6 8004 	ldr.w	r8, [r6, #4]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800f3a0:	f898 3000 	ldrb.w	r3, [r8]
 800f3a4:	f003 030f 	and.w	r3, r3, #15
 800f3a8:	2b05      	cmp	r3, #5
 800f3aa:	d146      	bne.n	800f43a <ip4_frag+0xba>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f3ac:	f8b8 0006 	ldrh.w	r0, [r8, #6]
 800f3b0:	f7fa f83c 	bl	800942c <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800f3b4:	f3c0 030c 	ubfx	r3, r0, #0, #13
 800f3b8:	9305      	str	r3, [sp, #20]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800f3ba:	f410 5300 	ands.w	r3, r0, #8192	; 0x2000
 800f3be:	9302      	str	r3, [sp, #8]
 800f3c0:	d145      	bne.n	800f44e <ip4_frag+0xce>

  left = p->tot_len - IP_HLEN;
 800f3c2:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 800f3c6:	f1a9 0914 	sub.w	r9, r9, #20
 800f3ca:	fa1f f389 	uxth.w	r3, r9
 800f3ce:	9303      	str	r3, [sp, #12]
  u16_t newpbuflen = 0;
 800f3d0:	9c02      	ldr	r4, [sp, #8]
  u16_t poff = IP_HLEN;
 800f3d2:	f04f 0a14 	mov.w	sl, #20

  while (left) {
 800f3d6:	9b03      	ldr	r3, [sp, #12]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	f000 80b6 	beq.w	800f54a <ip4_frag+0x1ca>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800f3de:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800f3e2:	00db      	lsls	r3, r3, #3
 800f3e4:	9a03      	ldr	r2, [sp, #12]
 800f3e6:	9208      	str	r2, [sp, #32]
 800f3e8:	4293      	cmp	r3, r2
 800f3ea:	bfa8      	it	ge
 800f3ec:	4613      	movge	r3, r2
 800f3ee:	b29b      	uxth	r3, r3
 800f3f0:	9304      	str	r3, [sp, #16]
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	2114      	movs	r1, #20
 800f3f6:	2002      	movs	r0, #2
 800f3f8:	f7fa fcb2 	bl	8009d60 <pbuf_alloc>
    if (rambuf == NULL) {
 800f3fc:	4683      	mov	fp, r0
 800f3fe:	2800      	cmp	r0, #0
 800f400:	f000 80a5 	beq.w	800f54e <ip4_frag+0x1ce>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f404:	8973      	ldrh	r3, [r6, #10]
 800f406:	2b13      	cmp	r3, #19
 800f408:	d92b      	bls.n	800f462 <ip4_frag+0xe2>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f40a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800f40e:	f8d8 2000 	ldr.w	r2, [r8]
 800f412:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f416:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800f41a:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800f41e:	601a      	str	r2, [r3, #0]
 800f420:	605d      	str	r5, [r3, #4]
 800f422:	6098      	str	r0, [r3, #8]
 800f424:	60d9      	str	r1, [r3, #12]
 800f426:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f42a:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f42c:	f8db 3004 	ldr.w	r3, [fp, #4]
 800f430:	9309      	str	r3, [sp, #36]	; 0x24

    left_to_copy = fragsize;
 800f432:	9d04      	ldr	r5, [sp, #16]
    while (left_to_copy) {
 800f434:	e03d      	b.n	800f4b2 <ip4_frag+0x132>
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800f436:	3307      	adds	r3, #7
 800f438:	e7ab      	b.n	800f392 <ip4_frag+0x12>
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800f43a:	4b46      	ldr	r3, [pc, #280]	; (800f554 <ip4_frag+0x1d4>)
 800f43c:	f240 22e1 	movw	r2, #737	; 0x2e1
 800f440:	4945      	ldr	r1, [pc, #276]	; (800f558 <ip4_frag+0x1d8>)
 800f442:	4846      	ldr	r0, [pc, #280]	; (800f55c <ip4_frag+0x1dc>)
 800f444:	f006 f878 	bl	8015538 <printf>
 800f448:	f06f 0005 	mvn.w	r0, #5
 800f44c:	e043      	b.n	800f4d6 <ip4_frag+0x156>
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800f44e:	4b41      	ldr	r3, [pc, #260]	; (800f554 <ip4_frag+0x1d4>)
 800f450:	f240 22e6 	movw	r2, #742	; 0x2e6
 800f454:	4942      	ldr	r1, [pc, #264]	; (800f560 <ip4_frag+0x1e0>)
 800f456:	4841      	ldr	r0, [pc, #260]	; (800f55c <ip4_frag+0x1dc>)
 800f458:	f006 f86e 	bl	8015538 <printf>
 800f45c:	f06f 0005 	mvn.w	r0, #5
 800f460:	e039      	b.n	800f4d6 <ip4_frag+0x156>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f462:	4b3c      	ldr	r3, [pc, #240]	; (800f554 <ip4_frag+0x1d4>)
 800f464:	f44f 7242 	mov.w	r2, #776	; 0x308
 800f468:	493e      	ldr	r1, [pc, #248]	; (800f564 <ip4_frag+0x1e4>)
 800f46a:	483c      	ldr	r0, [pc, #240]	; (800f55c <ip4_frag+0x1dc>)
 800f46c:	f006 f864 	bl	8015538 <printf>
 800f470:	e7cb      	b.n	800f40a <ip4_frag+0x8a>
      if (!newpbuflen) {
        poff = 0;
        p = p->next;
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f472:	f7ff fe67 	bl	800f144 <ip_frag_alloc_pbuf_custom_ref>
      if (pcr == NULL) {
 800f476:	4607      	mov	r7, r0
 800f478:	b340      	cbz	r0, 800f4cc <ip4_frag+0x14c>
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
        (u8_t*)p->payload + poff, newpbuflen);
 800f47a:	6873      	ldr	r3, [r6, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f47c:	9401      	str	r4, [sp, #4]
 800f47e:	4453      	add	r3, sl
 800f480:	9300      	str	r3, [sp, #0]
 800f482:	4603      	mov	r3, r0
 800f484:	2202      	movs	r2, #2
 800f486:	4621      	mov	r1, r4
 800f488:	2004      	movs	r0, #4
 800f48a:	f7fa fbbf 	bl	8009c0c <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 800f48e:	4681      	mov	r9, r0
 800f490:	b320      	cbz	r0, 800f4dc <ip4_frag+0x15c>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 800f492:	4630      	mov	r0, r6
 800f494:	f7fa fdd4 	bl	800a040 <pbuf_ref>
      pcr->original = p;
 800f498:	617e      	str	r6, [r7, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f49a:	4b33      	ldr	r3, [pc, #204]	; (800f568 <ip4_frag+0x1e8>)
 800f49c:	613b      	str	r3, [r7, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f49e:	4649      	mov	r1, r9
 800f4a0:	4658      	mov	r0, fp
 800f4a2:	f7fa fde5 	bl	800a070 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800f4a6:	1b2d      	subs	r5, r5, r4
 800f4a8:	b2ad      	uxth	r5, r5
      if (left_to_copy) {
 800f4aa:	b115      	cbz	r5, 800f4b2 <ip4_frag+0x132>
        poff = 0;
        p = p->next;
 800f4ac:	6836      	ldr	r6, [r6, #0]
        poff = 0;
 800f4ae:	f8dd a008 	ldr.w	sl, [sp, #8]
    while (left_to_copy) {
 800f4b2:	b1e5      	cbz	r5, 800f4ee <ip4_frag+0x16e>
      u16_t plen = p->len - poff;
 800f4b4:	8974      	ldrh	r4, [r6, #10]
 800f4b6:	eba4 040a 	sub.w	r4, r4, sl
 800f4ba:	b2a4      	uxth	r4, r4
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f4bc:	42ac      	cmp	r4, r5
 800f4be:	bf28      	it	cs
 800f4c0:	462c      	movcs	r4, r5
      if (!newpbuflen) {
 800f4c2:	2c00      	cmp	r4, #0
 800f4c4:	d1d5      	bne.n	800f472 <ip4_frag+0xf2>
        p = p->next;
 800f4c6:	6836      	ldr	r6, [r6, #0]
        poff = 0;
 800f4c8:	46a2      	mov	sl, r4
        continue;
 800f4ca:	e7f2      	b.n	800f4b2 <ip4_frag+0x132>
        pbuf_free(rambuf);
 800f4cc:	4658      	mov	r0, fp
 800f4ce:	f7fa fbe3 	bl	8009c98 <pbuf_free>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f4d2:	f04f 30ff 	mov.w	r0, #4294967295
}
 800f4d6:	b00d      	add	sp, #52	; 0x34
 800f4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_frag_free_pbuf_custom_ref(pcr);
 800f4dc:	4638      	mov	r0, r7
 800f4de:	f7ff fd3f 	bl	800ef60 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f4e2:	4658      	mov	r0, fp
 800f4e4:	f7fa fbd8 	bl	8009c98 <pbuf_free>
  return ERR_MEM;
 800f4e8:	f04f 30ff 	mov.w	r0, #4294967295
        goto memerr;
 800f4ec:	e7f3      	b.n	800f4d6 <ip4_frag+0x156>
    poff += newpbuflen;
 800f4ee:	44a2      	add	sl, r4
 800f4f0:	fa1f fa8a 	uxth.w	sl, sl
    last = (left <= netif->mtu - IP_HLEN);
 800f4f4:	9b07      	ldr	r3, [sp, #28]
 800f4f6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f4f8:	3b13      	subs	r3, #19
    tmp = (IP_OFFMASK & (ofo));
 800f4fa:	9a05      	ldr	r2, [sp, #20]
 800f4fc:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last) {
 800f500:	9a08      	ldr	r2, [sp, #32]
 800f502:	429a      	cmp	r2, r3
 800f504:	db01      	blt.n	800f50a <ip4_frag+0x18a>
      tmp = tmp | IP_MF;
 800f506:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f50a:	f7f9 ff8f 	bl	800942c <lwip_htons>
 800f50e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f510:	80e8      	strh	r0, [r5, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800f512:	9f04      	ldr	r7, [sp, #16]
 800f514:	f107 0014 	add.w	r0, r7, #20
 800f518:	b280      	uxth	r0, r0
 800f51a:	f7f9 ff87 	bl	800942c <lwip_htons>
 800f51e:	8068      	strh	r0, [r5, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f520:	2300      	movs	r3, #0
 800f522:	72ab      	strb	r3, [r5, #10]
 800f524:	72eb      	strb	r3, [r5, #11]
    netif->output(netif, rambuf, dest);
 800f526:	9807      	ldr	r0, [sp, #28]
 800f528:	6943      	ldr	r3, [r0, #20]
 800f52a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f52c:	4659      	mov	r1, fp
 800f52e:	4798      	blx	r3
    pbuf_free(rambuf);
 800f530:	4658      	mov	r0, fp
 800f532:	f7fa fbb1 	bl	8009c98 <pbuf_free>
    left -= fragsize;
 800f536:	9b03      	ldr	r3, [sp, #12]
 800f538:	1bdb      	subs	r3, r3, r7
 800f53a:	b29b      	uxth	r3, r3
 800f53c:	9303      	str	r3, [sp, #12]
    ofo += nfb;
 800f53e:	9b05      	ldr	r3, [sp, #20]
 800f540:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f542:	4413      	add	r3, r2
 800f544:	b29b      	uxth	r3, r3
 800f546:	9305      	str	r3, [sp, #20]
 800f548:	e745      	b.n	800f3d6 <ip4_frag+0x56>
  return ERR_OK;
 800f54a:	2000      	movs	r0, #0
 800f54c:	e7c3      	b.n	800f4d6 <ip4_frag+0x156>
  return ERR_MEM;
 800f54e:	f04f 30ff 	mov.w	r0, #4294967295
 800f552:	e7c0      	b.n	800f4d6 <ip4_frag+0x156>
 800f554:	0801e110 	.word	0x0801e110
 800f558:	0801e25c 	.word	0x0801e25c
 800f55c:	0801c994 	.word	0x0801c994
 800f560:	0801e284 	.word	0x0801e284
 800f564:	0801e2a0 	.word	0x0801e2a0
 800f568:	0800ef8d 	.word	0x0800ef8d

0800f56c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f56e:	4604      	mov	r4, r0
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800f570:	8946      	ldrh	r6, [r0, #10]
 800f572:	2e0e      	cmp	r6, #14
 800f574:	d916      	bls.n	800f5a4 <ethernet_input+0x38>
 800f576:	460d      	mov	r5, r1
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f578:	6840      	ldr	r0, [r0, #4]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f57a:	8987      	ldrh	r7, [r0, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f57c:	7803      	ldrb	r3, [r0, #0]
 800f57e:	f013 0f01 	tst.w	r3, #1
 800f582:	d00a      	beq.n	800f59a <ethernet_input+0x2e>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f584:	2b01      	cmp	r3, #1
 800f586:	d012      	beq.n	800f5ae <ethernet_input+0x42>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f588:	2206      	movs	r2, #6
 800f58a:	4921      	ldr	r1, [pc, #132]	; (800f610 <ethernet_input+0xa4>)
 800f58c:	f005 ffa4 	bl	80154d8 <memcmp>
 800f590:	b918      	cbnz	r0, 800f59a <ethernet_input+0x2e>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f592:	7b63      	ldrb	r3, [r4, #13]
 800f594:	f043 0308 	orr.w	r3, r3, #8
 800f598:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800f59a:	2f08      	cmp	r7, #8
 800f59c:	d012      	beq.n	800f5c4 <ethernet_input+0x58>
 800f59e:	f5b7 6fc1 	cmp.w	r7, #1544	; 0x608
 800f5a2:	d022      	beq.n	800f5ea <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800f5a4:	4620      	mov	r0, r4
 800f5a6:	f7fa fb77 	bl	8009c98 <pbuf_free>
  return ERR_OK;
}
 800f5aa:	2000      	movs	r0, #0
 800f5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f5ae:	7843      	ldrb	r3, [r0, #1]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d1f2      	bne.n	800f59a <ethernet_input+0x2e>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f5b4:	7883      	ldrb	r3, [r0, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f5b6:	2b5e      	cmp	r3, #94	; 0x5e
 800f5b8:	d1ef      	bne.n	800f59a <ethernet_input+0x2e>
        p->flags |= PBUF_FLAG_LLMCAST;
 800f5ba:	7b63      	ldrb	r3, [r4, #13]
 800f5bc:	f043 0310 	orr.w	r3, r3, #16
 800f5c0:	7363      	strb	r3, [r4, #13]
 800f5c2:	e7ea      	b.n	800f59a <ethernet_input+0x2e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f5c4:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800f5c8:	f013 0f08 	tst.w	r3, #8
 800f5cc:	d0ea      	beq.n	800f5a4 <ethernet_input+0x38>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800f5ce:	2e0d      	cmp	r6, #13
 800f5d0:	d9e8      	bls.n	800f5a4 <ethernet_input+0x38>
 800f5d2:	f06f 010d 	mvn.w	r1, #13
 800f5d6:	4620      	mov	r0, r4
 800f5d8:	f7fa fb54 	bl	8009c84 <pbuf_header>
 800f5dc:	2800      	cmp	r0, #0
 800f5de:	d1e1      	bne.n	800f5a4 <ethernet_input+0x38>
        ip4_input(p, netif);
 800f5e0:	4629      	mov	r1, r5
 800f5e2:	4620      	mov	r0, r4
 800f5e4:	f7ff f992 	bl	800e90c <ip4_input>
      break;
 800f5e8:	e7df      	b.n	800f5aa <ethernet_input+0x3e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f5ea:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800f5ee:	f013 0f08 	tst.w	r3, #8
 800f5f2:	d0d7      	beq.n	800f5a4 <ethernet_input+0x38>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800f5f4:	2e0d      	cmp	r6, #13
 800f5f6:	d9d5      	bls.n	800f5a4 <ethernet_input+0x38>
 800f5f8:	f06f 010d 	mvn.w	r1, #13
 800f5fc:	4620      	mov	r0, r4
 800f5fe:	f7fa fb41 	bl	8009c84 <pbuf_header>
 800f602:	2800      	cmp	r0, #0
 800f604:	d1ce      	bne.n	800f5a4 <ethernet_input+0x38>
        etharp_input(p, netif);
 800f606:	4629      	mov	r1, r5
 800f608:	4620      	mov	r0, r4
 800f60a:	f7fe fda9 	bl	800e160 <etharp_input>
      break;
 800f60e:	e7cc      	b.n	800f5aa <ethernet_input+0x3e>
 800f610:	0801c924 	.word	0x0801c924

0800f614 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800f614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f618:	4605      	mov	r5, r0
 800f61a:	460c      	mov	r4, r1
 800f61c:	4616      	mov	r6, r2
 800f61e:	461f      	mov	r7, r3
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f620:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800f624:	f7f9 ff02 	bl	800942c <lwip_htons>
 800f628:	4680      	mov	r8, r0

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800f62a:	210e      	movs	r1, #14
 800f62c:	4620      	mov	r0, r4
 800f62e:	f7fa fb29 	bl	8009c84 <pbuf_header>
 800f632:	b9e8      	cbnz	r0, 800f670 <ethernet_output+0x5c>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800f634:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 800f636:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	600b      	str	r3, [r1, #0]
 800f63e:	88bb      	ldrh	r3, [r7, #4]
 800f640:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 800f642:	6833      	ldr	r3, [r6, #0]
 800f644:	f8c1 3006 	str.w	r3, [r1, #6]
 800f648:	88b3      	ldrh	r3, [r6, #4]
 800f64a:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f64c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800f650:	2b06      	cmp	r3, #6
 800f652:	d105      	bne.n	800f660 <ethernet_output+0x4c>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f654:	69ab      	ldr	r3, [r5, #24]
 800f656:	4621      	mov	r1, r4
 800f658:	4628      	mov	r0, r5
 800f65a:	4798      	blx	r3
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800f65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f660:	4b05      	ldr	r3, [pc, #20]	; (800f678 <ethernet_output+0x64>)
 800f662:	f240 122b 	movw	r2, #299	; 0x12b
 800f666:	4905      	ldr	r1, [pc, #20]	; (800f67c <ethernet_output+0x68>)
 800f668:	4805      	ldr	r0, [pc, #20]	; (800f680 <ethernet_output+0x6c>)
 800f66a:	f005 ff65 	bl	8015538 <printf>
 800f66e:	e7f1      	b.n	800f654 <ethernet_output+0x40>
  return ERR_BUF;
 800f670:	f06f 0001 	mvn.w	r0, #1
 800f674:	e7f2      	b.n	800f65c <ethernet_output+0x48>
 800f676:	bf00      	nop
 800f678:	0801e2c0 	.word	0x0801e2c0
 800f67c:	0801e2f8 	.word	0x0801e2f8
 800f680:	0801c994 	.word	0x0801c994

0800f684 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800f684:	b500      	push	{lr}
 800f686:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 800f688:	2300      	movs	r3, #0
 800f68a:	9300      	str	r3, [sp, #0]
 800f68c:	9301      	str	r3, [sp, #4]
 800f68e:	9302      	str	r3, [sp, #8]
 800f690:	9303      	str	r3, [sp, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800f692:	481c      	ldr	r0, [pc, #112]	; (800f704 <MX_ADC1_Init+0x80>)
 800f694:	4a1c      	ldr	r2, [pc, #112]	; (800f708 <MX_ADC1_Init+0x84>)
 800f696:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800f698:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800f69c:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800f69e:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800f6a0:	2201      	movs	r2, #1
 800f6a2:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800f6a4:	7602      	strb	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800f6a6:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800f6aa:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800f6ac:	4917      	ldr	r1, [pc, #92]	; (800f70c <MX_ADC1_Init+0x88>)
 800f6ae:	6281      	str	r1, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800f6b0:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 2;
 800f6b2:	2102      	movs	r1, #2
 800f6b4:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800f6b6:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800f6ba:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800f6bc:	f7f5 fda4 	bl	8005208 <HAL_ADC_Init>
 800f6c0:	b9b0      	cbnz	r0, 800f6f0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 800f6c2:	2312      	movs	r3, #18
 800f6c4:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 800f6c6:	2301      	movs	r3, #1
 800f6c8:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800f6ca:	2307      	movs	r3, #7
 800f6cc:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800f6ce:	4669      	mov	r1, sp
 800f6d0:	480c      	ldr	r0, [pc, #48]	; (800f704 <MX_ADC1_Init+0x80>)
 800f6d2:	f7f6 f817 	bl	8005704 <HAL_ADC_ConfigChannel>
 800f6d6:	b970      	cbnz	r0, 800f6f6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800f6d8:	2303      	movs	r3, #3
 800f6da:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 800f6dc:	2302      	movs	r3, #2
 800f6de:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800f6e0:	4669      	mov	r1, sp
 800f6e2:	4808      	ldr	r0, [pc, #32]	; (800f704 <MX_ADC1_Init+0x80>)
 800f6e4:	f7f6 f80e 	bl	8005704 <HAL_ADC_ConfigChannel>
 800f6e8:	b940      	cbnz	r0, 800f6fc <MX_ADC1_Init+0x78>
  {
    Error_Handler();
  }

}
 800f6ea:	b005      	add	sp, #20
 800f6ec:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800f6f0:	f002 f8bc 	bl	801186c <Error_Handler>
 800f6f4:	e7e5      	b.n	800f6c2 <MX_ADC1_Init+0x3e>
    Error_Handler();
 800f6f6:	f002 f8b9 	bl	801186c <Error_Handler>
 800f6fa:	e7ed      	b.n	800f6d8 <MX_ADC1_Init+0x54>
    Error_Handler();
 800f6fc:	f002 f8b6 	bl	801186c <Error_Handler>
}
 800f700:	e7f3      	b.n	800f6ea <MX_ADC1_Init+0x66>
 800f702:	bf00      	nop
 800f704:	2000972c 	.word	0x2000972c
 800f708:	40012000 	.word	0x40012000
 800f70c:	0f000001 	.word	0x0f000001

0800f710 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800f710:	b530      	push	{r4, r5, lr}
 800f712:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f714:	2300      	movs	r3, #0
 800f716:	9303      	str	r3, [sp, #12]
 800f718:	9304      	str	r3, [sp, #16]
 800f71a:	9305      	str	r3, [sp, #20]
 800f71c:	9306      	str	r3, [sp, #24]
 800f71e:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 800f720:	6802      	ldr	r2, [r0, #0]
 800f722:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f726:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 800f72a:	429a      	cmp	r2, r3
 800f72c:	d001      	beq.n	800f732 <HAL_ADC_MspInit+0x22>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800f72e:	b009      	add	sp, #36	; 0x24
 800f730:	bd30      	pop	{r4, r5, pc}
 800f732:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 800f734:	2500      	movs	r5, #0
 800f736:	9501      	str	r5, [sp, #4]
 800f738:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800f73c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f73e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f742:	645a      	str	r2, [r3, #68]	; 0x44
 800f744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f746:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800f74a:	9201      	str	r2, [sp, #4]
 800f74c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f74e:	9502      	str	r5, [sp, #8]
 800f750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f752:	f042 0201 	orr.w	r2, r2, #1
 800f756:	631a      	str	r2, [r3, #48]	; 0x30
 800f758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f75a:	f003 0301 	and.w	r3, r3, #1
 800f75e:	9302      	str	r3, [sp, #8]
 800f760:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VinSys_Pin;
 800f762:	2308      	movs	r3, #8
 800f764:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f766:	2303      	movs	r3, #3
 800f768:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f76a:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(VinSys_GPIO_Port, &GPIO_InitStruct);
 800f76c:	a903      	add	r1, sp, #12
 800f76e:	4814      	ldr	r0, [pc, #80]	; (800f7c0 <HAL_ADC_MspInit+0xb0>)
 800f770:	f7f7 f9c2 	bl	8006af8 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream4;
 800f774:	4813      	ldr	r0, [pc, #76]	; (800f7c4 <HAL_ADC_MspInit+0xb4>)
 800f776:	4b14      	ldr	r3, [pc, #80]	; (800f7c8 <HAL_ADC_MspInit+0xb8>)
 800f778:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800f77a:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f77c:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800f77e:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800f780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f784:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800f786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f78a:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800f78c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f790:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800f792:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f796:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800f798:	6205      	str	r5, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f79a:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800f79c:	f7f6 f970 	bl	8005a80 <HAL_DMA_Init>
 800f7a0:	b958      	cbnz	r0, 800f7ba <HAL_ADC_MspInit+0xaa>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800f7a2:	4b08      	ldr	r3, [pc, #32]	; (800f7c4 <HAL_ADC_MspInit+0xb4>)
 800f7a4:	63a3      	str	r3, [r4, #56]	; 0x38
 800f7a6:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 7, 0);
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	2107      	movs	r1, #7
 800f7ac:	2012      	movs	r0, #18
 800f7ae:	f7f6 f88f 	bl	80058d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800f7b2:	2012      	movs	r0, #18
 800f7b4:	f7f6 f8c0 	bl	8005938 <HAL_NVIC_EnableIRQ>
}
 800f7b8:	e7b9      	b.n	800f72e <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 800f7ba:	f002 f857 	bl	801186c <Error_Handler>
 800f7be:	e7f0      	b.n	800f7a2 <HAL_ADC_MspInit+0x92>
 800f7c0:	40020000 	.word	0x40020000
 800f7c4:	20009774 	.word	0x20009774
 800f7c8:	40026470 	.word	0x40026470

0800f7cc <updateDeviceSignature>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void updateDeviceSignature(void)
{
 800f7cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	uint32_t u32UUID0 = 0;
	uint32_t u32UUID1 = 0;
	uint32_t u32UUID2 = 0;

	u32UUID0 = STM32_UUID[0];
 800f7d0:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800f870 <updateDeviceSignature+0xa4>
 800f7d4:	f8d8 4000 	ldr.w	r4, [r8]
	u32UUID1 = STM32_UUID[1];
 800f7d8:	4f1e      	ldr	r7, [pc, #120]	; (800f854 <updateDeviceSignature+0x88>)
 800f7da:	683d      	ldr	r5, [r7, #0]
	u32UUID2 = STM32_UUID[2];
 800f7dc:	4e1e      	ldr	r6, [pc, #120]	; (800f858 <updateDeviceSignature+0x8c>)
 800f7de:	6830      	ldr	r0, [r6, #0]

	/* Variable for production */
	gu32DeviceId = STM32_UUID[0];
 800f7e0:	4b1e      	ldr	r3, [pc, #120]	; (800f85c <updateDeviceSignature+0x90>)
 800f7e2:	601c      	str	r4, [r3, #0]
	/*Integer to ASCII UUID 2 */
	itoa(u32UUID2,buffuuid2,10);
 800f7e4:	f8df b08c 	ldr.w	fp, [pc, #140]	; 800f874 <updateDeviceSignature+0xa8>
 800f7e8:	220a      	movs	r2, #10
 800f7ea:	4659      	mov	r1, fp
 800f7ec:	f005 fc20 	bl	8015030 <itoa>
	/*Integer to ASCII UUID 1 */
	itoa(u32UUID1,buffuuid1,10);
 800f7f0:	f8df a084 	ldr.w	sl, [pc, #132]	; 800f878 <updateDeviceSignature+0xac>
 800f7f4:	220a      	movs	r2, #10
 800f7f6:	4651      	mov	r1, sl
 800f7f8:	4628      	mov	r0, r5
 800f7fa:	f005 fc19 	bl	8015030 <itoa>
	/*Integer to ASCII UUID 0 */
	itoa(u32UUID0,buffuuid0,10);
 800f7fe:	f8df 907c 	ldr.w	r9, [pc, #124]	; 800f87c <updateDeviceSignature+0xb0>
 800f802:	220a      	movs	r2, #10
 800f804:	4649      	mov	r1, r9
 800f806:	4620      	mov	r0, r4
 800f808:	f005 fc12 	bl	8015030 <itoa>

	/*Integer to ASCII Flash Size */
#if (USEFLASHSIZEINDEVINFO == TRUE)
	itoa(deviceSign.u32FlashSize,buffflash,10);
 800f80c:	4c14      	ldr	r4, [pc, #80]	; (800f860 <updateDeviceSignature+0x94>)
 800f80e:	220a      	movs	r2, #10
 800f810:	4914      	ldr	r1, [pc, #80]	; (800f864 <updateDeviceSignature+0x98>)
 800f812:	89a0      	ldrh	r0, [r4, #12]
 800f814:	f005 fc0c 	bl	8015030 <itoa>
#endif

	/* Append Device Info to Array */
	strcat(dinfo,buffuuid2);
 800f818:	4d13      	ldr	r5, [pc, #76]	; (800f868 <updateDeviceSignature+0x9c>)
 800f81a:	4659      	mov	r1, fp
 800f81c:	4628      	mov	r0, r5
 800f81e:	f005 fecd 	bl	80155bc <strcat>
	strcat(dinfo,buffuuid1);
 800f822:	4651      	mov	r1, sl
 800f824:	4628      	mov	r0, r5
 800f826:	f005 fec9 	bl	80155bc <strcat>
	strcat(dinfo,buffuuid0);
 800f82a:	4649      	mov	r1, r9
 800f82c:	4628      	mov	r0, r5
 800f82e:	f005 fec5 	bl	80155bc <strcat>

#if (USEFLASHSIZEINDEVINFO == TRUE)
	strcat(dinfo,buffflash);
 800f832:	490c      	ldr	r1, [pc, #48]	; (800f864 <updateDeviceSignature+0x98>)
 800f834:	4628      	mov	r0, r5
 800f836:	f005 fec1 	bl	80155bc <strcat>
#endif
	/* Update Structure */
	/* 96 Bit UUID */
	deviceSign.u32UUID0 = STM32_UUID[0];
 800f83a:	f8d8 3000 	ldr.w	r3, [r8]
 800f83e:	6023      	str	r3, [r4, #0]
	deviceSign.u32UUID1 = STM32_UUID[1];
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	6063      	str	r3, [r4, #4]
	deviceSign.u32UUID2 = STM32_UUID[2];
 800f844:	6833      	ldr	r3, [r6, #0]
 800f846:	60a3      	str	r3, [r4, #8]
	/* 16 Bit Flash Size */
	deviceSign.u32FlashSize = STM32_FLASHSIZE;
 800f848:	4b08      	ldr	r3, [pc, #32]	; (800f86c <updateDeviceSignature+0xa0>)
 800f84a:	881b      	ldrh	r3, [r3, #0]
 800f84c:	81a3      	strh	r3, [r4, #12]
}
 800f84e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f852:	bf00      	nop
 800f854:	1fff7a14 	.word	0x1fff7a14
 800f858:	1fff7a18 	.word	0x1fff7a18
 800f85c:	200043c0 	.word	0x200043c0
 800f860:	200098b8 	.word	0x200098b8
 800f864:	20009838 	.word	0x20009838
 800f868:	200097d4 	.word	0x200097d4
 800f86c:	1fff7a22 	.word	0x1fff7a22
 800f870:	1fff7a10 	.word	0x1fff7a10
 800f874:	20009898 	.word	0x20009898
 800f878:	20009858 	.word	0x20009858
 800f87c:	20009878 	.word	0x20009878

0800f880 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800f880:	b500      	push	{lr}
 800f882:	b083      	sub	sp, #12
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800f884:	2100      	movs	r1, #0
 800f886:	9101      	str	r1, [sp, #4]
 800f888:	4b09      	ldr	r3, [pc, #36]	; (800f8b0 <MX_DMA_Init+0x30>)
 800f88a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f88c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800f890:	631a      	str	r2, [r3, #48]	; 0x30
 800f892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f898:	9301      	str	r3, [sp, #4]
 800f89a:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800f89c:	460a      	mov	r2, r1
 800f89e:	203c      	movs	r0, #60	; 0x3c
 800f8a0:	f7f6 f816 	bl	80058d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800f8a4:	203c      	movs	r0, #60	; 0x3c
 800f8a6:	f7f6 f847 	bl	8005938 <HAL_NVIC_EnableIRQ>

}
 800f8aa:	b003      	add	sp, #12
 800f8ac:	f85d fb04 	ldr.w	pc, [sp], #4
 800f8b0:	40023800 	.word	0x40023800

0800f8b4 <assertError>:
			/* Unwanted / Undefined Error Occured
			 * System Will Halt Completely */
			//while(1);
			break;
	}
}
 800f8b4:	4770      	bx	lr
	...

0800f8b8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800f8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t payloadoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t i=0;

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800f8bc:	4833      	ldr	r0, [pc, #204]	; (800f98c <low_level_input+0xd4>)
 800f8be:	f7f6 fc93 	bl	80061e8 <HAL_ETH_GetReceivedFrame>
 800f8c2:	2800      	cmp	r0, #0
 800f8c4:	d15e      	bne.n	800f984 <low_level_input+0xcc>
    return NULL;

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800f8c6:	4b31      	ldr	r3, [pc, #196]	; (800f98c <low_level_input+0xd4>)
 800f8c8:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800f8ca:	f8d3 8040 	ldr.w	r8, [r3, #64]	; 0x40

  if (len > 0)
 800f8ce:	b979      	cbnz	r1, 800f8f0 <low_level_input+0x38>
  struct pbuf *p = NULL;
 800f8d0:	f04f 0a00 	mov.w	sl, #0
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800f8d4:	4b2d      	ldr	r3, [pc, #180]	; (800f98c <low_level_input+0xd4>)
 800f8d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800f8d8:	2100      	movs	r1, #0
 800f8da:	4a2c      	ldr	r2, [pc, #176]	; (800f98c <low_level_input+0xd4>)
 800f8dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800f8de:	428a      	cmp	r2, r1
 800f8e0:	d93b      	bls.n	800f95a <low_level_input+0xa2>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800f8e2:	681a      	ldr	r2, [r3, #0]
 800f8e4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800f8e8:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800f8ea:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800f8ec:	3101      	adds	r1, #1
 800f8ee:	e7f4      	b.n	800f8da <low_level_input+0x22>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800f8f0:	2203      	movs	r2, #3
 800f8f2:	2004      	movs	r0, #4
 800f8f4:	f7fa fa34 	bl	8009d60 <pbuf_alloc>
  if (p != NULL)
 800f8f8:	4682      	mov	sl, r0
 800f8fa:	2800      	cmp	r0, #0
 800f8fc:	d0ea      	beq.n	800f8d4 <low_level_input+0x1c>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800f8fe:	4b23      	ldr	r3, [pc, #140]	; (800f98c <low_level_input+0xd4>)
 800f900:	6b1f      	ldr	r7, [r3, #48]	; 0x30
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800f902:	4681      	mov	r9, r0
    bufferoffset = 0;
 800f904:	2400      	movs	r4, #0
    for(q = p; q != NULL; q = q->next)
 800f906:	e021      	b.n	800f94c <low_level_input+0x94>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800f908:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800f90c:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 800f910:	3204      	adds	r2, #4
 800f912:	eb08 0104 	add.w	r1, r8, r4
 800f916:	4430      	add	r0, r6
 800f918:	f005 fdec 	bl	80154f4 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800f91c:	68ff      	ldr	r7, [r7, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800f91e:	f8d7 8008 	ldr.w	r8, [r7, #8]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800f922:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800f926:	1b36      	subs	r6, r6, r4
 800f928:	f206 56f4 	addw	r6, r6, #1524	; 0x5f4
        bufferoffset = 0;
 800f92c:	2400      	movs	r4, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800f92e:	18a5      	adds	r5, r4, r2
 800f930:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800f934:	429d      	cmp	r5, r3
 800f936:	d8e7      	bhi.n	800f908 <low_level_input+0x50>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800f938:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800f93c:	eb08 0104 	add.w	r1, r8, r4
 800f940:	4430      	add	r0, r6
 800f942:	f005 fdd7 	bl	80154f4 <memcpy>
    for(q = p; q != NULL; q = q->next)
 800f946:	f8d9 9000 	ldr.w	r9, [r9]
      bufferoffset = bufferoffset + byteslefttocopy;
 800f94a:	462c      	mov	r4, r5
    for(q = p; q != NULL; q = q->next)
 800f94c:	f1b9 0f00 	cmp.w	r9, #0
 800f950:	d0c0      	beq.n	800f8d4 <low_level_input+0x1c>
      byteslefttocopy = q->len;
 800f952:	f8b9 200a 	ldrh.w	r2, [r9, #10]
      payloadoffset = 0;
 800f956:	2600      	movs	r6, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800f958:	e7e9      	b.n	800f92e <low_level_input+0x76>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800f95a:	4b0c      	ldr	r3, [pc, #48]	; (800f98c <low_level_input+0xd4>)
 800f95c:	2200      	movs	r2, #0
 800f95e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	f241 0214 	movw	r2, #4116	; 0x1014
 800f966:	589a      	ldr	r2, [r3, r2]
 800f968:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f96c:	d007      	beq.n	800f97e <low_level_input+0xc6>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800f96e:	f241 0214 	movw	r2, #4116	; 0x1014
 800f972:	2180      	movs	r1, #128	; 0x80
 800f974:	5099      	str	r1, [r3, r2]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800f976:	f241 0208 	movw	r2, #4104	; 0x1008
 800f97a:	2100      	movs	r1, #0
 800f97c:	5099      	str	r1, [r3, r2]
  }
  return p;
}
 800f97e:	4650      	mov	r0, sl
 800f980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return NULL;
 800f984:	f04f 0a00 	mov.w	sl, #0
 800f988:	e7f9      	b.n	800f97e <low_level_input+0xc6>
 800f98a:	bf00      	nop
 800f98c:	2000b1b4 	.word	0x2000b1b4

0800f990 <low_level_output>:
{
 800f990:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f994:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800f996:	4b2c      	ldr	r3, [pc, #176]	; (800fa48 <low_level_output+0xb8>)
 800f998:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800f99a:	f8d6 a008 	ldr.w	sl, [r6, #8]
  bufferoffset = 0;
 800f99e:	2400      	movs	r4, #0
  uint32_t framelength = 0;
 800f9a0:	4627      	mov	r7, r4
  for(q = p; q != NULL; q = q->next)
 800f9a2:	f1bb 0f00 	cmp.w	fp, #0
 800f9a6:	d032      	beq.n	800fa0e <low_level_output+0x7e>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800f9a8:	6833      	ldr	r3, [r6, #0]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	db35      	blt.n	800fa1a <low_level_output+0x8a>
      byteslefttocopy = q->len;
 800f9ae:	f8bb 900a 	ldrh.w	r9, [fp, #10]
      payloadoffset = 0;
 800f9b2:	2500      	movs	r5, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800f9b4:	eb04 0809 	add.w	r8, r4, r9
 800f9b8:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800f9bc:	4598      	cmp	r8, r3
 800f9be:	d919      	bls.n	800f9f4 <low_level_output+0x64>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800f9c0:	f8db 1004 	ldr.w	r1, [fp, #4]
 800f9c4:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 800f9c8:	3204      	adds	r2, #4
 800f9ca:	4429      	add	r1, r5
 800f9cc:	eb0a 0004 	add.w	r0, sl, r4
 800f9d0:	f005 fd90 	bl	80154f4 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800f9d4:	68f6      	ldr	r6, [r6, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800f9d6:	6833      	ldr	r3, [r6, #0]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	db21      	blt.n	800fa20 <low_level_output+0x90>
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800f9dc:	f8d6 a008 	ldr.w	sl, [r6, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800f9e0:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800f9e4:	1b2d      	subs	r5, r5, r4
 800f9e6:	f205 55f4 	addw	r5, r5, #1524	; 0x5f4
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800f9ea:	1b3f      	subs	r7, r7, r4
 800f9ec:	f207 57f4 	addw	r7, r7, #1524	; 0x5f4
        bufferoffset = 0;
 800f9f0:	2400      	movs	r4, #0
 800f9f2:	e7df      	b.n	800f9b4 <low_level_output+0x24>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800f9f4:	f8db 1004 	ldr.w	r1, [fp, #4]
 800f9f8:	464a      	mov	r2, r9
 800f9fa:	4429      	add	r1, r5
 800f9fc:	eb0a 0004 	add.w	r0, sl, r4
 800fa00:	f005 fd78 	bl	80154f4 <memcpy>
      framelength = framelength + byteslefttocopy;
 800fa04:	444f      	add	r7, r9
  for(q = p; q != NULL; q = q->next)
 800fa06:	f8db b000 	ldr.w	fp, [fp]
      bufferoffset = bufferoffset + byteslefttocopy;
 800fa0a:	4644      	mov	r4, r8
 800fa0c:	e7c9      	b.n	800f9a2 <low_level_output+0x12>
  HAL_ETH_TransmitFrame(&heth, framelength);
 800fa0e:	4639      	mov	r1, r7
 800fa10:	480d      	ldr	r0, [pc, #52]	; (800fa48 <low_level_output+0xb8>)
 800fa12:	f7f6 fb59 	bl	80060c8 <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 800fa16:	2000      	movs	r0, #0
 800fa18:	e004      	b.n	800fa24 <low_level_output+0x94>
        errval = ERR_USE;
 800fa1a:	f06f 0007 	mvn.w	r0, #7
 800fa1e:	e001      	b.n	800fa24 <low_level_output+0x94>
          errval = ERR_USE;
 800fa20:	f06f 0007 	mvn.w	r0, #7
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800fa24:	4b08      	ldr	r3, [pc, #32]	; (800fa48 <low_level_output+0xb8>)
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	f241 0214 	movw	r2, #4116	; 0x1014
 800fa2c:	589a      	ldr	r2, [r3, r2]
 800fa2e:	f012 0f20 	tst.w	r2, #32
 800fa32:	d007      	beq.n	800fa44 <low_level_output+0xb4>
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800fa34:	f241 0214 	movw	r2, #4116	; 0x1014
 800fa38:	2120      	movs	r1, #32
 800fa3a:	5099      	str	r1, [r3, r2]
    heth.Instance->DMATPDR = 0;
 800fa3c:	f241 0204 	movw	r2, #4100	; 0x1004
 800fa40:	2100      	movs	r1, #0
 800fa42:	5099      	str	r1, [r3, r2]
}
 800fa44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa48:	2000b1b4 	.word	0x2000b1b4

0800fa4c <low_level_init>:
{
 800fa4c:	b530      	push	{r4, r5, lr}
 800fa4e:	b085      	sub	sp, #20
 800fa50:	4604      	mov	r4, r0
  uint32_t regvalue = 0;
 800fa52:	2300      	movs	r3, #0
 800fa54:	9303      	str	r3, [sp, #12]
  heth.Instance = ETH;
 800fa56:	4833      	ldr	r0, [pc, #204]	; (800fb24 <low_level_init+0xd8>)
 800fa58:	4a33      	ldr	r2, [pc, #204]	; (800fb28 <low_level_init+0xdc>)
 800fa5a:	6002      	str	r2, [r0, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800fa5c:	2201      	movs	r2, #1
 800fa5e:	6042      	str	r2, [r0, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800fa60:	8202      	strh	r2, [r0, #16]
  MACAddr[0] = 0x00;
 800fa62:	f88d 3004 	strb.w	r3, [sp, #4]
  MACAddr[1] = 0x80;
 800fa66:	2280      	movs	r2, #128	; 0x80
 800fa68:	f88d 2005 	strb.w	r2, [sp, #5]
  MACAddr[2] = 0xE1;
 800fa6c:	22e1      	movs	r2, #225	; 0xe1
 800fa6e:	f88d 2006 	strb.w	r2, [sp, #6]
  MACAddr[3] = 0x00;
 800fa72:	f88d 3007 	strb.w	r3, [sp, #7]
  MACAddr[4] = 0x00;
 800fa76:	f88d 3008 	strb.w	r3, [sp, #8]
  MACAddr[5] = 0x00;
 800fa7a:	f88d 3009 	strb.w	r3, [sp, #9]
  heth.Init.MACAddr = &MACAddr[0];
 800fa7e:	aa01      	add	r2, sp, #4
 800fa80:	6142      	str	r2, [r0, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800fa82:	6183      	str	r3, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800fa84:	61c3      	str	r3, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800fa86:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fa8a:	6203      	str	r3, [r0, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800fa8c:	f7f6 fc6a 	bl	8006364 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 800fa90:	b928      	cbnz	r0, 800fa9e <low_level_init+0x52>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800fa92:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800fa96:	f043 0304 	orr.w	r3, r3, #4
 800fa9a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800fa9e:	4d21      	ldr	r5, [pc, #132]	; (800fb24 <low_level_init+0xd8>)
 800faa0:	2304      	movs	r3, #4
 800faa2:	4a22      	ldr	r2, [pc, #136]	; (800fb2c <low_level_init+0xe0>)
 800faa4:	4922      	ldr	r1, [pc, #136]	; (800fb30 <low_level_init+0xe4>)
 800faa6:	4628      	mov	r0, r5
 800faa8:	f7f6 fa9c 	bl	8005fe4 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800faac:	2304      	movs	r3, #4
 800faae:	4a21      	ldr	r2, [pc, #132]	; (800fb34 <low_level_init+0xe8>)
 800fab0:	4921      	ldr	r1, [pc, #132]	; (800fb38 <low_level_init+0xec>)
 800fab2:	4628      	mov	r0, r5
 800fab4:	f7f6 fad0 	bl	8006058 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800fab8:	2306      	movs	r3, #6
 800faba:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800fabe:	696b      	ldr	r3, [r5, #20]
 800fac0:	781a      	ldrb	r2, [r3, #0]
 800fac2:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800fac6:	785a      	ldrb	r2, [r3, #1]
 800fac8:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800facc:	789a      	ldrb	r2, [r3, #2]
 800face:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800fad2:	78da      	ldrb	r2, [r3, #3]
 800fad4:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800fad8:	791a      	ldrb	r2, [r3, #4]
 800fada:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800fade:	795b      	ldrb	r3, [r3, #5]
 800fae0:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  netif->mtu = 1500;
 800fae4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800fae8:	8463      	strh	r3, [r4, #34]	; 0x22
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800faea:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800faee:	f043 030a 	orr.w	r3, r3, #10
 800faf2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_Start(&heth);
 800faf6:	4628      	mov	r0, r5
 800faf8:	f7f6 fd60 	bl	80065bc <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800fafc:	aa03      	add	r2, sp, #12
 800fafe:	211d      	movs	r1, #29
 800fb00:	4628      	mov	r0, r5
 800fb02:	f7f6 fbb8 	bl	8006276 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800fb06:	9a03      	ldr	r2, [sp, #12]
 800fb08:	f042 020b 	orr.w	r2, r2, #11
 800fb0c:	9203      	str	r2, [sp, #12]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800fb0e:	211d      	movs	r1, #29
 800fb10:	4628      	mov	r0, r5
 800fb12:	f7f6 fbec 	bl	80062ee <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800fb16:	aa03      	add	r2, sp, #12
 800fb18:	211d      	movs	r1, #29
 800fb1a:	4628      	mov	r0, r5
 800fb1c:	f7f6 fbab 	bl	8006276 <HAL_ETH_ReadPHYRegister>
}
 800fb20:	b005      	add	sp, #20
 800fb22:	bd30      	pop	{r4, r5, pc}
 800fb24:	2000b1b4 	.word	0x2000b1b4
 800fb28:	40028000 	.word	0x40028000
 800fb2c:	2000b1fc 	.word	0x2000b1fc
 800fb30:	200098e4 	.word	0x200098e4
 800fb34:	20009964 	.word	0x20009964
 800fb38:	2000b134 	.word	0x2000b134

0800fb3c <HAL_ETH_MspInit>:
{
 800fb3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb3e:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fb40:	2300      	movs	r3, #0
 800fb42:	9307      	str	r3, [sp, #28]
 800fb44:	9308      	str	r3, [sp, #32]
 800fb46:	9309      	str	r3, [sp, #36]	; 0x24
 800fb48:	930a      	str	r3, [sp, #40]	; 0x28
 800fb4a:	930b      	str	r3, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 800fb4c:	6802      	ldr	r2, [r0, #0]
 800fb4e:	4b33      	ldr	r3, [pc, #204]	; (800fc1c <HAL_ETH_MspInit+0xe0>)
 800fb50:	429a      	cmp	r2, r3
 800fb52:	d001      	beq.n	800fb58 <HAL_ETH_MspInit+0x1c>
}
 800fb54:	b00d      	add	sp, #52	; 0x34
 800fb56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 800fb58:	2400      	movs	r4, #0
 800fb5a:	9401      	str	r4, [sp, #4]
 800fb5c:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 800fb60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb62:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800fb66:	631a      	str	r2, [r3, #48]	; 0x30
 800fb68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb6a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800fb6e:	9201      	str	r2, [sp, #4]
 800fb70:	9a01      	ldr	r2, [sp, #4]
 800fb72:	9402      	str	r4, [sp, #8]
 800fb74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb76:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800fb7a:	631a      	str	r2, [r3, #48]	; 0x30
 800fb7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb7e:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800fb82:	9202      	str	r2, [sp, #8]
 800fb84:	9a02      	ldr	r2, [sp, #8]
 800fb86:	9403      	str	r4, [sp, #12]
 800fb88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb8a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800fb8e:	631a      	str	r2, [r3, #48]	; 0x30
 800fb90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb92:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800fb96:	9203      	str	r2, [sp, #12]
 800fb98:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800fb9a:	9404      	str	r4, [sp, #16]
 800fb9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb9e:	f042 0204 	orr.w	r2, r2, #4
 800fba2:	631a      	str	r2, [r3, #48]	; 0x30
 800fba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fba6:	f002 0204 	and.w	r2, r2, #4
 800fbaa:	9204      	str	r2, [sp, #16]
 800fbac:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fbae:	9405      	str	r4, [sp, #20]
 800fbb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fbb2:	f042 0201 	orr.w	r2, r2, #1
 800fbb6:	631a      	str	r2, [r3, #48]	; 0x30
 800fbb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fbba:	f002 0201 	and.w	r2, r2, #1
 800fbbe:	9205      	str	r2, [sp, #20]
 800fbc0:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800fbc2:	9406      	str	r4, [sp, #24]
 800fbc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fbc6:	f042 0202 	orr.w	r2, r2, #2
 800fbca:	631a      	str	r2, [r3, #48]	; 0x30
 800fbcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbce:	f003 0302 	and.w	r3, r3, #2
 800fbd2:	9306      	str	r3, [sp, #24]
 800fbd4:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800fbd6:	2332      	movs	r3, #50	; 0x32
 800fbd8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fbda:	2702      	movs	r7, #2
 800fbdc:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fbde:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fbe0:	2603      	movs	r6, #3
 800fbe2:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800fbe4:	250b      	movs	r5, #11
 800fbe6:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fbe8:	a907      	add	r1, sp, #28
 800fbea:	480d      	ldr	r0, [pc, #52]	; (800fc20 <HAL_ETH_MspInit+0xe4>)
 800fbec:	f7f6 ff84 	bl	8006af8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800fbf0:	2386      	movs	r3, #134	; 0x86
 800fbf2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fbf4:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fbf6:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fbf8:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800fbfa:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fbfc:	a907      	add	r1, sp, #28
 800fbfe:	4809      	ldr	r0, [pc, #36]	; (800fc24 <HAL_ETH_MspInit+0xe8>)
 800fc00:	f7f6 ff7a 	bl	8006af8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800fc04:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800fc08:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fc0a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fc0c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fc0e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800fc10:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fc12:	a907      	add	r1, sp, #28
 800fc14:	4804      	ldr	r0, [pc, #16]	; (800fc28 <HAL_ETH_MspInit+0xec>)
 800fc16:	f7f6 ff6f 	bl	8006af8 <HAL_GPIO_Init>
}
 800fc1a:	e79b      	b.n	800fb54 <HAL_ETH_MspInit+0x18>
 800fc1c:	40028000 	.word	0x40028000
 800fc20:	40020800 	.word	0x40020800
 800fc24:	40020000 	.word	0x40020000
 800fc28:	40020400 	.word	0x40020400

0800fc2c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800fc2c:	b538      	push	{r3, r4, r5, lr}
 800fc2e:	4604      	mov	r4, r0
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800fc30:	f7ff fe42 	bl	800f8b8 <low_level_input>

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800fc34:	b120      	cbz	r0, 800fc40 <ethernetif_input+0x14>
 800fc36:	4605      	mov	r5, r0

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800fc38:	6923      	ldr	r3, [r4, #16]
 800fc3a:	4621      	mov	r1, r4
 800fc3c:	4798      	blx	r3

  if (err != ERR_OK)
 800fc3e:	b900      	cbnz	r0, 800fc42 <ethernetif_input+0x16>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
    p = NULL;
  }
}
 800fc40:	bd38      	pop	{r3, r4, r5, pc}
    pbuf_free(p);
 800fc42:	4628      	mov	r0, r5
 800fc44:	f7fa f828 	bl	8009c98 <pbuf_free>
    p = NULL;
 800fc48:	e7fa      	b.n	800fc40 <ethernetif_input+0x14>
	...

0800fc4c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800fc4c:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800fc4e:	4604      	mov	r4, r0
 800fc50:	b170      	cbz	r0, 800fc70 <ethernetif_init+0x24>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800fc52:	2373      	movs	r3, #115	; 0x73
 800fc54:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 800fc58:	2374      	movs	r3, #116	; 0x74
 800fc5a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800fc5e:	4b08      	ldr	r3, [pc, #32]	; (800fc80 <ethernetif_init+0x34>)
 800fc60:	6163      	str	r3, [r4, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800fc62:	4b08      	ldr	r3, [pc, #32]	; (800fc84 <ethernetif_init+0x38>)
 800fc64:	61a3      	str	r3, [r4, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800fc66:	4620      	mov	r0, r4
 800fc68:	f7ff fef0 	bl	800fa4c <low_level_init>

  return ERR_OK;
}
 800fc6c:	2000      	movs	r0, #0
 800fc6e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800fc70:	4b05      	ldr	r3, [pc, #20]	; (800fc88 <ethernetif_init+0x3c>)
 800fc72:	f44f 7201 	mov.w	r2, #516	; 0x204
 800fc76:	4905      	ldr	r1, [pc, #20]	; (800fc8c <ethernetif_init+0x40>)
 800fc78:	4805      	ldr	r0, [pc, #20]	; (800fc90 <ethernetif_init+0x44>)
 800fc7a:	f005 fc5d 	bl	8015538 <printf>
 800fc7e:	e7e8      	b.n	800fc52 <ethernetif_init+0x6>
 800fc80:	0800e559 	.word	0x0800e559
 800fc84:	0800f991 	.word	0x0800f991
 800fc88:	0801e32c 	.word	0x0801e32c
 800fc8c:	0801de3c 	.word	0x0801de3c
 800fc90:	0801c994 	.word	0x0801c994

0800fc94 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800fc94:	b508      	push	{r3, lr}
  return HAL_GetTick();
 800fc96:	f7f5 fa03 	bl	80050a0 <HAL_GetTick>
}
 800fc9a:	bd08      	pop	{r3, pc}

0800fc9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800fc9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc9e:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fca0:	2400      	movs	r4, #0
 800fca2:	9407      	str	r4, [sp, #28]
 800fca4:	9408      	str	r4, [sp, #32]
 800fca6:	9409      	str	r4, [sp, #36]	; 0x24
 800fca8:	940a      	str	r4, [sp, #40]	; 0x28
 800fcaa:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800fcac:	9401      	str	r4, [sp, #4]
 800fcae:	4b30      	ldr	r3, [pc, #192]	; (800fd70 <MX_GPIO_Init+0xd4>)
 800fcb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fcb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800fcb6:	631a      	str	r2, [r3, #48]	; 0x30
 800fcb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fcba:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800fcbe:	9201      	str	r2, [sp, #4]
 800fcc0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800fcc2:	9402      	str	r4, [sp, #8]
 800fcc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fcc6:	f042 0204 	orr.w	r2, r2, #4
 800fcca:	631a      	str	r2, [r3, #48]	; 0x30
 800fccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fcce:	f002 0204 	and.w	r2, r2, #4
 800fcd2:	9202      	str	r2, [sp, #8]
 800fcd4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800fcd6:	9403      	str	r4, [sp, #12]
 800fcd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fcda:	f042 0201 	orr.w	r2, r2, #1
 800fcde:	631a      	str	r2, [r3, #48]	; 0x30
 800fce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fce2:	f002 0201 	and.w	r2, r2, #1
 800fce6:	9203      	str	r2, [sp, #12]
 800fce8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800fcea:	9404      	str	r4, [sp, #16]
 800fcec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fcee:	f042 0210 	orr.w	r2, r2, #16
 800fcf2:	631a      	str	r2, [r3, #48]	; 0x30
 800fcf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fcf6:	f002 0210 	and.w	r2, r2, #16
 800fcfa:	9204      	str	r2, [sp, #16]
 800fcfc:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800fcfe:	9405      	str	r4, [sp, #20]
 800fd00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fd02:	f042 0202 	orr.w	r2, r2, #2
 800fd06:	631a      	str	r2, [r3, #48]	; 0x30
 800fd08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fd0a:	f002 0202 	and.w	r2, r2, #2
 800fd0e:	9205      	str	r2, [sp, #20]
 800fd10:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800fd12:	9406      	str	r4, [sp, #24]
 800fd14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fd16:	f042 0208 	orr.w	r2, r2, #8
 800fd1a:	631a      	str	r2, [r3, #48]	; 0x30
 800fd1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd1e:	f003 0308 	and.w	r3, r3, #8
 800fd22:	9306      	str	r3, [sp, #24]
 800fd24:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MB_DE_Pin|MB_RE_Pin, GPIO_PIN_RESET);
 800fd26:	4f13      	ldr	r7, [pc, #76]	; (800fd74 <MX_GPIO_Init+0xd8>)
 800fd28:	4622      	mov	r2, r4
 800fd2a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800fd2e:	4638      	mov	r0, r7
 800fd30:	f7f6 ffd4 	bl	8006cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_1_Pin|HEARTBEAT_Pin|LED_3_Pin|LED_2_Pin
 800fd34:	4d10      	ldr	r5, [pc, #64]	; (800fd78 <MX_GPIO_Init+0xdc>)
 800fd36:	4622      	mov	r2, r4
 800fd38:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 800fd3c:	4628      	mov	r0, r5
 800fd3e:	f7f6 ffcd 	bl	8006cdc <HAL_GPIO_WritePin>
                          |GSM_PWR_KEY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = MB_DE_Pin|MB_RE_Pin;
 800fd42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fd46:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fd48:	2601      	movs	r6, #1
 800fd4a:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fd4c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fd4e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800fd50:	a907      	add	r1, sp, #28
 800fd52:	4638      	mov	r0, r7
 800fd54:	f7f6 fed0 	bl	8006af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LED_1_Pin|HEARTBEAT_Pin|LED_3_Pin|LED_2_Pin
 800fd58:	f44f 631e 	mov.w	r3, #2528	; 0x9e0
 800fd5c:	9307      	str	r3, [sp, #28]
                          |GSM_PWR_KEY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fd5e:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fd60:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fd62:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800fd64:	a907      	add	r1, sp, #28
 800fd66:	4628      	mov	r0, r5
 800fd68:	f7f6 fec6 	bl	8006af8 <HAL_GPIO_Init>

}
 800fd6c:	b00d      	add	sp, #52	; 0x34
 800fd6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd70:	40023800 	.word	0x40023800
 800fd74:	40021000 	.word	0x40021000
 800fd78:	40020c00 	.word	0x40020c00

0800fd7c <initGSMSIM868>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void initGSMSIM868(void)
{
 800fd7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	/* Init Buffers */

	memset(gsmInstance.agpsLocationData, GSM_ARRAY_INIT_CHAR, (GPS_LOCATION_ARRAY_SIZE * sizeof(char)));
 800fd80:	4c67      	ldr	r4, [pc, #412]	; (800ff20 <initGSMSIM868+0x1a4>)
 800fd82:	2296      	movs	r2, #150	; 0x96
 800fd84:	2100      	movs	r1, #0
 800fd86:	4620      	mov	r0, r4
 800fd88:	f005 fbc2 	bl	8015510 <memset>
	memset(gsmInstance.agsmNetworkIP, GSM_ARRAY_INIT_CHAR, (GPRS_NETWORKIP_ARRAY_SIZE * sizeof(char)));
 800fd8c:	2223      	movs	r2, #35	; 0x23
 800fd8e:	2100      	movs	r1, #0
 800fd90:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
 800fd94:	f005 fbbc 	bl	8015510 <memset>
	memset(gsmInstance.agsmSignalStrength, GSM_ARRAY_INIT_CHAR, (GSM_SIGSTRGTH_ARRAY_SIZE * sizeof(char)));
 800fd98:	2500      	movs	r5, #0
 800fd9a:	f8c4 5096 	str.w	r5, [r4, #150]	; 0x96
 800fd9e:	f8c4 509a 	str.w	r5, [r4, #154]	; 0x9a
 800fda2:	f8a4 509e 	strh.w	r5, [r4, #158]	; 0x9e
	memset((char *)gsmInstance.as8GSM_Response_Buff,GSM_ARRAY_INIT_CHAR,(GSM_RESPONSE_ARRAY_SIZE * sizeof(char)));
 800fda6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800fdaa:	4629      	mov	r1, r5
 800fdac:	f204 4052 	addw	r0, r4, #1106	; 0x452
 800fdb0:	f005 fbae 	bl	8015510 <memset>
	memset(gsmInstance.agsmCommandResponse, DATA_UNKNOWN, sizeof(gsmInstance.agsmCommandResponse[0][0])
 800fdb4:	f44f 7261 	mov.w	r2, #900	; 0x384
 800fdb8:	213f      	movs	r1, #63	; 0x3f
 800fdba:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
 800fdbe:	f005 fba7 	bl	8015510 <memset>
		   * GSM_TOTAL_COMMANDS * GSM_TOTAL_COMMANDS);
//	memset(gsmInstance.agsmHTTPRequestStatus,DATA_UNKNOWN,GSM_HTTP_RESPONSE_CODE_SIZE * sizeof(char));
	memset(gsmInstance.agsmMQTTRequestStatus,DATA_UNKNOWN,GSM_MQTT_RESPONSE_CODE_SIZE * sizeof(char));
 800fdc2:	f04f 333f 	mov.w	r3, #1061109567	; 0x3f3f3f3f
 800fdc6:	f8c4 3447 	str.w	r3, [r4, #1095]	; 0x447
 800fdca:	f8c4 344b 	str.w	r3, [r4, #1099]	; 0x44b
	memset(gsmInstance.strSystemSMS.agsmSMSRecipient,DATA_UNKNOWN,SMS_MOB_NO_LENGTH * sizeof(char));
 800fdce:	f8c4 3e45 	str.w	r3, [r4, #3653]	; 0xe45
 800fdd2:	f8c4 3e49 	str.w	r3, [r4, #3657]	; 0xe49
 800fdd6:	f8c4 3e4d 	str.w	r3, [r4, #3661]	; 0xe4d
 800fdda:	f884 3e51 	strb.w	r3, [r4, #3665]	; 0xe51
	memset(gsmInstance.strSystemSMS.agsmSMSMessageBody,0x00,SMS_MAX_MSG_LENGTH * sizeof(char));
 800fdde:	f44f 7248 	mov.w	r2, #800	; 0x320
 800fde2:	4629      	mov	r1, r5
 800fde4:	f604 6052 	addw	r0, r4, #3666	; 0xe52
 800fde8:	f005 fb92 	bl	8015510 <memset>
//	memset(gsmInstance.u32GSMHttpResponseCode,0x00,sizeof(char) * 3);
	memset(gsmInstance.u32GSMMQTTResponseCode,0x00,sizeof(char) * 3);
 800fdec:	f8a4 544f 	strh.w	r5, [r4, #1103]	; 0x44f
 800fdf0:	f884 5451 	strb.w	r5, [r4, #1105]	; 0x451
	memset(gau8GSM_ATAPN, 0x00, (180 * sizeof(char)));
 800fdf4:	4e4b      	ldr	r6, [pc, #300]	; (800ff24 <initGSMSIM868+0x1a8>)
 800fdf6:	f04f 09b4 	mov.w	r9, #180	; 0xb4
 800fdfa:	464a      	mov	r2, r9
 800fdfc:	4629      	mov	r1, r5
 800fdfe:	4630      	mov	r0, r6
 800fe00:	f005 fb86 	bl	8015510 <memset>
	memset(gau8GSM_ATURL, 0x00, (180 * sizeof(char)));
 800fe04:	eb06 0709 	add.w	r7, r6, r9
 800fe08:	464a      	mov	r2, r9
 800fe0a:	4629      	mov	r1, r5
 800fe0c:	4638      	mov	r0, r7
 800fe0e:	f005 fb7f 	bl	8015510 <memset>
	memset(gau8GSM_SMSRecepient, 0x00, ( 180 * sizeof(char)));
 800fe12:	f506 78b4 	add.w	r8, r6, #360	; 0x168
 800fe16:	464a      	mov	r2, r9
 800fe18:	4629      	mov	r1, r5
 800fe1a:	4640      	mov	r0, r8
 800fe1c:	f005 fb78 	bl	8015510 <memset>

	strcat((char *)gau8GSM_SMSRecepient,(char *)gau8GSM_ATCMGS);
 800fe20:	f506 7107 	add.w	r1, r6, #540	; 0x21c
 800fe24:	4640      	mov	r0, r8
 800fe26:	f005 fbc9 	bl	80155bc <strcat>
	strcat((char *)gau8GSM_SMSRecepient,(char *)"\"");
 800fe2a:	4640      	mov	r0, r8
 800fe2c:	f7f4 f9e0 	bl	80041f0 <strlen>
 800fe30:	4b3d      	ldr	r3, [pc, #244]	; (800ff28 <initGSMSIM868+0x1ac>)
 800fe32:	f8b3 9000 	ldrh.w	r9, [r3]
 800fe36:	f828 9000 	strh.w	r9, [r8, r0]
	strcat((char *)gau8GSM_SMSRecepient,(char *)gau8GSM_smsto);
 800fe3a:	f506 710e 	add.w	r1, r6, #568	; 0x238
 800fe3e:	4640      	mov	r0, r8
 800fe40:	f005 fbbc 	bl	80155bc <strcat>
	strcat((char *)gau8GSM_SMSRecepient,(char *)"\"");
 800fe44:	4640      	mov	r0, r8
 800fe46:	f7f4 f9d3 	bl	80041f0 <strlen>
 800fe4a:	f828 9000 	strh.w	r9, [r8, r0]
	//strcat((char *)gau8GSM_ATAPN,(char *)gau8GSM_ATSAPRBAPN);
	strcat((char *)gau8GSM_ATAPN,(char *)"\"");
 800fe4e:	4630      	mov	r0, r6
 800fe50:	f7f4 f9ce 	bl	80041f0 <strlen>
 800fe54:	f826 9000 	strh.w	r9, [r6, r0]
	strcat((char *)gau8GSM_ATAPN,(char *)gau8GSM_apn);
 800fe58:	f506 7112 	add.w	r1, r6, #584	; 0x248
 800fe5c:	4630      	mov	r0, r6
 800fe5e:	f005 fbad 	bl	80155bc <strcat>
	strcat((char *)gau8GSM_ATAPN,(char *)"\"");
 800fe62:	4630      	mov	r0, r6
 800fe64:	f7f4 f9c4 	bl	80041f0 <strlen>
 800fe68:	f826 9000 	strh.w	r9, [r6, r0]
	strcat(gau8GSM_ATAPN,"\r\n");
 800fe6c:	4630      	mov	r0, r6
 800fe6e:	f7f4 f9bf 	bl	80041f0 <strlen>
 800fe72:	1832      	adds	r2, r6, r0
 800fe74:	4b2d      	ldr	r3, [pc, #180]	; (800ff2c <initGSMSIM868+0x1b0>)
 800fe76:	8819      	ldrh	r1, [r3, #0]
 800fe78:	789b      	ldrb	r3, [r3, #2]
 800fe7a:	5231      	strh	r1, [r6, r0]
 800fe7c:	7093      	strb	r3, [r2, #2]

	strcpy((char *)gau8GSM_ATURL,(char *)gau8GSM_ATCMQTTCONNECT);
 800fe7e:	f506 712b 	add.w	r1, r6, #684	; 0x2ac
 800fe82:	4638      	mov	r0, r7
 800fe84:	f005 fbb6 	bl	80155f4 <strcpy>
	strcat((char *)gau8GSM_ATURL,(char *)gau8GSM_url);
 800fe88:	f506 7144 	add.w	r1, r6, #784	; 0x310
 800fe8c:	4638      	mov	r0, r7
 800fe8e:	f005 fb95 	bl	80155bc <strcat>
	strcat((char *)gau8GSM_ATURL,(char *)":");
 800fe92:	4638      	mov	r0, r7
 800fe94:	f7f4 f9ac 	bl	80041f0 <strlen>
 800fe98:	4b25      	ldr	r3, [pc, #148]	; (800ff30 <initGSMSIM868+0x1b4>)
 800fe9a:	881b      	ldrh	r3, [r3, #0]
 800fe9c:	523b      	strh	r3, [r7, r0]
	strcat((char *)gau8GSM_ATURL,(char *)MQTT_PORT);
 800fe9e:	f506 716a 	add.w	r1, r6, #936	; 0x3a8
 800fea2:	4638      	mov	r0, r7
 800fea4:	f005 fb8a 	bl	80155bc <strcat>
	strcat((char *)gau8GSM_ATURL,"\",60,1\r\n");
 800fea8:	4638      	mov	r0, r7
 800feaa:	f7f4 f9a1 	bl	80041f0 <strlen>
 800feae:	4602      	mov	r2, r0
 800feb0:	eb07 0c00 	add.w	ip, r7, r0
 800feb4:	4b1f      	ldr	r3, [pc, #124]	; (800ff34 <initGSMSIM868+0x1b8>)
 800feb6:	cb03      	ldmia	r3!, {r0, r1}
 800feb8:	50b8      	str	r0, [r7, r2]
 800feba:	f8cc 1004 	str.w	r1, [ip, #4]
 800febe:	781b      	ldrb	r3, [r3, #0]
 800fec0:	f88c 3008 	strb.w	r3, [ip, #8]

	gsmInstance.strSystemSMS.u8NewMessage = FALSE;
 800fec4:	f241 1372 	movw	r3, #4466	; 0x1172
 800fec8:	54e5      	strb	r5, [r4, r3]
	gsmInstance.enmcurrentTask = enmGSMTASK_RESET;
 800feca:	f884 5e42 	strb.w	r5, [r4, #3650]	; 0xe42
	gsmInstance.enmGSMPwrState = enmGSM_PWRNOTSTARTED;
 800fece:	f884 5e44 	strb.w	r5, [r4, #3652]	; 0xe44
	gsmInstance.u8isConnected = FALSE;
 800fed2:	f884 5e19 	strb.w	r5, [r4, #3609]	; 0xe19
	gsmInstance.u8GSM_Response_Character_Counter = 0;
 800fed6:	f8c4 5e3c 	str.w	r5, [r4, #3644]	; 0xe3c
	gsmInstance.u8gsmRegistrationStatus = FALSE;
 800feda:	f884 5e17 	strb.w	r5, [r4, #3607]	; 0xe17
	gsmInstance.u8gsmSIMReadyStatus = FALSE;
 800fede:	f884 5e16 	strb.w	r5, [r4, #3606]	; 0xe16
	gsmInstance.u8gsmRetryCount = GSM_MAX_RETRY;
 800fee2:	2305      	movs	r3, #5
 800fee4:	f884 3e18 	strb.w	r3, [r4, #3608]	; 0xe18
	gsmInstance.u8AttemptFota = FALSE;
 800fee8:	f884 5e1b 	strb.w	r5, [r4, #3611]	; 0xe1b
	gsmInstance.u32GSMTimer = ONE_SEC;
 800feec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fef0:	f8c4 3e24 	str.w	r3, [r4, #3620]	; 0xe24
	gu32GSMHangTimer = THREE_MIN;
 800fef4:	4b10      	ldr	r3, [pc, #64]	; (800ff38 <initGSMSIM868+0x1bc>)
 800fef6:	4a11      	ldr	r2, [pc, #68]	; (800ff3c <initGSMSIM868+0x1c0>)
 800fef8:	601a      	str	r2, [r3, #0]
	gsmInstance.u32GSMHeartbeatTimer = 0;
 800fefa:	f8c4 5e30 	str.w	r5, [r4, #3632]	; 0xe30
	gsmInstance.u8IllegalMqttResponseCounter = 0;
 800fefe:	f884 5e1e 	strb.w	r5, [r4, #3614]	; 0xe1e
	gsmInstance.enmGSMCommandResponseState = enmGSM_SENDCMD;
 800ff02:	f884 5e40 	strb.w	r5, [r4, #3648]	; 0xe40
	gsmInstance.enmGSMCommand = enmGSMSTATE_ATE0;
 800ff06:	2301      	movs	r3, #1
 800ff08:	f884 3e43 	strb.w	r3, [r4, #3651]	; 0xe43
	gsmInstance.enmGSMCommandState = enmGSM_CMDSEND;
 800ff0c:	f884 3e41 	strb.w	r3, [r4, #3649]	; 0xe41
	gu8FlagNoTerminate = 1;
 800ff10:	f886 33b2 	strb.w	r3, [r6, #946]	; 0x3b2

	gu32ModuleInitComplete = 0;
 800ff14:	4b0a      	ldr	r3, [pc, #40]	; (800ff40 <initGSMSIM868+0x1c4>)
 800ff16:	601d      	str	r5, [r3, #0]
	gu32FotaRquestFlag = FALSE;
 800ff18:	605d      	str	r5, [r3, #4]

}
 800ff1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff1e:	bf00      	nop
 800ff20:	2000d390 	.word	0x2000d390
 800ff24:	20000010 	.word	0x20000010
 800ff28:	0801e340 	.word	0x0801e340
 800ff2c:	0801e374 	.word	0x0801e374
 800ff30:	0801e494 	.word	0x0801e494
 800ff34:	0801e344 	.word	0x0801e344
 800ff38:	20006148 	.word	0x20006148
 800ff3c:	0002bf20 	.word	0x0002bf20
 800ff40:	200043c4 	.word	0x200043c4

0800ff44 <updateMqttDataLength>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void updateMqttDataLength()
{
 800ff44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff48:	b085      	sub	sp, #20
 800ff4a:	af00      	add	r7, sp, #0
	char * tempdata = "";
	tempdata = gsmPayload.data[gsmPayload.tail];
 800ff4c:	4a86      	ldr	r2, [pc, #536]	; (8010168 <updateMqttDataLength+0x224>)
 800ff4e:	6853      	ldr	r3, [r2, #4]
 800ff50:	3302      	adds	r3, #2
 800ff52:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
	char topiclen[10];
	uint8_t topiclen8 = 0;

	uint32_t payloadLength = strlen(tempdata);
 800ff56:	4630      	mov	r0, r6
 800ff58:	f7f4 f94a 	bl	80041f0 <strlen>
 800ff5c:	4605      	mov	r5, r0
	char buffer[payloadLength];
 800ff5e:	1dc3      	adds	r3, r0, #7
 800ff60:	f023 0307 	bic.w	r3, r3, #7
 800ff64:	ebad 0d03 	sub.w	sp, sp, r3
	memset(buffer, 0x00, (payloadLength * sizeof(char))); /* Clear Response Buffer */
 800ff68:	4602      	mov	r2, r0
 800ff6a:	2100      	movs	r1, #0
 800ff6c:	4668      	mov	r0, sp
 800ff6e:	f005 facf 	bl	8015510 <memset>

	/* Convert Integer to ASCII ( Decimal) */
	memset(gau8GSM_ATPAYLOADLENGTH, 0x00, ( 30 * sizeof(char)));
 800ff72:	4c7e      	ldr	r4, [pc, #504]	; (801016c <updateMqttDataLength+0x228>)
 800ff74:	221e      	movs	r2, #30
 800ff76:	2100      	movs	r1, #0
 800ff78:	4620      	mov	r0, r4
 800ff7a:	f005 fac9 	bl	8015510 <memset>

	itoa(payloadLength,buffer,PAYLOAD_DATA_STRING_RADIX);
 800ff7e:	220a      	movs	r2, #10
 800ff80:	4669      	mov	r1, sp
 800ff82:	4628      	mov	r0, r5
 800ff84:	f005 f854 	bl	8015030 <itoa>

	strcat((char *)gau8GSM_ATPAYLOADLENGTH,(char *)gau8GSM_ATCMQTTPAYLOAD);
 800ff88:	4979      	ldr	r1, [pc, #484]	; (8010170 <updateMqttDataLength+0x22c>)
 800ff8a:	4620      	mov	r0, r4
 800ff8c:	f005 fb16 	bl	80155bc <strcat>

	strcat((char *)gau8GSM_ATPAYLOADLENGTH,buffer);
 800ff90:	4669      	mov	r1, sp
 800ff92:	4620      	mov	r0, r4
 800ff94:	f005 fb12 	bl	80155bc <strcat>
	strcat((char *)gau8GSM_ATPAYLOADLENGTH,"\r\n");
 800ff98:	4620      	mov	r0, r4
 800ff9a:	f7f4 f929 	bl	80041f0 <strlen>
 800ff9e:	1822      	adds	r2, r4, r0
 800ffa0:	4b74      	ldr	r3, [pc, #464]	; (8010174 <updateMqttDataLength+0x230>)
 800ffa2:	8819      	ldrh	r1, [r3, #0]
 800ffa4:	789b      	ldrb	r3, [r3, #2]
 800ffa6:	5221      	strh	r1, [r4, r0]
 800ffa8:	7093      	strb	r3, [r2, #2]


	if(strstr((char *)tempdata, (char *)",9,#"))
 800ffaa:	4973      	ldr	r1, [pc, #460]	; (8010178 <updateMqttDataLength+0x234>)
 800ffac:	4630      	mov	r0, r6
 800ffae:	f005 fb4e 	bl	801564e <strstr>
 800ffb2:	2800      	cmp	r0, #0
 800ffb4:	d047      	beq.n	8010046 <updateMqttDataLength+0x102>
	{
		memset(topiclen, 0, sizeof(topiclen));
 800ffb6:	f04f 0800 	mov.w	r8, #0
 800ffba:	f8c7 8004 	str.w	r8, [r7, #4]
 800ffbe:	f8c7 8008 	str.w	r8, [r7, #8]
 800ffc2:	f8a7 800c 	strh.w	r8, [r7, #12]
		memset(gau8GSM_ATCMQTTTOPIC, 0, sizeof(gau8GSM_ATCMQTTTOPIC) * sizeof(char));
 800ffc6:	3c08      	subs	r4, #8
 800ffc8:	f104 0530 	add.w	r5, r4, #48	; 0x30
 800ffcc:	f04f 0b32 	mov.w	fp, #50	; 0x32
 800ffd0:	465a      	mov	r2, fp
 800ffd2:	4641      	mov	r1, r8
 800ffd4:	4628      	mov	r0, r5
 800ffd6:	f005 fa9b 	bl	8015510 <memset>
		strcpy(gau8GSM_ATCMQTTTOPIC, gau8GSM_ATCMQTTCMDTOPIC);
 800ffda:	4e68      	ldr	r6, [pc, #416]	; (801017c <updateMqttDataLength+0x238>)
 800ffdc:	f506 7172 	add.w	r1, r6, #968	; 0x3c8
 800ffe0:	4628      	mov	r0, r5
 800ffe2:	f005 fb07 	bl	80155f4 <strcpy>
		topiclen8 = strlen(gau8MQTT_PubTopicBuffer);
 800ffe6:	f506 767f 	add.w	r6, r6, #1020	; 0x3fc
 800ffea:	4630      	mov	r0, r6
 800ffec:	f7f4 f900 	bl	80041f0 <strlen>
		itoa(topiclen8, topiclen, 10);
 800fff0:	220a      	movs	r2, #10
 800fff2:	1d39      	adds	r1, r7, #4
 800fff4:	f005 f81c 	bl	8015030 <itoa>
		strcat(gau8GSM_ATCMQTTTOPIC, topiclen);
 800fff8:	1d39      	adds	r1, r7, #4
 800fffa:	4628      	mov	r0, r5
 800fffc:	f005 fade 	bl	80155bc <strcat>
		strcat(gau8GSM_ATCMQTTTOPIC, "\r\n");
 8010000:	4628      	mov	r0, r5
 8010002:	f7f4 f8f5 	bl	80041f0 <strlen>
 8010006:	182a      	adds	r2, r5, r0
 8010008:	4b5a      	ldr	r3, [pc, #360]	; (8010174 <updateMqttDataLength+0x230>)
 801000a:	f8b3 a000 	ldrh.w	sl, [r3]
 801000e:	f893 9002 	ldrb.w	r9, [r3, #2]
 8010012:	f825 a000 	strh.w	sl, [r5, r0]
 8010016:	f882 9002 	strb.w	r9, [r2, #2]
		memset(gau8GSM_ATCMQTTTOPICNAME, 0, sizeof(gau8GSM_ATCMQTTTOPICNAME));
 801001a:	3464      	adds	r4, #100	; 0x64
 801001c:	465a      	mov	r2, fp
 801001e:	4641      	mov	r1, r8
 8010020:	4620      	mov	r0, r4
 8010022:	f005 fa75 	bl	8015510 <memset>
		strcpy(gau8GSM_ATCMQTTTOPICNAME, gau8MQTT_PubTopicBuffer);
 8010026:	4631      	mov	r1, r6
 8010028:	4620      	mov	r0, r4
 801002a:	f005 fae3 	bl	80155f4 <strcpy>
		strcat(gau8GSM_ATCMQTTTOPICNAME, "\r\n");
 801002e:	4620      	mov	r0, r4
 8010030:	f7f4 f8de 	bl	80041f0 <strlen>
 8010034:	1823      	adds	r3, r4, r0
 8010036:	f824 a000 	strh.w	sl, [r4, r0]
 801003a:	f883 9002 	strb.w	r9, [r3, #2]
		strcat(gau8GSM_ATCMQTTTOPIC, "\r\n");
		memset(gau8GSM_ATCMQTTTOPICNAME, 0, sizeof(gau8GSM_ATCMQTTTOPICNAME));
		strcpy(gau8GSM_ATCMQTTTOPICNAME, gau8MQTT_PubTopicPayload);
		strcat(gau8GSM_ATCMQTTTOPICNAME, "\r\n");
	}
}
 801003e:	3714      	adds	r7, #20
 8010040:	46bd      	mov	sp, r7
 8010042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else if(strstr((char *)tempdata, (char *)"Diagnostic"))
 8010046:	494e      	ldr	r1, [pc, #312]	; (8010180 <updateMqttDataLength+0x23c>)
 8010048:	4630      	mov	r0, r6
 801004a:	f005 fb00 	bl	801564e <strstr>
 801004e:	2800      	cmp	r0, #0
 8010050:	d044      	beq.n	80100dc <updateMqttDataLength+0x198>
		memset(topiclen, 0, sizeof(topiclen));
 8010052:	f04f 0800 	mov.w	r8, #0
 8010056:	f8c7 8004 	str.w	r8, [r7, #4]
 801005a:	f8c7 8008 	str.w	r8, [r7, #8]
 801005e:	f8a7 800c 	strh.w	r8, [r7, #12]
		memset(gau8GSM_ATCMQTTTOPIC, 0, sizeof(gau8GSM_ATCMQTTTOPIC) * sizeof(char));
 8010062:	4c48      	ldr	r4, [pc, #288]	; (8010184 <updateMqttDataLength+0x240>)
 8010064:	f104 0530 	add.w	r5, r4, #48	; 0x30
 8010068:	f04f 0b32 	mov.w	fp, #50	; 0x32
 801006c:	465a      	mov	r2, fp
 801006e:	4641      	mov	r1, r8
 8010070:	4628      	mov	r0, r5
 8010072:	f005 fa4d 	bl	8015510 <memset>
		strcpy(gau8GSM_ATCMQTTTOPIC, gau8GSM_ATCMQTTCMDTOPIC);
 8010076:	4e41      	ldr	r6, [pc, #260]	; (801017c <updateMqttDataLength+0x238>)
 8010078:	f506 7172 	add.w	r1, r6, #968	; 0x3c8
 801007c:	4628      	mov	r0, r5
 801007e:	f005 fab9 	bl	80155f4 <strcpy>
		topiclen8 = strlen(gau8MQTT_PubTopicDiagnostic);
 8010082:	f506 6682 	add.w	r6, r6, #1040	; 0x410
 8010086:	4630      	mov	r0, r6
 8010088:	f7f4 f8b2 	bl	80041f0 <strlen>
		itoa(topiclen8, topiclen, 10);
 801008c:	220a      	movs	r2, #10
 801008e:	1d39      	adds	r1, r7, #4
 8010090:	f004 ffce 	bl	8015030 <itoa>
		strcat(gau8GSM_ATCMQTTTOPIC, topiclen);
 8010094:	1d39      	adds	r1, r7, #4
 8010096:	4628      	mov	r0, r5
 8010098:	f005 fa90 	bl	80155bc <strcat>
		strcat(gau8GSM_ATCMQTTTOPIC, "\r\n");
 801009c:	4628      	mov	r0, r5
 801009e:	f7f4 f8a7 	bl	80041f0 <strlen>
 80100a2:	182a      	adds	r2, r5, r0
 80100a4:	4b33      	ldr	r3, [pc, #204]	; (8010174 <updateMqttDataLength+0x230>)
 80100a6:	f8b3 a000 	ldrh.w	sl, [r3]
 80100aa:	f893 9002 	ldrb.w	r9, [r3, #2]
 80100ae:	f825 a000 	strh.w	sl, [r5, r0]
 80100b2:	f882 9002 	strb.w	r9, [r2, #2]
		memset(gau8GSM_ATCMQTTTOPICNAME, 0, sizeof(gau8GSM_ATCMQTTTOPICNAME));
 80100b6:	3464      	adds	r4, #100	; 0x64
 80100b8:	465a      	mov	r2, fp
 80100ba:	4641      	mov	r1, r8
 80100bc:	4620      	mov	r0, r4
 80100be:	f005 fa27 	bl	8015510 <memset>
		strcpy(gau8GSM_ATCMQTTTOPICNAME, gau8MQTT_PubTopicDiagnostic);
 80100c2:	4631      	mov	r1, r6
 80100c4:	4620      	mov	r0, r4
 80100c6:	f005 fa95 	bl	80155f4 <strcpy>
		strcat(gau8GSM_ATCMQTTTOPICNAME, "\r\n");
 80100ca:	4620      	mov	r0, r4
 80100cc:	f7f4 f890 	bl	80041f0 <strlen>
 80100d0:	1823      	adds	r3, r4, r0
 80100d2:	f824 a000 	strh.w	sl, [r4, r0]
 80100d6:	f883 9002 	strb.w	r9, [r3, #2]
 80100da:	e7b0      	b.n	801003e <updateMqttDataLength+0xfa>
		memset(topiclen, 0, sizeof(topiclen));
 80100dc:	f04f 0800 	mov.w	r8, #0
 80100e0:	f8c7 8004 	str.w	r8, [r7, #4]
 80100e4:	f8c7 8008 	str.w	r8, [r7, #8]
 80100e8:	f8a7 800c 	strh.w	r8, [r7, #12]
		memset(gau8GSM_ATCMQTTTOPIC, 0, sizeof(gau8GSM_ATCMQTTTOPIC) * sizeof(char));
 80100ec:	4c25      	ldr	r4, [pc, #148]	; (8010184 <updateMqttDataLength+0x240>)
 80100ee:	f104 0530 	add.w	r5, r4, #48	; 0x30
 80100f2:	f04f 0b32 	mov.w	fp, #50	; 0x32
 80100f6:	465a      	mov	r2, fp
 80100f8:	4641      	mov	r1, r8
 80100fa:	4628      	mov	r0, r5
 80100fc:	f005 fa08 	bl	8015510 <memset>
		strcpy(gau8GSM_ATCMQTTTOPIC, gau8GSM_ATCMQTTCMDTOPIC);
 8010100:	4e1e      	ldr	r6, [pc, #120]	; (801017c <updateMqttDataLength+0x238>)
 8010102:	f506 7172 	add.w	r1, r6, #968	; 0x3c8
 8010106:	4628      	mov	r0, r5
 8010108:	f005 fa74 	bl	80155f4 <strcpy>
		topiclen8 = strlen(gau8MQTT_PubTopicPayload);
 801010c:	f506 6685 	add.w	r6, r6, #1064	; 0x428
 8010110:	4630      	mov	r0, r6
 8010112:	f7f4 f86d 	bl	80041f0 <strlen>
		itoa(topiclen8, topiclen, 10);
 8010116:	220a      	movs	r2, #10
 8010118:	1d39      	adds	r1, r7, #4
 801011a:	f004 ff89 	bl	8015030 <itoa>
		strcat(gau8GSM_ATCMQTTTOPIC, topiclen);
 801011e:	1d39      	adds	r1, r7, #4
 8010120:	4628      	mov	r0, r5
 8010122:	f005 fa4b 	bl	80155bc <strcat>
		strcat(gau8GSM_ATCMQTTTOPIC, "\r\n");
 8010126:	4628      	mov	r0, r5
 8010128:	f7f4 f862 	bl	80041f0 <strlen>
 801012c:	182a      	adds	r2, r5, r0
 801012e:	4b11      	ldr	r3, [pc, #68]	; (8010174 <updateMqttDataLength+0x230>)
 8010130:	f8b3 a000 	ldrh.w	sl, [r3]
 8010134:	f893 9002 	ldrb.w	r9, [r3, #2]
 8010138:	f825 a000 	strh.w	sl, [r5, r0]
 801013c:	f882 9002 	strb.w	r9, [r2, #2]
		memset(gau8GSM_ATCMQTTTOPICNAME, 0, sizeof(gau8GSM_ATCMQTTTOPICNAME));
 8010140:	3464      	adds	r4, #100	; 0x64
 8010142:	465a      	mov	r2, fp
 8010144:	4641      	mov	r1, r8
 8010146:	4620      	mov	r0, r4
 8010148:	f005 f9e2 	bl	8015510 <memset>
		strcpy(gau8GSM_ATCMQTTTOPICNAME, gau8MQTT_PubTopicPayload);
 801014c:	4631      	mov	r1, r6
 801014e:	4620      	mov	r0, r4
 8010150:	f005 fa50 	bl	80155f4 <strcpy>
		strcat(gau8GSM_ATCMQTTTOPICNAME, "\r\n");
 8010154:	4620      	mov	r0, r4
 8010156:	f7f4 f84b 	bl	80041f0 <strlen>
 801015a:	1823      	adds	r3, r4, r0
 801015c:	f824 a000 	strh.w	sl, [r4, r0]
 8010160:	f883 9002 	strb.w	r9, [r3, #2]
}
 8010164:	e76b      	b.n	801003e <updateMqttDataLength+0xfa>
 8010166:	bf00      	nop
 8010168:	2000e504 	.word	0x2000e504
 801016c:	200043cc 	.word	0x200043cc
 8010170:	200003c4 	.word	0x200003c4
 8010174:	0801e374 	.word	0x0801e374
 8010178:	0801e350 	.word	0x0801e350
 801017c:	20000010 	.word	0x20000010
 8010180:	0801e358 	.word	0x0801e358
 8010184:	200043c4 	.word	0x200043c4

08010188 <syncrtcwithNetworkTime>:
uint32_t gu32Date = 0;
uint32_t gu32Hours = 0;
uint32_t gu32Minutes = 0;
uint32_t gu32Seconds = 0;
void syncrtcwithNetworkTime(void)
{
 8010188:	b570      	push	{r4, r5, r6, lr}

//	if(gu32TimeSyncFlag == 1)
//		return;

	gu32Year = (((gau8GSM_TimeStamp[0]-'0') * 10) + (gau8GSM_TimeStamp[1]-'0'));
 801018a:	4b40      	ldr	r3, [pc, #256]	; (801028c <syncrtcwithNetworkTime+0x104>)
 801018c:	f893 043c 	ldrb.w	r0, [r3, #1084]	; 0x43c
 8010190:	3830      	subs	r0, #48	; 0x30
 8010192:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8010196:	f893 243d 	ldrb.w	r2, [r3, #1085]	; 0x43d
 801019a:	3a30      	subs	r2, #48	; 0x30
 801019c:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80101a0:	4c3b      	ldr	r4, [pc, #236]	; (8010290 <syncrtcwithNetworkTime+0x108>)
 80101a2:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	gu32Month = (((gau8GSM_TimeStamp[3]-'0') * 10) + (gau8GSM_TimeStamp[4]-'0'));
 80101a6:	f893 243f 	ldrb.w	r2, [r3, #1087]	; 0x43f
 80101aa:	3a30      	subs	r2, #48	; 0x30
 80101ac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80101b0:	f893 1440 	ldrb.w	r1, [r3, #1088]	; 0x440
 80101b4:	3930      	subs	r1, #48	; 0x30
 80101b6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80101ba:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
	gu32Date = (((gau8GSM_TimeStamp[6]-'0') * 10) + (gau8GSM_TimeStamp[7]-'0'));
 80101be:	f893 2442 	ldrb.w	r2, [r3, #1090]	; 0x442
 80101c2:	3a30      	subs	r2, #48	; 0x30
 80101c4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80101c8:	f893 1443 	ldrb.w	r1, [r3, #1091]	; 0x443
 80101cc:	3930      	subs	r1, #48	; 0x30
 80101ce:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80101d2:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8

	gu32Hours = (((gau8GSM_TimeStamp[9]-'0') * 10) + (gau8GSM_TimeStamp[10]-'0'));
 80101d6:	f893 2445 	ldrb.w	r2, [r3, #1093]	; 0x445
 80101da:	3a30      	subs	r2, #48	; 0x30
 80101dc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80101e0:	f893 1446 	ldrb.w	r1, [r3, #1094]	; 0x446
 80101e4:	3930      	subs	r1, #48	; 0x30
 80101e6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80101ea:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
	gu32Minutes = (((gau8GSM_TimeStamp[12]-'0') * 10) + (gau8GSM_TimeStamp[13]-'0'));
 80101ee:	f893 2448 	ldrb.w	r2, [r3, #1096]	; 0x448
 80101f2:	3a30      	subs	r2, #48	; 0x30
 80101f4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80101f8:	f893 1449 	ldrb.w	r1, [r3, #1097]	; 0x449
 80101fc:	3930      	subs	r1, #48	; 0x30
 80101fe:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8010202:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
	gu32Seconds = (((gau8GSM_TimeStamp[15]-'0') * 10) + (gau8GSM_TimeStamp[16]-'0'));
 8010206:	f893 244b 	ldrb.w	r2, [r3, #1099]	; 0x44b
 801020a:	3a30      	subs	r2, #48	; 0x30
 801020c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8010210:	f893 344c 	ldrb.w	r3, [r3, #1100]	; 0x44c
 8010214:	3b30      	subs	r3, #48	; 0x30
 8010216:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801021a:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4

	SDate1.Year = DecimalToBCD(gu32Year);
 801021e:	f004 fd67 	bl	8014cf0 <DecimalToBCD>
 8010222:	4d1c      	ldr	r5, [pc, #112]	; (8010294 <syncrtcwithNetworkTime+0x10c>)
 8010224:	70e8      	strb	r0, [r5, #3]
	SDate1.Month = DecimalToBCD(gu32Month);
 8010226:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 801022a:	f004 fd61 	bl	8014cf0 <DecimalToBCD>
 801022e:	7068      	strb	r0, [r5, #1]
	SDate1.Date = DecimalToBCD(gu32Date);
 8010230:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8010234:	f004 fd5c 	bl	8014cf0 <DecimalToBCD>
 8010238:	70a8      	strb	r0, [r5, #2]
	STime1.Hours = DecimalToBCD(gu32Hours);
 801023a:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 801023e:	f004 fd57 	bl	8014cf0 <DecimalToBCD>
 8010242:	4e15      	ldr	r6, [pc, #84]	; (8010298 <syncrtcwithNetworkTime+0x110>)
 8010244:	7030      	strb	r0, [r6, #0]
	STime1.Minutes = DecimalToBCD(gu32Minutes);
 8010246:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 801024a:	f004 fd51 	bl	8014cf0 <DecimalToBCD>
 801024e:	7070      	strb	r0, [r6, #1]
	STime1.Seconds = DecimalToBCD(gu32Seconds);
 8010250:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8010254:	f004 fd4c 	bl	8014cf0 <DecimalToBCD>
 8010258:	70b0      	strb	r0, [r6, #2]

	strTimeUpdate.u32RefTimeHH = gu32Hours;
 801025a:	4b10      	ldr	r3, [pc, #64]	; (801029c <syncrtcwithNetworkTime+0x114>)
 801025c:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8010260:	601a      	str	r2, [r3, #0]
	strTimeUpdate.u32RefTimeMin = gu32Minutes;
 8010262:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8010266:	605a      	str	r2, [r3, #4]
	strTimeUpdate.u32RefTimeSec = gu32Seconds;
 8010268:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 801026c:	609a      	str	r2, [r3, #8]

	/* Update/ Set RTC Structure */
	HAL_RTC_SetTime(&hrtc,&STime1,RTC_FORMAT_BCD);
 801026e:	4c0c      	ldr	r4, [pc, #48]	; (80102a0 <syncrtcwithNetworkTime+0x118>)
 8010270:	2201      	movs	r2, #1
 8010272:	4631      	mov	r1, r6
 8010274:	4620      	mov	r0, r4
 8010276:	f7f8 faef 	bl	8008858 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc,&SDate1,RTC_FORMAT_BCD);
 801027a:	2201      	movs	r2, #1
 801027c:	4629      	mov	r1, r5
 801027e:	4620      	mov	r0, r4
 8010280:	f7f8 fb69 	bl	8008956 <HAL_RTC_SetDate>

	/* Network Time Sync complete (Indicator) */
	gu32TimeSyncFlag = 1;
 8010284:	4b07      	ldr	r3, [pc, #28]	; (80102a4 <syncrtcwithNetworkTime+0x11c>)
 8010286:	2201      	movs	r2, #1
 8010288:	601a      	str	r2, [r3, #0]
}
 801028a:	bd70      	pop	{r4, r5, r6, pc}
 801028c:	20000010 	.word	0x20000010
 8010290:	200043c4 	.word	0x200043c4
 8010294:	20005f60 	.word	0x20005f60
 8010298:	20005f4c 	.word	0x20005f4c
 801029c:	200060a8 	.word	0x200060a8
 80102a0:	20010330 	.word	0x20010330
 80102a4:	200060a4 	.word	0x200060a4

080102a8 <restoreHTTPURLforData>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void restoreHTTPURLforData(void)
{
 80102a8:	b538      	push	{r3, r4, r5, lr}
		strcpy((char *)gau8GSM_ATURL,(char *)gau8GSM_ATCMQTTCONNECT);
 80102aa:	4d12      	ldr	r5, [pc, #72]	; (80102f4 <restoreHTTPURLforData+0x4c>)
 80102ac:	f105 04b4 	add.w	r4, r5, #180	; 0xb4
 80102b0:	f505 712b 	add.w	r1, r5, #684	; 0x2ac
 80102b4:	4620      	mov	r0, r4
 80102b6:	f005 f99d 	bl	80155f4 <strcpy>
		strcat((char *)gau8GSM_ATURL,(char *)gau8GSM_url);
 80102ba:	f505 7144 	add.w	r1, r5, #784	; 0x310
 80102be:	4620      	mov	r0, r4
 80102c0:	f005 f97c 	bl	80155bc <strcat>
		strcat((char *)gau8GSM_ATURL,(char *)":");
 80102c4:	4620      	mov	r0, r4
 80102c6:	f7f3 ff93 	bl	80041f0 <strlen>
 80102ca:	4b0b      	ldr	r3, [pc, #44]	; (80102f8 <restoreHTTPURLforData+0x50>)
 80102cc:	881b      	ldrh	r3, [r3, #0]
 80102ce:	5223      	strh	r3, [r4, r0]
		strcat((char *)gau8GSM_ATURL,(char *)MQTT_PORT);
 80102d0:	f505 716a 	add.w	r1, r5, #936	; 0x3a8
 80102d4:	4620      	mov	r0, r4
 80102d6:	f005 f971 	bl	80155bc <strcat>
		strcat((char *)gau8GSM_ATURL,"\",60,1\r\n");
 80102da:	4620      	mov	r0, r4
 80102dc:	f7f3 ff88 	bl	80041f0 <strlen>
 80102e0:	4602      	mov	r2, r0
 80102e2:	1825      	adds	r5, r4, r0
 80102e4:	4b05      	ldr	r3, [pc, #20]	; (80102fc <restoreHTTPURLforData+0x54>)
 80102e6:	cb03      	ldmia	r3!, {r0, r1}
 80102e8:	50a0      	str	r0, [r4, r2]
 80102ea:	6069      	str	r1, [r5, #4]
 80102ec:	781b      	ldrb	r3, [r3, #0]
 80102ee:	722b      	strb	r3, [r5, #8]
}
 80102f0:	bd38      	pop	{r3, r4, r5, pc}
 80102f2:	bf00      	nop
 80102f4:	20000010 	.word	0x20000010
 80102f8:	0801e494 	.word	0x0801e494
 80102fc:	0801e344 	.word	0x0801e344

08010300 <updateNetworkAPN>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void updateNetworkAPN(void)
{
 8010300:	b570      	push	{r4, r5, r6, lr}
	memset(gau8GSM_NewSetAPN, 0x00, sizeof(gau8GSM_NewSetAPN) * sizeof(char));
 8010302:	4c12      	ldr	r4, [pc, #72]	; (801034c <updateNetworkAPN+0x4c>)
 8010304:	2232      	movs	r2, #50	; 0x32
 8010306:	2100      	movs	r1, #0
 8010308:	4620      	mov	r0, r4
 801030a:	f005 f901 	bl	8015510 <memset>
	//gau8GSM_NewSetAPN
	strcpy((char *)gau8GSM_NewSetAPN,(char *)gau8GSM_ATSETAPN);
 801030e:	4e10      	ldr	r6, [pc, #64]	; (8010350 <updateNetworkAPN+0x50>)
 8010310:	f206 518c 	addw	r1, r6, #1420	; 0x58c
 8010314:	4620      	mov	r0, r4
 8010316:	f005 f96d 	bl	80155f4 <strcpy>
	strcat((char *)gau8GSM_NewSetAPN,(char *)"\"");
 801031a:	4620      	mov	r0, r4
 801031c:	f7f3 ff68 	bl	80041f0 <strlen>
 8010320:	4b0c      	ldr	r3, [pc, #48]	; (8010354 <updateNetworkAPN+0x54>)
 8010322:	881d      	ldrh	r5, [r3, #0]
 8010324:	5225      	strh	r5, [r4, r0]
	strcat((char *)gau8GSM_NewSetAPN,(char *)gau8GSM4G_apn);
 8010326:	f506 61b4 	add.w	r1, r6, #1440	; 0x5a0
 801032a:	4620      	mov	r0, r4
 801032c:	f005 f946 	bl	80155bc <strcat>
	strcat((char *)gau8GSM_NewSetAPN,(char *)"\"");
 8010330:	4620      	mov	r0, r4
 8010332:	f7f3 ff5d 	bl	80041f0 <strlen>
 8010336:	5225      	strh	r5, [r4, r0]
	strcat((char *)gau8GSM_NewSetAPN,"\r\n");
 8010338:	4620      	mov	r0, r4
 801033a:	f7f3 ff59 	bl	80041f0 <strlen>
 801033e:	1822      	adds	r2, r4, r0
 8010340:	4b05      	ldr	r3, [pc, #20]	; (8010358 <updateNetworkAPN+0x58>)
 8010342:	8819      	ldrh	r1, [r3, #0]
 8010344:	789b      	ldrb	r3, [r3, #2]
 8010346:	5221      	strh	r1, [r4, r0]
 8010348:	7093      	strb	r3, [r2, #2]
}
 801034a:	bd70      	pop	{r4, r5, r6, pc}
 801034c:	2000447c 	.word	0x2000447c
 8010350:	20000010 	.word	0x20000010
 8010354:	0801e340 	.word	0x0801e340
 8010358:	0801e374 	.word	0x0801e374

0801035c <updateHTTPReadLength>:
*******************************************************************************/
#define FOTAFILECHUNKSIZEBYTES	(1024)
uint32_t updateHTTPReadLength(uint32_t ConfigFileSizeBytes)
{

	if(ConfigFileSizeBytes != 0)
 801035c:	2800      	cmp	r0, #0
 801035e:	f000 8094 	beq.w	801048a <updateHTTPReadLength+0x12e>
{
 8010362:	b570      	push	{r4, r5, r6, lr}
	{
		/* Start of File */
		if(u32ConfigFileBaseAddress == 0)
 8010364:	4a49      	ldr	r2, [pc, #292]	; (801048c <updateHTTPReadLength+0x130>)
 8010366:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 801036a:	2a00      	cmp	r2, #0
 801036c:	d047      	beq.n	80103fe <updateHTTPReadLength+0xa2>
			u32ConfigFileRemainingBytes = (ConfigFileSizeBytes % FOTAFILECHUNKSIZEBYTES);
			itoa(FOTAFILECHUNKSIZEBYTES,ConfigbufferChunkBytes,PAYLOAD_DATA_STRING_RADIX);
			itoa(u32ConfigFileRemainingBytes,bufferRemBytes,PAYLOAD_DATA_STRING_RADIX);
		}

		strcpy(gau8GSM_ATHTTPREAD,(char *)"AT+HTTPREAD=");
 801036e:	4d48      	ldr	r5, [pc, #288]	; (8010490 <updateHTTPReadLength+0x134>)
 8010370:	4b48      	ldr	r3, [pc, #288]	; (8010494 <updateHTTPReadLength+0x138>)
 8010372:	f205 6414 	addw	r4, r5, #1556	; 0x614
 8010376:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010378:	c407      	stmia	r4!, {r0, r1, r2}
 801037a:	7023      	strb	r3, [r4, #0]
		memset(buffer,0x00,sizeof(char) * sizeof(buffer));
 801037c:	f505 62c6 	add.w	r2, r5, #1584	; 0x630
 8010380:	2300      	movs	r3, #0
 8010382:	f8c5 3630 	str.w	r3, [r5, #1584]	; 0x630
 8010386:	f8a5 3634 	strh.w	r3, [r5, #1588]	; 0x634

		if(u32ConfigFileBaseAddress < u32ConfigFileChunkCounter)
 801038a:	4b40      	ldr	r3, [pc, #256]	; (801048c <updateHTTPReadLength+0x130>)
 801038c:	f8d3 40ec 	ldr.w	r4, [r3, #236]	; 0xec
 8010390:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
 8010394:	4284      	cmp	r4, r0
 8010396:	d34a      	bcc.n	801042e <updateHTTPReadLength+0xd2>
			return 2;
		}
		else
		{
//			itoa(u32ConfigFileChunkCounter * 2000,buffer,PAYLOAD_DATA_STRING_RADIX);
			itoa(u32ConfigFileChunkCounter * FOTAFILECHUNKSIZEBYTES,buffer,PAYLOAD_DATA_STRING_RADIX);
 8010398:	4d3d      	ldr	r5, [pc, #244]	; (8010490 <updateHTTPReadLength+0x134>)
 801039a:	f505 66c6 	add.w	r6, r5, #1584	; 0x630
 801039e:	220a      	movs	r2, #10
 80103a0:	4631      	mov	r1, r6
 80103a2:	4090      	lsls	r0, r2
 80103a4:	f004 fe44 	bl	8015030 <itoa>
			strcat(gau8GSM_ATHTTPREAD,(char *)buffer);
 80103a8:	f205 6414 	addw	r4, r5, #1556	; 0x614
 80103ac:	4631      	mov	r1, r6
 80103ae:	4620      	mov	r0, r4
 80103b0:	f005 f904 	bl	80155bc <strcat>
			strcat(gau8GSM_ATHTTPREAD,(char *)",");
 80103b4:	4620      	mov	r0, r4
 80103b6:	f7f3 ff1b 	bl	80041f0 <strlen>
 80103ba:	4b37      	ldr	r3, [pc, #220]	; (8010498 <updateHTTPReadLength+0x13c>)
 80103bc:	881b      	ldrh	r3, [r3, #0]
 80103be:	5223      	strh	r3, [r4, r0]
			strcat(gau8GSM_ATHTTPREAD,(char *)bufferRemBytes); /* Byte(s) Chunk to read*/
 80103c0:	f205 610c 	addw	r1, r5, #1548	; 0x60c
 80103c4:	4620      	mov	r0, r4
 80103c6:	f005 f8f9 	bl	80155bc <strcat>
			strcat(gau8GSM_ATHTTPREAD,(char *)"\r\n");
 80103ca:	4620      	mov	r0, r4
 80103cc:	f7f3 ff10 	bl	80041f0 <strlen>
 80103d0:	1822      	adds	r2, r4, r0
 80103d2:	4b32      	ldr	r3, [pc, #200]	; (801049c <updateHTTPReadLength+0x140>)
 80103d4:	8819      	ldrh	r1, [r3, #0]
 80103d6:	789b      	ldrb	r3, [r3, #2]
 80103d8:	5221      	strh	r1, [r4, r0]
 80103da:	7093      	strb	r3, [r2, #2]
			gsmInstance.gu32RemoteConfigSizeinBytes = u32ConfigFileRemainingBytes;
 80103dc:	4b2b      	ldr	r3, [pc, #172]	; (801048c <updateHTTPReadLength+0x130>)
 80103de:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 80103e2:	4a2f      	ldr	r2, [pc, #188]	; (80104a0 <updateHTTPReadLength+0x144>)
 80103e4:	f8c2 1e34 	str.w	r1, [r2, #3636]	; 0xe34
			u32ConfigFileBaseAddress = 0;
 80103e8:	2200      	movs	r2, #0
 80103ea:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
			u32ConfigFileChunkCounter = 0;
 80103ee:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
			u32ConfigFileRemainingBytes = 0;
 80103f2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
			u32ConfigFileReadComplete = 1;
 80103f6:	2001      	movs	r0, #1
 80103f8:	f8c3 00f8 	str.w	r0, [r3, #248]	; 0xf8
			return 1;
		}
	}
	else
		return 0;
}
 80103fc:	bd70      	pop	{r4, r5, r6, pc}
			u32ConfigFileChunkCounter = (ConfigFileSizeBytes / FOTAFILECHUNKSIZEBYTES);
 80103fe:	0a82      	lsrs	r2, r0, #10
 8010400:	4c22      	ldr	r4, [pc, #136]	; (801048c <updateHTTPReadLength+0x130>)
 8010402:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
			u32ConfigFileRemainingBytes = (ConfigFileSizeBytes % FOTAFILECHUNKSIZEBYTES);
 8010406:	f3c0 0309 	ubfx	r3, r0, #0, #10
 801040a:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
			itoa(FOTAFILECHUNKSIZEBYTES,ConfigbufferChunkBytes,PAYLOAD_DATA_STRING_RADIX);
 801040e:	4d20      	ldr	r5, [pc, #128]	; (8010490 <updateHTTPReadLength+0x134>)
 8010410:	220a      	movs	r2, #10
 8010412:	f205 6104 	addw	r1, r5, #1540	; 0x604
 8010416:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801041a:	f004 fe09 	bl	8015030 <itoa>
			itoa(u32ConfigFileRemainingBytes,bufferRemBytes,PAYLOAD_DATA_STRING_RADIX);
 801041e:	220a      	movs	r2, #10
 8010420:	f205 610c 	addw	r1, r5, #1548	; 0x60c
 8010424:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 8010428:	f004 fe02 	bl	8015030 <itoa>
 801042c:	e79f      	b.n	801036e <updateHTTPReadLength+0x12>
			itoa((u32ConfigFileBaseAddress * FOTAFILECHUNKSIZEBYTES),buffer,PAYLOAD_DATA_STRING_RADIX);
 801042e:	4616      	mov	r6, r2
 8010430:	220a      	movs	r2, #10
 8010432:	4631      	mov	r1, r6
 8010434:	fa04 f002 	lsl.w	r0, r4, r2
 8010438:	f004 fdfa 	bl	8015030 <itoa>
			strcat(gau8GSM_ATHTTPREAD,(char *)buffer);
 801043c:	f205 6414 	addw	r4, r5, #1556	; 0x614
 8010440:	4631      	mov	r1, r6
 8010442:	4620      	mov	r0, r4
 8010444:	f005 f8ba 	bl	80155bc <strcat>
			strcat(gau8GSM_ATHTTPREAD,(char *)",");
 8010448:	4620      	mov	r0, r4
 801044a:	f7f3 fed1 	bl	80041f0 <strlen>
 801044e:	4b12      	ldr	r3, [pc, #72]	; (8010498 <updateHTTPReadLength+0x13c>)
 8010450:	881b      	ldrh	r3, [r3, #0]
 8010452:	5223      	strh	r3, [r4, r0]
			strcat(gau8GSM_ATHTTPREAD,(char *)ConfigbufferChunkBytes); /* Byte(s) Chunk to read*/
 8010454:	f205 6104 	addw	r1, r5, #1540	; 0x604
 8010458:	4620      	mov	r0, r4
 801045a:	f005 f8af 	bl	80155bc <strcat>
			strcat(gau8GSM_ATHTTPREAD,(char *)"\r\n");
 801045e:	4620      	mov	r0, r4
 8010460:	f7f3 fec6 	bl	80041f0 <strlen>
 8010464:	1822      	adds	r2, r4, r0
 8010466:	4b0d      	ldr	r3, [pc, #52]	; (801049c <updateHTTPReadLength+0x140>)
 8010468:	8819      	ldrh	r1, [r3, #0]
 801046a:	789b      	ldrb	r3, [r3, #2]
 801046c:	5221      	strh	r1, [r4, r0]
 801046e:	7093      	strb	r3, [r2, #2]
			u32ConfigFileBaseAddress++;
 8010470:	4a06      	ldr	r2, [pc, #24]	; (801048c <updateHTTPReadLength+0x130>)
 8010472:	f8d2 30ec 	ldr.w	r3, [r2, #236]	; 0xec
 8010476:	3301      	adds	r3, #1
 8010478:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
			gsmInstance.gu32RemoteConfigSizeinBytes = FOTAFILECHUNKSIZEBYTES;
 801047c:	4b08      	ldr	r3, [pc, #32]	; (80104a0 <updateHTTPReadLength+0x144>)
 801047e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010482:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
			return 2;
 8010486:	2002      	movs	r0, #2
 8010488:	e7b8      	b.n	80103fc <updateHTTPReadLength+0xa0>
}
 801048a:	4770      	bx	lr
 801048c:	200043c4 	.word	0x200043c4
 8010490:	20000010 	.word	0x20000010
 8010494:	0801e410 	.word	0x0801e410
 8010498:	0801e3fc 	.word	0x0801e3fc
 801049c:	0801e374 	.word	0x0801e374
 80104a0:	2000d390 	.word	0x2000d390

080104a4 <initHTTPURLforFOTA>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      31-03-2020			Initial Definitions
******************************************************************************/
void initHTTPURLforFOTA(void )
{
 80104a4:	b570      	push	{r4, r5, r6, lr}
	strcpy((char *)gau8GSM_ATURL,(char *)gau8GSM_ATHTTPPARAURL);
 80104a6:	4d10      	ldr	r5, [pc, #64]	; (80104e8 <initHTTPURLforFOTA+0x44>)
 80104a8:	f105 04b4 	add.w	r4, r5, #180	; 0xb4
 80104ac:	f505 61c7 	add.w	r1, r5, #1592	; 0x638
 80104b0:	4620      	mov	r0, r4
 80104b2:	f005 f89f 	bl	80155f4 <strcpy>
	strcat((char *)gau8GSM_ATURL,(char *)"\"");
 80104b6:	4620      	mov	r0, r4
 80104b8:	f7f3 fe9a 	bl	80041f0 <strlen>
 80104bc:	4b0b      	ldr	r3, [pc, #44]	; (80104ec <initHTTPURLforFOTA+0x48>)
 80104be:	881e      	ldrh	r6, [r3, #0]
 80104c0:	5226      	strh	r6, [r4, r0]
	strcat((char *)gau8GSM_ATURL,(char *)gau8FotaURL);
 80104c2:	f205 41f4 	addw	r1, r5, #1268	; 0x4f4
 80104c6:	4620      	mov	r0, r4
 80104c8:	f005 f878 	bl	80155bc <strcat>
	strcat((char *)gau8GSM_ATURL,(char *)"\"");
 80104cc:	4620      	mov	r0, r4
 80104ce:	f7f3 fe8f 	bl	80041f0 <strlen>
 80104d2:	5226      	strh	r6, [r4, r0]
	strcat((char *)gau8GSM_ATURL,"\r\n");
 80104d4:	4620      	mov	r0, r4
 80104d6:	f7f3 fe8b 	bl	80041f0 <strlen>
 80104da:	1822      	adds	r2, r4, r0
 80104dc:	4b04      	ldr	r3, [pc, #16]	; (80104f0 <initHTTPURLforFOTA+0x4c>)
 80104de:	8819      	ldrh	r1, [r3, #0]
 80104e0:	789b      	ldrb	r3, [r3, #2]
 80104e2:	5221      	strh	r1, [r4, r0]
 80104e4:	7093      	strb	r3, [r2, #2]
//	strcat((char *)gau8GSM_ATURL,(char *)":");
//	strcat((char *)gau8GSM_ATURL,(char *)MQTT_PORT);
//	strcat((char *)gau8GSM_ATURL,"\",60,1\r\n");


}
 80104e6:	bd70      	pop	{r4, r5, r6, pc}
 80104e8:	20000010 	.word	0x20000010
 80104ec:	0801e340 	.word	0x0801e340
 80104f0:	0801e374 	.word	0x0801e374

080104f4 <Diagnostic>:
void Diagnostic(enmDiagnosticStatus DiagnosticStatus )
{
 80104f4:	b508      	push	{r3, lr}
	enqueue(&gsmPayload,(char *)getDiagDataString(DiagnosticStatus));
 80104f6:	f002 fd6f 	bl	8012fd8 <getDiagDataString>
 80104fa:	4601      	mov	r1, r0
 80104fc:	4801      	ldr	r0, [pc, #4]	; (8010504 <Diagnostic+0x10>)
 80104fe:	f002 fe2b 	bl	8013158 <enqueue>
}
 8010502:	bd08      	pop	{r3, pc}
 8010504:	2000e504 	.word	0x2000e504

08010508 <sendGSMCommand>:
{
 8010508:	b570      	push	{r4, r5, r6, lr}
	switch (gsmInstance.enmGSMCommandResponseState)
 801050a:	4bb1      	ldr	r3, [pc, #708]	; (80107d0 <sendGSMCommand+0x2c8>)
 801050c:	f893 3e40 	ldrb.w	r3, [r3, #3648]	; 0xe40
 8010510:	b123      	cbz	r3, 801051c <sendGSMCommand+0x14>
 8010512:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010516:	2a01      	cmp	r2, #1
 8010518:	d06a      	beq.n	80105f0 <sendGSMCommand+0xe8>
}
 801051a:	bd70      	pop	{r4, r5, r6, pc}
			if(gsmInstance.enmGSMCommandState == enmGSM_CMDSEND)
 801051c:	4bac      	ldr	r3, [pc, #688]	; (80107d0 <sendGSMCommand+0x2c8>)
 801051e:	f893 3e41 	ldrb.w	r3, [r3, #3649]	; 0xe41
 8010522:	b2db      	uxtb	r3, r3
 8010524:	2b01      	cmp	r3, #1
 8010526:	d01b      	beq.n	8010560 <sendGSMCommand+0x58>
			else if(gsmInstance.enmGSMCommandState == enmGSM_CMDINPROCESS)
 8010528:	4ba9      	ldr	r3, [pc, #676]	; (80107d0 <sendGSMCommand+0x2c8>)
 801052a:	f893 3e41 	ldrb.w	r3, [r3, #3649]	; 0xe41
 801052e:	b2db      	uxtb	r3, r3
 8010530:	2b02      	cmp	r3, #2
 8010532:	d15a      	bne.n	80105ea <sendGSMCommand+0xe2>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8010534:	4ba7      	ldr	r3, [pc, #668]	; (80107d4 <sendGSMCommand+0x2cc>)
 8010536:	681b      	ldr	r3, [r3, #0]
				if(!LL_USART_IsActiveFlag_TXE(UART4))
 8010538:	f013 0f80 	tst.w	r3, #128	; 0x80
 801053c:	d0ed      	beq.n	801051a <sendGSMCommand+0x12>
					if(u8LoopCounter < (u8CharacterCounter))
 801053e:	4aa6      	ldr	r2, [pc, #664]	; (80107d8 <sendGSMCommand+0x2d0>)
 8010540:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8010544:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
 8010548:	4293      	cmp	r3, r2
 801054a:	d236      	bcs.n	80105ba <sendGSMCommand+0xb2>
						LL_USART_TransmitData8(UART4,command[u8LoopCounter++]);
 801054c:	4aa2      	ldr	r2, [pc, #648]	; (80107d8 <sendGSMCommand+0x2d0>)
 801054e:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
 8010552:	1c58      	adds	r0, r3, #1
 8010554:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
 8010558:	5cca      	ldrb	r2, [r1, r3]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 801055a:	4b9e      	ldr	r3, [pc, #632]	; (80107d4 <sendGSMCommand+0x2cc>)
 801055c:	605a      	str	r2, [r3, #4]
}
 801055e:	e7dc      	b.n	801051a <sendGSMCommand+0x12>
				u8LoopCounter = 0;
 8010560:	4b9d      	ldr	r3, [pc, #628]	; (80107d8 <sendGSMCommand+0x2d0>)
 8010562:	2200      	movs	r2, #0
 8010564:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
				if(gsmInstance.enmGSMCommand == enmGSMSTATE_SENDDATA)
 8010568:	4b99      	ldr	r3, [pc, #612]	; (80107d0 <sendGSMCommand+0x2c8>)
 801056a:	f893 3e43 	ldrb.w	r3, [r3, #3651]	; 0xe43
 801056e:	2b1a      	cmp	r3, #26
 8010570:	d01a      	beq.n	80105a8 <sendGSMCommand+0xa0>
					command = gsmStateTableArray[gsmInstance.enmGSMCommand].atCommand;
 8010572:	4a9a      	ldr	r2, [pc, #616]	; (80107dc <sendGSMCommand+0x2d4>)
 8010574:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8010578:	f8d3 26d0 	ldr.w	r2, [r3, #1744]	; 0x6d0
 801057c:	4b96      	ldr	r3, [pc, #600]	; (80107d8 <sendGSMCommand+0x2d0>)
 801057e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
				u8CharacterCounter = strlen((const char *)command);
 8010582:	4c95      	ldr	r4, [pc, #596]	; (80107d8 <sendGSMCommand+0x2d0>)
 8010584:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
 8010588:	4628      	mov	r0, r5
 801058a:	f7f3 fe31 	bl	80041f0 <strlen>
 801058e:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
				LL_USART_TransmitData8(UART4,command[u8LoopCounter++]);
 8010592:	2301      	movs	r3, #1
 8010594:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
 8010598:	782a      	ldrb	r2, [r5, #0]
  USARTx->DR = Value;
 801059a:	4b8e      	ldr	r3, [pc, #568]	; (80107d4 <sendGSMCommand+0x2cc>)
 801059c:	605a      	str	r2, [r3, #4]
				gsmInstance.enmGSMCommandState = enmGSM_CMDINPROCESS;
 801059e:	4b8c      	ldr	r3, [pc, #560]	; (80107d0 <sendGSMCommand+0x2c8>)
 80105a0:	2202      	movs	r2, #2
 80105a2:	f883 2e41 	strb.w	r2, [r3, #3649]	; 0xe41
 80105a6:	e7b8      	b.n	801051a <sendGSMCommand+0x12>
					command = gsmPayload.data[gsmPayload.tail];
 80105a8:	4a8d      	ldr	r2, [pc, #564]	; (80107e0 <sendGSMCommand+0x2d8>)
 80105aa:	6853      	ldr	r3, [r2, #4]
 80105ac:	3302      	adds	r3, #2
 80105ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80105b2:	4b89      	ldr	r3, [pc, #548]	; (80107d8 <sendGSMCommand+0x2d0>)
 80105b4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80105b8:	e7e3      	b.n	8010582 <sendGSMCommand+0x7a>
						u8LoopCounter = 0;
 80105ba:	4b87      	ldr	r3, [pc, #540]	; (80107d8 <sendGSMCommand+0x2d0>)
 80105bc:	2200      	movs	r2, #0
 80105be:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
						gu32GSMCharacterTimeout = FIVEHUNDRED_MS;
 80105c2:	4988      	ldr	r1, [pc, #544]	; (80107e4 <sendGSMCommand+0x2dc>)
 80105c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80105c8:	6008      	str	r0, [r1, #0]
						u8CharacterCounter = 0;
 80105ca:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
						gsmInstance.enmGSMCommandResponseState = enmGSM_CHKRESPONSE;
 80105ce:	4b80      	ldr	r3, [pc, #512]	; (80107d0 <sendGSMCommand+0x2c8>)
 80105d0:	2201      	movs	r2, #1
 80105d2:	f883 2e40 	strb.w	r2, [r3, #3648]	; 0xe40
						gsmInstance.u32GSMResponseTimer = gsmStateTableArray[gsmInstance.enmGSMCommand].msTimeOut;
 80105d6:	f893 1e43 	ldrb.w	r1, [r3, #3651]	; 0xe43
 80105da:	4a80      	ldr	r2, [pc, #512]	; (80107dc <sendGSMCommand+0x2d4>)
 80105dc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80105e0:	f8d2 26d8 	ldr.w	r2, [r2, #1752]	; 0x6d8
 80105e4:	f8c3 2e38 	str.w	r2, [r3, #3640]	; 0xe38
 80105e8:	e797      	b.n	801051a <sendGSMCommand+0x12>
				initGSMSIM868();
 80105ea:	f7ff fbc7 	bl	800fd7c <initGSMSIM868>
 80105ee:	e794      	b.n	801051a <sendGSMCommand+0x12>
			if((gu32GSMCharacterTimeout == 0) && (gsmInstance.u32GSMResponseTimer != 0) && (u8GSMCharRcv == 1) && (gu32FotaFileReadTimer == 0))
 80105f0:	4b7c      	ldr	r3, [pc, #496]	; (80107e4 <sendGSMCommand+0x2dc>)
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	b93b      	cbnz	r3, 8010606 <sendGSMCommand+0xfe>
 80105f6:	4b76      	ldr	r3, [pc, #472]	; (80107d0 <sendGSMCommand+0x2c8>)
 80105f8:	f8d3 3e38 	ldr.w	r3, [r3, #3640]	; 0xe38
 80105fc:	b11b      	cbz	r3, 8010606 <sendGSMCommand+0xfe>
 80105fe:	4b7a      	ldr	r3, [pc, #488]	; (80107e8 <sendGSMCommand+0x2e0>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	2b01      	cmp	r3, #1
 8010604:	d025      	beq.n	8010652 <sendGSMCommand+0x14a>
			else if(gsmInstance.u32GSMResponseTimer == 0)
 8010606:	4b72      	ldr	r3, [pc, #456]	; (80107d0 <sendGSMCommand+0x2c8>)
 8010608:	f8d3 3e38 	ldr.w	r3, [r3, #3640]	; 0xe38
 801060c:	2b00      	cmp	r3, #0
 801060e:	d184      	bne.n	801051a <sendGSMCommand+0x12>
				gsmInstance.u8gsmRetryCount--;
 8010610:	4a6f      	ldr	r2, [pc, #444]	; (80107d0 <sendGSMCommand+0x2c8>)
 8010612:	f892 3e18 	ldrb.w	r3, [r2, #3608]	; 0xe18
 8010616:	3b01      	subs	r3, #1
 8010618:	b2db      	uxtb	r3, r3
 801061a:	f882 3e18 	strb.w	r3, [r2, #3608]	; 0xe18
				if(gsmInstance.u8gsmRetryCount == 0)
 801061e:	2b00      	cmp	r3, #0
 8010620:	f040 846f 	bne.w	8010f02 <sendGSMCommand+0x9fa>
					memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR, (GSM_RESPONSE_ARRAY_SIZE));
 8010624:	f202 4452 	addw	r4, r2, #1106	; 0x452
 8010628:	f640 12c4 	movw	r2, #2500	; 0x9c4
 801062c:	2100      	movs	r1, #0
 801062e:	4620      	mov	r0, r4
 8010630:	f004 ff6e 	bl	8015510 <memset>
					if(gsmInstance.enmcurrentTask == enmGSMTASK_UPLOADDATA)
 8010634:	f894 39f0 	ldrb.w	r3, [r4, #2544]	; 0x9f0
 8010638:	b2db      	uxtb	r3, r3
 801063a:	2b03      	cmp	r3, #3
 801063c:	f000 845b 	beq.w	8010ef6 <sendGSMCommand+0x9ee>
					initGSMSIM868();
 8010640:	f7ff fb9c 	bl	800fd7c <initGSMSIM868>
				gsmInstance.u32GSMResponseTimer = 0;
 8010644:	2300      	movs	r3, #0
 8010646:	4a62      	ldr	r2, [pc, #392]	; (80107d0 <sendGSMCommand+0x2c8>)
 8010648:	f8c2 3e38 	str.w	r3, [r2, #3640]	; 0xe38
				u8GSMCharRcv = 0;
 801064c:	4a66      	ldr	r2, [pc, #408]	; (80107e8 <sendGSMCommand+0x2e0>)
 801064e:	6013      	str	r3, [r2, #0]
}
 8010650:	e763      	b.n	801051a <sendGSMCommand+0x12>
			if((gu32GSMCharacterTimeout == 0) && (gsmInstance.u32GSMResponseTimer != 0) && (u8GSMCharRcv == 1) && (gu32FotaFileReadTimer == 0))
 8010652:	4b66      	ldr	r3, [pc, #408]	; (80107ec <sendGSMCommand+0x2e4>)
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d1d5      	bne.n	8010606 <sendGSMCommand+0xfe>
					const char *SOF = strstr((const char *)gsmInstance.as8GSM_Response_Buff, "$,");
 801065a:	4965      	ldr	r1, [pc, #404]	; (80107f0 <sendGSMCommand+0x2e8>)
 801065c:	4865      	ldr	r0, [pc, #404]	; (80107f4 <sendGSMCommand+0x2ec>)
 801065e:	f004 fff6 	bl	801564e <strstr>
					if(SOF != NULL)
 8010662:	4604      	mov	r4, r0
 8010664:	b328      	cbz	r0, 80106b2 <sendGSMCommand+0x1aa>
						const char *EOFF = strstr((const char *)gsmInstance.as8GSM_Response_Buff, "@");
 8010666:	2140      	movs	r1, #64	; 0x40
 8010668:	4862      	ldr	r0, [pc, #392]	; (80107f4 <sendGSMCommand+0x2ec>)
 801066a:	f004 ffb6 	bl	80155da <strchr>
						if(EOFF != NULL)
 801066e:	4605      	mov	r5, r0
 8010670:	b1d0      	cbz	r0, 80106a8 <sendGSMCommand+0x1a0>
							if(strstr((const char *)gsmInstance.as8GSM_Response_Buff,(const char *)dinfo) != NULL)
 8010672:	4961      	ldr	r1, [pc, #388]	; (80107f8 <sendGSMCommand+0x2f0>)
 8010674:	485f      	ldr	r0, [pc, #380]	; (80107f4 <sendGSMCommand+0x2ec>)
 8010676:	f004 ffea 	bl	801564e <strstr>
 801067a:	b180      	cbz	r0, 801069e <sendGSMCommand+0x196>
								const size_t mlen = EOFF - SOF;
 801067c:	1b2d      	subs	r5, r5, r4
								memset(gau8SUBRequest,0x00,sizeof(gau8SUBRequest));
 801067e:	4e5f      	ldr	r6, [pc, #380]	; (80107fc <sendGSMCommand+0x2f4>)
 8010680:	2296      	movs	r2, #150	; 0x96
 8010682:	2100      	movs	r1, #0
 8010684:	4630      	mov	r0, r6
 8010686:	f004 ff43 	bl	8015510 <memset>
								memcpy(gau8SUBRequest,SOF-1, (mlen+3));
 801068a:	1cea      	adds	r2, r5, #3
 801068c:	1e61      	subs	r1, r4, #1
 801068e:	4630      	mov	r0, r6
 8010690:	f004 ff30 	bl	80154f4 <memcpy>
								SUBTriggerFlag = TRUE;
 8010694:	4b50      	ldr	r3, [pc, #320]	; (80107d8 <sendGSMCommand+0x2d0>)
 8010696:	2201      	movs	r2, #1
 8010698:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 801069c:	e00d      	b.n	80106ba <sendGSMCommand+0x1b2>
								SUBTriggerFlag = FALSE;
 801069e:	4b4e      	ldr	r3, [pc, #312]	; (80107d8 <sendGSMCommand+0x2d0>)
 80106a0:	2200      	movs	r2, #0
 80106a2:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 80106a6:	e008      	b.n	80106ba <sendGSMCommand+0x1b2>
							SUBTriggerFlag = FALSE;
 80106a8:	4b4b      	ldr	r3, [pc, #300]	; (80107d8 <sendGSMCommand+0x2d0>)
 80106aa:	2200      	movs	r2, #0
 80106ac:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 80106b0:	e003      	b.n	80106ba <sendGSMCommand+0x1b2>
						SUBTriggerFlag = FALSE;
 80106b2:	4b49      	ldr	r3, [pc, #292]	; (80107d8 <sendGSMCommand+0x2d0>)
 80106b4:	2200      	movs	r2, #0
 80106b6:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
						,(const char *)gsmStateTableArray[gsmInstance.enmGSMCommand].atCommandResponse) != NULL)
 80106ba:	4845      	ldr	r0, [pc, #276]	; (80107d0 <sendGSMCommand+0x2c8>)
 80106bc:	f890 4e43 	ldrb.w	r4, [r0, #3651]	; 0xe43
				if(strstr((const char *)gsmInstance.as8GSM_Response_Buff
 80106c0:	4b46      	ldr	r3, [pc, #280]	; (80107dc <sendGSMCommand+0x2d4>)
 80106c2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80106c6:	f8d3 16d4 	ldr.w	r1, [r3, #1748]	; 0x6d4
 80106ca:	f200 4052 	addw	r0, r0, #1106	; 0x452
 80106ce:	f004 ffbe 	bl	801564e <strstr>
 80106d2:	2800      	cmp	r0, #0
 80106d4:	f000 83fd 	beq.w	8010ed2 <sendGSMCommand+0x9ca>
					switch(gsmInstance.enmGSMCommand)
 80106d8:	2c21      	cmp	r4, #33	; 0x21
 80106da:	d827      	bhi.n	801072c <sendGSMCommand+0x224>
 80106dc:	e8df f014 	tbh	[pc, r4, lsl #1]
 80106e0:	004c0022 	.word	0x004c0022
 80106e4:	005100e3 	.word	0x005100e3
 80106e8:	00960072 	.word	0x00960072
 80106ec:	00a0009b 	.word	0x00a0009b
 80106f0:	00d400a5 	.word	0x00d400a5
 80106f4:	00de00d9 	.word	0x00de00d9
 80106f8:	00ed00e8 	.word	0x00ed00e8
 80106fc:	010400ff 	.word	0x010400ff
 8010700:	01180109 	.word	0x01180109
 8010704:	0122011d 	.word	0x0122011d
 8010708:	013e0143 	.word	0x013e0143
 801070c:	012a0139 	.word	0x012a0139
 8010710:	0134012f 	.word	0x0134012f
 8010714:	014d0148 	.word	0x014d0148
 8010718:	01fb019f 	.word	0x01fb019f
 801071c:	02260200 	.word	0x02260200
 8010720:	02050298 	.word	0x02050298
							gsmInstance.u8IncrementGsmState = TRUE;
 8010724:	4b2a      	ldr	r3, [pc, #168]	; (80107d0 <sendGSMCommand+0x2c8>)
 8010726:	2201      	movs	r2, #1
 8010728:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
					gsmInstance.u8GSM_Response_Character_Counter = 0;
 801072c:	4b28      	ldr	r3, [pc, #160]	; (80107d0 <sendGSMCommand+0x2c8>)
 801072e:	2200      	movs	r2, #0
 8010730:	f8c3 2e3c 	str.w	r2, [r3, #3644]	; 0xe3c
					gsmInstance.enmGSMCommandState = enmGSM_CMDSEND;
 8010734:	2101      	movs	r1, #1
 8010736:	f883 1e41 	strb.w	r1, [r3, #3649]	; 0xe41
					gsmInstance.enmGSMCommandResponseState = enmGSM_SENDCMD;
 801073a:	f883 2e40 	strb.w	r2, [r3, #3648]	; 0xe40
					gsmInstance.u8gsmRetryCount = GSM_MAX_RETRY;
 801073e:	2105      	movs	r1, #5
 8010740:	f883 1e18 	strb.w	r1, [r3, #3608]	; 0xe18
					gsmInstance.u32GSMResponseTimer = 0;
 8010744:	f8c3 2e38 	str.w	r2, [r3, #3640]	; 0xe38
					u8GSMCharRcv = 0;
 8010748:	4927      	ldr	r1, [pc, #156]	; (80107e8 <sendGSMCommand+0x2e0>)
 801074a:	600a      	str	r2, [r1, #0]
					gsmInstance.u8GSM_Response_Character_Counter = 0;
 801074c:	f8c3 2e3c 	str.w	r2, [r3, #3644]	; 0xe3c
					if(gsmInstance.enmGSMCommand != enmGSMSTATE_READFILE)
 8010750:	f893 4e43 	ldrb.w	r4, [r3, #3651]	; 0xe43
 8010754:	2c20      	cmp	r4, #32
 8010756:	f040 83b4 	bne.w	8010ec2 <sendGSMCommand+0x9ba>
					if(gsmInstance.u8IncrementGsmState == TRUE)
 801075a:	4b1d      	ldr	r3, [pc, #116]	; (80107d0 <sendGSMCommand+0x2c8>)
 801075c:	f893 3e1c 	ldrb.w	r3, [r3, #3612]	; 0xe1c
 8010760:	2b01      	cmp	r3, #1
 8010762:	f47f aeda 	bne.w	801051a <sendGSMCommand+0x12>
						gsmInstance.enmGSMCommand++;
 8010766:	4b1a      	ldr	r3, [pc, #104]	; (80107d0 <sendGSMCommand+0x2c8>)
 8010768:	3401      	adds	r4, #1
 801076a:	f883 4e43 	strb.w	r4, [r3, #3651]	; 0xe43
						gsmInstance.u32GSMTimer = ONE_SEC;
 801076e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010772:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
 8010776:	e6d0      	b.n	801051a <sendGSMCommand+0x12>
							gsmInstance.u8IncrementGsmState = TRUE;
 8010778:	4b15      	ldr	r3, [pc, #84]	; (80107d0 <sendGSMCommand+0x2c8>)
 801077a:	2201      	movs	r2, #1
 801077c:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8010780:	e7d4      	b.n	801072c <sendGSMCommand+0x224>
								char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff
 8010782:	4e1c      	ldr	r6, [pc, #112]	; (80107f4 <sendGSMCommand+0x2ec>)
 8010784:	491e      	ldr	r1, [pc, #120]	; (8010800 <sendGSMCommand+0x2f8>)
 8010786:	4630      	mov	r0, r6
 8010788:	f004 ff61 	bl	801564e <strstr>
 801078c:	4604      	mov	r4, r0
								memset(gau8GSM_TimeStamp,0x00,(sizeof(char ) * strlen(gau8GSM_TimeStamp)));
 801078e:	4d1d      	ldr	r5, [pc, #116]	; (8010804 <sendGSMCommand+0x2fc>)
 8010790:	4628      	mov	r0, r5
 8010792:	f7f3 fd2d 	bl	80041f0 <strlen>
 8010796:	4602      	mov	r2, r0
 8010798:	2100      	movs	r1, #0
 801079a:	4628      	mov	r0, r5
 801079c:	f004 feb8 	bl	8015510 <memset>
								memcpy( gau8GSM_TimeStamp, &strLoc[8], strlen(strtok(&strLoc[8],"\r")));
 80107a0:	3408      	adds	r4, #8
 80107a2:	4919      	ldr	r1, [pc, #100]	; (8010808 <sendGSMCommand+0x300>)
 80107a4:	4620      	mov	r0, r4
 80107a6:	f005 fd9d 	bl	80162e4 <strtok>
 80107aa:	f7f3 fd21 	bl	80041f0 <strlen>
 80107ae:	4602      	mov	r2, r0
 80107b0:	4621      	mov	r1, r4
 80107b2:	4628      	mov	r0, r5
 80107b4:	f004 fe9e 	bl	80154f4 <memcpy>
								syncrtcwithNetworkTime();
 80107b8:	f7ff fce6 	bl	8010188 <syncrtcwithNetworkTime>
								gsmInstance.u8IncrementGsmState = TRUE;
 80107bc:	2301      	movs	r3, #1
 80107be:	f886 39ca 	strb.w	r3, [r6, #2506]	; 0x9ca
							break;
 80107c2:	e7b3      	b.n	801072c <sendGSMCommand+0x224>
							gsmInstance.u8IncrementGsmState = TRUE;
 80107c4:	4b02      	ldr	r3, [pc, #8]	; (80107d0 <sendGSMCommand+0x2c8>)
 80107c6:	2201      	movs	r2, #1
 80107c8:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 80107cc:	e7ae      	b.n	801072c <sendGSMCommand+0x224>
 80107ce:	bf00      	nop
 80107d0:	2000d390 	.word	0x2000d390
 80107d4:	40004c00 	.word	0x40004c00
 80107d8:	200043c4 	.word	0x200043c4
 80107dc:	20000010 	.word	0x20000010
 80107e0:	2000e504 	.word	0x2000e504
 80107e4:	20006144 	.word	0x20006144
 80107e8:	20005f68 	.word	0x20005f68
 80107ec:	20006158 	.word	0x20006158
 80107f0:	0801e420 	.word	0x0801e420
 80107f4:	2000d7e2 	.word	0x2000d7e2
 80107f8:	200097d4 	.word	0x200097d4
 80107fc:	200009b0 	.word	0x200009b0
 8010800:	0801e424 	.word	0x0801e424
 8010804:	2000044c 	.word	0x2000044c
 8010808:	0801e42c 	.word	0x0801e42c
							gsmInstance.u8IncrementGsmState = TRUE;
 801080c:	4bb9      	ldr	r3, [pc, #740]	; (8010af4 <sendGSMCommand+0x5ec>)
 801080e:	2201      	movs	r2, #1
 8010810:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8010814:	e78a      	b.n	801072c <sendGSMCommand+0x224>
							gsmInstance.u8IncrementGsmState = TRUE;
 8010816:	4bb7      	ldr	r3, [pc, #732]	; (8010af4 <sendGSMCommand+0x5ec>)
 8010818:	2201      	movs	r2, #1
 801081a:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 801081e:	e785      	b.n	801072c <sendGSMCommand+0x224>
							gsmInstance.u8IncrementGsmState = TRUE;
 8010820:	4bb4      	ldr	r3, [pc, #720]	; (8010af4 <sendGSMCommand+0x5ec>)
 8010822:	2201      	movs	r2, #1
 8010824:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8010828:	e780      	b.n	801072c <sendGSMCommand+0x224>
								char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff
 801082a:	4cb3      	ldr	r4, [pc, #716]	; (8010af8 <sendGSMCommand+0x5f0>)
 801082c:	49b3      	ldr	r1, [pc, #716]	; (8010afc <sendGSMCommand+0x5f4>)
 801082e:	4620      	mov	r0, r4
 8010830:	f004 ff0d 	bl	801564e <strstr>
								memcpy(gsmInstance.agsmSignalStrength, &strLoc[6], strlen(strtok(strLoc,"\r")));
 8010834:	1d85      	adds	r5, r0, #6
 8010836:	49b2      	ldr	r1, [pc, #712]	; (8010b00 <sendGSMCommand+0x5f8>)
 8010838:	f005 fd54 	bl	80162e4 <strtok>
 801083c:	f7f3 fcd8 	bl	80041f0 <strlen>
 8010840:	4602      	mov	r2, r0
 8010842:	4629      	mov	r1, r5
 8010844:	f5a4 706f 	sub.w	r0, r4, #956	; 0x3bc
 8010848:	f004 fe54 	bl	80154f4 <memcpy>
								if(gsmInstance.enmcurrentTask == enmGSMTASK_ISALIVE)
 801084c:	f894 39f0 	ldrb.w	r3, [r4, #2544]	; 0x9f0
 8010850:	f2a4 4452 	subw	r4, r4, #1106	; 0x452
 8010854:	b2db      	uxtb	r3, r3
 8010856:	2b06      	cmp	r3, #6
 8010858:	d004      	beq.n	8010864 <sendGSMCommand+0x35c>
									gsmInstance.u8IncrementGsmState = TRUE;
 801085a:	4ba6      	ldr	r3, [pc, #664]	; (8010af4 <sendGSMCommand+0x5ec>)
 801085c:	2201      	movs	r2, #1
 801085e:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
 8010862:	e763      	b.n	801072c <sendGSMCommand+0x224>
									gsmInstance.u32GSMHeartbeatTimer = ONE_MIN;
 8010864:	f64e 2260 	movw	r2, #60000	; 0xea60
 8010868:	f8c4 2e30 	str.w	r2, [r4, #3632]	; 0xe30
									gsmInstance.u32GSMTimer = FIVE_SEC;
 801086c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010870:	f8c4 2e24 	str.w	r2, [r4, #3620]	; 0xe24
									gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 8010874:	2203      	movs	r2, #3
 8010876:	f884 2e42 	strb.w	r2, [r4, #3650]	; 0xe42
									gsmInstance.enmGSMCommand = enmGSMSTATE_CMQTTTOPIC;
 801087a:	2217      	movs	r2, #23
 801087c:	f884 2e43 	strb.w	r2, [r4, #3651]	; 0xe43
									gsmInstance.u8IncrementGsmState = FALSE;
 8010880:	2200      	movs	r2, #0
 8010882:	f884 2e1c 	strb.w	r2, [r4, #3612]	; 0xe1c
 8010886:	e751      	b.n	801072c <sendGSMCommand+0x224>
							gsmInstance.u8IncrementGsmState = TRUE;
 8010888:	4b9a      	ldr	r3, [pc, #616]	; (8010af4 <sendGSMCommand+0x5ec>)
 801088a:	2201      	movs	r2, #1
 801088c:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8010890:	e74c      	b.n	801072c <sendGSMCommand+0x224>
							gsmInstance.u8IncrementGsmState = TRUE;
 8010892:	4b98      	ldr	r3, [pc, #608]	; (8010af4 <sendGSMCommand+0x5ec>)
 8010894:	2201      	movs	r2, #1
 8010896:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 801089a:	e747      	b.n	801072c <sendGSMCommand+0x224>
							gsmInstance.u8IncrementGsmState = TRUE;
 801089c:	4b95      	ldr	r3, [pc, #596]	; (8010af4 <sendGSMCommand+0x5ec>)
 801089e:	2201      	movs	r2, #1
 80108a0:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 80108a4:	e742      	b.n	801072c <sendGSMCommand+0x224>
							gsmInstance.u8IncrementGsmState = TRUE;
 80108a6:	4b93      	ldr	r3, [pc, #588]	; (8010af4 <sendGSMCommand+0x5ec>)
 80108a8:	2201      	movs	r2, #1
 80108aa:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 80108ae:	e73d      	b.n	801072c <sendGSMCommand+0x224>
							gsmInstance.u8IncrementGsmState = TRUE;
 80108b0:	4b90      	ldr	r3, [pc, #576]	; (8010af4 <sendGSMCommand+0x5ec>)
 80108b2:	2201      	movs	r2, #1
 80108b4:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 80108b8:	e738      	b.n	801072c <sendGSMCommand+0x224>
							if(strstr((const char *)gsmInstance.as8GSM_Response_Buff
 80108ba:	4992      	ldr	r1, [pc, #584]	; (8010b04 <sendGSMCommand+0x5fc>)
 80108bc:	488e      	ldr	r0, [pc, #568]	; (8010af8 <sendGSMCommand+0x5f0>)
 80108be:	f004 fec6 	bl	801564e <strstr>
 80108c2:	b138      	cbz	r0, 80108d4 <sendGSMCommand+0x3cc>
								gsmInstance.u8IncrementGsmState = FALSE;
 80108c4:	4b8b      	ldr	r3, [pc, #556]	; (8010af4 <sendGSMCommand+0x5ec>)
 80108c6:	2200      	movs	r2, #0
 80108c8:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
								gsmInstance.enmGSMCommand += 2;
 80108cc:	3402      	adds	r4, #2
 80108ce:	f883 4e43 	strb.w	r4, [r3, #3651]	; 0xe43
 80108d2:	e72b      	b.n	801072c <sendGSMCommand+0x224>
								gsmInstance.u8IncrementGsmState = TRUE;
 80108d4:	4b87      	ldr	r3, [pc, #540]	; (8010af4 <sendGSMCommand+0x5ec>)
 80108d6:	2201      	movs	r2, #1
 80108d8:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
 80108dc:	e726      	b.n	801072c <sendGSMCommand+0x224>
							gsmInstance.u8IncrementGsmState = TRUE;
 80108de:	4b85      	ldr	r3, [pc, #532]	; (8010af4 <sendGSMCommand+0x5ec>)
 80108e0:	2201      	movs	r2, #1
 80108e2:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 80108e6:	e721      	b.n	801072c <sendGSMCommand+0x224>
							gsmInstance.u8IncrementGsmState = TRUE;
 80108e8:	4b82      	ldr	r3, [pc, #520]	; (8010af4 <sendGSMCommand+0x5ec>)
 80108ea:	2201      	movs	r2, #1
 80108ec:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 80108f0:	e71c      	b.n	801072c <sendGSMCommand+0x224>
							if(gu8FlagNoTerminate == 1)
 80108f2:	4b85      	ldr	r3, [pc, #532]	; (8010b08 <sendGSMCommand+0x600>)
 80108f4:	f893 33b2 	ldrb.w	r3, [r3, #946]	; 0x3b2
 80108f8:	2b01      	cmp	r3, #1
 80108fa:	d004      	beq.n	8010906 <sendGSMCommand+0x3fe>
							gsmInstance.u8IncrementGsmState = TRUE;
 80108fc:	4b7d      	ldr	r3, [pc, #500]	; (8010af4 <sendGSMCommand+0x5ec>)
 80108fe:	2201      	movs	r2, #1
 8010900:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8010904:	e712      	b.n	801072c <sendGSMCommand+0x224>
								gu8FlagNoTerminate = 0;
 8010906:	4b80      	ldr	r3, [pc, #512]	; (8010b08 <sendGSMCommand+0x600>)
 8010908:	2200      	movs	r2, #0
 801090a:	f883 23b2 	strb.w	r2, [r3, #946]	; 0x3b2
 801090e:	e7f5      	b.n	80108fc <sendGSMCommand+0x3f4>
							gsmInstance.u8IncrementGsmState = TRUE;
 8010910:	4b78      	ldr	r3, [pc, #480]	; (8010af4 <sendGSMCommand+0x5ec>)
 8010912:	2201      	movs	r2, #1
 8010914:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8010918:	e708      	b.n	801072c <sendGSMCommand+0x224>
							gsmInstance.u8IncrementGsmState = TRUE;
 801091a:	4b76      	ldr	r3, [pc, #472]	; (8010af4 <sendGSMCommand+0x5ec>)
 801091c:	2201      	movs	r2, #1
 801091e:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8010922:	e703      	b.n	801072c <sendGSMCommand+0x224>
							gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 8010924:	4b73      	ldr	r3, [pc, #460]	; (8010af4 <sendGSMCommand+0x5ec>)
 8010926:	2203      	movs	r2, #3
 8010928:	f883 2e42 	strb.w	r2, [r3, #3650]	; 0xe42
			                  gsmInstance.u8IncrementGsmState = TRUE;
 801092c:	2201      	movs	r2, #1
 801092e:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
			                  break;
 8010932:	e6fb      	b.n	801072c <sendGSMCommand+0x224>
							gsmInstance.u8IncrementGsmState = TRUE;
 8010934:	4b6f      	ldr	r3, [pc, #444]	; (8010af4 <sendGSMCommand+0x5ec>)
 8010936:	2201      	movs	r2, #1
 8010938:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 801093c:	e6f6      	b.n	801072c <sendGSMCommand+0x224>
							gsmInstance.u8IncrementGsmState = TRUE;
 801093e:	4b6d      	ldr	r3, [pc, #436]	; (8010af4 <sendGSMCommand+0x5ec>)
 8010940:	2201      	movs	r2, #1
 8010942:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8010946:	e6f1      	b.n	801072c <sendGSMCommand+0x224>
								gsmInstance.u8IncrementGsmState = TRUE;
 8010948:	4b6a      	ldr	r3, [pc, #424]	; (8010af4 <sendGSMCommand+0x5ec>)
 801094a:	2201      	movs	r2, #1
 801094c:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
								break;
 8010950:	e6ec      	b.n	801072c <sendGSMCommand+0x224>
							gsmInstance.u8IncrementGsmState = TRUE;
 8010952:	4b68      	ldr	r3, [pc, #416]	; (8010af4 <sendGSMCommand+0x5ec>)
 8010954:	2201      	movs	r2, #1
 8010956:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 801095a:	e6e7      	b.n	801072c <sendGSMCommand+0x224>
							gsmInstance.u8IncrementGsmState = TRUE;
 801095c:	4b65      	ldr	r3, [pc, #404]	; (8010af4 <sendGSMCommand+0x5ec>)
 801095e:	2201      	movs	r2, #1
 8010960:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8010964:	e6e2      	b.n	801072c <sendGSMCommand+0x224>
							gsmInstance.u8IncrementGsmState = TRUE;
 8010966:	4b63      	ldr	r3, [pc, #396]	; (8010af4 <sendGSMCommand+0x5ec>)
 8010968:	2201      	movs	r2, #1
 801096a:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 801096e:	e6dd      	b.n	801072c <sendGSMCommand+0x224>
						gsmInstance.u8IncrementGsmState = TRUE;
 8010970:	4b60      	ldr	r3, [pc, #384]	; (8010af4 <sendGSMCommand+0x5ec>)
 8010972:	2201      	movs	r2, #1
 8010974:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
						break;
 8010978:	e6d8      	b.n	801072c <sendGSMCommand+0x224>
							char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff
 801097a:	4c5f      	ldr	r4, [pc, #380]	; (8010af8 <sendGSMCommand+0x5f0>)
 801097c:	4963      	ldr	r1, [pc, #396]	; (8010b0c <sendGSMCommand+0x604>)
 801097e:	4620      	mov	r0, r4
 8010980:	f004 fe65 	bl	801564e <strstr>
							memcpy(gsmInstance.u32GSMMQTTResponseCode, (char *)&strLoc[13], 1);
 8010984:	7b43      	ldrb	r3, [r0, #13]
 8010986:	f804 3c03 	strb.w	r3, [r4, #-3]
							switch(atoi(gsmInstance.u32GSMMQTTResponseCode))
 801098a:	1ee0      	subs	r0, r4, #3
 801098c:	f004 fb10 	bl	8014fb0 <atoi>
 8010990:	b9f8      	cbnz	r0, 80109d2 <sendGSMCommand+0x4ca>
								dequeue(&gsmPayload);
 8010992:	485f      	ldr	r0, [pc, #380]	; (8010b10 <sendGSMCommand+0x608>)
 8010994:	f002 fbfe 	bl	8013194 <dequeue>
								gsmInstance.u32GSMTimer = TWO_SEC; // Replace with Upload Frequency
 8010998:	f2a4 4052 	subw	r0, r4, #1106	; 0x452
 801099c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80109a0:	f8c0 3e24 	str.w	r3, [r0, #3620]	; 0xe24
								gu8MqttPayloadFlag = 0;
 80109a4:	4c5b      	ldr	r4, [pc, #364]	; (8010b14 <sendGSMCommand+0x60c>)
 80109a6:	2300      	movs	r3, #0
 80109a8:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
								gsmInstance.enmGSMCommand = enmGSMSTATE_CMQTTTOPIC;
 80109ac:	2217      	movs	r2, #23
 80109ae:	f880 2e43 	strb.w	r2, [r0, #3651]	; 0xe43
								gsmInstance.u8IncrementGsmState = FALSE;
 80109b2:	f880 3e1c 	strb.w	r3, [r0, #3612]	; 0xe1c
								u8LastMqttResponseCode = atoi(gsmInstance.u32GSMMQTTResponseCode);
 80109b6:	f200 404f 	addw	r0, r0, #1103	; 0x44f
 80109ba:	f004 faf9 	bl	8014fb0 <atoi>
 80109be:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
								HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 80109c2:	2120      	movs	r1, #32
 80109c4:	4854      	ldr	r0, [pc, #336]	; (8010b18 <sendGSMCommand+0x610>)
 80109c6:	f7f6 f98f 	bl	8006ce8 <HAL_GPIO_TogglePin>
								gu32GSMRestartTimer = THREE_MIN;
 80109ca:	4b54      	ldr	r3, [pc, #336]	; (8010b1c <sendGSMCommand+0x614>)
 80109cc:	4a54      	ldr	r2, [pc, #336]	; (8010b20 <sendGSMCommand+0x618>)
 80109ce:	601a      	str	r2, [r3, #0]
								break;
 80109d0:	e6ac      	b.n	801072c <sendGSMCommand+0x224>
									u8LastMqttResponseCode = atoi(gsmInstance.u32GSMMQTTResponseCode);
 80109d2:	4c54      	ldr	r4, [pc, #336]	; (8010b24 <sendGSMCommand+0x61c>)
 80109d4:	4620      	mov	r0, r4
 80109d6:	f004 faeb 	bl	8014fb0 <atoi>
 80109da:	4b4e      	ldr	r3, [pc, #312]	; (8010b14 <sendGSMCommand+0x60c>)
 80109dc:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
									gsmInstance.u8IllegalMqttResponseCounter++;
 80109e0:	f894 39cf 	ldrb.w	r3, [r4, #2511]	; 0x9cf
 80109e4:	3301      	adds	r3, #1
 80109e6:	b2db      	uxtb	r3, r3
 80109e8:	f884 39cf 	strb.w	r3, [r4, #2511]	; 0x9cf
									if(gsmInstance.u8IllegalMqttResponseCounter >= MAX_MQTT_ATTEMPTS)
 80109ec:	2b04      	cmp	r3, #4
 80109ee:	d906      	bls.n	80109fe <sendGSMCommand+0x4f6>
										initGSMSIM868();
 80109f0:	f7ff f9c4 	bl	800fd7c <initGSMSIM868>
										gu8CheckSMS = TRUE;
 80109f4:	4b47      	ldr	r3, [pc, #284]	; (8010b14 <sendGSMCommand+0x60c>)
 80109f6:	2201      	movs	r2, #1
 80109f8:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
										break;
 80109fc:	e696      	b.n	801072c <sendGSMCommand+0x224>
									u8LastMqttResponseCode = atoi(gsmInstance.u32GSMMQTTResponseCode);
 80109fe:	4c49      	ldr	r4, [pc, #292]	; (8010b24 <sendGSMCommand+0x61c>)
 8010a00:	4620      	mov	r0, r4
 8010a02:	f004 fad5 	bl	8014fb0 <atoi>
 8010a06:	4b43      	ldr	r3, [pc, #268]	; (8010b14 <sendGSMCommand+0x60c>)
 8010a08:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
									gsmInstance.enmGSMCommand = enmGSMSTATE_CMQTTTOPIC;
 8010a0c:	2217      	movs	r2, #23
 8010a0e:	f884 29f4 	strb.w	r2, [r4, #2548]	; 0x9f4
									gsmInstance.u32GSMResponseTimer = 0;
 8010a12:	2200      	movs	r2, #0
 8010a14:	f8c4 29e9 	str.w	r2, [r4, #2537]	; 0x9e9
									gsmInstance.u8IncrementGsmState = FALSE;
 8010a18:	f884 29cd 	strb.w	r2, [r4, #2509]	; 0x9cd
								break;
 8010a1c:	e686      	b.n	801072c <sendGSMCommand+0x224>
							char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff
 8010a1e:	4c36      	ldr	r4, [pc, #216]	; (8010af8 <sendGSMCommand+0x5f0>)
 8010a20:	4941      	ldr	r1, [pc, #260]	; (8010b28 <sendGSMCommand+0x620>)
 8010a22:	4620      	mov	r0, r4
 8010a24:	f004 fe13 	bl	801564e <strstr>
 8010a28:	4605      	mov	r5, r0
							memset(gsmInstance.agpsLocationData,0x00, strlen(gsmInstance.agpsLocationData));
 8010a2a:	f2a4 4452 	subw	r4, r4, #1106	; 0x452
 8010a2e:	4620      	mov	r0, r4
 8010a30:	f7f3 fbde 	bl	80041f0 <strlen>
 8010a34:	4602      	mov	r2, r0
 8010a36:	2100      	movs	r1, #0
 8010a38:	4620      	mov	r0, r4
 8010a3a:	f004 fd69 	bl	8015510 <memset>
							memcpy(gsmInstance.agpsLocationData, (char *)&strLoc[11], strlen(strtok(strLoc,"\r")));//strlen(strtok(strLoc,"\r\n")));
 8010a3e:	f105 060b 	add.w	r6, r5, #11
 8010a42:	492f      	ldr	r1, [pc, #188]	; (8010b00 <sendGSMCommand+0x5f8>)
 8010a44:	4628      	mov	r0, r5
 8010a46:	f005 fc4d 	bl	80162e4 <strtok>
 8010a4a:	f7f3 fbd1 	bl	80041f0 <strlen>
 8010a4e:	4602      	mov	r2, r0
 8010a50:	4631      	mov	r1, r6
 8010a52:	4620      	mov	r0, r4
 8010a54:	f004 fd4e 	bl	80154f4 <memcpy>
							gsmInstance.u8IncrementGsmState = FALSE;
 8010a58:	2300      	movs	r3, #0
 8010a5a:	f884 3e1c 	strb.w	r3, [r4, #3612]	; 0xe1c
							if(strlen(gsmInstance.agpsLocationData) < 10)
 8010a5e:	4620      	mov	r0, r4
 8010a60:	f7f3 fbc6 	bl	80041f0 <strlen>
 8010a64:	2809      	cmp	r0, #9
 8010a66:	d80e      	bhi.n	8010a86 <sendGSMCommand+0x57e>
								u32GPSTimeSyncFlag = FALSE;
 8010a68:	4b2a      	ldr	r3, [pc, #168]	; (8010b14 <sendGSMCommand+0x60c>)
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
							if(gu32ModuleInitComplete == 1)
 8010a70:	4b28      	ldr	r3, [pc, #160]	; (8010b14 <sendGSMCommand+0x60c>)
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	2b01      	cmp	r3, #1
 8010a76:	d00b      	beq.n	8010a90 <sendGSMCommand+0x588>
							else if(gu32ModuleInitComplete == 0)
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	f47f ae57 	bne.w	801072c <sendGSMCommand+0x224>
								gu32ModuleInitComplete = 1;
 8010a7e:	4b25      	ldr	r3, [pc, #148]	; (8010b14 <sendGSMCommand+0x60c>)
 8010a80:	2201      	movs	r2, #1
 8010a82:	601a      	str	r2, [r3, #0]
 8010a84:	e652      	b.n	801072c <sendGSMCommand+0x224>
								u32GPSTimeSyncFlag = TRUE;
 8010a86:	4b23      	ldr	r3, [pc, #140]	; (8010b14 <sendGSMCommand+0x60c>)
 8010a88:	2201      	movs	r2, #1
 8010a8a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8010a8e:	e7ef      	b.n	8010a70 <sendGSMCommand+0x568>
								if((gu32FotaRquestFlag == TRUE) && (isQueueEmpty(&gsmPayload) == 1))
 8010a90:	4b20      	ldr	r3, [pc, #128]	; (8010b14 <sendGSMCommand+0x60c>)
 8010a92:	685b      	ldr	r3, [r3, #4]
 8010a94:	2b01      	cmp	r3, #1
 8010a96:	d00b      	beq.n	8010ab0 <sendGSMCommand+0x5a8>
									gsmInstance.enmGSMCommand = enmGSMSTATE_ATCSQ;
 8010a98:	4b16      	ldr	r3, [pc, #88]	; (8010af4 <sendGSMCommand+0x5ec>)
 8010a9a:	2208      	movs	r2, #8
 8010a9c:	f883 2e43 	strb.w	r2, [r3, #3651]	; 0xe43
									gsmInstance.enmcurrentTask = enmGSMTASK_ISALIVE;
 8010aa0:	2206      	movs	r2, #6
 8010aa2:	f883 2e42 	strb.w	r2, [r3, #3650]	; 0xe42
								gsmInstance.u8IncrementGsmState = FALSE;
 8010aa6:	4b13      	ldr	r3, [pc, #76]	; (8010af4 <sendGSMCommand+0x5ec>)
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
 8010aae:	e63d      	b.n	801072c <sendGSMCommand+0x224>
								if((gu32FotaRquestFlag == TRUE) && (isQueueEmpty(&gsmPayload) == 1))
 8010ab0:	4817      	ldr	r0, [pc, #92]	; (8010b10 <sendGSMCommand+0x608>)
 8010ab2:	f002 fb89 	bl	80131c8 <isQueueEmpty>
 8010ab6:	2801      	cmp	r0, #1
 8010ab8:	d1ee      	bne.n	8010a98 <sendGSMCommand+0x590>
									initHTTPURLforFOTA();
 8010aba:	f7ff fcf3 	bl	80104a4 <initHTTPURLforFOTA>
									gsmInstance.enmGSMCommand = enmGSMSTATE_HTTPTINITCONFIG;
 8010abe:	4b0d      	ldr	r3, [pc, #52]	; (8010af4 <sendGSMCommand+0x5ec>)
 8010ac0:	221d      	movs	r2, #29
 8010ac2:	f883 2e43 	strb.w	r2, [r3, #3651]	; 0xe43
									gsmInstance.enmcurrentTask = enmGSMTASK_DOWNLOADFOTAFILE;
 8010ac6:	2208      	movs	r2, #8
 8010ac8:	f883 2e42 	strb.w	r2, [r3, #3650]	; 0xe42
									SUBTriggerFlag = FALSE;
 8010acc:	4b11      	ldr	r3, [pc, #68]	; (8010b14 <sendGSMCommand+0x60c>)
 8010ace:	2200      	movs	r2, #0
 8010ad0:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 8010ad4:	e7e7      	b.n	8010aa6 <sendGSMCommand+0x59e>
							gsmInstance.u8IncrementGsmState = TRUE;
 8010ad6:	4b07      	ldr	r3, [pc, #28]	; (8010af4 <sendGSMCommand+0x5ec>)
 8010ad8:	2201      	movs	r2, #1
 8010ada:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8010ade:	e625      	b.n	801072c <sendGSMCommand+0x224>
							gsmInstance.u8IncrementGsmState = TRUE;
 8010ae0:	4b04      	ldr	r3, [pc, #16]	; (8010af4 <sendGSMCommand+0x5ec>)
 8010ae2:	2201      	movs	r2, #1
 8010ae4:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8010ae8:	e620      	b.n	801072c <sendGSMCommand+0x224>
							gsmInstance.u8IncrementGsmState = TRUE;
 8010aea:	4b02      	ldr	r3, [pc, #8]	; (8010af4 <sendGSMCommand+0x5ec>)
 8010aec:	2201      	movs	r2, #1
 8010aee:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8010af2:	e61b      	b.n	801072c <sendGSMCommand+0x224>
 8010af4:	2000d390 	.word	0x2000d390
 8010af8:	2000d7e2 	.word	0x2000d7e2
 8010afc:	0801e430 	.word	0x0801e430
 8010b00:	0801e42c 	.word	0x0801e42c
 8010b04:	0801e438 	.word	0x0801e438
 8010b08:	20000010 	.word	0x20000010
 8010b0c:	0801e444 	.word	0x0801e444
 8010b10:	2000e504 	.word	0x2000e504
 8010b14:	200043c4 	.word	0x200043c4
 8010b18:	40020c00 	.word	0x40020c00
 8010b1c:	20003874 	.word	0x20003874
 8010b20:	0002bf20 	.word	0x0002bf20
 8010b24:	2000d7df 	.word	0x2000d7df
 8010b28:	0801e450 	.word	0x0801e450
								char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff
 8010b2c:	49c1      	ldr	r1, [pc, #772]	; (8010e34 <sendGSMCommand+0x92c>)
 8010b2e:	48c2      	ldr	r0, [pc, #776]	; (8010e38 <sendGSMCommand+0x930>)
 8010b30:	f004 fd8d 	bl	801564e <strstr>
								if(strLoc != NULL)
 8010b34:	4604      	mov	r4, r0
 8010b36:	2800      	cmp	r0, #0
 8010b38:	d04a      	beq.n	8010bd0 <sendGSMCommand+0x6c8>
									gu32GSMHangTimer = THREE_MIN;
 8010b3a:	4bc0      	ldr	r3, [pc, #768]	; (8010e3c <sendGSMCommand+0x934>)
 8010b3c:	4ac0      	ldr	r2, [pc, #768]	; (8010e40 <sendGSMCommand+0x938>)
 8010b3e:	601a      	str	r2, [r3, #0]
									memset(gau32RemoteConfigSizeinBytes,0x00, strlen(gau32RemoteConfigSizeinBytes));
 8010b40:	4dc0      	ldr	r5, [pc, #768]	; (8010e44 <sendGSMCommand+0x93c>)
 8010b42:	4628      	mov	r0, r5
 8010b44:	f7f3 fb54 	bl	80041f0 <strlen>
 8010b48:	4602      	mov	r2, r0
 8010b4a:	2100      	movs	r1, #0
 8010b4c:	4628      	mov	r0, r5
 8010b4e:	f004 fcdf 	bl	8015510 <memset>
									memcpy(gau32RemoteConfigSizeinBytes, &strLoc[4], strlen(strtok(&strLoc[4],"\r\n")));
 8010b52:	3404      	adds	r4, #4
 8010b54:	49bc      	ldr	r1, [pc, #752]	; (8010e48 <sendGSMCommand+0x940>)
 8010b56:	4620      	mov	r0, r4
 8010b58:	f005 fbc4 	bl	80162e4 <strtok>
 8010b5c:	f7f3 fb48 	bl	80041f0 <strlen>
 8010b60:	4602      	mov	r2, r0
 8010b62:	4621      	mov	r1, r4
 8010b64:	4628      	mov	r0, r5
 8010b66:	f004 fcc5 	bl	80154f4 <memcpy>
									gu32RemoteConfigSizeinBytes = strlen(gau32RemoteConfigSizeinBytes);
 8010b6a:	4628      	mov	r0, r5
 8010b6c:	f7f3 fb40 	bl	80041f0 <strlen>
 8010b70:	4bb6      	ldr	r3, [pc, #728]	; (8010e4c <sendGSMCommand+0x944>)
 8010b72:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
									gsmInstance.gu32RemoteConfigSizeinBytes = atoi(gau32RemoteConfigSizeinBytes);
 8010b76:	4628      	mov	r0, r5
 8010b78:	f004 fa1a 	bl	8014fb0 <atoi>
 8010b7c:	4bb4      	ldr	r3, [pc, #720]	; (8010e50 <sendGSMCommand+0x948>)
 8010b7e:	f8c3 0e34 	str.w	r0, [r3, #3636]	; 0xe34
									if((gsmInstance.gu32RemoteConfigSizeinBytes) <= ((STM32_FLASHSIZE /2) * 1000))//(MAX_RMT_CONFIG_SIZE_BYTES))
 8010b82:	4bb4      	ldr	r3, [pc, #720]	; (8010e54 <sendGSMCommand+0x94c>)
 8010b84:	881b      	ldrh	r3, [r3, #0]
 8010b86:	085a      	lsrs	r2, r3, #1
 8010b88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010b8c:	fb03 f302 	mul.w	r3, r3, r2
 8010b90:	4298      	cmp	r0, r3
 8010b92:	d80f      	bhi.n	8010bb4 <sendGSMCommand+0x6ac>
										gu32AttemptFota = TRUE;
 8010b94:	4bad      	ldr	r3, [pc, #692]	; (8010e4c <sendGSMCommand+0x944>)
 8010b96:	2201      	movs	r2, #1
 8010b98:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
										if(gsmInstance.gu32RemoteConfigSizeinBytes != 0)
 8010b9c:	b130      	cbz	r0, 8010bac <sendGSMCommand+0x6a4>
											updateHTTPReadLength(gsmInstance.gu32RemoteConfigSizeinBytes);
 8010b9e:	f7ff fbdd 	bl	801035c <updateHTTPReadLength>
									gsmInstance.u8IncrementGsmState = TRUE;
 8010ba2:	4bab      	ldr	r3, [pc, #684]	; (8010e50 <sendGSMCommand+0x948>)
 8010ba4:	2201      	movs	r2, #1
 8010ba6:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
 8010baa:	e5bf      	b.n	801072c <sendGSMCommand+0x224>
											Diagnostic(enmDiagnostic_RX_FILE_SIZE_ERROR);
 8010bac:	2006      	movs	r0, #6
 8010bae:	f7ff fca1 	bl	80104f4 <Diagnostic>
 8010bb2:	e7f6      	b.n	8010ba2 <sendGSMCommand+0x69a>
										gsmInstance.u8IncrementGsmState = FALSE;
 8010bb4:	4ca6      	ldr	r4, [pc, #664]	; (8010e50 <sendGSMCommand+0x948>)
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	f884 3e1c 	strb.w	r3, [r4, #3612]	; 0xe1c
										Diagnostic(enmDiagnostic_FILE_DONWLOAD_ERROR);
 8010bbc:	2007      	movs	r0, #7
 8010bbe:	f7ff fc99 	bl	80104f4 <Diagnostic>
										gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 8010bc2:	2303      	movs	r3, #3
 8010bc4:	f884 3e42 	strb.w	r3, [r4, #3650]	; 0xe42
										gsmInstance.enmGSMCommand = enmGSMSTATE_CMQTTTOPIC;
 8010bc8:	2317      	movs	r3, #23
 8010bca:	f884 3e43 	strb.w	r3, [r4, #3651]	; 0xe43
 8010bce:	e7e8      	b.n	8010ba2 <sendGSMCommand+0x69a>
									gsmInstance.u8IncrementGsmState = FALSE;
 8010bd0:	4e9f      	ldr	r6, [pc, #636]	; (8010e50 <sendGSMCommand+0x948>)
 8010bd2:	2500      	movs	r5, #0
 8010bd4:	f886 5e1c 	strb.w	r5, [r6, #3612]	; 0xe1c
									memset(gsmInstance.u32GSMMQTTResponseCode,0x00,sizeof(gsmInstance.u32GSMMQTTResponseCode));
 8010bd8:	f8a6 544f 	strh.w	r5, [r6, #1103]	; 0x44f
 8010bdc:	f886 5451 	strb.w	r5, [r6, #1105]	; 0x451
									memcpy(gsmInstance.u32GSMMQTTResponseCode, (char *)&strLoc[4], 3);
 8010be0:	4603      	mov	r3, r0
 8010be2:	f833 1f04 	ldrh.w	r1, [r3, #4]!
 8010be6:	789b      	ldrb	r3, [r3, #2]
 8010be8:	f8a6 144f 	strh.w	r1, [r6, #1103]	; 0x44f
 8010bec:	f886 3451 	strb.w	r3, [r6, #1105]	; 0x451
									Diagnostic(enmDiagnostic_FILE_DONWLOAD_ERROR);
 8010bf0:	2007      	movs	r0, #7
 8010bf2:	f7ff fc7f 	bl	80104f4 <Diagnostic>
								gu32FotaRquestFlag = FALSE;
 8010bf6:	4b95      	ldr	r3, [pc, #596]	; (8010e4c <sendGSMCommand+0x944>)
 8010bf8:	605d      	str	r5, [r3, #4]
								restoreHTTPURLforData();
 8010bfa:	f7ff fb55 	bl	80102a8 <restoreHTTPURLforData>
								gsmInstance.u8IncrementGsmState = FALSE;
 8010bfe:	f886 5e1c 	strb.w	r5, [r6, #3612]	; 0xe1c
								gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 8010c02:	2303      	movs	r3, #3
 8010c04:	f886 3e42 	strb.w	r3, [r6, #3650]	; 0xe42
								gsmInstance.enmGSMCommand = enmGSMSTATE_CMQTTTOPIC;
 8010c08:	2317      	movs	r3, #23
 8010c0a:	f886 3e43 	strb.w	r3, [r6, #3651]	; 0xe43
 8010c0e:	e58d      	b.n	801072c <sendGSMCommand+0x224>
									if(gu32OTATaskNumber == 0)
 8010c10:	4b91      	ldr	r3, [pc, #580]	; (8010e58 <sendGSMCommand+0x950>)
 8010c12:	f8d3 3458 	ldr.w	r3, [r3, #1112]	; 0x458
 8010c16:	b14b      	cbz	r3, 8010c2c <sendGSMCommand+0x724>
									else if(gu32OTATaskNumber == 1)
 8010c18:	2b01      	cmp	r3, #1
 8010c1a:	d030      	beq.n	8010c7e <sendGSMCommand+0x776>
										gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 8010c1c:	4b8c      	ldr	r3, [pc, #560]	; (8010e50 <sendGSMCommand+0x948>)
 8010c1e:	2203      	movs	r2, #3
 8010c20:	f883 2e42 	strb.w	r2, [r3, #3650]	; 0xe42
										gsmInstance.enmGSMCommand = enmGSMSTATE_CMQTTTOPIC;
 8010c24:	2217      	movs	r2, #23
 8010c26:	f883 2e43 	strb.w	r2, [r3, #3651]	; 0xe43
 8010c2a:	e57f      	b.n	801072c <sendGSMCommand+0x224>
										char *strloc = strstr((const char *)gsmInstance.as8GSM_Response_Buff,(const char *)"(");
 8010c2c:	4c82      	ldr	r4, [pc, #520]	; (8010e38 <sendGSMCommand+0x930>)
 8010c2e:	2128      	movs	r1, #40	; 0x28
 8010c30:	4620      	mov	r0, r4
 8010c32:	f004 fcd2 	bl	80155da <strchr>
 8010c36:	4605      	mov	r5, r0
										memset(gau8ConfigData,0x00,sizeof(gau8ConfigData));//
 8010c38:	4e88      	ldr	r6, [pc, #544]	; (8010e5c <sendGSMCommand+0x954>)
 8010c3a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8010c3e:	2100      	movs	r1, #0
 8010c40:	4630      	mov	r0, r6
 8010c42:	f004 fc65 	bl	8015510 <memset>
										memcpy(gau8ConfigData, (char *)strloc, gsmInstance.gu32RemoteConfigSizeinBytes);
 8010c46:	f8d4 29e2 	ldr.w	r2, [r4, #2530]	; 0x9e2
 8010c4a:	4629      	mov	r1, r5
 8010c4c:	4630      	mov	r0, r6
 8010c4e:	f004 fc51 	bl	80154f4 <memcpy>
										restoreHTTPURLforData();
 8010c52:	f7ff fb29 	bl	80102a8 <restoreHTTPURLforData>
										gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 8010c56:	2303      	movs	r3, #3
 8010c58:	f884 39f0 	strb.w	r3, [r4, #2544]	; 0x9f0
										gsmInstance.enmGSMCommand = enmGSMSTATE_HTTPTERMCONFIG;
 8010c5c:	2321      	movs	r3, #33	; 0x21
 8010c5e:	f884 39f1 	strb.w	r3, [r4, #2545]	; 0x9f1
										HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);	// LED ON
 8010c62:	2200      	movs	r2, #0
 8010c64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010c68:	487d      	ldr	r0, [pc, #500]	; (8010e60 <sendGSMCommand+0x958>)
 8010c6a:	f7f6 f837 	bl	8006cdc <HAL_GPIO_WritePin>
										gsmInstance.u8IncrementGsmState = FALSE;
 8010c6e:	2300      	movs	r3, #0
 8010c70:	f884 39ca 	strb.w	r3, [r4, #2506]	; 0x9ca
										gu32NewConfigAvailable = TRUE;
 8010c74:	4b75      	ldr	r3, [pc, #468]	; (8010e4c <sendGSMCommand+0x944>)
 8010c76:	2201      	movs	r2, #1
 8010c78:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8010c7c:	e556      	b.n	801072c <sendGSMCommand+0x224>
										if(u32ConfigFileReadComplete == 0)//u32FotaFileReadComplete
 8010c7e:	4b73      	ldr	r3, [pc, #460]	; (8010e4c <sendGSMCommand+0x944>)
 8010c80:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8010c84:	b163      	cbz	r3, 8010ca0 <sendGSMCommand+0x798>
										else if(u32ConfigFileReadComplete == 1)
 8010c86:	2b01      	cmp	r3, #1
 8010c88:	f000 808c 	beq.w	8010da4 <sendGSMCommand+0x89c>
											restoreHTTPURLforData();
 8010c8c:	f7ff fb0c 	bl	80102a8 <restoreHTTPURLforData>
											gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 8010c90:	4b6f      	ldr	r3, [pc, #444]	; (8010e50 <sendGSMCommand+0x948>)
 8010c92:	2203      	movs	r2, #3
 8010c94:	f883 2e42 	strb.w	r2, [r3, #3650]	; 0xe42
											gsmInstance.enmGSMCommand = enmGSMSTATE_CMQTTTOPIC;
 8010c98:	2217      	movs	r2, #23
 8010c9a:	f883 2e43 	strb.w	r2, [r3, #3651]	; 0xe43
 8010c9e:	e545      	b.n	801072c <sendGSMCommand+0x224>
											char *ptr = strstr((const char *)&gsmInstance.as8GSM_Response_Buff,"+HTTPREAD:");
 8010ca0:	4e65      	ldr	r6, [pc, #404]	; (8010e38 <sendGSMCommand+0x930>)
 8010ca2:	4970      	ldr	r1, [pc, #448]	; (8010e64 <sendGSMCommand+0x95c>)
 8010ca4:	4630      	mov	r0, r6
 8010ca6:	f004 fcd2 	bl	801564e <strstr>
											char *ptr2 = strstr(ptr,"\n");
 8010caa:	210a      	movs	r1, #10
 8010cac:	f004 fc95 	bl	80155da <strchr>
 8010cb0:	4604      	mov	r4, r0
											memset(gau8ConfigData,0x00,sizeof(gau8ConfigData));
 8010cb2:	4d6a      	ldr	r5, [pc, #424]	; (8010e5c <sendGSMCommand+0x954>)
 8010cb4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8010cb8:	2100      	movs	r1, #0
 8010cba:	4628      	mov	r0, r5
 8010cbc:	f004 fc28 	bl	8015510 <memset>
											memcpy(gau8ConfigData,(ptr2+1),gsmInstance.gu32RemoteConfigSizeinBytes);
 8010cc0:	f8d6 29e2 	ldr.w	r2, [r6, #2530]	; 0x9e2
 8010cc4:	1c61      	adds	r1, r4, #1
 8010cc6:	4628      	mov	r0, r5
 8010cc8:	f004 fc14 	bl	80154f4 <memcpy>
											if(u32MemoryWriteCycle == FALSE)
 8010ccc:	4b5f      	ldr	r3, [pc, #380]	; (8010e4c <sendGSMCommand+0x944>)
 8010cce:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d14a      	bne.n	8010d6c <sendGSMCommand+0x864>
												if(u32StartofFotaWrite == 0)
 8010cd6:	4b5d      	ldr	r3, [pc, #372]	; (8010e4c <sendGSMCommand+0x944>)
 8010cd8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8010cdc:	b303      	cbz	r3, 8010d20 <sendGSMCommand+0x818>
												u32FlashMemoryWriteStatus = WriteDatatoFlash(u32LastMemoryWriteLocation,(uint8_t *)gau8ConfigData,1024,1);
 8010cde:	2301      	movs	r3, #1
 8010ce0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010ce4:	495d      	ldr	r1, [pc, #372]	; (8010e5c <sendGSMCommand+0x954>)
 8010ce6:	4860      	ldr	r0, [pc, #384]	; (8010e68 <sendGSMCommand+0x960>)
 8010ce8:	6800      	ldr	r0, [r0, #0]
 8010cea:	f003 ff11 	bl	8014b10 <WriteDatatoFlash>
 8010cee:	4a57      	ldr	r2, [pc, #348]	; (8010e4c <sendGSMCommand+0x944>)
 8010cf0:	f8c2 0124 	str.w	r0, [r2, #292]	; 0x124
												if(u32FlashMemoryWriteStatus == SUCCESS)
 8010cf4:	bb80      	cbnz	r0, 8010d58 <sendGSMCommand+0x850>
													u32MemoryWriteCycle = TRUE;
 8010cf6:	4613      	mov	r3, r2
 8010cf8:	2201      	movs	r2, #1
 8010cfa:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
													updateHTTPReadLength(gsmInstance.gu32RemoteConfigSizeinBytes);
 8010cfe:	4c54      	ldr	r4, [pc, #336]	; (8010e50 <sendGSMCommand+0x948>)
 8010d00:	f8d4 0e34 	ldr.w	r0, [r4, #3636]	; 0xe34
 8010d04:	f7ff fb2a 	bl	801035c <updateHTTPReadLength>
													memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR,(GSM_RESPONSE_ARRAY_SIZE * sizeof(uint8_t)));
 8010d08:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8010d0c:	2100      	movs	r1, #0
 8010d0e:	f204 4052 	addw	r0, r4, #1106	; 0x452
 8010d12:	f004 fbfd 	bl	8015510 <memset>
											gsmInstance.u8IncrementGsmState = FALSE;
 8010d16:	4b4e      	ldr	r3, [pc, #312]	; (8010e50 <sendGSMCommand+0x948>)
 8010d18:	2200      	movs	r2, #0
 8010d1a:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
 8010d1e:	e505      	b.n	801072c <sendGSMCommand+0x224>
													FLASH_If_Init();
 8010d20:	f003 fea0 	bl	8014a64 <FLASH_If_Init>
													if(FLASH_If_Erase_User(0,getNewFirmwareStorageLocation()) != FLASHIF_OK)
 8010d24:	f003 ff36 	bl	8014b94 <getNewFirmwareStorageLocation>
 8010d28:	4601      	mov	r1, r0
 8010d2a:	2000      	movs	r0, #0
 8010d2c:	f003 fef6 	bl	8014b1c <FLASH_If_Erase_User>
 8010d30:	b920      	cbnz	r0, 8010d3c <sendGSMCommand+0x834>
													u32StartofFotaWrite = 1;
 8010d32:	4b46      	ldr	r3, [pc, #280]	; (8010e4c <sendGSMCommand+0x944>)
 8010d34:	2201      	movs	r2, #1
 8010d36:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 8010d3a:	e7d0      	b.n	8010cde <sendGSMCommand+0x7d6>
														restoreHTTPURLforData();
 8010d3c:	f7ff fab4 	bl	80102a8 <restoreHTTPURLforData>
														gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 8010d40:	f2a6 4352 	subw	r3, r6, #1106	; 0x452
 8010d44:	2203      	movs	r2, #3
 8010d46:	f883 2e42 	strb.w	r2, [r3, #3650]	; 0xe42
														gsmInstance.enmGSMCommand = enmGSMSTATE_CMQTTTOPIC;
 8010d4a:	2217      	movs	r2, #23
 8010d4c:	f883 2e43 	strb.w	r2, [r3, #3651]	; 0xe43
														Diagnostic(enmDiagnostic_FLASH_ERRASE_ERROR);
 8010d50:	2008      	movs	r0, #8
 8010d52:	f7ff fbcf 	bl	80104f4 <Diagnostic>
 8010d56:	e7ec      	b.n	8010d32 <sendGSMCommand+0x82a>
													restoreHTTPURLforData();
 8010d58:	f7ff faa6 	bl	80102a8 <restoreHTTPURLforData>
													gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 8010d5c:	4b3c      	ldr	r3, [pc, #240]	; (8010e50 <sendGSMCommand+0x948>)
 8010d5e:	2203      	movs	r2, #3
 8010d60:	f883 2e42 	strb.w	r2, [r3, #3650]	; 0xe42
													gsmInstance.enmGSMCommand = enmGSMSTATE_CMQTTTOPIC;
 8010d64:	2217      	movs	r2, #23
 8010d66:	f883 2e43 	strb.w	r2, [r3, #3651]	; 0xe43
 8010d6a:	e7d4      	b.n	8010d16 <sendGSMCommand+0x80e>
												u32FlashMemoryWriteStatus = WriteDatatoFlash(u32LastMemoryWriteLocation,(uint8_t *)gau8ConfigData,1024,1);
 8010d6c:	2301      	movs	r3, #1
 8010d6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010d72:	493a      	ldr	r1, [pc, #232]	; (8010e5c <sendGSMCommand+0x954>)
 8010d74:	483c      	ldr	r0, [pc, #240]	; (8010e68 <sendGSMCommand+0x960>)
 8010d76:	6800      	ldr	r0, [r0, #0]
 8010d78:	f003 feca 	bl	8014b10 <WriteDatatoFlash>
 8010d7c:	4a33      	ldr	r2, [pc, #204]	; (8010e4c <sendGSMCommand+0x944>)
 8010d7e:	f8c2 0124 	str.w	r0, [r2, #292]	; 0x124
												if(u32FlashMemoryWriteStatus == SUCCESS)
 8010d82:	b928      	cbnz	r0, 8010d90 <sendGSMCommand+0x888>
													updateHTTPReadLength(gsmInstance.gu32RemoteConfigSizeinBytes);
 8010d84:	4b32      	ldr	r3, [pc, #200]	; (8010e50 <sendGSMCommand+0x948>)
 8010d86:	f8d3 0e34 	ldr.w	r0, [r3, #3636]	; 0xe34
 8010d8a:	f7ff fae7 	bl	801035c <updateHTTPReadLength>
 8010d8e:	e7c2      	b.n	8010d16 <sendGSMCommand+0x80e>
													restoreHTTPURLforData();
 8010d90:	f7ff fa8a 	bl	80102a8 <restoreHTTPURLforData>
													gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 8010d94:	4b2e      	ldr	r3, [pc, #184]	; (8010e50 <sendGSMCommand+0x948>)
 8010d96:	2203      	movs	r2, #3
 8010d98:	f883 2e42 	strb.w	r2, [r3, #3650]	; 0xe42
													gsmInstance.enmGSMCommand = enmGSMSTATE_CMQTTTOPIC;
 8010d9c:	2217      	movs	r2, #23
 8010d9e:	f883 2e43 	strb.w	r2, [r3, #3651]	; 0xe43
 8010da2:	e7b8      	b.n	8010d16 <sendGSMCommand+0x80e>
											char *ptr = strstr((const char *)&gsmInstance.as8GSM_Response_Buff,"+HTTPREAD:");
 8010da4:	4e24      	ldr	r6, [pc, #144]	; (8010e38 <sendGSMCommand+0x930>)
 8010da6:	492f      	ldr	r1, [pc, #188]	; (8010e64 <sendGSMCommand+0x95c>)
 8010da8:	4630      	mov	r0, r6
 8010daa:	f004 fc50 	bl	801564e <strstr>
											char *ptr2 = strstr(ptr,"\n");
 8010dae:	210a      	movs	r1, #10
 8010db0:	f004 fc13 	bl	80155da <strchr>
 8010db4:	4604      	mov	r4, r0
											memset(gau8ConfigData,0x00,sizeof(gau8ConfigData));
 8010db6:	4d29      	ldr	r5, [pc, #164]	; (8010e5c <sendGSMCommand+0x954>)
 8010db8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8010dbc:	2100      	movs	r1, #0
 8010dbe:	4628      	mov	r0, r5
 8010dc0:	f004 fba6 	bl	8015510 <memset>
											memcpy(gau8ConfigData,(ptr2+1),gsmInstance.gu32RemoteConfigSizeinBytes);
 8010dc4:	f8d6 29e2 	ldr.w	r2, [r6, #2530]	; 0x9e2
 8010dc8:	1c61      	adds	r1, r4, #1
 8010dca:	4628      	mov	r0, r5
 8010dcc:	f004 fb92 	bl	80154f4 <memcpy>
											if(u32MemoryWriteCycle == FALSE)
 8010dd0:	4b1e      	ldr	r3, [pc, #120]	; (8010e4c <sendGSMCommand+0x944>)
 8010dd2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d04a      	beq.n	8010e70 <sendGSMCommand+0x968>
											u32FlashMemoryWriteStatus = WriteDatatoFlash(u32LastMemoryWriteLocation,(uint8_t *)gau8ConfigData,1024,1);
 8010dda:	2301      	movs	r3, #1
 8010ddc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010de0:	491e      	ldr	r1, [pc, #120]	; (8010e5c <sendGSMCommand+0x954>)
 8010de2:	4821      	ldr	r0, [pc, #132]	; (8010e68 <sendGSMCommand+0x960>)
 8010de4:	6800      	ldr	r0, [r0, #0]
 8010de6:	f003 fe93 	bl	8014b10 <WriteDatatoFlash>
 8010dea:	4b18      	ldr	r3, [pc, #96]	; (8010e4c <sendGSMCommand+0x944>)
 8010dec:	f8c3 0124 	str.w	r0, [r3, #292]	; 0x124
											if(flashWriteBootSection(getNewFirmwareStorageLocation()) == 0)
 8010df0:	f003 fed0 	bl	8014b94 <getNewFirmwareStorageLocation>
 8010df4:	f003 fef6 	bl	8014be4 <flashWriteBootSection>
 8010df8:	2800      	cmp	r0, #0
 8010dfa:	d155      	bne.n	8010ea8 <sendGSMCommand+0x9a0>
												gu32AttemptFota =  FALSE;
 8010dfc:	4b13      	ldr	r3, [pc, #76]	; (8010e4c <sendGSMCommand+0x944>)
 8010dfe:	2200      	movs	r2, #0
 8010e00:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
												if(u32MemoryWriteCycle == TRUE)
 8010e04:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8010e08:	2b01      	cmp	r3, #1
 8010e0a:	d049      	beq.n	8010ea0 <sendGSMCommand+0x998>
												gu32FotaRquestFlag = FALSE;
 8010e0c:	2000      	movs	r0, #0
 8010e0e:	4b0f      	ldr	r3, [pc, #60]	; (8010e4c <sendGSMCommand+0x944>)
 8010e10:	6058      	str	r0, [r3, #4]
												Diagnostic(enmDiagnostic_FOTA_SUCCESS_OK);
 8010e12:	f7ff fb6f 	bl	80104f4 <Diagnostic>
												FOTACompleteFlag = TRUE;
 8010e16:	4b15      	ldr	r3, [pc, #84]	; (8010e6c <sendGSMCommand+0x964>)
 8010e18:	2201      	movs	r2, #1
 8010e1a:	701a      	strb	r2, [r3, #0]
												gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 8010e1c:	4b0c      	ldr	r3, [pc, #48]	; (8010e50 <sendGSMCommand+0x948>)
 8010e1e:	2203      	movs	r2, #3
 8010e20:	f883 2e42 	strb.w	r2, [r3, #3650]	; 0xe42
												gsmInstance.enmGSMCommand = enmGSMSTATE_CMQTTTOPIC;
 8010e24:	2217      	movs	r2, #23
 8010e26:	f883 2e43 	strb.w	r2, [r3, #3651]	; 0xe43
											u32MemoryWriteCycle = TRUE;
 8010e2a:	4b08      	ldr	r3, [pc, #32]	; (8010e4c <sendGSMCommand+0x944>)
 8010e2c:	2201      	movs	r2, #1
 8010e2e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 8010e32:	e47b      	b.n	801072c <sendGSMCommand+0x224>
 8010e34:	0801e45c 	.word	0x0801e45c
 8010e38:	2000d7e2 	.word	0x2000d7e2
 8010e3c:	20006148 	.word	0x20006148
 8010e40:	0002bf20 	.word	0x0002bf20
 8010e44:	20000a48 	.word	0x20000a48
 8010e48:	0801e374 	.word	0x0801e374
 8010e4c:	200043c4 	.word	0x200043c4
 8010e50:	2000d390 	.word	0x2000d390
 8010e54:	1fff7a22 	.word	0x1fff7a22
 8010e58:	20000010 	.word	0x20000010
 8010e5c:	2000c9cc 	.word	0x2000c9cc
 8010e60:	40020c00 	.word	0x40020c00
 8010e64:	0801e464 	.word	0x0801e464
 8010e68:	20006024 	.word	0x20006024
 8010e6c:	20005d14 	.word	0x20005d14
												FLASH_If_Init();
 8010e70:	f003 fdf8 	bl	8014a64 <FLASH_If_Init>
												u32MemoryEraseStatus = FLASH_If_Erase_User(0,getNewFirmwareStorageLocation());
 8010e74:	f003 fe8e 	bl	8014b94 <getNewFirmwareStorageLocation>
 8010e78:	4601      	mov	r1, r0
 8010e7a:	2000      	movs	r0, #0
 8010e7c:	f003 fe4e 	bl	8014b1c <FLASH_If_Erase_User>
 8010e80:	4a29      	ldr	r2, [pc, #164]	; (8010f28 <sendGSMCommand+0xa20>)
 8010e82:	f8c2 0128 	str.w	r0, [r2, #296]	; 0x128
												if(u32MemoryEraseStatus != FLASHIF_OK)
 8010e86:	2800      	cmp	r0, #0
 8010e88:	d0a7      	beq.n	8010dda <sendGSMCommand+0x8d2>
													restoreHTTPURLforData();
 8010e8a:	f7ff fa0d 	bl	80102a8 <restoreHTTPURLforData>
													gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 8010e8e:	f2a6 4352 	subw	r3, r6, #1106	; 0x452
 8010e92:	2203      	movs	r2, #3
 8010e94:	f883 2e42 	strb.w	r2, [r3, #3650]	; 0xe42
													gsmInstance.enmGSMCommand = enmGSMSTATE_CMQTTTOPIC;
 8010e98:	2217      	movs	r2, #23
 8010e9a:	f883 2e43 	strb.w	r2, [r3, #3651]	; 0xe43
 8010e9e:	e79c      	b.n	8010dda <sendGSMCommand+0x8d2>
													u32MemoryWriteCycle = FALSE;
 8010ea0:	4b21      	ldr	r3, [pc, #132]	; (8010f28 <sendGSMCommand+0xa20>)
 8010ea2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 8010ea6:	e7b1      	b.n	8010e0c <sendGSMCommand+0x904>
												gu32FotaRquestFlag = FALSE;
 8010ea8:	4b1f      	ldr	r3, [pc, #124]	; (8010f28 <sendGSMCommand+0xa20>)
 8010eaa:	2200      	movs	r2, #0
 8010eac:	605a      	str	r2, [r3, #4]
												restoreHTTPURLforData();
 8010eae:	f7ff f9fb 	bl	80102a8 <restoreHTTPURLforData>
												gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 8010eb2:	4b1e      	ldr	r3, [pc, #120]	; (8010f2c <sendGSMCommand+0xa24>)
 8010eb4:	2203      	movs	r2, #3
 8010eb6:	f883 2e42 	strb.w	r2, [r3, #3650]	; 0xe42
												gsmInstance.enmGSMCommand = enmGSMSTATE_CMQTTTOPIC;
 8010eba:	2217      	movs	r2, #23
 8010ebc:	f883 2e43 	strb.w	r2, [r3, #3651]	; 0xe43
 8010ec0:	e7b3      	b.n	8010e2a <sendGSMCommand+0x922>
						memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR,(GSM_RESPONSE_ARRAY_SIZE * sizeof(uint8_t))); /* Clear Response Buffer */
 8010ec2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8010ec6:	2100      	movs	r1, #0
 8010ec8:	f203 4052 	addw	r0, r3, #1106	; 0x452
 8010ecc:	f004 fb20 	bl	8015510 <memset>
 8010ed0:	e443      	b.n	801075a <sendGSMCommand+0x252>
					gsmInstance.u8GSM_Response_Character_Counter = 0;
 8010ed2:	4816      	ldr	r0, [pc, #88]	; (8010f2c <sendGSMCommand+0xa24>)
 8010ed4:	2400      	movs	r4, #0
 8010ed6:	f8c0 4e3c 	str.w	r4, [r0, #3644]	; 0xe3c
					gsmInstance.enmGSMCommandResponseState = enmGSM_CMDSEND;
 8010eda:	2301      	movs	r3, #1
 8010edc:	f880 3e40 	strb.w	r3, [r0, #3648]	; 0xe40
					memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR,(GSM_RESPONSE_ARRAY_SIZE * sizeof(uint8_t))); /* Clear Response Buffer */
 8010ee0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8010ee4:	4621      	mov	r1, r4
 8010ee6:	f200 4052 	addw	r0, r0, #1106	; 0x452
 8010eea:	f004 fb11 	bl	8015510 <memset>
					u8GSMCharRcv = 0;
 8010eee:	4b10      	ldr	r3, [pc, #64]	; (8010f30 <sendGSMCommand+0xa28>)
 8010ef0:	601c      	str	r4, [r3, #0]
 8010ef2:	f7ff bb12 	b.w	801051a <sendGSMCommand+0x12>
						gu8CheckSMS = TRUE;
 8010ef6:	4b0c      	ldr	r3, [pc, #48]	; (8010f28 <sendGSMCommand+0xa20>)
 8010ef8:	2201      	movs	r2, #1
 8010efa:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 8010efe:	f7ff bb9f 	b.w	8010640 <sendGSMCommand+0x138>
					gsmInstance.enmGSMCommandState = enmGSM_CMDSEND;
 8010f02:	4c0a      	ldr	r4, [pc, #40]	; (8010f2c <sendGSMCommand+0xa24>)
 8010f04:	2301      	movs	r3, #1
 8010f06:	f884 3e41 	strb.w	r3, [r4, #3649]	; 0xe41
					gsmInstance.enmGSMCommandResponseState = enmGSM_SENDCMD;
 8010f0a:	2100      	movs	r1, #0
 8010f0c:	f884 1e40 	strb.w	r1, [r4, #3648]	; 0xe40
					memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR, (GSM_RESPONSE_ARRAY_SIZE));
 8010f10:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8010f14:	f204 4052 	addw	r0, r4, #1106	; 0x452
 8010f18:	f004 fafa 	bl	8015510 <memset>
					gsmInstance.u32GSMTimer = ONE_SEC;
 8010f1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010f20:	f8c4 3e24 	str.w	r3, [r4, #3620]	; 0xe24
 8010f24:	f7ff bb8e 	b.w	8010644 <sendGSMCommand+0x13c>
 8010f28:	200043c4 	.word	0x200043c4
 8010f2c:	2000d390 	.word	0x2000d390
 8010f30:	20005f68 	.word	0x20005f68

08010f34 <operateGSMSIM868>:
	if(gsmInstance.u32GSMTimer != 0)
 8010f34:	4b97      	ldr	r3, [pc, #604]	; (8011194 <operateGSMSIM868+0x260>)
 8010f36:	f8d3 3e24 	ldr.w	r3, [r3, #3620]	; 0xe24
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	f040 8128 	bne.w	8011190 <operateGSMSIM868+0x25c>
{
 8010f40:	b510      	push	{r4, lr}
 8010f42:	f5ad 5d8b 	sub.w	sp, sp, #4448	; 0x1160
 8010f46:	b082      	sub	sp, #8
	switch(gsmInstance.enmcurrentTask)
 8010f48:	4b92      	ldr	r3, [pc, #584]	; (8011194 <operateGSMSIM868+0x260>)
 8010f4a:	f893 3e42 	ldrb.w	r3, [r3, #3650]	; 0xe42
 8010f4e:	b2db      	uxtb	r3, r3
 8010f50:	2b09      	cmp	r3, #9
 8010f52:	f200 811a 	bhi.w	801118a <operateGSMSIM868+0x256>
 8010f56:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010f5a:	000a      	.short	0x000a
 8010f5c:	00b20030 	.word	0x00b20030
 8010f60:	007600c5 	.word	0x007600c5
 8010f64:	00640094 	.word	0x00640094
 8010f68:	01030100 	.word	0x01030100
 8010f6c:	0110      	.short	0x0110
			if(gsmInstance.enmGSMPwrState == enmGSM_PWRNOTSTARTED)
 8010f6e:	4b89      	ldr	r3, [pc, #548]	; (8011194 <operateGSMSIM868+0x260>)
 8010f70:	f893 3e44 	ldrb.w	r3, [r3, #3652]	; 0xe44
 8010f74:	b19b      	cbz	r3, 8010f9e <operateGSMSIM868+0x6a>
			else if(gsmInstance.enmGSMPwrState == enmGSM_PWRSTARTED)
 8010f76:	2b01      	cmp	r3, #1
 8010f78:	f040 80ad 	bne.w	80110d6 <operateGSMSIM868+0x1a2>
				HAL_GPIO_WritePin(GSM_PWR_KEY_GPIO_Port,GSM_PWR_KEY_Pin,GPIO_PIN_RESET);
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	2180      	movs	r1, #128	; 0x80
 8010f80:	4885      	ldr	r0, [pc, #532]	; (8011198 <operateGSMSIM868+0x264>)
 8010f82:	f7f5 feab 	bl	8006cdc <HAL_GPIO_WritePin>
				gsmInstance.u32GSMTimer = TWO_SEC;
 8010f86:	4b83      	ldr	r3, [pc, #524]	; (8011194 <operateGSMSIM868+0x260>)
 8010f88:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8010f8c:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
				gsmInstance.enmcurrentTask = enmGSMTASK_INITMODULE;
 8010f90:	2201      	movs	r2, #1
 8010f92:	f883 2e42 	strb.w	r2, [r3, #3650]	; 0xe42
				gsmInstance.enmGSMPwrState = enmGSM_PWRCOMPLETED;
 8010f96:	2202      	movs	r2, #2
 8010f98:	f883 2e44 	strb.w	r2, [r3, #3652]	; 0xe44
 8010f9c:	e09b      	b.n	80110d6 <operateGSMSIM868+0x1a2>
				HAL_GPIO_WritePin(GSM_PWR_KEY_GPIO_Port,GSM_PWR_KEY_Pin,GPIO_PIN_SET);
 8010f9e:	2201      	movs	r2, #1
 8010fa0:	2180      	movs	r1, #128	; 0x80
 8010fa2:	487d      	ldr	r0, [pc, #500]	; (8011198 <operateGSMSIM868+0x264>)
 8010fa4:	f7f5 fe9a 	bl	8006cdc <HAL_GPIO_WritePin>
				gsmInstance.u32GSMTimer = FIVE_SEC;
 8010fa8:	4b7a      	ldr	r3, [pc, #488]	; (8011194 <operateGSMSIM868+0x260>)
 8010faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8010fae:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
				gsmInstance.enmGSMPwrState = enmGSM_PWRSTARTED;
 8010fb2:	2201      	movs	r2, #1
 8010fb4:	f883 2e44 	strb.w	r2, [r3, #3652]	; 0xe44
 8010fb8:	e08d      	b.n	80110d6 <operateGSMSIM868+0x1a2>
			if(gsmInstance.enmGSMCommandState == enmGSM_CMDTIMEOUT)
 8010fba:	4b76      	ldr	r3, [pc, #472]	; (8011194 <operateGSMSIM868+0x260>)
 8010fbc:	f893 3e41 	ldrb.w	r3, [r3, #3649]	; 0xe41
 8010fc0:	b2db      	uxtb	r3, r3
 8010fc2:	2b05      	cmp	r3, #5
 8010fc4:	d011      	beq.n	8010fea <operateGSMSIM868+0xb6>
				if(gsmInstance.enmGSMCommand == enmGSMSTATE_CMQTTTOPIC)
 8010fc6:	4b73      	ldr	r3, [pc, #460]	; (8011194 <operateGSMSIM868+0x260>)
 8010fc8:	f893 3e43 	ldrb.w	r3, [r3, #3651]	; 0xe43
 8010fcc:	2b17      	cmp	r3, #23
 8010fce:	d11b      	bne.n	8011008 <operateGSMSIM868+0xd4>
					if(gu8CheckSMS == TRUE)
 8010fd0:	4b72      	ldr	r3, [pc, #456]	; (801119c <operateGSMSIM868+0x268>)
 8010fd2:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8010fd6:	2b01      	cmp	r3, #1
 8010fd8:	d00a      	beq.n	8010ff0 <operateGSMSIM868+0xbc>
						gsmInstance.enmGSMCommand = enmGSMSTATE_GPSINFO;
 8010fda:	4b6e      	ldr	r3, [pc, #440]	; (8011194 <operateGSMSIM868+0x260>)
 8010fdc:	221c      	movs	r2, #28
 8010fde:	f883 2e43 	strb.w	r2, [r3, #3651]	; 0xe43
						gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
 8010fe2:	2202      	movs	r2, #2
 8010fe4:	f883 2e42 	strb.w	r2, [r3, #3650]	; 0xe42
 8010fe8:	e075      	b.n	80110d6 <operateGSMSIM868+0x1a2>
				initGSMSIM868();
 8010fea:	f7fe fec7 	bl	800fd7c <initGSMSIM868>
 8010fee:	e072      	b.n	80110d6 <operateGSMSIM868+0x1a2>
						gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 8010ff0:	4b68      	ldr	r3, [pc, #416]	; (8011194 <operateGSMSIM868+0x260>)
 8010ff2:	2203      	movs	r2, #3
 8010ff4:	f883 2e42 	strb.w	r2, [r3, #3650]	; 0xe42
						gsmInstance.enmGSMCommand = enmGSMSTATE_CMQTTTOPIC;
 8010ff8:	2217      	movs	r2, #23
 8010ffa:	f883 2e43 	strb.w	r2, [r3, #3651]	; 0xe43
						gu8CheckSMS = FALSE;
 8010ffe:	4b67      	ldr	r3, [pc, #412]	; (801119c <operateGSMSIM868+0x268>)
 8011000:	2200      	movs	r2, #0
 8011002:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 8011006:	e066      	b.n	80110d6 <operateGSMSIM868+0x1a2>
					sendGSMCommand(gsmInstance);
 8011008:	4c62      	ldr	r4, [pc, #392]	; (8011194 <operateGSMSIM868+0x260>)
 801100a:	f241 1264 	movw	r2, #4452	; 0x1164
 801100e:	f104 0110 	add.w	r1, r4, #16
 8011012:	4668      	mov	r0, sp
 8011014:	f004 fa6e 	bl	80154f4 <memcpy>
 8011018:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801101c:	f7ff fa74 	bl	8010508 <sendGSMCommand>
 8011020:	e059      	b.n	80110d6 <operateGSMSIM868+0x1a2>
			if(gsmInstance.u32GSMHeartbeatTimer == 0)
 8011022:	4b5c      	ldr	r3, [pc, #368]	; (8011194 <operateGSMSIM868+0x260>)
 8011024:	f8d3 3e30 	ldr.w	r3, [r3, #3632]	; 0xe30
 8011028:	2b00      	cmp	r3, #0
 801102a:	d154      	bne.n	80110d6 <operateGSMSIM868+0x1a2>
				sendGSMCommand(gsmInstance);
 801102c:	4c59      	ldr	r4, [pc, #356]	; (8011194 <operateGSMSIM868+0x260>)
 801102e:	f241 1264 	movw	r2, #4452	; 0x1164
 8011032:	f104 0110 	add.w	r1, r4, #16
 8011036:	4668      	mov	r0, sp
 8011038:	f004 fa5c 	bl	80154f4 <memcpy>
 801103c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011040:	f7ff fa62 	bl	8010508 <sendGSMCommand>
 8011044:	e047      	b.n	80110d6 <operateGSMSIM868+0x1a2>
			if(gu8ReadSMS == TRUE)
 8011046:	4b55      	ldr	r3, [pc, #340]	; (801119c <operateGSMSIM868+0x268>)
 8011048:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 801104c:	2b01      	cmp	r3, #1
 801104e:	d00b      	beq.n	8011068 <operateGSMSIM868+0x134>
				gsmInstance.enmGSMCommand = enmGSMSTATE_GPSINFO;
 8011050:	4b50      	ldr	r3, [pc, #320]	; (8011194 <operateGSMSIM868+0x260>)
 8011052:	221c      	movs	r2, #28
 8011054:	f883 2e43 	strb.w	r2, [r3, #3651]	; 0xe43
				gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
 8011058:	2202      	movs	r2, #2
 801105a:	f883 2e42 	strb.w	r2, [r3, #3650]	; 0xe42
				gsmInstance.u32GSMTimer = TWO_SEC;
 801105e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8011062:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
 8011066:	e036      	b.n	80110d6 <operateGSMSIM868+0x1a2>
				sendGSMCommand(gsmInstance);
 8011068:	4c4a      	ldr	r4, [pc, #296]	; (8011194 <operateGSMSIM868+0x260>)
 801106a:	f241 1264 	movw	r2, #4452	; 0x1164
 801106e:	f104 0110 	add.w	r1, r4, #16
 8011072:	4668      	mov	r0, sp
 8011074:	f004 fa3e 	bl	80154f4 <memcpy>
 8011078:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801107c:	f7ff fa44 	bl	8010508 <sendGSMCommand>
 8011080:	e029      	b.n	80110d6 <operateGSMSIM868+0x1a2>
			if(gu8SendSMS == TRUE)
 8011082:	4b46      	ldr	r3, [pc, #280]	; (801119c <operateGSMSIM868+0x268>)
 8011084:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8011088:	2b01      	cmp	r3, #1
 801108a:	d00b      	beq.n	80110a4 <operateGSMSIM868+0x170>
				gsmInstance.enmGSMCommand = enmGSMSTATE_GPSINFO;
 801108c:	4b41      	ldr	r3, [pc, #260]	; (8011194 <operateGSMSIM868+0x260>)
 801108e:	221c      	movs	r2, #28
 8011090:	f883 2e43 	strb.w	r2, [r3, #3651]	; 0xe43
				gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
 8011094:	2202      	movs	r2, #2
 8011096:	f883 2e42 	strb.w	r2, [r3, #3650]	; 0xe42
				gsmInstance.u32GSMTimer = TWO_SEC;
 801109a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 801109e:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
 80110a2:	e018      	b.n	80110d6 <operateGSMSIM868+0x1a2>
				sendGSMCommand(gsmInstance);
 80110a4:	4c3b      	ldr	r4, [pc, #236]	; (8011194 <operateGSMSIM868+0x260>)
 80110a6:	f241 1264 	movw	r2, #4452	; 0x1164
 80110aa:	f104 0110 	add.w	r1, r4, #16
 80110ae:	4668      	mov	r0, sp
 80110b0:	f004 fa20 	bl	80154f4 <memcpy>
 80110b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80110b8:	f7ff fa26 	bl	8010508 <sendGSMCommand>
 80110bc:	e00b      	b.n	80110d6 <operateGSMSIM868+0x1a2>
			sendGSMCommand(gsmInstance);
 80110be:	4c35      	ldr	r4, [pc, #212]	; (8011194 <operateGSMSIM868+0x260>)
 80110c0:	f241 1264 	movw	r2, #4452	; 0x1164
 80110c4:	f104 0110 	add.w	r1, r4, #16
 80110c8:	4668      	mov	r0, sp
 80110ca:	f004 fa13 	bl	80154f4 <memcpy>
 80110ce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80110d2:	f7ff fa19 	bl	8010508 <sendGSMCommand>
	gu32GSMHangTimer = THREE_MIN;
 80110d6:	4b32      	ldr	r3, [pc, #200]	; (80111a0 <operateGSMSIM868+0x26c>)
 80110d8:	4a32      	ldr	r2, [pc, #200]	; (80111a4 <operateGSMSIM868+0x270>)
 80110da:	601a      	str	r2, [r3, #0]
}
 80110dc:	f50d 5d8b 	add.w	sp, sp, #4448	; 0x1160
 80110e0:	b002      	add	sp, #8
 80110e2:	bd10      	pop	{r4, pc}
			if((isQueueEmpty(&gsmPayload) == FALSE )&& (gsmPayload.data[gsmPayload.tail] != NULL))
 80110e4:	4830      	ldr	r0, [pc, #192]	; (80111a8 <operateGSMSIM868+0x274>)
 80110e6:	f002 f86f 	bl	80131c8 <isQueueEmpty>
 80110ea:	bb70      	cbnz	r0, 801114a <operateGSMSIM868+0x216>
 80110ec:	4a2e      	ldr	r2, [pc, #184]	; (80111a8 <operateGSMSIM868+0x274>)
 80110ee:	6853      	ldr	r3, [r2, #4]
 80110f0:	3302      	adds	r3, #2
 80110f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80110f6:	b343      	cbz	r3, 801114a <operateGSMSIM868+0x216>
				if((gu8MqttPayloadFlag == 0) && (gsmInstance.enmGSMCommand == enmGSMSTATE_CMQTTTOPIC))
 80110f8:	4b28      	ldr	r3, [pc, #160]	; (801119c <operateGSMSIM868+0x268>)
 80110fa:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 80110fe:	b923      	cbnz	r3, 801110a <operateGSMSIM868+0x1d6>
 8011100:	4a24      	ldr	r2, [pc, #144]	; (8011194 <operateGSMSIM868+0x260>)
 8011102:	f892 2e43 	ldrb.w	r2, [r2, #3651]	; 0xe43
 8011106:	2a17      	cmp	r2, #23
 8011108:	d013      	beq.n	8011132 <operateGSMSIM868+0x1fe>
				else if((gu8MqttPayloadFlag == 1) && (gsmInstance.enmGSMCommand == enmGSMSTATE_SENDDATA))
 801110a:	2b01      	cmp	r3, #1
 801110c:	d104      	bne.n	8011118 <operateGSMSIM868+0x1e4>
 801110e:	4b21      	ldr	r3, [pc, #132]	; (8011194 <operateGSMSIM868+0x260>)
 8011110:	f893 3e43 	ldrb.w	r3, [r3, #3651]	; 0xe43
 8011114:	2b1a      	cmp	r3, #26
 8011116:	d013      	beq.n	8011140 <operateGSMSIM868+0x20c>
					sendGSMCommand(gsmInstance);
 8011118:	4c1e      	ldr	r4, [pc, #120]	; (8011194 <operateGSMSIM868+0x260>)
 801111a:	f241 1264 	movw	r2, #4452	; 0x1164
 801111e:	f104 0110 	add.w	r1, r4, #16
 8011122:	4668      	mov	r0, sp
 8011124:	f004 f9e6 	bl	80154f4 <memcpy>
 8011128:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801112c:	f7ff f9ec 	bl	8010508 <sendGSMCommand>
 8011130:	e7d1      	b.n	80110d6 <operateGSMSIM868+0x1a2>
					updateMqttDataLength();
 8011132:	f7fe ff07 	bl	800ff44 <updateMqttDataLength>
					gu8MqttPayloadFlag = 1;
 8011136:	4b19      	ldr	r3, [pc, #100]	; (801119c <operateGSMSIM868+0x268>)
 8011138:	2201      	movs	r2, #1
 801113a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
 801113e:	e7ca      	b.n	80110d6 <operateGSMSIM868+0x1a2>
					gu8MqttPayloadFlag = 0;
 8011140:	4b16      	ldr	r3, [pc, #88]	; (801119c <operateGSMSIM868+0x268>)
 8011142:	2200      	movs	r2, #0
 8011144:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
 8011148:	e7c5      	b.n	80110d6 <operateGSMSIM868+0x1a2>
				gsmInstance.enmGSMCommand = enmGSMSTATE_GPSINFO;
 801114a:	4b12      	ldr	r3, [pc, #72]	; (8011194 <operateGSMSIM868+0x260>)
 801114c:	221c      	movs	r2, #28
 801114e:	f883 2e43 	strb.w	r2, [r3, #3651]	; 0xe43
				gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
 8011152:	2202      	movs	r2, #2
 8011154:	f883 2e42 	strb.w	r2, [r3, #3650]	; 0xe42
 8011158:	e7bd      	b.n	80110d6 <operateGSMSIM868+0x1a2>
			initGSMSIM868();
 801115a:	f7fe fe0f 	bl	800fd7c <initGSMSIM868>
			break;
 801115e:	e7ba      	b.n	80110d6 <operateGSMSIM868+0x1a2>
				sendGSMCommand(gsmInstance);
 8011160:	4c0c      	ldr	r4, [pc, #48]	; (8011194 <operateGSMSIM868+0x260>)
 8011162:	f241 1264 	movw	r2, #4452	; 0x1164
 8011166:	f104 0110 	add.w	r1, r4, #16
 801116a:	4668      	mov	r0, sp
 801116c:	f004 f9c2 	bl	80154f4 <memcpy>
 8011170:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011174:	f7ff f9c8 	bl	8010508 <sendGSMCommand>
			break;
 8011178:	e7ad      	b.n	80110d6 <operateGSMSIM868+0x1a2>
			gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 801117a:	4b06      	ldr	r3, [pc, #24]	; (8011194 <operateGSMSIM868+0x260>)
 801117c:	2203      	movs	r2, #3
 801117e:	f883 2e42 	strb.w	r2, [r3, #3650]	; 0xe42
			gsmInstance.enmGSMCommand = enmGSMSTATE_CMQTTTOPIC;
 8011182:	2217      	movs	r2, #23
 8011184:	f883 2e43 	strb.w	r2, [r3, #3651]	; 0xe43
			break;
 8011188:	e7a5      	b.n	80110d6 <operateGSMSIM868+0x1a2>
			initGSMSIM868();
 801118a:	f7fe fdf7 	bl	800fd7c <initGSMSIM868>
			break;
 801118e:	e7a2      	b.n	80110d6 <operateGSMSIM868+0x1a2>
 8011190:	4770      	bx	lr
 8011192:	bf00      	nop
 8011194:	2000d390 	.word	0x2000d390
 8011198:	40020c00 	.word	0x40020c00
 801119c:	200043c4 	.word	0x200043c4
 80111a0:	20006148 	.word	0x20006148
 80111a4:	0002bf20 	.word	0x0002bf20
 80111a8:	2000e504 	.word	0x2000e504

080111ac <updateMQTTClientID>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void updateMQTTClientID(void)
{
 80111ac:	b538      	push	{r3, r4, r5, lr}
	uint8_t dinfo_size = 0;
	dinfo_size = strlen(dinfo);
 80111ae:	4c0f      	ldr	r4, [pc, #60]	; (80111ec <updateMQTTClientID+0x40>)
 80111b0:	4620      	mov	r0, r4
 80111b2:	f7f3 f81d 	bl	80041f0 <strlen>
	memset(gu8dinfo_small, 0, sizeof(gu8dinfo_small));
 80111b6:	4d0e      	ldr	r5, [pc, #56]	; (80111f0 <updateMQTTClientID+0x44>)
 80111b8:	2300      	movs	r3, #0
 80111ba:	602b      	str	r3, [r5, #0]
 80111bc:	80ab      	strh	r3, [r5, #4]
	strncpy(gu8dinfo_small, &dinfo[dinfo_size - 5], 5);
 80111be:	1f41      	subs	r1, r0, #5
 80111c0:	2205      	movs	r2, #5
 80111c2:	4421      	add	r1, r4
 80111c4:	4628      	mov	r0, r5
 80111c6:	f004 fa2f 	bl	8015628 <strncpy>
	strcat(gau8GSM_ATCMQTTACCQ, gu8dinfo_small);
 80111ca:	4c0a      	ldr	r4, [pc, #40]	; (80111f4 <updateMQTTClientID+0x48>)
 80111cc:	4629      	mov	r1, r5
 80111ce:	4620      	mov	r0, r4
 80111d0:	f004 f9f4 	bl	80155bc <strcat>
	strcat(gau8GSM_ATCMQTTACCQ, "\",0\r\n");
 80111d4:	4620      	mov	r0, r4
 80111d6:	f7f3 f80b 	bl	80041f0 <strlen>
 80111da:	4603      	mov	r3, r0
 80111dc:	1821      	adds	r1, r4, r0
 80111de:	4a06      	ldr	r2, [pc, #24]	; (80111f8 <updateMQTTClientID+0x4c>)
 80111e0:	6810      	ldr	r0, [r2, #0]
 80111e2:	50e0      	str	r0, [r4, r3]
 80111e4:	8893      	ldrh	r3, [r2, #4]
 80111e6:	808b      	strh	r3, [r1, #4]
}
 80111e8:	bd38      	pop	{r3, r4, r5, pc}
 80111ea:	bf00      	nop
 80111ec:	200097d4 	.word	0x200097d4
 80111f0:	200098c8 	.word	0x200098c8
 80111f4:	20000a50 	.word	0x20000a50
 80111f8:	0801e470 	.word	0x0801e470

080111fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80111fc:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 80111fe:	4813      	ldr	r0, [pc, #76]	; (801124c <MX_I2C1_Init+0x50>)
 8011200:	4b13      	ldr	r3, [pc, #76]	; (8011250 <MX_I2C1_Init+0x54>)
 8011202:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8011204:	4b13      	ldr	r3, [pc, #76]	; (8011254 <MX_I2C1_Init+0x58>)
 8011206:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8011208:	2300      	movs	r3, #0
 801120a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 801120c:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801120e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8011212:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8011214:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8011216:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8011218:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801121a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801121c:	f7f5 ff0e 	bl	800703c <HAL_I2C_Init>
 8011220:	b950      	cbnz	r0, 8011238 <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8011222:	2100      	movs	r1, #0
 8011224:	4809      	ldr	r0, [pc, #36]	; (801124c <MX_I2C1_Init+0x50>)
 8011226:	f7f6 fd67 	bl	8007cf8 <HAL_I2CEx_ConfigAnalogFilter>
 801122a:	b940      	cbnz	r0, 801123e <MX_I2C1_Init+0x42>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 801122c:	2100      	movs	r1, #0
 801122e:	4807      	ldr	r0, [pc, #28]	; (801124c <MX_I2C1_Init+0x50>)
 8011230:	f7f6 fd84 	bl	8007d3c <HAL_I2CEx_ConfigDigitalFilter>
 8011234:	b930      	cbnz	r0, 8011244 <MX_I2C1_Init+0x48>
  {
    Error_Handler();
  }

}
 8011236:	bd08      	pop	{r3, pc}
    Error_Handler();
 8011238:	f000 fb18 	bl	801186c <Error_Handler>
 801123c:	e7f1      	b.n	8011222 <MX_I2C1_Init+0x26>
    Error_Handler();
 801123e:	f000 fb15 	bl	801186c <Error_Handler>
 8011242:	e7f3      	b.n	801122c <MX_I2C1_Init+0x30>
    Error_Handler();
 8011244:	f000 fb12 	bl	801186c <Error_Handler>
}
 8011248:	e7f5      	b.n	8011236 <MX_I2C1_Init+0x3a>
 801124a:	bf00      	nop
 801124c:	2000e534 	.word	0x2000e534
 8011250:	40005400 	.word	0x40005400
 8011254:	000186a0 	.word	0x000186a0

08011258 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8011258:	b530      	push	{r4, r5, lr}
 801125a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801125c:	2300      	movs	r3, #0
 801125e:	9303      	str	r3, [sp, #12]
 8011260:	9304      	str	r3, [sp, #16]
 8011262:	9305      	str	r3, [sp, #20]
 8011264:	9306      	str	r3, [sp, #24]
 8011266:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8011268:	6802      	ldr	r2, [r0, #0]
 801126a:	4b1d      	ldr	r3, [pc, #116]	; (80112e0 <HAL_I2C_MspInit+0x88>)
 801126c:	429a      	cmp	r2, r3
 801126e:	d001      	beq.n	8011274 <HAL_I2C_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8011270:	b009      	add	sp, #36	; 0x24
 8011272:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011274:	2400      	movs	r4, #0
 8011276:	9401      	str	r4, [sp, #4]
 8011278:	4d1a      	ldr	r5, [pc, #104]	; (80112e4 <HAL_I2C_MspInit+0x8c>)
 801127a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801127c:	f043 0302 	orr.w	r3, r3, #2
 8011280:	632b      	str	r3, [r5, #48]	; 0x30
 8011282:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011284:	f003 0302 	and.w	r3, r3, #2
 8011288:	9301      	str	r3, [sp, #4]
 801128a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801128c:	23c0      	movs	r3, #192	; 0xc0
 801128e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8011290:	2312      	movs	r3, #18
 8011292:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011294:	2301      	movs	r3, #1
 8011296:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011298:	2303      	movs	r3, #3
 801129a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801129c:	2304      	movs	r3, #4
 801129e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80112a0:	a903      	add	r1, sp, #12
 80112a2:	4811      	ldr	r0, [pc, #68]	; (80112e8 <HAL_I2C_MspInit+0x90>)
 80112a4:	f7f5 fc28 	bl	8006af8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80112a8:	9402      	str	r4, [sp, #8]
 80112aa:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80112ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80112b0:	642b      	str	r3, [r5, #64]	; 0x40
 80112b2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80112b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80112b8:	9302      	str	r3, [sp, #8]
 80112ba:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80112bc:	4622      	mov	r2, r4
 80112be:	4621      	mov	r1, r4
 80112c0:	201f      	movs	r0, #31
 80112c2:	f7f4 fb05 	bl	80058d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80112c6:	201f      	movs	r0, #31
 80112c8:	f7f4 fb36 	bl	8005938 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80112cc:	4622      	mov	r2, r4
 80112ce:	4621      	mov	r1, r4
 80112d0:	2020      	movs	r0, #32
 80112d2:	f7f4 fafd 	bl	80058d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80112d6:	2020      	movs	r0, #32
 80112d8:	f7f4 fb2e 	bl	8005938 <HAL_NVIC_EnableIRQ>
}
 80112dc:	e7c8      	b.n	8011270 <HAL_I2C_MspInit+0x18>
 80112de:	bf00      	nop
 80112e0:	40005400 	.word	0x40005400
 80112e4:	40023800 	.word	0x40023800
 80112e8:	40020400 	.word	0x40020400

080112ec <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80112ec:	b508      	push	{r3, lr}

  hiwdg.Instance = IWDG;
 80112ee:	4807      	ldr	r0, [pc, #28]	; (801130c <MX_IWDG_Init+0x20>)
 80112f0:	4b07      	ldr	r3, [pc, #28]	; (8011310 <MX_IWDG_Init+0x24>)
 80112f2:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80112f4:	2306      	movs	r3, #6
 80112f6:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Reload = 4095;
 80112f8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80112fc:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80112fe:	f7f6 fd3e 	bl	8007d7e <HAL_IWDG_Init>
 8011302:	b900      	cbnz	r0, 8011306 <MX_IWDG_Init+0x1a>
  {
    Error_Handler();
  }

}
 8011304:	bd08      	pop	{r3, pc}
    Error_Handler();
 8011306:	f000 fab1 	bl	801186c <Error_Handler>
}
 801130a:	e7fb      	b.n	8011304 <MX_IWDG_Init+0x18>
 801130c:	2000e588 	.word	0x2000e588
 8011310:	40003000 	.word	0x40003000

08011314 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8011314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011316:	b085      	sub	sp, #20
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8011318:	4f3a      	ldr	r7, [pc, #232]	; (8011404 <MX_LWIP_Init+0xf0>)
 801131a:	21c0      	movs	r1, #192	; 0xc0
 801131c:	7039      	strb	r1, [r7, #0]
  IP_ADDRESS[1] = 168;
 801131e:	22a8      	movs	r2, #168	; 0xa8
 8011320:	707a      	strb	r2, [r7, #1]
  IP_ADDRESS[2] = 0;
 8011322:	2400      	movs	r4, #0
 8011324:	70bc      	strb	r4, [r7, #2]
  IP_ADDRESS[3] = 100;
 8011326:	2364      	movs	r3, #100	; 0x64
 8011328:	70fb      	strb	r3, [r7, #3]
  NETMASK_ADDRESS[0] = 255;
 801132a:	4e37      	ldr	r6, [pc, #220]	; (8011408 <MX_LWIP_Init+0xf4>)
 801132c:	23ff      	movs	r3, #255	; 0xff
 801132e:	7033      	strb	r3, [r6, #0]
  NETMASK_ADDRESS[1] = 255;
 8011330:	7073      	strb	r3, [r6, #1]
  NETMASK_ADDRESS[2] = 255;
 8011332:	70b3      	strb	r3, [r6, #2]
  NETMASK_ADDRESS[3] = 0;
 8011334:	70f4      	strb	r4, [r6, #3]
  GATEWAY_ADDRESS[0] = 192;
 8011336:	4d35      	ldr	r5, [pc, #212]	; (801140c <MX_LWIP_Init+0xf8>)
 8011338:	7029      	strb	r1, [r5, #0]
  GATEWAY_ADDRESS[1] = 168;
 801133a:	706a      	strb	r2, [r5, #1]
  GATEWAY_ADDRESS[2] = 0;
 801133c:	70ac      	strb	r4, [r5, #2]
  GATEWAY_ADDRESS[3] = 1;
 801133e:	2301      	movs	r3, #1
 8011340:	70eb      	strb	r3, [r5, #3]

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8011342:	f7f8 f882 	bl	800944a <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8011346:	783a      	ldrb	r2, [r7, #0]
 8011348:	787b      	ldrb	r3, [r7, #1]
 801134a:	041b      	lsls	r3, r3, #16
 801134c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8011350:	78ba      	ldrb	r2, [r7, #2]
 8011352:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011356:	78f9      	ldrb	r1, [r7, #3]
 8011358:	430b      	orrs	r3, r1
 801135a:	021a      	lsls	r2, r3, #8
 801135c:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8011360:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8011364:	0a19      	lsrs	r1, r3, #8
 8011366:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801136a:	430a      	orrs	r2, r1
 801136c:	ea42 6313 	orr.w	r3, r2, r3, lsr #24
 8011370:	4927      	ldr	r1, [pc, #156]	; (8011410 <MX_LWIP_Init+0xfc>)
 8011372:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8011374:	7832      	ldrb	r2, [r6, #0]
 8011376:	7873      	ldrb	r3, [r6, #1]
 8011378:	041b      	lsls	r3, r3, #16
 801137a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801137e:	78b2      	ldrb	r2, [r6, #2]
 8011380:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011384:	78f0      	ldrb	r0, [r6, #3]
 8011386:	4303      	orrs	r3, r0
 8011388:	021a      	lsls	r2, r3, #8
 801138a:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 801138e:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8011392:	0a18      	lsrs	r0, r3, #8
 8011394:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8011398:	4302      	orrs	r2, r0
 801139a:	ea42 6313 	orr.w	r3, r2, r3, lsr #24
 801139e:	4a1d      	ldr	r2, [pc, #116]	; (8011414 <MX_LWIP_Init+0x100>)
 80113a0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80113a2:	7828      	ldrb	r0, [r5, #0]
 80113a4:	786b      	ldrb	r3, [r5, #1]
 80113a6:	041b      	lsls	r3, r3, #16
 80113a8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80113ac:	78a8      	ldrb	r0, [r5, #2]
 80113ae:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80113b2:	78ed      	ldrb	r5, [r5, #3]
 80113b4:	432b      	orrs	r3, r5
 80113b6:	0218      	lsls	r0, r3, #8
 80113b8:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 80113bc:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 80113c0:	0a1d      	lsrs	r5, r3, #8
 80113c2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80113c6:	4328      	orrs	r0, r5
 80113c8:	ea40 6013 	orr.w	r0, r0, r3, lsr #24
 80113cc:	4b12      	ldr	r3, [pc, #72]	; (8011418 <MX_LWIP_Init+0x104>)
 80113ce:	6018      	str	r0, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80113d0:	4d12      	ldr	r5, [pc, #72]	; (801141c <MX_LWIP_Init+0x108>)
 80113d2:	4813      	ldr	r0, [pc, #76]	; (8011420 <MX_LWIP_Init+0x10c>)
 80113d4:	9002      	str	r0, [sp, #8]
 80113d6:	4813      	ldr	r0, [pc, #76]	; (8011424 <MX_LWIP_Init+0x110>)
 80113d8:	9001      	str	r0, [sp, #4]
 80113da:	9400      	str	r4, [sp, #0]
 80113dc:	4628      	mov	r0, r5
 80113de:	f7f8 fb27 	bl	8009a30 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80113e2:	4628      	mov	r0, r5
 80113e4:	f7f8 fb66 	bl	8009ab4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80113e8:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 80113ec:	f013 0f04 	tst.w	r3, #4
 80113f0:	d004      	beq.n	80113fc <MX_LWIP_Init+0xe8>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80113f2:	4628      	mov	r0, r5
 80113f4:	f7f8 fb64 	bl	8009ac0 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80113f8:	b005      	add	sp, #20
 80113fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netif_set_down(&gnetif);
 80113fc:	4807      	ldr	r0, [pc, #28]	; (801141c <MX_LWIP_Init+0x108>)
 80113fe:	f7f8 fb71 	bl	8009ae4 <netif_set_down>
}
 8011402:	e7f9      	b.n	80113f8 <MX_LWIP_Init+0xe4>
 8011404:	2000e5d0 	.word	0x2000e5d0
 8011408:	2000e5cc 	.word	0x2000e5cc
 801140c:	2000e594 	.word	0x2000e594
 8011410:	2000e5c8 	.word	0x2000e5c8
 8011414:	2000e5d4 	.word	0x2000e5d4
 8011418:	2000e5d8 	.word	0x2000e5d8
 801141c:	2000e598 	.word	0x2000e598
 8011420:	0800f56d 	.word	0x0800f56d
 8011424:	0800fc4d 	.word	0x0800fc4d

08011428 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8011428:	b508      	push	{r3, lr}
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 801142a:	4803      	ldr	r0, [pc, #12]	; (8011438 <MX_LWIP_Process+0x10>)
 801142c:	f7fe fbfe 	bl	800fc2c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8011430:	f7fc fb98 	bl	800db64 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8011434:	bd08      	pop	{r3, pc}
 8011436:	bf00      	nop
 8011438:	2000e598 	.word	0x2000e598

0801143c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801143c:	b570      	push	{r4, r5, r6, lr}
 801143e:	b0a0      	sub	sp, #128	; 0x80
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8011440:	2530      	movs	r5, #48	; 0x30
 8011442:	462a      	mov	r2, r5
 8011444:	2100      	movs	r1, #0
 8011446:	a814      	add	r0, sp, #80	; 0x50
 8011448:	f004 f862 	bl	8015510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801144c:	2400      	movs	r4, #0
 801144e:	940f      	str	r4, [sp, #60]	; 0x3c
 8011450:	9410      	str	r4, [sp, #64]	; 0x40
 8011452:	9411      	str	r4, [sp, #68]	; 0x44
 8011454:	9412      	str	r4, [sp, #72]	; 0x48
 8011456:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011458:	462a      	mov	r2, r5
 801145a:	4621      	mov	r1, r4
 801145c:	a803      	add	r0, sp, #12
 801145e:	f004 f857 	bl	8015510 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8011462:	9401      	str	r4, [sp, #4]
 8011464:	4b22      	ldr	r3, [pc, #136]	; (80114f0 <SystemClock_Config+0xb4>)
 8011466:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011468:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 801146c:	641a      	str	r2, [r3, #64]	; 0x40
 801146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011474:	9301      	str	r3, [sp, #4]
 8011476:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8011478:	9402      	str	r4, [sp, #8]
 801147a:	4b1e      	ldr	r3, [pc, #120]	; (80114f4 <SystemClock_Config+0xb8>)
 801147c:	681a      	ldr	r2, [r3, #0]
 801147e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8011482:	601a      	str	r2, [r3, #0]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801148a:	9302      	str	r3, [sp, #8]
 801148c:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 801148e:	2309      	movs	r3, #9
 8011490:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8011492:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8011496:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8011498:	2301      	movs	r3, #1
 801149a:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801149c:	2502      	movs	r5, #2
 801149e:	951a      	str	r5, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80114a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80114a4:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80114a6:	260f      	movs	r6, #15
 80114a8:	961c      	str	r6, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 216;
 80114aa:	23d8      	movs	r3, #216	; 0xd8
 80114ac:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80114ae:	951e      	str	r5, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80114b0:	2304      	movs	r3, #4
 80114b2:	931f      	str	r3, [sp, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80114b4:	a814      	add	r0, sp, #80	; 0x50
 80114b6:	f7f6 fccd 	bl	8007e54 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80114ba:	f7f6 fc8b 	bl	8007dd4 <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80114be:	960f      	str	r6, [sp, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80114c0:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80114c2:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80114c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80114c8:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80114ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80114ce:	9313      	str	r3, [sp, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80114d0:	2105      	movs	r1, #5
 80114d2:	a80f      	add	r0, sp, #60	; 0x3c
 80114d4:	f7f6 fee0 	bl	8008298 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80114d8:	2320      	movs	r3, #32
 80114da:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80114dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80114e0:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80114e2:	a803      	add	r0, sp, #12
 80114e4:	f7f6 ffb0 	bl	8008448 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80114e8:	f7f6 fe80 	bl	80081ec <HAL_RCC_EnableCSS>
}
 80114ec:	b020      	add	sp, #128	; 0x80
 80114ee:	bd70      	pop	{r4, r5, r6, pc}
 80114f0:	40023800 	.word	0x40023800
 80114f4:	40007000 	.word	0x40007000

080114f8 <main>:
{
 80114f8:	b570      	push	{r4, r5, r6, lr}
  HAL_Init();
 80114fa:	f7f3 fdab 	bl	8005054 <HAL_Init>
  SystemClock_Config();
 80114fe:	f7ff ff9d 	bl	801143c <SystemClock_Config>
  getLastKnownConfiguration();
 8011502:	f002 fa25 	bl	8013950 <getLastKnownConfiguration>
  MX_GPIO_Init();
 8011506:	f7fe fbc9 	bl	800fc9c <MX_GPIO_Init>
  MX_DMA_Init();
 801150a:	f7fe f9b9 	bl	800f880 <MX_DMA_Init>
  MX_IWDG_Init();
 801150e:	f7ff feed 	bl	80112ec <MX_IWDG_Init>
  MX_TIM7_Init();
 8011512:	f002 fe51 	bl	80141b8 <MX_TIM7_Init>
  MX_UART4_Init();
 8011516:	f002 fe97 	bl	8014248 <MX_UART4_Init>
  MX_RTC_Init();
 801151a:	f002 fbd9 	bl	8013cd0 <MX_RTC_Init>
  MX_USART3_UART_Init();
 801151e:	f002 ff21 	bl	8014364 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8011522:	f7fe f8af 	bl	800f684 <MX_ADC1_Init>
  MX_LWIP_Init();
 8011526:	f7ff fef5 	bl	8011314 <MX_LWIP_Init>
  MX_I2C1_Init();
 801152a:	f7ff fe67 	bl	80111fc <MX_I2C1_Init>
  	updateDeviceSignature();
 801152e:	f7fe f94d 	bl	800f7cc <updateDeviceSignature>
	HAL_GPIO_WritePin(MB_DE_GPIO_Port,MB_DE_Pin,GPIO_PIN_RESET);
 8011532:	4cac      	ldr	r4, [pc, #688]	; (80117e4 <main+0x2ec>)
 8011534:	2200      	movs	r2, #0
 8011536:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801153a:	4620      	mov	r0, r4
 801153c:	f7f5 fbce 	bl	8006cdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MB_RE_GPIO_Port,MB_RE_Pin,GPIO_PIN_RESET);
 8011540:	2200      	movs	r2, #0
 8011542:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011546:	4620      	mov	r0, r4
 8011548:	f7f5 fbc8 	bl	8006cdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 801154c:	f5a4 6480 	sub.w	r4, r4, #1024	; 0x400
 8011550:	2200      	movs	r2, #0
 8011552:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011556:	4620      	mov	r0, r4
 8011558:	f7f5 fbc0 	bl	8006cdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 801155c:	2200      	movs	r2, #0
 801155e:	2140      	movs	r1, #64	; 0x40
 8011560:	4620      	mov	r0, r4
 8011562:	f7f5 fbbb 	bl	8006cdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8011566:	2200      	movs	r2, #0
 8011568:	2120      	movs	r1, #32
 801156a:	4620      	mov	r0, r4
 801156c:	f7f5 fbb6 	bl	8006cdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_PWR_KEY_GPIO_Port,GSM_PWR_KEY_Pin,GPIO_PIN_RESET);
 8011570:	2200      	movs	r2, #0
 8011572:	2180      	movs	r1, #128	; 0x80
 8011574:	4620      	mov	r0, r4
 8011576:	f7f5 fbb1 	bl	8006cdc <HAL_GPIO_WritePin>
	setupModbus();
 801157a:	f000 fb0f 	bl	8011b9c <setupModbus>
	setupModbusRTU();
 801157e:	f000 f977 	bl	8011870 <setupModbusRTU>
	if(gu32UploadTimeSupply == 0)
 8011582:	4b99      	ldr	r3, [pc, #612]	; (80117e8 <main+0x2f0>)
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	b913      	cbnz	r3, 801158e <main+0x96>
		gu32UploadTimeSupply = TWO_MIN;
 8011588:	4b97      	ldr	r3, [pc, #604]	; (80117e8 <main+0x2f0>)
 801158a:	4a98      	ldr	r2, [pc, #608]	; (80117ec <main+0x2f4>)
 801158c:	601a      	str	r2, [r3, #0]
	if(gu32UploadTimeBatt == 0)
 801158e:	4b98      	ldr	r3, [pc, #608]	; (80117f0 <main+0x2f8>)
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	b913      	cbnz	r3, 801159a <main+0xa2>
		gu32UploadTimeBatt = FIVE_MIN;
 8011594:	4b96      	ldr	r3, [pc, #600]	; (80117f0 <main+0x2f8>)
 8011596:	4a97      	ldr	r2, [pc, #604]	; (80117f4 <main+0x2fc>)
 8011598:	601a      	str	r2, [r3, #0]
	enqueue(&gsmPayload,(char *)getSystemConfig());
 801159a:	f000 fdf9 	bl	8012190 <getSystemConfig>
 801159e:	4601      	mov	r1, r0
 80115a0:	4895      	ldr	r0, [pc, #596]	; (80117f8 <main+0x300>)
 80115a2:	f001 fdd9 	bl	8013158 <enqueue>
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);	// LED OFF
 80115a6:	2201      	movs	r2, #1
 80115a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80115ac:	4893      	ldr	r0, [pc, #588]	; (80117fc <main+0x304>)
 80115ae:	f7f5 fb95 	bl	8006cdc <HAL_GPIO_WritePin>
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80115b2:	4a93      	ldr	r2, [pc, #588]	; (8011800 <main+0x308>)
 80115b4:	68d3      	ldr	r3, [r2, #12]
 80115b6:	f043 0320 	orr.w	r3, r3, #32
 80115ba:	60d3      	str	r3, [r2, #12]
 80115bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80115c0:	68d3      	ldr	r3, [r2, #12]
 80115c2:	f043 0320 	orr.w	r3, r3, #32
 80115c6:	60d3      	str	r3, [r2, #12]
	if(HAL_TIM_Base_Start_IT(&htim7)!= HAL_OK)
 80115c8:	488e      	ldr	r0, [pc, #568]	; (8011804 <main+0x30c>)
 80115ca:	f7f7 fbfd 	bl	8008dc8 <HAL_TIM_Base_Start_IT>
	updateNetworkAPN();
 80115ce:	f7fe fe97 	bl	8010300 <updateNetworkAPN>
	gu32TempPayloadQueueEnqueue = ONE_MIN;
 80115d2:	4b8d      	ldr	r3, [pc, #564]	; (8011808 <main+0x310>)
 80115d4:	f64e 2260 	movw	r2, #60000	; 0xea60
 80115d8:	601a      	str	r2, [r3, #0]
	memset(gau8TempMBPayloadString,0x00,sizeof(char) * gu32MBDataByteCounterLimit);
 80115da:	4b8c      	ldr	r3, [pc, #560]	; (801180c <main+0x314>)
 80115dc:	681a      	ldr	r2, [r3, #0]
 80115de:	2100      	movs	r1, #0
 80115e0:	488b      	ldr	r0, [pc, #556]	; (8011810 <main+0x318>)
 80115e2:	f003 ff95 	bl	8015510 <memset>
	memset(gau8TempMBRTUPayloadString,0x00,sizeof(char) * gu32MBDataByteCounterLimitRTU);
 80115e6:	4b8b      	ldr	r3, [pc, #556]	; (8011814 <main+0x31c>)
 80115e8:	681a      	ldr	r2, [r3, #0]
 80115ea:	2100      	movs	r1, #0
 80115ec:	488a      	ldr	r0, [pc, #552]	; (8011818 <main+0x320>)
 80115ee:	f003 ff8f 	bl	8015510 <memset>
	 gu32SystemResetTimer = THIRTY_MIN;
 80115f2:	4b8a      	ldr	r3, [pc, #552]	; (801181c <main+0x324>)
 80115f4:	4a8a      	ldr	r2, [pc, #552]	; (8011820 <main+0x328>)
 80115f6:	601a      	str	r2, [r3, #0]
	  updateMQTTClientID();
 80115f8:	f7ff fdd8 	bl	80111ac <updateMQTTClientID>
 80115fc:	e042      	b.n	8011684 <main+0x18c>
		mbTCPPoll();
 80115fe:	f000 fbeb 	bl	8011dd8 <mbTCPPoll>
		updateModbusPayload();
 8011602:	f000 faf5 	bl	8011bf0 <updateModbusPayload>
 8011606:	e045      	b.n	8011694 <main+0x19c>
			gu32TempPayloadQueueEnqueue = TEN_SEC;//gu32UploadTimeBatt;
 8011608:	4b7f      	ldr	r3, [pc, #508]	; (8011808 <main+0x310>)
 801160a:	f242 7210 	movw	r2, #10000	; 0x2710
 801160e:	601a      	str	r2, [r3, #0]
 8011610:	e058      	b.n	80116c4 <main+0x1cc>
			  CharacterCounter=strlen(DebugBuff);
 8011612:	4884      	ldr	r0, [pc, #528]	; (8011824 <main+0x32c>)
 8011614:	f7f2 fdec 	bl	80041f0 <strlen>
 8011618:	4a83      	ldr	r2, [pc, #524]	; (8011828 <main+0x330>)
 801161a:	6010      	str	r0, [r2, #0]
			  if(CharacterCounter>1)
 801161c:	2801      	cmp	r0, #1
 801161e:	d85c      	bhi.n	80116da <main+0x1e2>
	if(gsmInstance.u32GSMTimer > FIVE_MIN)
 8011620:	4b82      	ldr	r3, [pc, #520]	; (801182c <main+0x334>)
 8011622:	f8d3 2e24 	ldr.w	r2, [r3, #3620]	; 0xe24
 8011626:	4b73      	ldr	r3, [pc, #460]	; (80117f4 <main+0x2fc>)
 8011628:	429a      	cmp	r2, r3
 801162a:	d904      	bls.n	8011636 <main+0x13e>
		gsmInstance.u32GSMTimer = FOUR_SEC;
 801162c:	4b7f      	ldr	r3, [pc, #508]	; (801182c <main+0x334>)
 801162e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8011632:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	if(gu32GSMHangTimer == 0)
 8011636:	4b7e      	ldr	r3, [pc, #504]	; (8011830 <main+0x338>)
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d07e      	beq.n	801173c <main+0x244>
	if(gu32GSMRestartTimer == 0)
 801163e:	4b7d      	ldr	r3, [pc, #500]	; (8011834 <main+0x33c>)
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d07d      	beq.n	8011742 <main+0x24a>
	operateGSMSIM868();
 8011646:	f7ff fc75 	bl	8010f34 <operateGSMSIM868>
	if(gu32RTCUpdateTimer == 0)
 801164a:	4b7b      	ldr	r3, [pc, #492]	; (8011838 <main+0x340>)
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	b91b      	cbnz	r3, 8011658 <main+0x160>
		gu32RTCUpdateTimer = FIVE_SEC;
 8011650:	4b79      	ldr	r3, [pc, #484]	; (8011838 <main+0x340>)
 8011652:	f241 3288 	movw	r2, #5000	; 0x1388
 8011656:	601a      	str	r2, [r3, #0]
	 if((gu32SystemResetTimer == 0) || ((FOTACompleteFlag == TRUE) && (isQueueEmpty(&gsmPayload) == 1)))
 8011658:	4b70      	ldr	r3, [pc, #448]	; (801181c <main+0x324>)
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d078      	beq.n	8011752 <main+0x25a>
 8011660:	4b76      	ldr	r3, [pc, #472]	; (801183c <main+0x344>)
 8011662:	781b      	ldrb	r3, [r3, #0]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d16f      	bne.n	8011748 <main+0x250>
	  if(SUBTriggerFlag == TRUE)
 8011668:	4b75      	ldr	r3, [pc, #468]	; (8011840 <main+0x348>)
 801166a:	781b      	ldrb	r3, [r3, #0]
 801166c:	2b01      	cmp	r3, #1
 801166e:	d071      	beq.n	8011754 <main+0x25c>
	if(gu32LedTimer == 0)
 8011670:	4b74      	ldr	r3, [pc, #464]	; (8011844 <main+0x34c>)
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	2b00      	cmp	r3, #0
 8011676:	f000 809e 	beq.w	80117b6 <main+0x2be>
	getRTCCalender();
 801167a:	f003 fadd 	bl	8014c38 <getRTCCalender>
	HAL_IWDG_Refresh(&hiwdg);
 801167e:	4872      	ldr	r0, [pc, #456]	; (8011848 <main+0x350>)
 8011680:	f7f6 fba2 	bl	8007dc8 <HAL_IWDG_Refresh>
	MX_LWIP_Process();
 8011684:	f7ff fed0 	bl	8011428 <MX_LWIP_Process>
	updateEthLinkStatus();
 8011688:	f003 f904 	bl	8014894 <updateEthLinkStatus>
	if(gu32OperateModbusTCP == 1)
 801168c:	4b6f      	ldr	r3, [pc, #444]	; (801184c <main+0x354>)
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	2b01      	cmp	r3, #1
 8011692:	d0b4      	beq.n	80115fe <main+0x106>
	operateadc();
 8011694:	f002 ff52 	bl	801453c <operateadc>
	if((gu32TempPayloadQueueEnqueue == 0) && (gu32FotaRquestFlag == FALSE))
 8011698:	4b5b      	ldr	r3, [pc, #364]	; (8011808 <main+0x310>)
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d1b8      	bne.n	8011612 <main+0x11a>
 80116a0:	4b6b      	ldr	r3, [pc, #428]	; (8011850 <main+0x358>)
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d1b4      	bne.n	8011612 <main+0x11a>
		enqueue(&gsmPayload,(char *)getSystemDataString());
 80116a8:	f000 ffd8 	bl	801265c <getSystemDataString>
 80116ac:	4601      	mov	r1, r0
 80116ae:	4852      	ldr	r0, [pc, #328]	; (80117f8 <main+0x300>)
 80116b0:	f001 fd52 	bl	8013158 <enqueue>
		if(gu32InputSupplySwitchedAlert == TRUE)
 80116b4:	4b67      	ldr	r3, [pc, #412]	; (8011854 <main+0x35c>)
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	2b01      	cmp	r3, #1
 80116ba:	d0a5      	beq.n	8011608 <main+0x110>
			gu32TempPayloadQueueEnqueue = gu32UploadTimeSupply;
 80116bc:	4b4a      	ldr	r3, [pc, #296]	; (80117e8 <main+0x2f0>)
 80116be:	681a      	ldr	r2, [r3, #0]
 80116c0:	4b51      	ldr	r3, [pc, #324]	; (8011808 <main+0x310>)
 80116c2:	601a      	str	r2, [r3, #0]
		if(gu32TempPayloadQueueEnqueue < THIRTY_SEC)
 80116c4:	4b50      	ldr	r3, [pc, #320]	; (8011808 <main+0x310>)
 80116c6:	681a      	ldr	r2, [r3, #0]
 80116c8:	f247 532f 	movw	r3, #29999	; 0x752f
 80116cc:	429a      	cmp	r2, r3
 80116ce:	d8a0      	bhi.n	8011612 <main+0x11a>
			gu32TempPayloadQueueEnqueue = THIRTY_SEC;
 80116d0:	4b4d      	ldr	r3, [pc, #308]	; (8011808 <main+0x310>)
 80116d2:	f247 5230 	movw	r2, #30000	; 0x7530
 80116d6:	601a      	str	r2, [r3, #0]
 80116d8:	e79b      	b.n	8011612 <main+0x11a>
				  HAL_GPIO_WritePin(MB_DE_GPIO_Port,MB_DE_Pin,GPIO_PIN_SET);
 80116da:	4c42      	ldr	r4, [pc, #264]	; (80117e4 <main+0x2ec>)
 80116dc:	2201      	movs	r2, #1
 80116de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80116e2:	4620      	mov	r0, r4
 80116e4:	f7f5 fafa 	bl	8006cdc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(MB_RE_GPIO_Port,MB_RE_Pin,GPIO_PIN_SET);
 80116e8:	2201      	movs	r2, #1
 80116ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80116ee:	4620      	mov	r0, r4
 80116f0:	f7f5 faf4 	bl	8006cdc <HAL_GPIO_WritePin>
				  if(counter<CharacterCounter)
 80116f4:	4b4b      	ldr	r3, [pc, #300]	; (8011824 <main+0x32c>)
 80116f6:	f8d3 3dac 	ldr.w	r3, [r3, #3500]	; 0xdac
 80116fa:	4a4b      	ldr	r2, [pc, #300]	; (8011828 <main+0x330>)
 80116fc:	6812      	ldr	r2, [r2, #0]
 80116fe:	4293      	cmp	r3, r2
 8011700:	d20c      	bcs.n	801171c <main+0x224>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8011702:	4a3f      	ldr	r2, [pc, #252]	; (8011800 <main+0x308>)
 8011704:	6812      	ldr	r2, [r2, #0]
					  if(!LL_USART_IsActiveFlag_TXE(USART3))
 8011706:	f012 0f80 	tst.w	r2, #128	; 0x80
 801170a:	d089      	beq.n	8011620 <main+0x128>
						  LL_USART_TransmitData8(USART3, DebugBuff[counter++]);
 801170c:	4a45      	ldr	r2, [pc, #276]	; (8011824 <main+0x32c>)
 801170e:	1c59      	adds	r1, r3, #1
 8011710:	f8c2 1dac 	str.w	r1, [r2, #3500]	; 0xdac
 8011714:	5cd2      	ldrb	r2, [r2, r3]
  USARTx->DR = Value;
 8011716:	4b3a      	ldr	r3, [pc, #232]	; (8011800 <main+0x308>)
 8011718:	605a      	str	r2, [r3, #4]
}
 801171a:	e781      	b.n	8011620 <main+0x128>
				  else if(counter==CharacterCounter)
 801171c:	4293      	cmp	r3, r2
 801171e:	f47f af7f 	bne.w	8011620 <main+0x128>
					memset((char*)DebugBuff, 0x00, (sizeof(DebugBuff)*sizeof(char))); /* Clear  Buffer */
 8011722:	4c40      	ldr	r4, [pc, #256]	; (8011824 <main+0x32c>)
 8011724:	f640 52ac 	movw	r2, #3500	; 0xdac
 8011728:	2100      	movs	r1, #0
 801172a:	4620      	mov	r0, r4
 801172c:	f003 fef0 	bl	8015510 <memset>
					counter=0;
 8011730:	2300      	movs	r3, #0
 8011732:	f8c4 3dac 	str.w	r3, [r4, #3500]	; 0xdac
					CharacterCounter=0;
 8011736:	4a3c      	ldr	r2, [pc, #240]	; (8011828 <main+0x330>)
 8011738:	6013      	str	r3, [r2, #0]
 801173a:	e771      	b.n	8011620 <main+0x128>
		initGSMSIM868();
 801173c:	f7fe fb1e 	bl	800fd7c <initGSMSIM868>
 8011740:	e77d      	b.n	801163e <main+0x146>
		initGSMSIM868();
 8011742:	f7fe fb1b 	bl	800fd7c <initGSMSIM868>
 8011746:	e77e      	b.n	8011646 <main+0x14e>
	 if((gu32SystemResetTimer == 0) || ((FOTACompleteFlag == TRUE) && (isQueueEmpty(&gsmPayload) == 1)))
 8011748:	482b      	ldr	r0, [pc, #172]	; (80117f8 <main+0x300>)
 801174a:	f001 fd3d 	bl	80131c8 <isQueueEmpty>
 801174e:	2801      	cmp	r0, #1
 8011750:	d18a      	bne.n	8011668 <main+0x170>
		 while(1){}
 8011752:	e7fe      	b.n	8011752 <main+0x25a>
		  if(strstr(gau8SUBRequest, "F,") != NULL)
 8011754:	4940      	ldr	r1, [pc, #256]	; (8011858 <main+0x360>)
 8011756:	4841      	ldr	r0, [pc, #260]	; (801185c <main+0x364>)
 8011758:	f003 ff79 	bl	801564e <strstr>
 801175c:	b338      	cbz	r0, 80117ae <main+0x2b6>
			  const char *URL = strstr(gau8SUBRequest,"http:");
 801175e:	4d3f      	ldr	r5, [pc, #252]	; (801185c <main+0x364>)
 8011760:	493f      	ldr	r1, [pc, #252]	; (8011860 <main+0x368>)
 8011762:	4628      	mov	r0, r5
 8011764:	f003 ff73 	bl	801564e <strstr>
 8011768:	4604      	mov	r4, r0
			  const char *BIN = strstr(gau8SUBRequest,".bin");
 801176a:	493e      	ldr	r1, [pc, #248]	; (8011864 <main+0x36c>)
 801176c:	4628      	mov	r0, r5
 801176e:	f003 ff6e 	bl	801564e <strstr>
			  const size_t mlen = BIN - URL;
 8011772:	1b06      	subs	r6, r0, r4
			  if((URL != NULL) && (BIN != NULL))
 8011774:	b194      	cbz	r4, 801179c <main+0x2a4>
 8011776:	b188      	cbz	r0, 801179c <main+0x2a4>
				  memset(gau8FotaURL,0x00,sizeof(gau8FotaURL));
 8011778:	4d3b      	ldr	r5, [pc, #236]	; (8011868 <main+0x370>)
 801177a:	2296      	movs	r2, #150	; 0x96
 801177c:	2100      	movs	r1, #0
 801177e:	4628      	mov	r0, r5
 8011780:	f003 fec6 	bl	8015510 <memset>
				  memcpy(gau8FotaURL,URL,mlen+4);
 8011784:	1d32      	adds	r2, r6, #4
 8011786:	4621      	mov	r1, r4
 8011788:	4628      	mov	r0, r5
 801178a:	f003 feb3 	bl	80154f4 <memcpy>
				  Diagnostic(enmDiagnostic_FOTA_REQ_RX);
 801178e:	2004      	movs	r0, #4
 8011790:	f7fe feb0 	bl	80104f4 <Diagnostic>
					  gu32FotaRquestFlag = TRUE;
 8011794:	4b2e      	ldr	r3, [pc, #184]	; (8011850 <main+0x358>)
 8011796:	2201      	movs	r2, #1
 8011798:	601a      	str	r2, [r3, #0]
 801179a:	e002      	b.n	80117a2 <main+0x2aa>
				  SUBTriggerFlag = FALSE;
 801179c:	4b28      	ldr	r3, [pc, #160]	; (8011840 <main+0x348>)
 801179e:	2200      	movs	r2, #0
 80117a0:	701a      	strb	r2, [r3, #0]
		  memset(gau8SUBRequest,0x00,sizeof(gau8SUBRequest));
 80117a2:	2296      	movs	r2, #150	; 0x96
 80117a4:	2100      	movs	r1, #0
 80117a6:	482d      	ldr	r0, [pc, #180]	; (801185c <main+0x364>)
 80117a8:	f003 feb2 	bl	8015510 <memset>
 80117ac:	e760      	b.n	8011670 <main+0x178>
			  SUBTriggerFlag = FALSE;
 80117ae:	4b24      	ldr	r3, [pc, #144]	; (8011840 <main+0x348>)
 80117b0:	2200      	movs	r2, #0
 80117b2:	701a      	strb	r2, [r3, #0]
 80117b4:	e7f5      	b.n	80117a2 <main+0x2aa>
		HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 80117b6:	4c11      	ldr	r4, [pc, #68]	; (80117fc <main+0x304>)
 80117b8:	2140      	movs	r1, #64	; 0x40
 80117ba:	4620      	mov	r0, r4
 80117bc:	f7f5 fa94 	bl	8006ce8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(HEARTBEAT_GPIO_Port,HEARTBEAT_Pin);
 80117c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80117c4:	4620      	mov	r0, r4
 80117c6:	f7f5 fa8f 	bl	8006ce8 <HAL_GPIO_TogglePin>
		if(gu32InputSupplySwitchedAlert == FALSE)
 80117ca:	4b22      	ldr	r3, [pc, #136]	; (8011854 <main+0x35c>)
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	b923      	cbnz	r3, 80117da <main+0x2e2>
			gu32LedTimer = ONE_SEC;
 80117d0:	4b1c      	ldr	r3, [pc, #112]	; (8011844 <main+0x34c>)
 80117d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80117d6:	601a      	str	r2, [r3, #0]
 80117d8:	e74f      	b.n	801167a <main+0x182>
			gu32LedTimer = FIVE_SEC;
 80117da:	4b1a      	ldr	r3, [pc, #104]	; (8011844 <main+0x34c>)
 80117dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80117e0:	601a      	str	r2, [r3, #0]
 80117e2:	e74a      	b.n	801167a <main+0x182>
 80117e4:	40021000 	.word	0x40021000
 80117e8:	2000287c 	.word	0x2000287c
 80117ec:	0001d4c0 	.word	0x0001d4c0
 80117f0:	20002880 	.word	0x20002880
 80117f4:	000493e0 	.word	0x000493e0
 80117f8:	2000e504 	.word	0x2000e504
 80117fc:	40020c00 	.word	0x40020c00
 8011800:	40004800 	.word	0x40004800
 8011804:	20010370 	.word	0x20010370
 8011808:	20006154 	.word	0x20006154
 801180c:	20005808 	.word	0x20005808
 8011810:	2000227c 	.word	0x2000227c
 8011814:	200057d0 	.word	0x200057d0
 8011818:	2000165c 	.word	0x2000165c
 801181c:	20006174 	.word	0x20006174
 8011820:	001b7740 	.word	0x001b7740
 8011824:	20004550 	.word	0x20004550
 8011828:	2000e5dc 	.word	0x2000e5dc
 801182c:	2000d390 	.word	0x2000d390
 8011830:	20006148 	.word	0x20006148
 8011834:	20003874 	.word	0x20003874
 8011838:	2000615c 	.word	0x2000615c
 801183c:	20005d14 	.word	0x20005d14
 8011840:	200044cc 	.word	0x200044cc
 8011844:	2000616c 	.word	0x2000616c
 8011848:	2000e588 	.word	0x2000e588
 801184c:	20003824 	.word	0x20003824
 8011850:	200043c8 	.word	0x200043c8
 8011854:	20005f90 	.word	0x20005f90
 8011858:	0801e4f4 	.word	0x0801e4f4
 801185c:	200009b0 	.word	0x200009b0
 8011860:	0801e4f8 	.word	0x0801e4f8
 8011864:	0801e500 	.word	0x0801e500
 8011868:	20000504 	.word	0x20000504

0801186c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 801186c:	4770      	bx	lr
	...

08011870 <setupModbusRTU>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void setupModbusRTU(void)
{
 8011870:	b410      	push	{r4}
	uint32_t temp = 0;
	master.u16NoRegisterstoFetch = gu32Modbus485RegisterFetch;;
 8011872:	4b13      	ldr	r3, [pc, #76]	; (80118c0 <setupModbusRTU+0x50>)
 8011874:	881c      	ldrh	r4, [r3, #0]
 8011876:	4b13      	ldr	r3, [pc, #76]	; (80118c4 <setupModbusRTU+0x54>)
 8011878:	f8a3 4832 	strh.w	r4, [r3, #2098]	; 0x832
	master.u8MBSlave_Address = gu32Modbus485SlaveID;
 801187c:	4a12      	ldr	r2, [pc, #72]	; (80118c8 <setupModbusRTU+0x58>)
 801187e:	6812      	ldr	r2, [r2, #0]
 8011880:	701a      	strb	r2, [r3, #0]
	master.u8MBOperationStatus = 1;
 8011882:	2201      	movs	r2, #1
 8011884:	f883 2521 	strb.w	r2, [r3, #1313]	; 0x521
	master.u32PollDelay = gu32Modbus485PollingTime;
 8011888:	4a10      	ldr	r2, [pc, #64]	; (80118cc <setupModbusRTU+0x5c>)
 801188a:	6812      	ldr	r2, [r2, #0]
 801188c:	f8c3 2e4c 	str.w	r2, [r3, #3660]	; 0xe4c

	for(temp = 0; temp < master.u16NoRegisterstoFetch ;temp++)
 8011890:	2300      	movs	r3, #0
 8011892:	429c      	cmp	r4, r3
 8011894:	d90c      	bls.n	80118b0 <setupModbusRTU+0x40>
	{
		/*Calculates how many data values will be there in payload */
		gu32MBDataByteCounterLimitRTU += gu32MBRTUClientNoofPoints[temp];
 8011896:	4a0e      	ldr	r2, [pc, #56]	; (80118d0 <setupModbusRTU+0x60>)
 8011898:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801189c:	f8d2 0258 	ldr.w	r0, [r2, #600]	; 0x258
 80118a0:	490c      	ldr	r1, [pc, #48]	; (80118d4 <setupModbusRTU+0x64>)
 80118a2:	f8d1 24c8 	ldr.w	r2, [r1, #1224]	; 0x4c8
 80118a6:	4402      	add	r2, r0
 80118a8:	f8c1 24c8 	str.w	r2, [r1, #1224]	; 0x4c8
	for(temp = 0; temp < master.u16NoRegisterstoFetch ;temp++)
 80118ac:	3301      	adds	r3, #1
 80118ae:	e7f0      	b.n	8011892 <setupModbusRTU+0x22>
	}
	master.u8MBNoQueryAttempts = 0;
 80118b0:	4b04      	ldr	r3, [pc, #16]	; (80118c4 <setupModbusRTU+0x54>)
 80118b2:	2200      	movs	r2, #0
 80118b4:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
}
 80118b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118bc:	4770      	bx	lr
 80118be:	bf00      	nop
 80118c0:	2000380c 	.word	0x2000380c
 80118c4:	2000e5e0 	.word	0x2000e5e0
 80118c8:	20003808 	.word	0x20003808
 80118cc:	2000288c 	.word	0x2000288c
 80118d0:	20000e8c 	.word	0x20000e8c
 80118d4:	20005308 	.word	0x20005308

080118d8 <tcp_client_handle>:
	//uint16_t inPort = tpcb->remote_port;

	/* Extract the IP */
	//char *remIP = ipaddr_ntoa(&inIP);

	esTx = es;
 80118d8:	4b01      	ldr	r3, [pc, #4]	; (80118e0 <tcp_client_handle+0x8>)
 80118da:	6019      	str	r1, [r3, #0]
	pcbTx = tpcb;
 80118dc:	6058      	str	r0, [r3, #4]

}
 80118de:	4770      	bx	lr
 80118e0:	200057e8 	.word	0x200057e8

080118e4 <tcp_modbusclient_send>:
{
 80118e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118e6:	4606      	mov	r6, r0
 80118e8:	460f      	mov	r7, r1
  err_t wr_err = ERR_OK;
 80118ea:	2500      	movs	r5, #0
  while ((wr_err == ERR_OK) &&
 80118ec:	e002      	b.n	80118f4 <tcp_modbusclient_send+0x10>
      pbuf_free(ptr);
 80118ee:	4620      	mov	r0, r4
 80118f0:	f7f8 f9d2 	bl	8009c98 <pbuf_free>
  while ((wr_err == ERR_OK) &&
 80118f4:	b9cd      	cbnz	r5, 801192a <tcp_modbusclient_send+0x46>
         (es->p_tx != NULL) &&
 80118f6:	68bc      	ldr	r4, [r7, #8]
  while ((wr_err == ERR_OK) &&
 80118f8:	b1bc      	cbz	r4, 801192a <tcp_modbusclient_send+0x46>
         (es->p_tx->len <= tcp_sndbuf(tpcb)))
 80118fa:	8962      	ldrh	r2, [r4, #10]
 80118fc:	f8b6 3060 	ldrh.w	r3, [r6, #96]	; 0x60
         (es->p_tx != NULL) &&
 8011900:	429a      	cmp	r2, r3
 8011902:	d812      	bhi.n	801192a <tcp_modbusclient_send+0x46>
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8011904:	2301      	movs	r3, #1
 8011906:	6861      	ldr	r1, [r4, #4]
 8011908:	4630      	mov	r0, r6
 801190a:	f7fb fa1b 	bl	800cd44 <tcp_write>
    if (wr_err == ERR_OK) {
 801190e:	4605      	mov	r5, r0
 8011910:	b930      	cbnz	r0, 8011920 <tcp_modbusclient_send+0x3c>
      es->p_tx = ptr->next;
 8011912:	6820      	ldr	r0, [r4, #0]
 8011914:	60b8      	str	r0, [r7, #8]
      if (es->p_tx != NULL) {
 8011916:	2800      	cmp	r0, #0
 8011918:	d0e9      	beq.n	80118ee <tcp_modbusclient_send+0xa>
        pbuf_ref(es->p_tx);
 801191a:	f7f8 fb91 	bl	800a040 <pbuf_ref>
 801191e:	e7e6      	b.n	80118ee <tcp_modbusclient_send+0xa>
   } else if(wr_err == ERR_MEM) {
 8011920:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011924:	d1e6      	bne.n	80118f4 <tcp_modbusclient_send+0x10>
     es->p_tx = ptr;
 8011926:	60bc      	str	r4, [r7, #8]
 8011928:	e7e4      	b.n	80118f4 <tcp_modbusclient_send+0x10>
}
 801192a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801192c <tcp_modbusclient_sent>:
{
 801192c:	b508      	push	{r3, lr}
 801192e:	4603      	mov	r3, r0
  if(es->p_tx != NULL)
 8011930:	6882      	ldr	r2, [r0, #8]
 8011932:	b11a      	cbz	r2, 801193c <tcp_modbusclient_sent+0x10>
 8011934:	4608      	mov	r0, r1
    tcp_modbusclient_send(tpcb, es);
 8011936:	4619      	mov	r1, r3
 8011938:	f7ff ffd4 	bl	80118e4 <tcp_modbusclient_send>
}
 801193c:	2000      	movs	r0, #0
 801193e:	bd08      	pop	{r3, pc}

08011940 <tcp_modbusclient_connection_close>:
{
 8011940:	b538      	push	{r3, r4, r5, lr}
 8011942:	4604      	mov	r4, r0
 8011944:	460d      	mov	r5, r1
  tcp_recv(tpcb, NULL);
 8011946:	2100      	movs	r1, #0
 8011948:	f7f8 feb8 	bl	800a6bc <tcp_recv>
  tcp_sent(tpcb, NULL);
 801194c:	2100      	movs	r1, #0
 801194e:	4620      	mov	r0, r4
 8011950:	f7f8 fece 	bl	800a6f0 <tcp_sent>
  tcp_poll(tpcb, NULL,0);
 8011954:	2200      	movs	r2, #0
 8011956:	4611      	mov	r1, r2
 8011958:	4620      	mov	r0, r4
 801195a:	f7f8 fefb 	bl	800a754 <tcp_poll>
  if (es != NULL) {
 801195e:	b115      	cbz	r5, 8011966 <tcp_modbusclient_connection_close+0x26>
    mem_free(es);
 8011960:	4628      	mov	r0, r5
 8011962:	f7f7 fe09 	bl	8009578 <mem_free>
  tcp_close(tpcb);
 8011966:	4620      	mov	r0, r4
 8011968:	f7f9 fa30 	bl	800adcc <tcp_close>
}
 801196c:	bd38      	pop	{r3, r4, r5, pc}

0801196e <tcp_modbusclient_poll>:
{
 801196e:	b508      	push	{r3, lr}
 8011970:	460b      	mov	r3, r1
  if (es != NULL) {
 8011972:	b188      	cbz	r0, 8011998 <tcp_modbusclient_poll+0x2a>
 8011974:	4601      	mov	r1, r0
    if (es->p_tx != NULL) {
 8011976:	6882      	ldr	r2, [r0, #8]
 8011978:	b122      	cbz	r2, 8011984 <tcp_modbusclient_poll+0x16>
      tcp_modbusclient_send(tpcb, es);
 801197a:	4618      	mov	r0, r3
 801197c:	f7ff ffb2 	bl	80118e4 <tcp_modbusclient_send>
    ret_err = ERR_OK;
 8011980:	2000      	movs	r0, #0
}
 8011982:	bd08      	pop	{r3, pc}
      if (es->state == ES_CLOSING) {
 8011984:	7802      	ldrb	r2, [r0, #0]
 8011986:	2a03      	cmp	r2, #3
 8011988:	d001      	beq.n	801198e <tcp_modbusclient_poll+0x20>
    ret_err = ERR_OK;
 801198a:	2000      	movs	r0, #0
 801198c:	e7f9      	b.n	8011982 <tcp_modbusclient_poll+0x14>
        tcp_modbusclient_connection_close(tpcb, es);
 801198e:	4618      	mov	r0, r3
 8011990:	f7ff ffd6 	bl	8011940 <tcp_modbusclient_connection_close>
    ret_err = ERR_OK;
 8011994:	2000      	movs	r0, #0
 8011996:	e7f4      	b.n	8011982 <tcp_modbusclient_poll+0x14>
    tcp_abort(tpcb);
 8011998:	4608      	mov	r0, r1
 801199a:	f7f9 fb39 	bl	800b010 <tcp_abort>
    ret_err = ERR_ABRT;
 801199e:	f06f 000c 	mvn.w	r0, #12
 80119a2:	e7ee      	b.n	8011982 <tcp_modbusclient_poll+0x14>

080119a4 <tcp_modbusclient_recv>:
{
 80119a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119a6:	460f      	mov	r7, r1
 80119a8:	4615      	mov	r5, r2
 80119aa:	461c      	mov	r4, r3
  LWIP_ASSERT("arg != NULL",arg != NULL);
 80119ac:	4606      	mov	r6, r0
 80119ae:	b188      	cbz	r0, 80119d4 <tcp_modbusclient_recv+0x30>
  if (p == NULL) {
 80119b0:	b1c5      	cbz	r5, 80119e4 <tcp_modbusclient_recv+0x40>
  else if (err != ERR_OK) {
 80119b2:	bb3c      	cbnz	r4, 8011a04 <tcp_modbusclient_recv+0x60>
  } else if(es->state == ES_CONNECTED) {
 80119b4:	7833      	ldrb	r3, [r6, #0]
 80119b6:	2b01      	cmp	r3, #1
 80119b8:	d13a      	bne.n	8011a30 <tcp_modbusclient_recv+0x8c>
	  if(gu32MBClientConnectedFlag == 1)
 80119ba:	4b22      	ldr	r3, [pc, #136]	; (8011a44 <tcp_modbusclient_recv+0xa0>)
 80119bc:	689b      	ldr	r3, [r3, #8]
 80119be:	2b01      	cmp	r3, #1
 80119c0:	d025      	beq.n	8011a0e <tcp_modbusclient_recv+0x6a>
	  tcp_recved(tpcb, p->tot_len);
 80119c2:	8929      	ldrh	r1, [r5, #8]
 80119c4:	4638      	mov	r0, r7
 80119c6:	f7f8 fe09 	bl	800a5dc <tcp_recved>
	  pbuf_free(p);
 80119ca:	4628      	mov	r0, r5
 80119cc:	f7f8 f964 	bl	8009c98 <pbuf_free>
	  ret_err = ERR_OK;
 80119d0:	4620      	mov	r0, r4
}
 80119d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("arg != NULL",arg != NULL);
 80119d4:	4b1c      	ldr	r3, [pc, #112]	; (8011a48 <tcp_modbusclient_recv+0xa4>)
 80119d6:	f44f 725f 	mov.w	r2, #892	; 0x37c
 80119da:	491c      	ldr	r1, [pc, #112]	; (8011a4c <tcp_modbusclient_recv+0xa8>)
 80119dc:	481c      	ldr	r0, [pc, #112]	; (8011a50 <tcp_modbusclient_recv+0xac>)
 80119de:	f003 fdab 	bl	8015538 <printf>
 80119e2:	e7e5      	b.n	80119b0 <tcp_modbusclient_recv+0xc>
    es->state = ES_CLOSING;
 80119e4:	2303      	movs	r3, #3
 80119e6:	7033      	strb	r3, [r6, #0]
    if (es->p_tx == NULL) {
 80119e8:	68b3      	ldr	r3, [r6, #8]
 80119ea:	b12b      	cbz	r3, 80119f8 <tcp_modbusclient_recv+0x54>
      tcp_modbusclient_send(tpcb, es);
 80119ec:	4631      	mov	r1, r6
 80119ee:	4638      	mov	r0, r7
 80119f0:	f7ff ff78 	bl	80118e4 <tcp_modbusclient_send>
    ret_err = ERR_OK;
 80119f4:	2000      	movs	r0, #0
 80119f6:	e7ec      	b.n	80119d2 <tcp_modbusclient_recv+0x2e>
       tcp_modbusclient_connection_close(tpcb, es);
 80119f8:	4631      	mov	r1, r6
 80119fa:	4638      	mov	r0, r7
 80119fc:	f7ff ffa0 	bl	8011940 <tcp_modbusclient_connection_close>
    ret_err = ERR_OK;
 8011a00:	2000      	movs	r0, #0
 8011a02:	e7e6      	b.n	80119d2 <tcp_modbusclient_recv+0x2e>
      pbuf_free(p);
 8011a04:	4628      	mov	r0, r5
 8011a06:	f7f8 f947 	bl	8009c98 <pbuf_free>
    ret_err = err;
 8011a0a:	4620      	mov	r0, r4
 8011a0c:	e7e1      	b.n	80119d2 <tcp_modbusclient_recv+0x2e>
		  memcpy(strMbClient.s8SlaveResponseArray,p->payload,p->tot_len);
 8011a0e:	892a      	ldrh	r2, [r5, #8]
 8011a10:	6869      	ldr	r1, [r5, #4]
 8011a12:	4810      	ldr	r0, [pc, #64]	; (8011a54 <tcp_modbusclient_recv+0xb0>)
 8011a14:	f003 fd6e 	bl	80154f4 <memcpy>
		  enmMBCurrentState = enmMB_RESPONSERECEIVED;
 8011a18:	4b0f      	ldr	r3, [pc, #60]	; (8011a58 <tcp_modbusclient_recv+0xb4>)
 8011a1a:	2204      	movs	r2, #4
 8011a1c:	701a      	strb	r2, [r3, #0]
		  gu32MBConnected = 1;
 8011a1e:	4b09      	ldr	r3, [pc, #36]	; (8011a44 <tcp_modbusclient_recv+0xa0>)
 8011a20:	2201      	movs	r2, #1
 8011a22:	60da      	str	r2, [r3, #12]
		  gu32MBOperateFlag = 1;
 8011a24:	611a      	str	r2, [r3, #16]
		  tcp_client_handle(tpcb, es);
 8011a26:	4631      	mov	r1, r6
 8011a28:	4638      	mov	r0, r7
 8011a2a:	f7ff ff55 	bl	80118d8 <tcp_client_handle>
 8011a2e:	e7c8      	b.n	80119c2 <tcp_modbusclient_recv+0x1e>
    tcp_recved(tpcb, p->tot_len);
 8011a30:	8929      	ldrh	r1, [r5, #8]
 8011a32:	4638      	mov	r0, r7
 8011a34:	f7f8 fdd2 	bl	800a5dc <tcp_recved>
    pbuf_free(p);
 8011a38:	4628      	mov	r0, r5
 8011a3a:	f7f8 f92d 	bl	8009c98 <pbuf_free>
    ret_err = ERR_OK;
 8011a3e:	4620      	mov	r0, r4
 8011a40:	e7c7      	b.n	80119d2 <tcp_modbusclient_recv+0x2e>
 8011a42:	bf00      	nop
 8011a44:	200057e8 	.word	0x200057e8
 8011a48:	0801e508 	.word	0x0801e508
 8011a4c:	0801e51c 	.word	0x0801e51c
 8011a50:	0801c994 	.word	0x0801c994
 8011a54:	2000f5bc 	.word	0x2000f5bc
 8011a58:	20001aa8 	.word	0x20001aa8

08011a5c <updateModbusQueryFrame>:
	strMbClient.u32QueryFrame[0] = (MB_TCP_TID >> 8);
 8011a5c:	4b1f      	ldr	r3, [pc, #124]	; (8011adc <updateModbusQueryFrame+0x80>)
 8011a5e:	2200      	movs	r2, #0
 8011a60:	f883 2020 	strb.w	r2, [r3, #32]
	strMbClient.u32QueryFrame[1] = (MB_TCP_TID & 0xFF);
 8011a64:	2103      	movs	r1, #3
 8011a66:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
	strMbClient.u32QueryFrame[2] = (MB_TCP_PID >> 8);
 8011a6a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	strMbClient.u32QueryFrame[3] = (MB_TCP_PID & 0xFF);
 8011a6e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	strMbClient.u32QueryFrame[4] = (6 >> 8);
 8011a72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	strMbClient.u32QueryFrame[5] = (6 & 0xFF);
 8011a76:	2206      	movs	r2, #6
 8011a78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	strMbClient.u32QueryFrame[6] = (strMbClient.u32UnitId);
 8011a7c:	7b1a      	ldrb	r2, [r3, #12]
 8011a7e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	strMbClient.u32QueryFrame[7] = gu32MBTCPClientFuncCode[message_count];
 8011a82:	4a17      	ldr	r2, [pc, #92]	; (8011ae0 <updateModbusQueryFrame+0x84>)
 8011a84:	6950      	ldr	r0, [r2, #20]
 8011a86:	4917      	ldr	r1, [pc, #92]	; (8011ae4 <updateModbusQueryFrame+0x88>)
 8011a88:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8011a8c:	7900      	ldrb	r0, [r0, #4]
 8011a8e:	f883 0027 	strb.w	r0, [r3, #39]	; 0x27
	strMbClient.u32QueryFrame[8] = ((gu32MBTCPClientAddress[message_count]- MB_ADDRESS_DEREF) >> 8);
 8011a92:	6950      	ldr	r0, [r2, #20]
 8011a94:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8011a98:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
 8011a9c:	3801      	subs	r0, #1
 8011a9e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8011aa2:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
	strMbClient.u32QueryFrame[9] = ((gu32MBTCPClientAddress[message_count]- MB_ADDRESS_DEREF)& 0xFF);
 8011aa6:	6950      	ldr	r0, [r2, #20]
 8011aa8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8011aac:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
 8011ab0:	3801      	subs	r0, #1
 8011ab2:	b2c0      	uxtb	r0, r0
 8011ab4:	f883 0029 	strb.w	r0, [r3, #41]	; 0x29
	strMbClient.u32QueryFrame[10] = ((gu32MBTCPClientNoofPoints[message_count]) >> 8);
 8011ab8:	6950      	ldr	r0, [r2, #20]
 8011aba:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8011abe:	f890 025d 	ldrb.w	r0, [r0, #605]	; 0x25d
 8011ac2:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
	strMbClient.u32QueryFrame[11] = ((gu32MBTCPClientNoofPoints[message_count])& 0xFF);
 8011ac6:	6950      	ldr	r0, [r2, #20]
 8011ac8:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8011acc:	f891 125c 	ldrb.w	r1, [r1, #604]	; 0x25c
 8011ad0:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
	temp++;
 8011ad4:	6993      	ldr	r3, [r2, #24]
 8011ad6:	3301      	adds	r3, #1
 8011ad8:	6193      	str	r3, [r2, #24]
}
 8011ada:	4770      	bx	lr
 8011adc:	2000f4c8 	.word	0x2000f4c8
 8011ae0:	200057e8 	.word	0x200057e8
 8011ae4:	20001aa8 	.word	0x20001aa8

08011ae8 <tcp_modbusclient_connected>:
{
 8011ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aea:	460c      	mov	r4, r1
  if (err == ERR_OK) {
 8011aec:	4616      	mov	r6, r2
 8011aee:	2a00      	cmp	r2, #0
 8011af0:	d141      	bne.n	8011b76 <tcp_modbusclient_connected+0x8e>
    es = (struct mbclient *)mem_malloc(sizeof(struct mbclient));
 8011af2:	200c      	movs	r0, #12
 8011af4:	f7f7 fe18 	bl	8009728 <mem_malloc>
    if (es != NULL) {
 8011af8:	4605      	mov	r5, r0
 8011afa:	2800      	cmp	r0, #0
 8011afc:	d034      	beq.n	8011b68 <tcp_modbusclient_connected+0x80>
      es->state = ES_CONNECTED;
 8011afe:	2701      	movs	r7, #1
 8011b00:	7007      	strb	r7, [r0, #0]
      es->pcb = tpcb;
 8011b02:	6044      	str	r4, [r0, #4]
      updateModbusQueryFrame();
 8011b04:	f7ff ffaa 	bl	8011a5c <updateModbusQueryFrame>
      gu32MBClientConnectedFlag = 1;
 8011b08:	4b1e      	ldr	r3, [pc, #120]	; (8011b84 <tcp_modbusclient_connected+0x9c>)
 8011b0a:	609f      	str	r7, [r3, #8]
      es->p_tx = pbuf_alloc(PBUF_TRANSPORT, 12 , PBUF_POOL);
 8011b0c:	2203      	movs	r2, #3
 8011b0e:	210c      	movs	r1, #12
 8011b10:	2000      	movs	r0, #0
 8011b12:	f7f8 f925 	bl	8009d60 <pbuf_alloc>
 8011b16:	60a8      	str	r0, [r5, #8]
      if (es->p_tx) {
 8011b18:	b388      	cbz	r0, 8011b7e <tcp_modbusclient_connected+0x96>
        pbuf_take(es->p_tx, (uint8_t *)strMbClient.u32QueryFrame, 12);
 8011b1a:	220c      	movs	r2, #12
 8011b1c:	491a      	ldr	r1, [pc, #104]	; (8011b88 <tcp_modbusclient_connected+0xa0>)
 8011b1e:	f7f8 fbc3 	bl	800a2a8 <pbuf_take>
        tcp_arg(tpcb, es);
 8011b22:	4629      	mov	r1, r5
 8011b24:	4620      	mov	r0, r4
 8011b26:	f7f8 fdc6 	bl	800a6b6 <tcp_arg>
        tcp_recv(tpcb, tcp_modbusclient_recv);
 8011b2a:	4918      	ldr	r1, [pc, #96]	; (8011b8c <tcp_modbusclient_connected+0xa4>)
 8011b2c:	4620      	mov	r0, r4
 8011b2e:	f7f8 fdc5 	bl	800a6bc <tcp_recv>
        tcp_sent(tpcb, tcp_modbusclient_sent);
 8011b32:	4917      	ldr	r1, [pc, #92]	; (8011b90 <tcp_modbusclient_connected+0xa8>)
 8011b34:	4620      	mov	r0, r4
 8011b36:	f7f8 fddb 	bl	800a6f0 <tcp_sent>
        tcp_poll(tpcb, tcp_modbusclient_poll, 1); // changed from 1 21/1/2021
 8011b3a:	463a      	mov	r2, r7
 8011b3c:	4915      	ldr	r1, [pc, #84]	; (8011b94 <tcp_modbusclient_connected+0xac>)
 8011b3e:	4620      	mov	r0, r4
 8011b40:	f7f8 fe08 	bl	800a754 <tcp_poll>
        tcp_client_handle(tpcb, es);
 8011b44:	4629      	mov	r1, r5
 8011b46:	4620      	mov	r0, r4
 8011b48:	f7ff fec6 	bl	80118d8 <tcp_client_handle>
        gu32MBOperateFlag = 1;
 8011b4c:	4f0d      	ldr	r7, [pc, #52]	; (8011b84 <tcp_modbusclient_connected+0x9c>)
 8011b4e:	2301      	movs	r3, #1
 8011b50:	613b      	str	r3, [r7, #16]
        enmMBCurrentState = enmMB_CONNECTED;
 8011b52:	4b11      	ldr	r3, [pc, #68]	; (8011b98 <tcp_modbusclient_connected+0xb0>)
 8011b54:	2202      	movs	r2, #2
 8011b56:	701a      	strb	r2, [r3, #0]
        tcp_modbusclient_send(tpcb,es);
 8011b58:	4629      	mov	r1, r5
 8011b5a:	4620      	mov	r0, r4
 8011b5c:	f7ff fec2 	bl	80118e4 <tcp_modbusclient_send>
        gu32MBTCPTimer = FIVE_SEC;
 8011b60:	f241 3388 	movw	r3, #5000	; 0x1388
 8011b64:	61fb      	str	r3, [r7, #28]
        return ERR_OK;
 8011b66:	e00a      	b.n	8011b7e <tcp_modbusclient_connected+0x96>
      tcp_modbusclient_connection_close(tpcb, es);
 8011b68:	4601      	mov	r1, r0
 8011b6a:	4620      	mov	r0, r4
 8011b6c:	f7ff fee8 	bl	8011940 <tcp_modbusclient_connection_close>
      return ERR_MEM;
 8011b70:	f04f 36ff 	mov.w	r6, #4294967295
 8011b74:	e003      	b.n	8011b7e <tcp_modbusclient_connected+0x96>
    tcp_modbusclient_connection_close(tpcb, es);
 8011b76:	2100      	movs	r1, #0
 8011b78:	4620      	mov	r0, r4
 8011b7a:	f7ff fee1 	bl	8011940 <tcp_modbusclient_connection_close>
}
 8011b7e:	4630      	mov	r0, r6
 8011b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b82:	bf00      	nop
 8011b84:	200057e8 	.word	0x200057e8
 8011b88:	2000f4e8 	.word	0x2000f4e8
 8011b8c:	080119a5 	.word	0x080119a5
 8011b90:	0801192d 	.word	0x0801192d
 8011b94:	0801196f 	.word	0x0801196f
 8011b98:	20001aa8 	.word	0x20001aa8

08011b9c <setupModbus>:
{
 8011b9c:	b410      	push	{r4}
	strMbClient.u32MBQueryCounter = 0;
 8011b9e:	4a10      	ldr	r2, [pc, #64]	; (8011be0 <setupModbus+0x44>)
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	6113      	str	r3, [r2, #16]
	strMbClient.u32NoofRegConfigured = gu32Modbus485RegisterFetch;//44;
 8011ba4:	490f      	ldr	r1, [pc, #60]	; (8011be4 <setupModbus+0x48>)
 8011ba6:	680c      	ldr	r4, [r1, #0]
 8011ba8:	f8c2 4668 	str.w	r4, [r2, #1640]	; 0x668
	for(temp = 0; temp < strMbClient.u32NoofRegConfigured ;temp++)
 8011bac:	4a0e      	ldr	r2, [pc, #56]	; (8011be8 <setupModbus+0x4c>)
 8011bae:	6193      	str	r3, [r2, #24]
 8011bb0:	4b0d      	ldr	r3, [pc, #52]	; (8011be8 <setupModbus+0x4c>)
 8011bb2:	699b      	ldr	r3, [r3, #24]
 8011bb4:	429c      	cmp	r4, r3
 8011bb6:	d90b      	bls.n	8011bd0 <setupModbus+0x34>
		gu32MBDataByteCounterLimit += gu32MBTCPClientNoofPoints[temp];
 8011bb8:	4a0c      	ldr	r2, [pc, #48]	; (8011bec <setupModbus+0x50>)
 8011bba:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011bbe:	f8d2 025c 	ldr.w	r0, [r2, #604]	; 0x25c
 8011bc2:	4a09      	ldr	r2, [pc, #36]	; (8011be8 <setupModbus+0x4c>)
 8011bc4:	6a11      	ldr	r1, [r2, #32]
 8011bc6:	4401      	add	r1, r0
 8011bc8:	6211      	str	r1, [r2, #32]
	for(temp = 0; temp < strMbClient.u32NoofRegConfigured ;temp++)
 8011bca:	3301      	adds	r3, #1
 8011bcc:	6193      	str	r3, [r2, #24]
 8011bce:	e7ef      	b.n	8011bb0 <setupModbus+0x14>
	strMbClient.u32MBNoQueryAttempts = 0;
 8011bd0:	4b03      	ldr	r3, [pc, #12]	; (8011be0 <setupModbus+0x44>)
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	609a      	str	r2, [r3, #8]
	strMbClient.u32UnitId = 1;
 8011bd6:	2201      	movs	r2, #1
 8011bd8:	60da      	str	r2, [r3, #12]
}
 8011bda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011bde:	4770      	bx	lr
 8011be0:	2000f4c8 	.word	0x2000f4c8
 8011be4:	2000380c 	.word	0x2000380c
 8011be8:	200057e8 	.word	0x200057e8
 8011bec:	20001aa8 	.word	0x20001aa8

08011bf0 <updateModbusPayload>:
{
 8011bf0:	b570      	push	{r4, r5, r6, lr}
		value = strMbClient.u32SlaveData[RegisterCounter];    // Signed Integer
 8011bf2:	4a4a      	ldr	r2, [pc, #296]	; (8011d1c <updateModbusPayload+0x12c>)
 8011bf4:	6a54      	ldr	r4, [r2, #36]	; 0x24
 8011bf6:	f104 0194 	add.w	r1, r4, #148	; 0x94
 8011bfa:	4b49      	ldr	r3, [pc, #292]	; (8011d20 <updateModbusPayload+0x130>)
 8011bfc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8011c00:	685d      	ldr	r5, [r3, #4]
 8011c02:	6295      	str	r5, [r2, #40]	; 0x28
		if(RegisterCounter == 0)
 8011c04:	b354      	cbz	r4, 8011c5c <updateModbusPayload+0x6c>
		if(RegisterCounter < (gu32MBDataByteCounterLimit))
 8011c06:	4b45      	ldr	r3, [pc, #276]	; (8011d1c <updateModbusPayload+0x12c>)
 8011c08:	6a1b      	ldr	r3, [r3, #32]
 8011c0a:	429c      	cmp	r4, r3
 8011c0c:	d26a      	bcs.n	8011ce4 <updateModbusPayload+0xf4>
			if(gu32MBTCPDataStatus[RegisterCounter] == 1)
 8011c0e:	4b43      	ldr	r3, [pc, #268]	; (8011d1c <updateModbusPayload+0x12c>)
 8011c10:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011c14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011c16:	2b01      	cmp	r3, #1
 8011c18:	d027      	beq.n	8011c6a <updateModbusPayload+0x7a>
			else if(gu32MBTCPDataStatus[RegisterCounter] == 2)
 8011c1a:	2b02      	cmp	r3, #2
 8011c1c:	d149      	bne.n	8011cb2 <updateModbusPayload+0xc2>
				if(value < 0)
 8011c1e:	2d00      	cmp	r5, #0
 8011c20:	db42      	blt.n	8011ca8 <updateModbusPayload+0xb8>
				memset(buffer, 0x00, (6 * sizeof(char)));
 8011c22:	4b3e      	ldr	r3, [pc, #248]	; (8011d1c <updateModbusPayload+0x12c>)
 8011c24:	f203 45dc 	addw	r5, r3, #1244	; 0x4dc
 8011c28:	2200      	movs	r2, #0
 8011c2a:	f8c3 24dc 	str.w	r2, [r3, #1244]	; 0x4dc
 8011c2e:	f8a3 24e0 	strh.w	r2, [r3, #1248]	; 0x4e0
				itoa(value,buffer,10);	   	   				  // decimal String
 8011c32:	220a      	movs	r2, #10
 8011c34:	4629      	mov	r1, r5
 8011c36:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8011c38:	f003 f9fa 	bl	8015030 <itoa>
				strcat(gau8MBPayloadString,buffer);
 8011c3c:	4c39      	ldr	r4, [pc, #228]	; (8011d24 <updateModbusPayload+0x134>)
 8011c3e:	4629      	mov	r1, r5
 8011c40:	4620      	mov	r0, r4
 8011c42:	f003 fcbb 	bl	80155bc <strcat>
				strcat(gau8MBPayloadString,PAYLOAD_SEPARATOR);
 8011c46:	4620      	mov	r0, r4
 8011c48:	f7f2 fad2 	bl	80041f0 <strlen>
 8011c4c:	4b36      	ldr	r3, [pc, #216]	; (8011d28 <updateModbusPayload+0x138>)
 8011c4e:	881b      	ldrh	r3, [r3, #0]
 8011c50:	5223      	strh	r3, [r4, r0]
			RegisterCounter++;
 8011c52:	4a32      	ldr	r2, [pc, #200]	; (8011d1c <updateModbusPayload+0x12c>)
 8011c54:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8011c56:	3301      	adds	r3, #1
 8011c58:	6253      	str	r3, [r2, #36]	; 0x24
}
 8011c5a:	bd70      	pop	{r4, r5, r6, pc}
			memset(gau8MBPayloadString, 0x00, (1100 * sizeof(char)));
 8011c5c:	f240 424c 	movw	r2, #1100	; 0x44c
 8011c60:	2100      	movs	r1, #0
 8011c62:	4830      	ldr	r0, [pc, #192]	; (8011d24 <updateModbusPayload+0x134>)
 8011c64:	f003 fc54 	bl	8015510 <memset>
 8011c68:	e7cd      	b.n	8011c06 <updateModbusPayload+0x16>
				strcat(gau8MBPayloadString,"E");
 8011c6a:	4c2e      	ldr	r4, [pc, #184]	; (8011d24 <updateModbusPayload+0x134>)
 8011c6c:	4620      	mov	r0, r4
 8011c6e:	f7f2 fabf 	bl	80041f0 <strlen>
 8011c72:	4b2e      	ldr	r3, [pc, #184]	; (8011d2c <updateModbusPayload+0x13c>)
 8011c74:	881b      	ldrh	r3, [r3, #0]
 8011c76:	5223      	strh	r3, [r4, r0]
				memset(buffer, 0x00, (6 * sizeof(char)));
 8011c78:	4a28      	ldr	r2, [pc, #160]	; (8011d1c <updateModbusPayload+0x12c>)
 8011c7a:	f202 46dc 	addw	r6, r2, #1244	; 0x4dc
 8011c7e:	2300      	movs	r3, #0
 8011c80:	f8c2 34dc 	str.w	r3, [r2, #1244]	; 0x4dc
 8011c84:	f8a2 34e0 	strh.w	r3, [r2, #1248]	; 0x4e0
				itoa(value,buffer,MB_PAYLOAD_RADIX);	   	   				  // Decimal String
 8011c88:	220a      	movs	r2, #10
 8011c8a:	4631      	mov	r1, r6
 8011c8c:	4628      	mov	r0, r5
 8011c8e:	f003 f9cf 	bl	8015030 <itoa>
				strcat(gau8MBPayloadString,buffer);
 8011c92:	4631      	mov	r1, r6
 8011c94:	4620      	mov	r0, r4
 8011c96:	f003 fc91 	bl	80155bc <strcat>
				strcat(gau8MBPayloadString,PAYLOAD_SEPARATOR);
 8011c9a:	4620      	mov	r0, r4
 8011c9c:	f7f2 faa8 	bl	80041f0 <strlen>
 8011ca0:	4b21      	ldr	r3, [pc, #132]	; (8011d28 <updateModbusPayload+0x138>)
 8011ca2:	881b      	ldrh	r3, [r3, #0]
 8011ca4:	5223      	strh	r3, [r4, r0]
 8011ca6:	e7d4      	b.n	8011c52 <updateModbusPayload+0x62>
					value += 256;
 8011ca8:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8011cac:	4b1b      	ldr	r3, [pc, #108]	; (8011d1c <updateModbusPayload+0x12c>)
 8011cae:	629d      	str	r5, [r3, #40]	; 0x28
 8011cb0:	e7b7      	b.n	8011c22 <updateModbusPayload+0x32>
				memset(buffer, 0x00, (6 * sizeof(char)));
 8011cb2:	4a1a      	ldr	r2, [pc, #104]	; (8011d1c <updateModbusPayload+0x12c>)
 8011cb4:	f202 46dc 	addw	r6, r2, #1244	; 0x4dc
 8011cb8:	2300      	movs	r3, #0
 8011cba:	f8c2 34dc 	str.w	r3, [r2, #1244]	; 0x4dc
 8011cbe:	f8a2 34e0 	strh.w	r3, [r2, #1248]	; 0x4e0
				itoa(value,buffer,MB_PAYLOAD_RADIX);	   	   			// Decimal String
 8011cc2:	220a      	movs	r2, #10
 8011cc4:	4631      	mov	r1, r6
 8011cc6:	4628      	mov	r0, r5
 8011cc8:	f003 f9b2 	bl	8015030 <itoa>
				strcat(gau8MBPayloadString,buffer);
 8011ccc:	4c15      	ldr	r4, [pc, #84]	; (8011d24 <updateModbusPayload+0x134>)
 8011cce:	4631      	mov	r1, r6
 8011cd0:	4620      	mov	r0, r4
 8011cd2:	f003 fc73 	bl	80155bc <strcat>
				strcat(gau8MBPayloadString,PAYLOAD_SEPARATOR);
 8011cd6:	4620      	mov	r0, r4
 8011cd8:	f7f2 fa8a 	bl	80041f0 <strlen>
 8011cdc:	4b12      	ldr	r3, [pc, #72]	; (8011d28 <updateModbusPayload+0x138>)
 8011cde:	881b      	ldrh	r3, [r3, #0]
 8011ce0:	5223      	strh	r3, [r4, r0]
 8011ce2:	e7b6      	b.n	8011c52 <updateModbusPayload+0x62>
			memcpy(gau8TempMBPayloadString,gau8MBPayloadString,sizeof(gau8MBPayloadString));
 8011ce4:	4812      	ldr	r0, [pc, #72]	; (8011d30 <updateModbusPayload+0x140>)
 8011ce6:	f500 7462 	add.w	r4, r0, #904	; 0x388
 8011cea:	f240 454c 	movw	r5, #1100	; 0x44c
 8011cee:	462a      	mov	r2, r5
 8011cf0:	4621      	mov	r1, r4
 8011cf2:	f200 70d4 	addw	r0, r0, #2004	; 0x7d4
 8011cf6:	f003 fbfd 	bl	80154f4 <memcpy>
			memset(gau8MBPayloadString,0x00,1100 * sizeof(char));
 8011cfa:	462a      	mov	r2, r5
 8011cfc:	2100      	movs	r1, #0
 8011cfe:	4620      	mov	r0, r4
 8011d00:	f003 fc06 	bl	8015510 <memset>
			if(gu32MBProcessPayloadFlag)
 8011d04:	4b05      	ldr	r3, [pc, #20]	; (8011d1c <updateModbusPayload+0x12c>)
 8011d06:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8011d0a:	b11b      	cbz	r3, 8011d14 <updateModbusPayload+0x124>
				gu32MBProcessPayloadFlag = 0;
 8011d0c:	4b03      	ldr	r3, [pc, #12]	; (8011d1c <updateModbusPayload+0x12c>)
 8011d0e:	2200      	movs	r2, #0
 8011d10:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
			RegisterCounter = 0;
 8011d14:	4b01      	ldr	r3, [pc, #4]	; (8011d1c <updateModbusPayload+0x12c>)
 8011d16:	2200      	movs	r2, #0
 8011d18:	625a      	str	r2, [r3, #36]	; 0x24
}
 8011d1a:	e79e      	b.n	8011c5a <updateModbusPayload+0x6a>
 8011d1c:	200057e8 	.word	0x200057e8
 8011d20:	2000f4c8 	.word	0x2000f4c8
 8011d24:	20001e30 	.word	0x20001e30
 8011d28:	0801e3fc 	.word	0x0801e3fc
 8011d2c:	0801e528 	.word	0x0801e528
 8011d30:	20001aa8 	.word	0x20001aa8

08011d34 <tcp_modbusclient_connect>:
	if(gu32MBOperateFlag)
 8011d34:	4b22      	ldr	r3, [pc, #136]	; (8011dc0 <tcp_modbusclient_connect+0x8c>)
 8011d36:	691b      	ldr	r3, [r3, #16]
 8011d38:	b103      	cbz	r3, 8011d3c <tcp_modbusclient_connect+0x8>
 8011d3a:	4770      	bx	lr
{
 8011d3c:	b510      	push	{r4, lr}
 8011d3e:	b082      	sub	sp, #8
	  mbclient_pcb = tcp_new();
 8011d40:	f7f9 fa4c 	bl	800b1dc <tcp_new>
 8011d44:	4b1e      	ldr	r3, [pc, #120]	; (8011dc0 <tcp_modbusclient_connect+0x8c>)
 8011d46:	f8c3 04e8 	str.w	r0, [r3, #1256]	; 0x4e8
	if (mbclient_pcb != NULL)
 8011d4a:	2800      	cmp	r0, #0
 8011d4c:	d032      	beq.n	8011db4 <tcp_modbusclient_connect+0x80>
	IP4_ADDR( &DestIPaddr, IP_ADDRESS_DESTI[0], IP_ADDRESS_DESTI[1], IP_ADDRESS_DESTI[2], IP_ADDRESS_DESTI[3]);
 8011d4e:	4a1d      	ldr	r2, [pc, #116]	; (8011dc4 <tcp_modbusclient_connect+0x90>)
 8011d50:	7811      	ldrb	r1, [r2, #0]
 8011d52:	7853      	ldrb	r3, [r2, #1]
 8011d54:	041b      	lsls	r3, r3, #16
 8011d56:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8011d5a:	7891      	ldrb	r1, [r2, #2]
 8011d5c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8011d60:	78d1      	ldrb	r1, [r2, #3]
 8011d62:	430b      	orrs	r3, r1
 8011d64:	021a      	lsls	r2, r3, #8
 8011d66:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8011d6a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8011d6e:	0a19      	lsrs	r1, r3, #8
 8011d70:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8011d74:	430a      	orrs	r2, r1
 8011d76:	ea42 6313 	orr.w	r3, r2, r3, lsr #24
 8011d7a:	9301      	str	r3, [sp, #4]
	  tcp_err(mbclient_pcb, tcp_modbusclient_error);
 8011d7c:	4912      	ldr	r1, [pc, #72]	; (8011dc8 <tcp_modbusclient_connect+0x94>)
 8011d7e:	f7f8 fccf 	bl	800a720 <tcp_err>
	  tcp_bind(mbclient_pcb, IP_ADDR_ANY,8009);
 8011d82:	4c0f      	ldr	r4, [pc, #60]	; (8011dc0 <tcp_modbusclient_connect+0x8c>)
 8011d84:	f641 7249 	movw	r2, #8009	; 0x1f49
 8011d88:	4910      	ldr	r1, [pc, #64]	; (8011dcc <tcp_modbusclient_connect+0x98>)
 8011d8a:	f8d4 04e8 	ldr.w	r0, [r4, #1256]	; 0x4e8
 8011d8e:	f7f8 fb99 	bl	800a4c4 <tcp_bind>
	  gu32MBClientConnectedFlag = 0;
 8011d92:	2300      	movs	r3, #0
 8011d94:	60a3      	str	r3, [r4, #8]
	  err = tcp_connect(mbclient_pcb,&DestIPaddr,gu32ModbusTCPPort,tcp_modbusclient_connected); //502
 8011d96:	4b0e      	ldr	r3, [pc, #56]	; (8011dd0 <tcp_modbusclient_connect+0x9c>)
 8011d98:	4a0e      	ldr	r2, [pc, #56]	; (8011dd4 <tcp_modbusclient_connect+0xa0>)
 8011d9a:	8812      	ldrh	r2, [r2, #0]
 8011d9c:	a901      	add	r1, sp, #4
 8011d9e:	f8d4 04e8 	ldr.w	r0, [r4, #1256]	; 0x4e8
 8011da2:	f7f9 fa3d 	bl	800b220 <tcp_connect>
 8011da6:	f884 04ec 	strb.w	r0, [r4, #1260]	; 0x4ec
	  if(err != ERR_OK)
 8011daa:	b928      	cbnz	r0, 8011db8 <tcp_modbusclient_connect+0x84>
		gu32MBTCPTimer = THREE_SEC;
 8011dac:	4b04      	ldr	r3, [pc, #16]	; (8011dc0 <tcp_modbusclient_connect+0x8c>)
 8011dae:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8011db2:	61da      	str	r2, [r3, #28]
}
 8011db4:	b002      	add	sp, #8
 8011db6:	bd10      	pop	{r4, pc}
		Error_Handler();
 8011db8:	f7ff fd58 	bl	801186c <Error_Handler>
 8011dbc:	e7fa      	b.n	8011db4 <tcp_modbusclient_connect+0x80>
 8011dbe:	bf00      	nop
 8011dc0:	200057e8 	.word	0x200057e8
 8011dc4:	20003814 	.word	0x20003814
 8011dc8:	08012169 	.word	0x08012169
 8011dcc:	0801c920 	.word	0x0801c920
 8011dd0:	08011ae9 	.word	0x08011ae9
 8011dd4:	20003818 	.word	0x20003818

08011dd8 <mbTCPPoll>:
	if( (gu32MBPOLLTimer != 0 ))//gu32EthLinkAlert == 1 gu32MBProcessPayloadFlag  ||
 8011dd8:	4bad      	ldr	r3, [pc, #692]	; (8012090 <mbTCPPoll+0x2b8>)
 8011dda:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	f040 81b7 	bne.w	8012152 <mbTCPPoll+0x37a>
{
 8011de4:	b570      	push	{r4, r5, r6, lr}
	switch(enmMBCurrentState)
 8011de6:	4aab      	ldr	r2, [pc, #684]	; (8012094 <mbTCPPoll+0x2bc>)
 8011de8:	7812      	ldrb	r2, [r2, #0]
 8011dea:	2a06      	cmp	r2, #6
 8011dec:	f200 81ad 	bhi.w	801214a <mbTCPPoll+0x372>
 8011df0:	e8df f012 	tbh	[pc, r2, lsl #1]
 8011df4:	000b0007 	.word	0x000b0007
 8011df8:	00380030 	.word	0x00380030
 8011dfc:	015a0040 	.word	0x015a0040
 8011e00:	019b      	.short	0x019b
			enmMBCurrentState = enmMB_CONNECTING;
 8011e02:	4ba4      	ldr	r3, [pc, #656]	; (8012094 <mbTCPPoll+0x2bc>)
 8011e04:	2201      	movs	r2, #1
 8011e06:	701a      	strb	r2, [r3, #0]
}
 8011e08:	bd70      	pop	{r4, r5, r6, pc}
			if(gu32MBConnected == 0)
 8011e0a:	4ba1      	ldr	r3, [pc, #644]	; (8012090 <mbTCPPoll+0x2b8>)
 8011e0c:	68db      	ldr	r3, [r3, #12]
 8011e0e:	b92b      	cbnz	r3, 8011e1c <mbTCPPoll+0x44>
				tcp_modbusclient_connect();
 8011e10:	f7ff ff90 	bl	8011d34 <tcp_modbusclient_connect>
			enmMBCurrentState = enmMB_CONNECTED;
 8011e14:	4b9f      	ldr	r3, [pc, #636]	; (8012094 <mbTCPPoll+0x2bc>)
 8011e16:	2202      	movs	r2, #2
 8011e18:	701a      	strb	r2, [r3, #0]
		break;
 8011e1a:	e7f5      	b.n	8011e08 <mbTCPPoll+0x30>
				updateModbusQueryFrame();
 8011e1c:	f7ff fe1e 	bl	8011a5c <updateModbusQueryFrame>
				esTx->p_tx = pbuf_alloc(PBUF_TRANSPORT, 12 , PBUF_POOL);
 8011e20:	4c9b      	ldr	r4, [pc, #620]	; (8012090 <mbTCPPoll+0x2b8>)
 8011e22:	6825      	ldr	r5, [r4, #0]
 8011e24:	2203      	movs	r2, #3
 8011e26:	210c      	movs	r1, #12
 8011e28:	2000      	movs	r0, #0
 8011e2a:	f7f7 ff99 	bl	8009d60 <pbuf_alloc>
 8011e2e:	60a8      	str	r0, [r5, #8]
				pbuf_take(esTx->p_tx, (char*)strMbClient.u32QueryFrame, 12);
 8011e30:	6823      	ldr	r3, [r4, #0]
 8011e32:	220c      	movs	r2, #12
 8011e34:	4998      	ldr	r1, [pc, #608]	; (8012098 <mbTCPPoll+0x2c0>)
 8011e36:	6898      	ldr	r0, [r3, #8]
 8011e38:	f7f8 fa36 	bl	800a2a8 <pbuf_take>
				tcp_modbusclient_send(pcbTx, esTx);
 8011e3c:	6821      	ldr	r1, [r4, #0]
 8011e3e:	6860      	ldr	r0, [r4, #4]
 8011e40:	f7ff fd50 	bl	80118e4 <tcp_modbusclient_send>
				pbuf_free(esTx->p_tx);
 8011e44:	6823      	ldr	r3, [r4, #0]
 8011e46:	6898      	ldr	r0, [r3, #8]
 8011e48:	f7f7 ff26 	bl	8009c98 <pbuf_free>
				gu32MBTCPTimer = THREE_SEC;
 8011e4c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011e50:	61e3      	str	r3, [r4, #28]
 8011e52:	e7df      	b.n	8011e14 <mbTCPPoll+0x3c>
			if(gu32MBTCPTimer == 0)
 8011e54:	4b8e      	ldr	r3, [pc, #568]	; (8012090 <mbTCPPoll+0x2b8>)
 8011e56:	69db      	ldr	r3, [r3, #28]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d1d5      	bne.n	8011e08 <mbTCPPoll+0x30>
				enmMBCurrentState = enmMB_RESPONSETIMEOUT;
 8011e5c:	4b8d      	ldr	r3, [pc, #564]	; (8012094 <mbTCPPoll+0x2bc>)
 8011e5e:	2205      	movs	r2, #5
 8011e60:	701a      	strb	r2, [r3, #0]
 8011e62:	e7d1      	b.n	8011e08 <mbTCPPoll+0x30>
			 if(gu32MBTCPTimer == 0)
 8011e64:	4b8a      	ldr	r3, [pc, #552]	; (8012090 <mbTCPPoll+0x2b8>)
 8011e66:	69db      	ldr	r3, [r3, #28]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d1cd      	bne.n	8011e08 <mbTCPPoll+0x30>
				enmMBCurrentState = enmMB_RESPONSETIMEOUT;
 8011e6c:	4b89      	ldr	r3, [pc, #548]	; (8012094 <mbTCPPoll+0x2bc>)
 8011e6e:	2205      	movs	r2, #5
 8011e70:	701a      	strb	r2, [r3, #0]
 8011e72:	e7c9      	b.n	8011e08 <mbTCPPoll+0x30>
			if(gu32MBOperateFlag)
 8011e74:	4a86      	ldr	r2, [pc, #536]	; (8012090 <mbTCPPoll+0x2b8>)
 8011e76:	6912      	ldr	r2, [r2, #16]
 8011e78:	2a00      	cmp	r2, #0
 8011e7a:	d0c5      	beq.n	8011e08 <mbTCPPoll+0x30>
				if((((uint16_t)strMbClient.s8SlaveResponseArray[0] << 8) + strMbClient.s8SlaveResponseArray[1])
 8011e7c:	4887      	ldr	r0, [pc, #540]	; (801209c <mbTCPPoll+0x2c4>)
 8011e7e:	f990 20f4 	ldrsb.w	r2, [r0, #244]	; 0xf4
 8011e82:	b291      	uxth	r1, r2
 8011e84:	f990 20f5 	ldrsb.w	r2, [r0, #245]	; 0xf5
 8011e88:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8011e8c:	2a03      	cmp	r2, #3
 8011e8e:	d021      	beq.n	8011ed4 <mbTCPPoll+0xfc>
				gu32MBOperateFlag = 0;
 8011e90:	4b7f      	ldr	r3, [pc, #508]	; (8012090 <mbTCPPoll+0x2b8>)
 8011e92:	2200      	movs	r2, #0
 8011e94:	611a      	str	r2, [r3, #16]
				enmMBCurrentState = enmMB_CONNECTING;
 8011e96:	4a7f      	ldr	r2, [pc, #508]	; (8012094 <mbTCPPoll+0x2bc>)
 8011e98:	2101      	movs	r1, #1
 8011e9a:	7011      	strb	r1, [r2, #0]
				message_count++;
 8011e9c:	695a      	ldr	r2, [r3, #20]
 8011e9e:	440a      	add	r2, r1
 8011ea0:	615a      	str	r2, [r3, #20]
				if(message_count >= strMbClient.u32NoofRegConfigured)
 8011ea2:	4a7e      	ldr	r2, [pc, #504]	; (801209c <mbTCPPoll+0x2c4>)
 8011ea4:	f8d2 2668 	ldr.w	r2, [r2, #1640]	; 0x668
 8011ea8:	695b      	ldr	r3, [r3, #20]
 8011eaa:	429a      	cmp	r2, r3
 8011eac:	d806      	bhi.n	8011ebc <mbTCPPoll+0xe4>
					message_count = 0;
 8011eae:	4b78      	ldr	r3, [pc, #480]	; (8012090 <mbTCPPoll+0x2b8>)
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	615a      	str	r2, [r3, #20]
					gu32MBProcessPayloadFlag = 1;
 8011eb4:	f8c3 14e4 	str.w	r1, [r3, #1252]	; 0x4e4
					gu32MBDataByteCounter = 0;
 8011eb8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
				gu32MBPOLLTimer = gu32ModbusTCPPollingTime;
 8011ebc:	4b78      	ldr	r3, [pc, #480]	; (80120a0 <mbTCPPoll+0x2c8>)
 8011ebe:	681a      	ldr	r2, [r3, #0]
 8011ec0:	4b73      	ldr	r3, [pc, #460]	; (8012090 <mbTCPPoll+0x2b8>)
 8011ec2:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
				memset(strMbClient.s8SlaveResponseArray,0x00,sizeof(strMbClient.s8SlaveResponseArray));
 8011ec6:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8011eca:	2100      	movs	r1, #0
 8011ecc:	4875      	ldr	r0, [pc, #468]	; (80120a4 <mbTCPPoll+0x2cc>)
 8011ece:	f003 fb1f 	bl	8015510 <memset>
 8011ed2:	e799      	b.n	8011e08 <mbTCPPoll+0x30>
					if((((uint16_t)strMbClient.s8SlaveResponseArray[2] << 8) + strMbClient.s8SlaveResponseArray[3])
 8011ed4:	f990 20f6 	ldrsb.w	r2, [r0, #246]	; 0xf6
 8011ed8:	b291      	uxth	r1, r2
 8011eda:	f990 20f7 	ldrsb.w	r2, [r0, #247]	; 0xf7
 8011ede:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8011ee2:	2a00      	cmp	r2, #0
 8011ee4:	d1d4      	bne.n	8011e90 <mbTCPPoll+0xb8>
						gu32PayloadLength = ((uint32_t)strMbClient.s8SlaveResponseArray[4] << 8)
 8011ee6:	4602      	mov	r2, r0
 8011ee8:	f990 00f8 	ldrsb.w	r0, [r0, #248]	; 0xf8
								+ strMbClient.s8SlaveResponseArray[5];
 8011eec:	f992 10f9 	ldrsb.w	r1, [r2, #249]	; 0xf9
 8011ef0:	eb01 2100 	add.w	r1, r1, r0, lsl #8
						gu32PayloadLength = ((uint32_t)strMbClient.s8SlaveResponseArray[4] << 8)
 8011ef4:	4866      	ldr	r0, [pc, #408]	; (8012090 <mbTCPPoll+0x2b8>)
 8011ef6:	f8c0 14f4 	str.w	r1, [r0, #1268]	; 0x4f4
						if(strMbClient.s8SlaveResponseArray[6] == strMbClient.u32UnitId)
 8011efa:	f992 10fa 	ldrsb.w	r1, [r2, #250]	; 0xfa
 8011efe:	68d2      	ldr	r2, [r2, #12]
 8011f00:	4291      	cmp	r1, r2
 8011f02:	d1c5      	bne.n	8011e90 <mbTCPPoll+0xb8>
							if(strMbClient.s8SlaveResponseArray[7] == gu32MBTCPClientFuncCode[message_count])
 8011f04:	4a65      	ldr	r2, [pc, #404]	; (801209c <mbTCPPoll+0x2c4>)
 8011f06:	f992 10fb 	ldrsb.w	r1, [r2, #251]	; 0xfb
 8011f0a:	6940      	ldr	r0, [r0, #20]
 8011f0c:	4a61      	ldr	r2, [pc, #388]	; (8012094 <mbTCPPoll+0x2bc>)
 8011f0e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8011f12:	6852      	ldr	r2, [r2, #4]
 8011f14:	4291      	cmp	r1, r2
 8011f16:	d002      	beq.n	8011f1e <mbTCPPoll+0x146>
							else if((strMbClient.s8SlaveResponseArray[7] & 0x80 ) == 0x80)
 8011f18:	2900      	cmp	r1, #0
 8011f1a:	dab9      	bge.n	8011e90 <mbTCPPoll+0xb8>
 8011f1c:	e0ad      	b.n	801207a <mbTCPPoll+0x2a2>
								gu32MBDataLengthBytes = ((uint8_t)strMbClient.s8SlaveResponseArray[8]);
 8011f1e:	4a5f      	ldr	r2, [pc, #380]	; (801209c <mbTCPPoll+0x2c4>)
 8011f20:	f892 50fc 	ldrb.w	r5, [r2, #252]	; 0xfc
 8011f24:	4a5a      	ldr	r2, [pc, #360]	; (8012090 <mbTCPPoll+0x2b8>)
 8011f26:	f8c2 54f8 	str.w	r5, [r2, #1272]	; 0x4f8
								if(strMbClient.s8SlaveResponseArray[7] == 1)
 8011f2a:	2901      	cmp	r1, #1
 8011f2c:	d02c      	beq.n	8011f88 <mbTCPPoll+0x1b0>
									if(gu32MBDataLengthBytes == (2 * gu32MBTCPClientNoofPoints[message_count]))
 8011f2e:	4a58      	ldr	r2, [pc, #352]	; (8012090 <mbTCPPoll+0x2b8>)
 8011f30:	6951      	ldr	r1, [r2, #20]
 8011f32:	4a58      	ldr	r2, [pc, #352]	; (8012094 <mbTCPPoll+0x2bc>)
 8011f34:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8011f38:	f8d2 225c 	ldr.w	r2, [r2, #604]	; 0x25c
 8011f3c:	ebb5 0f42 	cmp.w	r5, r2, lsl #1
 8011f40:	d052      	beq.n	8011fe8 <mbTCPPoll+0x210>
										gu32MBDataByteCounter += gu32MBTCPClientNoofPoints[message_count];
 8011f42:	4b53      	ldr	r3, [pc, #332]	; (8012090 <mbTCPPoll+0x2b8>)
 8011f44:	6959      	ldr	r1, [r3, #20]
 8011f46:	4a53      	ldr	r2, [pc, #332]	; (8012094 <mbTCPPoll+0x2bc>)
 8011f48:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8011f4c:	f8d2 125c 	ldr.w	r1, [r2, #604]	; 0x25c
 8011f50:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 8011f54:	440a      	add	r2, r1
 8011f56:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 8011f5a:	e799      	b.n	8011e90 <mbTCPPoll+0xb8>
										strMbClient.u32SlaveData[gu32MBDataByteCounter] = strMbClient.s8SlaveResponseArray[9 + LoopCounter];
 8011f5c:	f103 0409 	add.w	r4, r3, #9
 8011f60:	4a4b      	ldr	r2, [pc, #300]	; (8012090 <mbTCPPoll+0x2b8>)
 8011f62:	f8d2 04fc 	ldr.w	r0, [r2, #1276]	; 0x4fc
 8011f66:	494d      	ldr	r1, [pc, #308]	; (801209c <mbTCPPoll+0x2c4>)
 8011f68:	440c      	add	r4, r1
 8011f6a:	f994 40f4 	ldrsb.w	r4, [r4, #244]	; 0xf4
 8011f6e:	f100 0694 	add.w	r6, r0, #148	; 0x94
 8011f72:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8011f76:	604c      	str	r4, [r1, #4]
										gu32MBTCPDataStatus[gu32MBDataByteCounter++] = 2;
 8011f78:	1c41      	adds	r1, r0, #1
 8011f7a:	f8c2 14fc 	str.w	r1, [r2, #1276]	; 0x4fc
 8011f7e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8011f82:	2102      	movs	r1, #2
 8011f84:	62d1      	str	r1, [r2, #44]	; 0x2c
									for(LoopCounter = 0; LoopCounter < gu32MBDataLengthBytes; LoopCounter++)
 8011f86:	3301      	adds	r3, #1
 8011f88:	429d      	cmp	r5, r3
 8011f8a:	d8e7      	bhi.n	8011f5c <mbTCPPoll+0x184>
									if(gu32MBDataLengthBytes != gu32MBTCPClientNoofPoints[message_count])
 8011f8c:	4b40      	ldr	r3, [pc, #256]	; (8012090 <mbTCPPoll+0x2b8>)
 8011f8e:	695a      	ldr	r2, [r3, #20]
 8011f90:	4b40      	ldr	r3, [pc, #256]	; (8012094 <mbTCPPoll+0x2bc>)
 8011f92:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8011f96:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 8011f9a:	429d      	cmp	r5, r3
 8011f9c:	f43f af78 	beq.w	8011e90 <mbTCPPoll+0xb8>
										gu32MBDataByteCounter += (gu32MBTCPClientNoofPoints[message_count] - gu32MBDataLengthBytes);
 8011fa0:	4b3b      	ldr	r3, [pc, #236]	; (8012090 <mbTCPPoll+0x2b8>)
 8011fa2:	6959      	ldr	r1, [r3, #20]
 8011fa4:	4a3b      	ldr	r2, [pc, #236]	; (8012094 <mbTCPPoll+0x2bc>)
 8011fa6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8011faa:	f8d2 225c 	ldr.w	r2, [r2, #604]	; 0x25c
 8011fae:	1b55      	subs	r5, r2, r5
 8011fb0:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 8011fb4:	442a      	add	r2, r5
 8011fb6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 8011fba:	e769      	b.n	8011e90 <mbTCPPoll+0xb8>
												strMbClient.u32SlaveData[gu32MBDataByteCounter] = ((int16_t)strMbClient.s8SlaveResponseArray[9 + (2* u32LoopCounter)] << 8)
 8011fbc:	0058      	lsls	r0, r3, #1
 8011fbe:	3009      	adds	r0, #9
 8011fc0:	4936      	ldr	r1, [pc, #216]	; (801209c <mbTCPPoll+0x2c4>)
 8011fc2:	4408      	add	r0, r1
 8011fc4:	f990 00f4 	ldrsb.w	r0, [r0, #244]	; 0xf4
																								 + (int16_t)strMbClient.s8SlaveResponseArray[9 + (2 * u32LoopCounter) + 1] + 256 ;
 8011fc8:	440a      	add	r2, r1
 8011fca:	f992 20f4 	ldrsb.w	r2, [r2, #244]	; 0xf4
 8011fce:	eb02 2200 	add.w	r2, r2, r0, lsl #8
												strMbClient.u32SlaveData[gu32MBDataByteCounter] = ((int16_t)strMbClient.s8SlaveResponseArray[9 + (2* u32LoopCounter)] << 8)
 8011fd2:	482f      	ldr	r0, [pc, #188]	; (8012090 <mbTCPPoll+0x2b8>)
 8011fd4:	f8d0 04fc 	ldr.w	r0, [r0, #1276]	; 0x4fc
																								 + (int16_t)strMbClient.s8SlaveResponseArray[9 + (2 * u32LoopCounter) + 1] + 256 ;
 8011fd8:	f502 7280 	add.w	r2, r2, #256	; 0x100
												strMbClient.u32SlaveData[gu32MBDataByteCounter] = ((int16_t)strMbClient.s8SlaveResponseArray[9 + (2* u32LoopCounter)] << 8)
 8011fdc:	3094      	adds	r0, #148	; 0x94
 8011fde:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8011fe2:	604a      	str	r2, [r1, #4]
 8011fe4:	e025      	b.n	8012032 <mbTCPPoll+0x25a>
										for(u32LoopCounter = 0; u32LoopCounter < gu32MBTCPClientNoofPoints[message_count];u32LoopCounter++)
 8011fe6:	3301      	adds	r3, #1
 8011fe8:	4a29      	ldr	r2, [pc, #164]	; (8012090 <mbTCPPoll+0x2b8>)
 8011fea:	6951      	ldr	r1, [r2, #20]
 8011fec:	4a29      	ldr	r2, [pc, #164]	; (8012094 <mbTCPPoll+0x2bc>)
 8011fee:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8011ff2:	f8d2 225c 	ldr.w	r2, [r2, #604]	; 0x25c
 8011ff6:	429a      	cmp	r2, r3
 8011ff8:	f67f af4a 	bls.w	8011e90 <mbTCPPoll+0xb8>
											if((int32_t)strMbClient.s8SlaveResponseArray[9 + (2 * u32LoopCounter) + 1] < 0)
 8011ffc:	1d58      	adds	r0, r3, #5
 8011ffe:	0042      	lsls	r2, r0, #1
 8012000:	4926      	ldr	r1, [pc, #152]	; (801209c <mbTCPPoll+0x2c4>)
 8012002:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8012006:	f991 10f4 	ldrsb.w	r1, [r1, #244]	; 0xf4
 801200a:	2900      	cmp	r1, #0
 801200c:	dbd6      	blt.n	8011fbc <mbTCPPoll+0x1e4>
												strMbClient.u32SlaveData[gu32MBDataByteCounter] = ((int16_t)strMbClient.s8SlaveResponseArray[9 + (2* u32LoopCounter)] << 8)
 801200e:	0058      	lsls	r0, r3, #1
 8012010:	3009      	adds	r0, #9
 8012012:	4922      	ldr	r1, [pc, #136]	; (801209c <mbTCPPoll+0x2c4>)
 8012014:	4408      	add	r0, r1
 8012016:	f990 40f4 	ldrsb.w	r4, [r0, #244]	; 0xf4
																								 + (int16_t)strMbClient.s8SlaveResponseArray[9 + (2 * u32LoopCounter) + 1] ;
 801201a:	440a      	add	r2, r1
 801201c:	f992 20f4 	ldrsb.w	r2, [r2, #244]	; 0xf4
												strMbClient.u32SlaveData[gu32MBDataByteCounter] = ((int16_t)strMbClient.s8SlaveResponseArray[9 + (2* u32LoopCounter)] << 8)
 8012020:	481b      	ldr	r0, [pc, #108]	; (8012090 <mbTCPPoll+0x2b8>)
 8012022:	f8d0 04fc 	ldr.w	r0, [r0, #1276]	; 0x4fc
																								 + (int16_t)strMbClient.s8SlaveResponseArray[9 + (2 * u32LoopCounter) + 1] ;
 8012026:	eb02 2204 	add.w	r2, r2, r4, lsl #8
												strMbClient.u32SlaveData[gu32MBDataByteCounter] = ((int16_t)strMbClient.s8SlaveResponseArray[9 + (2* u32LoopCounter)] << 8)
 801202a:	3094      	adds	r0, #148	; 0x94
 801202c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8012030:	604a      	str	r2, [r1, #4]
											gu32MBTCPDataStatus[gu32MBDataByteCounter] = 0;
 8012032:	4917      	ldr	r1, [pc, #92]	; (8012090 <mbTCPPoll+0x2b8>)
 8012034:	f8d1 24fc 	ldr.w	r2, [r1, #1276]	; 0x4fc
 8012038:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 801203c:	2400      	movs	r4, #0
 801203e:	62c4      	str	r4, [r0, #44]	; 0x2c
											gu32MBDataByteCounter++;
 8012040:	3201      	adds	r2, #1
 8012042:	f8c1 24fc 	str.w	r2, [r1, #1276]	; 0x4fc
											if(gu32MBDataByteCounter >= gu32MBDataByteCounterLimit)
 8012046:	6a09      	ldr	r1, [r1, #32]
 8012048:	428a      	cmp	r2, r1
 801204a:	d3cc      	bcc.n	8011fe6 <mbTCPPoll+0x20e>
												gu32MBDataByteCounter = 0;
 801204c:	4a10      	ldr	r2, [pc, #64]	; (8012090 <mbTCPPoll+0x2b8>)
 801204e:	f8c2 44fc 	str.w	r4, [r2, #1276]	; 0x4fc
 8012052:	e7c8      	b.n	8011fe6 <mbTCPPoll+0x20e>
									strMbClient.u32SlaveData[gu32MBDataByteCounter] = strMbClient.s8SlaveResponseArray[8] ;
 8012054:	4a0e      	ldr	r2, [pc, #56]	; (8012090 <mbTCPPoll+0x2b8>)
 8012056:	f8d2 04fc 	ldr.w	r0, [r2, #1276]	; 0x4fc
 801205a:	4910      	ldr	r1, [pc, #64]	; (801209c <mbTCPPoll+0x2c4>)
 801205c:	f991 40fc 	ldrsb.w	r4, [r1, #252]	; 0xfc
 8012060:	f100 0594 	add.w	r5, r0, #148	; 0x94
 8012064:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8012068:	604c      	str	r4, [r1, #4]
									gu32MBTCPDataStatus[gu32MBDataByteCounter++] = 1;
 801206a:	1c41      	adds	r1, r0, #1
 801206c:	f8c2 14fc 	str.w	r1, [r2, #1276]	; 0x4fc
 8012070:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8012074:	2101      	movs	r1, #1
 8012076:	62d1      	str	r1, [r2, #44]	; 0x2c
								for(u32TempLoopCounter = 0; u32TempLoopCounter < gu32MBTCPClientNoofPoints[message_count];u32TempLoopCounter++)
 8012078:	440b      	add	r3, r1
 801207a:	4a05      	ldr	r2, [pc, #20]	; (8012090 <mbTCPPoll+0x2b8>)
 801207c:	6951      	ldr	r1, [r2, #20]
 801207e:	4a05      	ldr	r2, [pc, #20]	; (8012094 <mbTCPPoll+0x2bc>)
 8012080:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012084:	f8d2 225c 	ldr.w	r2, [r2, #604]	; 0x25c
 8012088:	429a      	cmp	r2, r3
 801208a:	d8e3      	bhi.n	8012054 <mbTCPPoll+0x27c>
 801208c:	e700      	b.n	8011e90 <mbTCPPoll+0xb8>
 801208e:	bf00      	nop
 8012090:	200057e8 	.word	0x200057e8
 8012094:	20001aa8 	.word	0x20001aa8
 8012098:	2000f4e8 	.word	0x2000f4e8
 801209c:	2000f4c8 	.word	0x2000f4c8
 80120a0:	20002c14 	.word	0x20002c14
 80120a4:	2000f5bc 	.word	0x2000f5bc
			strMbClient.u32MBNoQueryAttempts++;
 80120a8:	4a2a      	ldr	r2, [pc, #168]	; (8012154 <mbTCPPoll+0x37c>)
 80120aa:	6893      	ldr	r3, [r2, #8]
 80120ac:	3301      	adds	r3, #1
 80120ae:	6093      	str	r3, [r2, #8]
			if(strMbClient.u32MBNoQueryAttempts > 3)
 80120b0:	2b03      	cmp	r3, #3
 80120b2:	d930      	bls.n	8012116 <mbTCPPoll+0x33e>
				uint32_t temploopcounttcp = gu32MBDataByteCounter;
 80120b4:	4a28      	ldr	r2, [pc, #160]	; (8012158 <mbTCPPoll+0x380>)
 80120b6:	f8d2 34fc 	ldr.w	r3, [r2, #1276]	; 0x4fc
				gu32MBDataByteCounter += gu32MBTCPClientNoofPoints[message_count];
 80120ba:	6950      	ldr	r0, [r2, #20]
 80120bc:	4927      	ldr	r1, [pc, #156]	; (801215c <mbTCPPoll+0x384>)
 80120be:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80120c2:	f8d1 025c 	ldr.w	r0, [r1, #604]	; 0x25c
 80120c6:	4418      	add	r0, r3
 80120c8:	f8c2 04fc 	str.w	r0, [r2, #1276]	; 0x4fc
				for(iteratortcp = temploopcounttcp ; iteratortcp < gu32MBDataByteCounter ; iteratortcp++)
 80120cc:	4298      	cmp	r0, r3
 80120ce:	d908      	bls.n	80120e2 <mbTCPPoll+0x30a>
					strMbClient.u32SlaveData[iteratortcp] = 0;
 80120d0:	f103 0194 	add.w	r1, r3, #148	; 0x94
 80120d4:	4a1f      	ldr	r2, [pc, #124]	; (8012154 <mbTCPPoll+0x37c>)
 80120d6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80120da:	2100      	movs	r1, #0
 80120dc:	6051      	str	r1, [r2, #4]
				for(iteratortcp = temploopcounttcp ; iteratortcp < gu32MBDataByteCounter ; iteratortcp++)
 80120de:	3301      	adds	r3, #1
 80120e0:	e7f4      	b.n	80120cc <mbTCPPoll+0x2f4>
				strMbClient.u32MBNoQueryAttempts = 0;
 80120e2:	491c      	ldr	r1, [pc, #112]	; (8012154 <mbTCPPoll+0x37c>)
 80120e4:	2300      	movs	r3, #0
 80120e6:	608b      	str	r3, [r1, #8]
				message_count++;
 80120e8:	4b1b      	ldr	r3, [pc, #108]	; (8012158 <mbTCPPoll+0x380>)
 80120ea:	695a      	ldr	r2, [r3, #20]
 80120ec:	3201      	adds	r2, #1
 80120ee:	615a      	str	r2, [r3, #20]
				if(message_count >= strMbClient.u32NoofRegConfigured)
 80120f0:	f8d1 2668 	ldr.w	r2, [r1, #1640]	; 0x668
 80120f4:	695b      	ldr	r3, [r3, #20]
 80120f6:	429a      	cmp	r2, r3
 80120f8:	d80d      	bhi.n	8012116 <mbTCPPoll+0x33e>
					message_count = 0;
 80120fa:	4b17      	ldr	r3, [pc, #92]	; (8012158 <mbTCPPoll+0x380>)
 80120fc:	2200      	movs	r2, #0
 80120fe:	615a      	str	r2, [r3, #20]
					gu32MBProcessPayloadFlag = 1;
 8012100:	2101      	movs	r1, #1
 8012102:	f8c3 14e4 	str.w	r1, [r3, #1252]	; 0x4e4
					gu32MBNotResponding++;
 8012106:	f8d3 1500 	ldr.w	r1, [r3, #1280]	; 0x500
 801210a:	3101      	adds	r1, #1
 801210c:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
					gu32MBDataByteCounter = 0;
 8012110:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
					gu32MBClientConnectedFlag = 0;
 8012114:	609a      	str	r2, [r3, #8]
			enmMBCurrentState = enmMB_CLOSECLIENT;
 8012116:	4b11      	ldr	r3, [pc, #68]	; (801215c <mbTCPPoll+0x384>)
 8012118:	2206      	movs	r2, #6
 801211a:	701a      	strb	r2, [r3, #0]
			memset(strMbClient.s8SlaveResponseArray,0x00,sizeof(strMbClient.s8SlaveResponseArray));
 801211c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8012120:	2100      	movs	r1, #0
 8012122:	480f      	ldr	r0, [pc, #60]	; (8012160 <mbTCPPoll+0x388>)
 8012124:	f003 f9f4 	bl	8015510 <memset>
			break;
 8012128:	e66e      	b.n	8011e08 <mbTCPPoll+0x30>
			gu32MBConnected = 0;
 801212a:	4c0b      	ldr	r4, [pc, #44]	; (8012158 <mbTCPPoll+0x380>)
 801212c:	2500      	movs	r5, #0
 801212e:	60e5      	str	r5, [r4, #12]
			tcp_modbusclient_connection_close(pcbTx, esTx);
 8012130:	6821      	ldr	r1, [r4, #0]
 8012132:	6860      	ldr	r0, [r4, #4]
 8012134:	f7ff fc04 	bl	8011940 <tcp_modbusclient_connection_close>
			enmMBCurrentState = enmMB_CONNECTING;
 8012138:	4b08      	ldr	r3, [pc, #32]	; (801215c <mbTCPPoll+0x384>)
 801213a:	2201      	movs	r2, #1
 801213c:	701a      	strb	r2, [r3, #0]
			gu32MBOperateFlag = 0;
 801213e:	6125      	str	r5, [r4, #16]
			gu32MBPOLLTimer = gu32ModbusTCPPollingTime;
 8012140:	4b08      	ldr	r3, [pc, #32]	; (8012164 <mbTCPPoll+0x38c>)
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
			break;
 8012148:	e65e      	b.n	8011e08 <mbTCPPoll+0x30>
			enmMBCurrentState = enmMB_CONNECTING;
 801214a:	4b04      	ldr	r3, [pc, #16]	; (801215c <mbTCPPoll+0x384>)
 801214c:	2201      	movs	r2, #1
 801214e:	701a      	strb	r2, [r3, #0]
		break;
 8012150:	e65a      	b.n	8011e08 <mbTCPPoll+0x30>
 8012152:	4770      	bx	lr
 8012154:	2000f4c8 	.word	0x2000f4c8
 8012158:	200057e8 	.word	0x200057e8
 801215c:	20001aa8 	.word	0x20001aa8
 8012160:	2000f5bc 	.word	0x2000f5bc
 8012164:	20002c14 	.word	0x20002c14

08012168 <tcp_modbusclient_error>:
{
 8012168:	b510      	push	{r4, lr}
	if(mbclient_pcb != NULL)
 801216a:	4b08      	ldr	r3, [pc, #32]	; (801218c <tcp_modbusclient_error+0x24>)
 801216c:	f8d3 04e8 	ldr.w	r0, [r3, #1256]	; 0x4e8
 8012170:	b108      	cbz	r0, 8012176 <tcp_modbusclient_error+0xe>
		mem_free(mbclient_pcb);
 8012172:	f7f7 fa01 	bl	8009578 <mem_free>
	tcp_close(mbclient_pcb);
 8012176:	4c05      	ldr	r4, [pc, #20]	; (801218c <tcp_modbusclient_error+0x24>)
 8012178:	f8d4 04e8 	ldr.w	r0, [r4, #1256]	; 0x4e8
 801217c:	f7f8 fe26 	bl	800adcc <tcp_close>
	tcp_modbusclient_connect();
 8012180:	f7ff fdd8 	bl	8011d34 <tcp_modbusclient_connect>
	gu32MBClientConnectedFlag = 0;
 8012184:	2300      	movs	r3, #0
 8012186:	60a3      	str	r3, [r4, #8]
}
 8012188:	bd10      	pop	{r4, pc}
 801218a:	bf00      	nop
 801218c:	200057e8 	.word	0x200057e8

08012190 <getSystemConfig>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
char * getSystemConfig(void)
{
 8012190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012192:	b08f      	sub	sp, #60	; 0x3c
	char * systemConfig = malloc(sizeof(char) * 2000);
 8012194:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8012198:	f002 ff4c 	bl	8015034 <malloc>
	if(systemConfig != NULL)
 801219c:	4604      	mov	r4, r0
 801219e:	2800      	cmp	r0, #0
 80121a0:	f000 80f0 	beq.w	8012384 <getSystemConfig+0x1f4>
	{
		memset(systemConfig,0x00,sizeof(char) * GSM_PAYLOAD_MAX_SIZE);
 80121a4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80121a8:	2100      	movs	r1, #0
 80121aa:	f003 f9b1 	bl	8015510 <memset>
		char temp_array[50];

		/* Start of Frame */
		strcpy((char *)systemConfig,(char * )START_OF_FRAME);
 80121ae:	4b77      	ldr	r3, [pc, #476]	; (801238c <getSystemConfig+0x1fc>)
 80121b0:	881b      	ldrh	r3, [r3, #0]
 80121b2:	8023      	strh	r3, [r4, #0]
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 80121b4:	4620      	mov	r0, r4
 80121b6:	f7f2 f81b 	bl	80041f0 <strlen>
 80121ba:	4b75      	ldr	r3, [pc, #468]	; (8012390 <getSystemConfig+0x200>)
 80121bc:	881d      	ldrh	r5, [r3, #0]
 80121be:	5225      	strh	r5, [r4, r0]

		/* Device UUID */
		strcat((char *)systemConfig,(char * )dinfo);
 80121c0:	4974      	ldr	r1, [pc, #464]	; (8012394 <getSystemConfig+0x204>)
 80121c2:	4620      	mov	r0, r4
 80121c4:	f003 f9fa 	bl	80155bc <strcat>
		strcat((char *)systemConfig,(char * )"_Conf");
 80121c8:	4620      	mov	r0, r4
 80121ca:	f7f2 f811 	bl	80041f0 <strlen>
 80121ce:	4603      	mov	r3, r0
 80121d0:	1821      	adds	r1, r4, r0
 80121d2:	4a71      	ldr	r2, [pc, #452]	; (8012398 <getSystemConfig+0x208>)
 80121d4:	6810      	ldr	r0, [r2, #0]
 80121d6:	50e0      	str	r0, [r4, r3]
 80121d8:	8893      	ldrh	r3, [r2, #4]
 80121da:	808b      	strh	r3, [r1, #4]
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 80121dc:	4620      	mov	r0, r4
 80121de:	f7f2 f807 	bl	80041f0 <strlen>
 80121e2:	5225      	strh	r5, [r4, r0]

		/* Model Number */
		strcat((char *)systemConfig,(char * )MODEL_NUMBER);
 80121e4:	4620      	mov	r0, r4
 80121e6:	f7f2 f803 	bl	80041f0 <strlen>
 80121ea:	4603      	mov	r3, r0
 80121ec:	1826      	adds	r6, r4, r0
 80121ee:	4a6b      	ldr	r2, [pc, #428]	; (801239c <getSystemConfig+0x20c>)
 80121f0:	ca03      	ldmia	r2!, {r0, r1}
 80121f2:	50e0      	str	r0, [r4, r3]
 80121f4:	6071      	str	r1, [r6, #4]
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 80121f6:	4620      	mov	r0, r4
 80121f8:	f7f1 fffa 	bl	80041f0 <strlen>
 80121fc:	5225      	strh	r5, [r4, r0]

		/* Local Time Stamp */
		strcat((char *)systemConfig,(char * )gau8Date);
 80121fe:	4968      	ldr	r1, [pc, #416]	; (80123a0 <getSystemConfig+0x210>)
 8012200:	4620      	mov	r0, r4
 8012202:	f003 f9db 	bl	80155bc <strcat>
		strcat((char *)systemConfig,(char * )RTC_DATESEPARATOR);
 8012206:	4620      	mov	r0, r4
 8012208:	f7f1 fff2 	bl	80041f0 <strlen>
 801220c:	4b65      	ldr	r3, [pc, #404]	; (80123a4 <getSystemConfig+0x214>)
 801220e:	881e      	ldrh	r6, [r3, #0]
 8012210:	5226      	strh	r6, [r4, r0]
		strcat((char *)systemConfig,(char * )gau8Month);
 8012212:	4965      	ldr	r1, [pc, #404]	; (80123a8 <getSystemConfig+0x218>)
 8012214:	4620      	mov	r0, r4
 8012216:	f003 f9d1 	bl	80155bc <strcat>
		strcat((char *)systemConfig,(char * )RTC_DATESEPARATOR);
 801221a:	4620      	mov	r0, r4
 801221c:	f7f1 ffe8 	bl	80041f0 <strlen>
 8012220:	5226      	strh	r6, [r4, r0]
		strcat((char *)systemConfig,(char * )gau8Year);
 8012222:	4962      	ldr	r1, [pc, #392]	; (80123ac <getSystemConfig+0x21c>)
 8012224:	4620      	mov	r0, r4
 8012226:	f003 f9c9 	bl	80155bc <strcat>
		strcat((char *)systemConfig,(char * )RTC_PARAM_SEPARATOR);
 801222a:	4620      	mov	r0, r4
 801222c:	f7f1 ffe0 	bl	80041f0 <strlen>
 8012230:	4b5f      	ldr	r3, [pc, #380]	; (80123b0 <getSystemConfig+0x220>)
 8012232:	881b      	ldrh	r3, [r3, #0]
 8012234:	5223      	strh	r3, [r4, r0]
		strcat((char *)systemConfig,(char * )gau8Hour);
 8012236:	495f      	ldr	r1, [pc, #380]	; (80123b4 <getSystemConfig+0x224>)
 8012238:	4620      	mov	r0, r4
 801223a:	f003 f9bf 	bl	80155bc <strcat>
		strcat((char *)systemConfig,(char * )RTC_TIMESEPARATOR);
 801223e:	4620      	mov	r0, r4
 8012240:	f7f1 ffd6 	bl	80041f0 <strlen>
 8012244:	4b5c      	ldr	r3, [pc, #368]	; (80123b8 <getSystemConfig+0x228>)
 8012246:	881e      	ldrh	r6, [r3, #0]
 8012248:	5226      	strh	r6, [r4, r0]
		strcat((char *)systemConfig,(char * )gau8Minutes);
 801224a:	495c      	ldr	r1, [pc, #368]	; (80123bc <getSystemConfig+0x22c>)
 801224c:	4620      	mov	r0, r4
 801224e:	f003 f9b5 	bl	80155bc <strcat>
		strcat((char *)systemConfig,(char * )RTC_TIMESEPARATOR);
 8012252:	4620      	mov	r0, r4
 8012254:	f7f1 ffcc 	bl	80041f0 <strlen>
 8012258:	5226      	strh	r6, [r4, r0]
		strcat((char *)systemConfig,(char * )gau8Seconds);
 801225a:	4959      	ldr	r1, [pc, #356]	; (80123c0 <getSystemConfig+0x230>)
 801225c:	4620      	mov	r0, r4
 801225e:	f003 f9ad 	bl	80155bc <strcat>
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 8012262:	4620      	mov	r0, r4
 8012264:	f7f1 ffc4 	bl	80041f0 <strlen>
 8012268:	5225      	strh	r5, [r4, r0]

		/* Firmware Version*/
		strcat((char *)systemConfig,(char * )FIRMWARE_VER);
 801226a:	4620      	mov	r0, r4
 801226c:	f7f1 ffc0 	bl	80041f0 <strlen>
 8012270:	4607      	mov	r7, r0
 8012272:	1826      	adds	r6, r4, r0
 8012274:	4b53      	ldr	r3, [pc, #332]	; (80123c4 <getSystemConfig+0x234>)
 8012276:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012278:	51e0      	str	r0, [r4, r7]
 801227a:	6071      	str	r1, [r6, #4]
 801227c:	60b2      	str	r2, [r6, #8]
 801227e:	881a      	ldrh	r2, [r3, #0]
 8012280:	789b      	ldrb	r3, [r3, #2]
 8012282:	81b2      	strh	r2, [r6, #12]
 8012284:	73b3      	strb	r3, [r6, #14]
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 8012286:	4620      	mov	r0, r4
 8012288:	f7f1 ffb2 	bl	80041f0 <strlen>
 801228c:	5225      	strh	r5, [r4, r0]

		strcat((char *)systemConfig,(char * )"SystemConfig :");
 801228e:	4620      	mov	r0, r4
 8012290:	f7f1 ffae 	bl	80041f0 <strlen>
 8012294:	4607      	mov	r7, r0
 8012296:	1826      	adds	r6, r4, r0
 8012298:	4b4b      	ldr	r3, [pc, #300]	; (80123c8 <getSystemConfig+0x238>)
 801229a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801229c:	51e0      	str	r0, [r4, r7]
 801229e:	6071      	str	r1, [r6, #4]
 80122a0:	60b2      	str	r2, [r6, #8]
 80122a2:	881a      	ldrh	r2, [r3, #0]
 80122a4:	789b      	ldrb	r3, [r3, #2]
 80122a6:	81b2      	strh	r2, [r6, #12]
 80122a8:	73b3      	strb	r3, [r6, #14]
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 80122aa:	4620      	mov	r0, r4
 80122ac:	f7f1 ffa0 	bl	80041f0 <strlen>
 80122b0:	5225      	strh	r5, [r4, r0]
		strcat((char *)systemConfig,(char * )gau8LastKnownConfiguration);
 80122b2:	4946      	ldr	r1, [pc, #280]	; (80123cc <getSystemConfig+0x23c>)
 80122b4:	4620      	mov	r0, r4
 80122b6:	f003 f981 	bl	80155bc <strcat>
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 80122ba:	4620      	mov	r0, r4
 80122bc:	f7f1 ff98 	bl	80041f0 <strlen>
 80122c0:	5225      	strh	r5, [r4, r0]

		/* Config Error */
		memset(temp_array, 0, sizeof(temp_array));
 80122c2:	2732      	movs	r7, #50	; 0x32
 80122c4:	463a      	mov	r2, r7
 80122c6:	2100      	movs	r1, #0
 80122c8:	a801      	add	r0, sp, #4
 80122ca:	f003 f921 	bl	8015510 <memset>
		itoa(gu32ConfigNetworkErrorDatabase, temp_array, 10);
 80122ce:	220a      	movs	r2, #10
 80122d0:	a901      	add	r1, sp, #4
 80122d2:	4b3f      	ldr	r3, [pc, #252]	; (80123d0 <getSystemConfig+0x240>)
 80122d4:	6818      	ldr	r0, [r3, #0]
 80122d6:	f002 feab 	bl	8015030 <itoa>
		strcat((char *)systemConfig,(char * )"NetworkErr ");
 80122da:	4620      	mov	r0, r4
 80122dc:	f7f1 ff88 	bl	80041f0 <strlen>
 80122e0:	4606      	mov	r6, r0
 80122e2:	eb04 0c00 	add.w	ip, r4, r0
 80122e6:	4b3b      	ldr	r3, [pc, #236]	; (80123d4 <getSystemConfig+0x244>)
 80122e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80122ea:	51a0      	str	r0, [r4, r6]
 80122ec:	f8cc 1004 	str.w	r1, [ip, #4]
 80122f0:	f8cc 2008 	str.w	r2, [ip, #8]
		strcat((char *)systemConfig,(char * )temp_array);
 80122f4:	a901      	add	r1, sp, #4
 80122f6:	4620      	mov	r0, r4
 80122f8:	f003 f960 	bl	80155bc <strcat>
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 80122fc:	4620      	mov	r0, r4
 80122fe:	f7f1 ff77 	bl	80041f0 <strlen>
 8012302:	5225      	strh	r5, [r4, r0]

		memset(temp_array, 0, sizeof(temp_array));
 8012304:	463a      	mov	r2, r7
 8012306:	2100      	movs	r1, #0
 8012308:	a801      	add	r0, sp, #4
 801230a:	f003 f901 	bl	8015510 <memset>
		itoa(gu32ConfigModbus485ErrorDatabase, temp_array, 10);
 801230e:	220a      	movs	r2, #10
 8012310:	a901      	add	r1, sp, #4
 8012312:	4b31      	ldr	r3, [pc, #196]	; (80123d8 <getSystemConfig+0x248>)
 8012314:	6818      	ldr	r0, [r3, #0]
 8012316:	f002 fe8b 	bl	8015030 <itoa>
		strcat((char *)systemConfig,(char * )"485Err ");
 801231a:	4620      	mov	r0, r4
 801231c:	f7f1 ff68 	bl	80041f0 <strlen>
 8012320:	4603      	mov	r3, r0
 8012322:	1826      	adds	r6, r4, r0
 8012324:	4a2d      	ldr	r2, [pc, #180]	; (80123dc <getSystemConfig+0x24c>)
 8012326:	ca03      	ldmia	r2!, {r0, r1}
 8012328:	50e0      	str	r0, [r4, r3]
 801232a:	6071      	str	r1, [r6, #4]
		strcat((char *)systemConfig,(char * )temp_array);
 801232c:	a901      	add	r1, sp, #4
 801232e:	4620      	mov	r0, r4
 8012330:	f003 f944 	bl	80155bc <strcat>
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 8012334:	4620      	mov	r0, r4
 8012336:	f7f1 ff5b 	bl	80041f0 <strlen>
 801233a:	5225      	strh	r5, [r4, r0]

		memset(temp_array, 0, sizeof(temp_array));
 801233c:	463a      	mov	r2, r7
 801233e:	2100      	movs	r1, #0
 8012340:	a801      	add	r0, sp, #4
 8012342:	f003 f8e5 	bl	8015510 <memset>
		itoa(gu32ConfigModbusTCPErrorDatabase, temp_array, 10);
 8012346:	220a      	movs	r2, #10
 8012348:	a901      	add	r1, sp, #4
 801234a:	4b25      	ldr	r3, [pc, #148]	; (80123e0 <getSystemConfig+0x250>)
 801234c:	6818      	ldr	r0, [r3, #0]
 801234e:	f002 fe6f 	bl	8015030 <itoa>
		strcat((char *)systemConfig,(char * )"MBTCPErr ");
 8012352:	4620      	mov	r0, r4
 8012354:	f7f1 ff4c 	bl	80041f0 <strlen>
 8012358:	4602      	mov	r2, r0
 801235a:	1826      	adds	r6, r4, r0
 801235c:	4b21      	ldr	r3, [pc, #132]	; (80123e4 <getSystemConfig+0x254>)
 801235e:	cb03      	ldmia	r3!, {r0, r1}
 8012360:	50a0      	str	r0, [r4, r2]
 8012362:	6071      	str	r1, [r6, #4]
 8012364:	881b      	ldrh	r3, [r3, #0]
 8012366:	8133      	strh	r3, [r6, #8]
		strcat((char *)systemConfig,(char * )temp_array);
 8012368:	a901      	add	r1, sp, #4
 801236a:	4620      	mov	r0, r4
 801236c:	f003 f926 	bl	80155bc <strcat>
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 8012370:	4620      	mov	r0, r4
 8012372:	f7f1 ff3d 	bl	80041f0 <strlen>
 8012376:	5225      	strh	r5, [r4, r0]

//		strcat((char *)systemConfig,(char * )"Diagnostic");
//		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
		strcat((char *)systemConfig,(char * )END_OF_FRAME);
 8012378:	4620      	mov	r0, r4
 801237a:	f7f1 ff39 	bl	80041f0 <strlen>
 801237e:	4b1a      	ldr	r3, [pc, #104]	; (80123e8 <getSystemConfig+0x258>)
 8012380:	881b      	ldrh	r3, [r3, #0]
 8012382:	5223      	strh	r3, [r4, r0]

		return systemConfig;
	}
	else
		return NULL;
}
 8012384:	4620      	mov	r0, r4
 8012386:	b00f      	add	sp, #60	; 0x3c
 8012388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801238a:	bf00      	nop
 801238c:	0801e52c 	.word	0x0801e52c
 8012390:	0801e3fc 	.word	0x0801e3fc
 8012394:	200097d4 	.word	0x200097d4
 8012398:	0801e530 	.word	0x0801e530
 801239c:	0801e390 	.word	0x0801e390
 80123a0:	20003850 	.word	0x20003850
 80123a4:	0801e538 	.word	0x0801e538
 80123a8:	20003848 	.word	0x20003848
 80123ac:	20003840 	.word	0x20003840
 80123b0:	0801e3dc 	.word	0x0801e3dc
 80123b4:	20003858 	.word	0x20003858
 80123b8:	0801e494 	.word	0x0801e494
 80123bc:	20003860 	.word	0x20003860
 80123c0:	20003868 	.word	0x20003868
 80123c4:	0801e53c 	.word	0x0801e53c
 80123c8:	0801e54c 	.word	0x0801e54c
 80123cc:	2000fb60 	.word	0x2000fb60
 80123d0:	20005d1c 	.word	0x20005d1c
 80123d4:	0801e55c 	.word	0x0801e55c
 80123d8:	20005e84 	.word	0x20005e84
 80123dc:	0801e568 	.word	0x0801e568
 80123e0:	20005eb0 	.word	0x20005eb0
 80123e4:	0801e570 	.word	0x0801e570
 80123e8:	0801e57c 	.word	0x0801e57c

080123ec <updateInputVoltage>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void updateInputVoltage(void)
{
 80123ec:	b510      	push	{r4, lr}
	sprintf(gcSystemSupplyVoltage,"%.2f",gfInputSupplyVoltage);
 80123ee:	4b0b      	ldr	r3, [pc, #44]	; (801241c <updateInputVoltage+0x30>)
 80123f0:	6818      	ldr	r0, [r3, #0]
 80123f2:	f7f2 f8b9 	bl	8004568 <__aeabi_f2d>
 80123f6:	4602      	mov	r2, r0
 80123f8:	460b      	mov	r3, r1
 80123fa:	4c09      	ldr	r4, [pc, #36]	; (8012420 <updateInputVoltage+0x34>)
 80123fc:	4621      	mov	r1, r4
 80123fe:	4809      	ldr	r0, [pc, #36]	; (8012424 <updateInputVoltage+0x38>)
 8012400:	f003 f8bc 	bl	801557c <sprintf>
	sprintf(gcBatterySupplyVoltage,"%.2f",gfBatteryVoltage);
 8012404:	4b08      	ldr	r3, [pc, #32]	; (8012428 <updateInputVoltage+0x3c>)
 8012406:	6818      	ldr	r0, [r3, #0]
 8012408:	f7f2 f8ae 	bl	8004568 <__aeabi_f2d>
 801240c:	4602      	mov	r2, r0
 801240e:	460b      	mov	r3, r1
 8012410:	4621      	mov	r1, r4
 8012412:	4806      	ldr	r0, [pc, #24]	; (801242c <updateInputVoltage+0x40>)
 8012414:	f003 f8b2 	bl	801557c <sprintf>
}
 8012418:	bd10      	pop	{r4, pc}
 801241a:	bf00      	nop
 801241c:	20005f8c 	.word	0x20005f8c
 8012420:	0801e580 	.word	0x0801e580
 8012424:	2000fb4c 	.word	0x2000fb4c
 8012428:	20005f88 	.word	0x20005f88
 801242c:	2000fb3c 	.word	0x2000fb3c

08012430 <formatGPSSring>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void formatGPSSring(void)
{
 8012430:	b570      	push	{r4, r5, r6, lr}
	/*Formulate Lat and Lon in standard format
		 * 1830.101 = 18 + (30.101094/60) = 18.5016849
		 * 7348.878 = 73 + (48.877697 /60) = 73.8146 */

	char *configptr = strtok(agpsLastLocationData, ",");
 8012432:	4984      	ldr	r1, [pc, #528]	; (8012644 <formatGPSSring+0x214>)
 8012434:	4884      	ldr	r0, [pc, #528]	; (8012648 <formatGPSSring+0x218>)
 8012436:	f003 ff55 	bl	80162e4 <strtok>
 801243a:	4604      	mov	r4, r0
	gu32ExtractGPSParamCounter = 0;
 801243c:	4b83      	ldr	r3, [pc, #524]	; (801264c <formatGPSSring+0x21c>)
 801243e:	2200      	movs	r2, #0
 8012440:	601a      	str	r2, [r3, #0]

	while(gu32ExtractGPSParamCounter != 9) //reference : while(configptr != NULL)
 8012442:	e045      	b.n	80124d0 <formatGPSSring+0xa0>
	{
		switch(gu32ExtractGPSParamCounter)
		{
			case 0:
				/* Lat  */
				strcpy(gu32GPSLat,configptr);
 8012444:	4d80      	ldr	r5, [pc, #512]	; (8012648 <formatGPSSring+0x218>)
 8012446:	4621      	mov	r1, r4
 8012448:	f105 0098 	add.w	r0, r5, #152	; 0x98
 801244c:	f003 f8d2 	bl	80155f4 <strcpy>
				templat = atof(&gu32GPSLat[2]);
 8012450:	f105 009a 	add.w	r0, r5, #154	; 0x9a
 8012454:	f002 fda9 	bl	8014faa <atof>
 8012458:	ec51 0b10 	vmov	r0, r1, d0
 801245c:	f7f2 fbd4 	bl	8004c08 <__aeabi_d2f>
 8012460:	ee06 0a90 	vmov	s13, r0
				templat /= 60;
 8012464:	eddf 7a7a 	vldr	s15, [pc, #488]	; 8012650 <formatGPSSring+0x220>
 8012468:	ee86 7aa7 	vdiv.f32	s14, s13, s15
				templat += (((gu32GPSLat[0]-'0') * 10) + (gu32GPSLat[1]-'0'));
 801246c:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
 8012470:	3b30      	subs	r3, #48	; 0x30
 8012472:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8012476:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
 801247a:	3b30      	subs	r3, #48	; 0x30
 801247c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8012480:	ee07 3a90 	vmov	s15, r3
 8012484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012488:	ee77 7a87 	vadd.f32	s15, s15, s14
 801248c:	4b6f      	ldr	r3, [pc, #444]	; (801264c <formatGPSSring+0x21c>)
 801248e:	edc3 7a01 	vstr	s15, [r3, #4]
				sprintf(gu32GPSLatformatted,"%.7f",templat);
 8012492:	ee17 0a90 	vmov	r0, s15
 8012496:	f7f2 f867 	bl	8004568 <__aeabi_f2d>
 801249a:	4602      	mov	r2, r0
 801249c:	460b      	mov	r3, r1
 801249e:	f105 06a8 	add.w	r6, r5, #168	; 0xa8
 80124a2:	496c      	ldr	r1, [pc, #432]	; (8012654 <formatGPSSring+0x224>)
 80124a4:	4630      	mov	r0, r6
 80124a6:	f003 f869 	bl	801557c <sprintf>
				memset(agpsLastLocationDataFormatted,0x00,150);
 80124aa:	35b8      	adds	r5, #184	; 0xb8
 80124ac:	2296      	movs	r2, #150	; 0x96
 80124ae:	2100      	movs	r1, #0
 80124b0:	4628      	mov	r0, r5
 80124b2:	f003 f82d 	bl	8015510 <memset>
				strcpy(agpsLastLocationDataFormatted,gu32GPSLatformatted);
 80124b6:	4631      	mov	r1, r6
 80124b8:	4628      	mov	r0, r5
 80124ba:	f003 f89b 	bl	80155f4 <strcpy>

			default:

				break;
		}
		if(gu32ExtractGPSParamCounter != 9)
 80124be:	4b63      	ldr	r3, [pc, #396]	; (801264c <formatGPSSring+0x21c>)
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	2b09      	cmp	r3, #9
 80124c4:	f040 80b7 	bne.w	8012636 <formatGPSSring+0x206>
			configptr = strtok(NULL, ",");

		gu32ExtractGPSParamCounter++;
 80124c8:	4a60      	ldr	r2, [pc, #384]	; (801264c <formatGPSSring+0x21c>)
 80124ca:	6813      	ldr	r3, [r2, #0]
 80124cc:	3301      	adds	r3, #1
 80124ce:	6013      	str	r3, [r2, #0]
	while(gu32ExtractGPSParamCounter != 9) //reference : while(configptr != NULL)
 80124d0:	4b5e      	ldr	r3, [pc, #376]	; (801264c <formatGPSSring+0x21c>)
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	2b09      	cmp	r3, #9
 80124d6:	f000 80b4 	beq.w	8012642 <formatGPSSring+0x212>
		switch(gu32ExtractGPSParamCounter)
 80124da:	2b08      	cmp	r3, #8
 80124dc:	d8ef      	bhi.n	80124be <formatGPSSring+0x8e>
 80124de:	a201      	add	r2, pc, #4	; (adr r2, 80124e4 <formatGPSSring+0xb4>)
 80124e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124e4:	08012445 	.word	0x08012445
 80124e8:	08012509 	.word	0x08012509
 80124ec:	08012529 	.word	0x08012529
 80124f0:	080125a7 	.word	0x080125a7
 80124f4:	080125bf 	.word	0x080125bf
 80124f8:	080125d7 	.word	0x080125d7
 80124fc:	080125ef 	.word	0x080125ef
 8012500:	08012607 	.word	0x08012607
 8012504:	0801261f 	.word	0x0801261f
				strcat(agpsLastLocationDataFormatted,",");
 8012508:	4d53      	ldr	r5, [pc, #332]	; (8012658 <formatGPSSring+0x228>)
 801250a:	4628      	mov	r0, r5
 801250c:	f7f1 fe70 	bl	80041f0 <strlen>
 8012510:	4b4c      	ldr	r3, [pc, #304]	; (8012644 <formatGPSSring+0x214>)
 8012512:	881e      	ldrh	r6, [r3, #0]
 8012514:	522e      	strh	r6, [r5, r0]
				strcat(agpsLastLocationDataFormatted,configptr);
 8012516:	4621      	mov	r1, r4
 8012518:	4628      	mov	r0, r5
 801251a:	f003 f84f 	bl	80155bc <strcat>
				strcat(agpsLastLocationDataFormatted,",");
 801251e:	4628      	mov	r0, r5
 8012520:	f7f1 fe66 	bl	80041f0 <strlen>
 8012524:	522e      	strh	r6, [r5, r0]
				break;
 8012526:	e7ca      	b.n	80124be <formatGPSSring+0x8e>
				strcpy(gu32GPSLon,configptr);
 8012528:	4d47      	ldr	r5, [pc, #284]	; (8012648 <formatGPSSring+0x218>)
 801252a:	4621      	mov	r1, r4
 801252c:	f505 70a8 	add.w	r0, r5, #336	; 0x150
 8012530:	f003 f860 	bl	80155f4 <strcpy>
				templon = atof(&gu32GPSLon[3]);
 8012534:	f205 1053 	addw	r0, r5, #339	; 0x153
 8012538:	f002 fd37 	bl	8014faa <atof>
 801253c:	ec51 0b10 	vmov	r0, r1, d0
 8012540:	f7f2 fb62 	bl	8004c08 <__aeabi_d2f>
 8012544:	ee06 0a90 	vmov	s13, r0
				templon /= 60;
 8012548:	eddf 7a41 	vldr	s15, [pc, #260]	; 8012650 <formatGPSSring+0x220>
 801254c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
				templon += (((gu32GPSLon[0]- '0') * 100 )+ ((gu32GPSLon[1]-'0') * 10) +(gu32GPSLon[2]-'0'));
 8012550:	f895 3150 	ldrb.w	r3, [r5, #336]	; 0x150
 8012554:	3b30      	subs	r3, #48	; 0x30
 8012556:	f895 2151 	ldrb.w	r2, [r5, #337]	; 0x151
 801255a:	3a30      	subs	r2, #48	; 0x30
 801255c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8012560:	0052      	lsls	r2, r2, #1
 8012562:	2164      	movs	r1, #100	; 0x64
 8012564:	fb01 2303 	mla	r3, r1, r3, r2
 8012568:	f895 2152 	ldrb.w	r2, [r5, #338]	; 0x152
 801256c:	3a30      	subs	r2, #48	; 0x30
 801256e:	4413      	add	r3, r2
 8012570:	ee07 3a90 	vmov	s15, r3
 8012574:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012578:	ee77 7a87 	vadd.f32	s15, s15, s14
 801257c:	4b33      	ldr	r3, [pc, #204]	; (801264c <formatGPSSring+0x21c>)
 801257e:	edc3 7a02 	vstr	s15, [r3, #8]
				sprintf(gu32GPSLonformatted,"%.7f",templon);
 8012582:	ee17 0a90 	vmov	r0, s15
 8012586:	f7f1 ffef 	bl	8004568 <__aeabi_f2d>
 801258a:	4602      	mov	r2, r0
 801258c:	460b      	mov	r3, r1
 801258e:	f505 76b0 	add.w	r6, r5, #352	; 0x160
 8012592:	4930      	ldr	r1, [pc, #192]	; (8012654 <formatGPSSring+0x224>)
 8012594:	4630      	mov	r0, r6
 8012596:	f002 fff1 	bl	801557c <sprintf>
				strcat(agpsLastLocationDataFormatted,gu32GPSLonformatted);
 801259a:	4631      	mov	r1, r6
 801259c:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
 80125a0:	f003 f80c 	bl	80155bc <strcat>
				break;
 80125a4:	e78b      	b.n	80124be <formatGPSSring+0x8e>
				strcat(agpsLastLocationDataFormatted,",");
 80125a6:	4d2c      	ldr	r5, [pc, #176]	; (8012658 <formatGPSSring+0x228>)
 80125a8:	4628      	mov	r0, r5
 80125aa:	f7f1 fe21 	bl	80041f0 <strlen>
 80125ae:	4b25      	ldr	r3, [pc, #148]	; (8012644 <formatGPSSring+0x214>)
 80125b0:	881b      	ldrh	r3, [r3, #0]
 80125b2:	522b      	strh	r3, [r5, r0]
				strcat(agpsLastLocationDataFormatted,configptr);
 80125b4:	4621      	mov	r1, r4
 80125b6:	4628      	mov	r0, r5
 80125b8:	f003 f800 	bl	80155bc <strcat>
				break;
 80125bc:	e77f      	b.n	80124be <formatGPSSring+0x8e>
				strcat(agpsLastLocationDataFormatted,",");
 80125be:	4d26      	ldr	r5, [pc, #152]	; (8012658 <formatGPSSring+0x228>)
 80125c0:	4628      	mov	r0, r5
 80125c2:	f7f1 fe15 	bl	80041f0 <strlen>
 80125c6:	4b1f      	ldr	r3, [pc, #124]	; (8012644 <formatGPSSring+0x214>)
 80125c8:	881b      	ldrh	r3, [r3, #0]
 80125ca:	522b      	strh	r3, [r5, r0]
				strcat(agpsLastLocationDataFormatted,configptr);
 80125cc:	4621      	mov	r1, r4
 80125ce:	4628      	mov	r0, r5
 80125d0:	f002 fff4 	bl	80155bc <strcat>
				break;
 80125d4:	e773      	b.n	80124be <formatGPSSring+0x8e>
				strcat(agpsLastLocationDataFormatted,",");
 80125d6:	4d20      	ldr	r5, [pc, #128]	; (8012658 <formatGPSSring+0x228>)
 80125d8:	4628      	mov	r0, r5
 80125da:	f7f1 fe09 	bl	80041f0 <strlen>
 80125de:	4b19      	ldr	r3, [pc, #100]	; (8012644 <formatGPSSring+0x214>)
 80125e0:	881b      	ldrh	r3, [r3, #0]
 80125e2:	522b      	strh	r3, [r5, r0]
				strcat(agpsLastLocationDataFormatted,configptr);
 80125e4:	4621      	mov	r1, r4
 80125e6:	4628      	mov	r0, r5
 80125e8:	f002 ffe8 	bl	80155bc <strcat>
				break;
 80125ec:	e767      	b.n	80124be <formatGPSSring+0x8e>
				strcat(agpsLastLocationDataFormatted,",");
 80125ee:	4d1a      	ldr	r5, [pc, #104]	; (8012658 <formatGPSSring+0x228>)
 80125f0:	4628      	mov	r0, r5
 80125f2:	f7f1 fdfd 	bl	80041f0 <strlen>
 80125f6:	4b13      	ldr	r3, [pc, #76]	; (8012644 <formatGPSSring+0x214>)
 80125f8:	881b      	ldrh	r3, [r3, #0]
 80125fa:	522b      	strh	r3, [r5, r0]
				strcat(agpsLastLocationDataFormatted,configptr);
 80125fc:	4621      	mov	r1, r4
 80125fe:	4628      	mov	r0, r5
 8012600:	f002 ffdc 	bl	80155bc <strcat>
				break;
 8012604:	e75b      	b.n	80124be <formatGPSSring+0x8e>
				strcat(agpsLastLocationDataFormatted,",");
 8012606:	4d14      	ldr	r5, [pc, #80]	; (8012658 <formatGPSSring+0x228>)
 8012608:	4628      	mov	r0, r5
 801260a:	f7f1 fdf1 	bl	80041f0 <strlen>
 801260e:	4b0d      	ldr	r3, [pc, #52]	; (8012644 <formatGPSSring+0x214>)
 8012610:	881b      	ldrh	r3, [r3, #0]
 8012612:	522b      	strh	r3, [r5, r0]
				strcat(agpsLastLocationDataFormatted,configptr);
 8012614:	4621      	mov	r1, r4
 8012616:	4628      	mov	r0, r5
 8012618:	f002 ffd0 	bl	80155bc <strcat>
				break;
 801261c:	e74f      	b.n	80124be <formatGPSSring+0x8e>
				strcat(agpsLastLocationDataFormatted,",");
 801261e:	4d0e      	ldr	r5, [pc, #56]	; (8012658 <formatGPSSring+0x228>)
 8012620:	4628      	mov	r0, r5
 8012622:	f7f1 fde5 	bl	80041f0 <strlen>
 8012626:	4b07      	ldr	r3, [pc, #28]	; (8012644 <formatGPSSring+0x214>)
 8012628:	881b      	ldrh	r3, [r3, #0]
 801262a:	522b      	strh	r3, [r5, r0]
				strcat(agpsLastLocationDataFormatted,configptr);
 801262c:	4621      	mov	r1, r4
 801262e:	4628      	mov	r0, r5
 8012630:	f002 ffc4 	bl	80155bc <strcat>
				break;
 8012634:	e743      	b.n	80124be <formatGPSSring+0x8e>
			configptr = strtok(NULL, ",");
 8012636:	4903      	ldr	r1, [pc, #12]	; (8012644 <formatGPSSring+0x214>)
 8012638:	2000      	movs	r0, #0
 801263a:	f003 fe53 	bl	80162e4 <strtok>
 801263e:	4604      	mov	r4, r0
 8012640:	e742      	b.n	80124c8 <formatGPSSring+0x98>

	}
}
 8012642:	bd70      	pop	{r4, r5, r6, pc}
 8012644:	0801e3fc 	.word	0x0801e3fc
 8012648:	200026c8 	.word	0x200026c8
 801264c:	20005cfc 	.word	0x20005cfc
 8012650:	42700000 	.word	0x42700000
 8012654:	0801e588 	.word	0x0801e588
 8012658:	20002780 	.word	0x20002780

0801265c <getSystemDataString>:
{
 801265c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801265e:	b08f      	sub	sp, #60	; 0x3c
	char * systemPayload = malloc(sizeof(char) * GSM_PAYLOAD_MAX_SIZE);
 8012660:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8012664:	f002 fce6 	bl	8015034 <malloc>
 8012668:	4604      	mov	r4, r0
	getrtcStamp();
 801266a:	f002 fb57 	bl	8014d1c <getrtcStamp>
	updateInputVoltage();
 801266e:	f7ff febd 	bl	80123ec <updateInputVoltage>
	itoa(gu32EthLinkAlert,gacEthernetLinkStatus,10);
 8012672:	220a      	movs	r2, #10
 8012674:	4991      	ldr	r1, [pc, #580]	; (80128bc <getSystemDataString+0x260>)
 8012676:	4b92      	ldr	r3, [pc, #584]	; (80128c0 <getSystemDataString+0x264>)
 8012678:	6818      	ldr	r0, [r3, #0]
 801267a:	f002 fcd9 	bl	8015030 <itoa>
	itoa(gu32MBDataByteCounterLimit,gacMBDataPoints,10);
 801267e:	220a      	movs	r2, #10
 8012680:	4990      	ldr	r1, [pc, #576]	; (80128c4 <getSystemDataString+0x268>)
 8012682:	4b91      	ldr	r3, [pc, #580]	; (80128c8 <getSystemDataString+0x26c>)
 8012684:	6818      	ldr	r0, [r3, #0]
 8012686:	f002 fcd3 	bl	8015030 <itoa>
	itoa(gu32MBDataByteCounterLimitRTU,gacMBDataPointsRTU,10);
 801268a:	220a      	movs	r2, #10
 801268c:	498f      	ldr	r1, [pc, #572]	; (80128cc <getSystemDataString+0x270>)
 801268e:	4b90      	ldr	r3, [pc, #576]	; (80128d0 <getSystemDataString+0x274>)
 8012690:	6818      	ldr	r0, [r3, #0]
 8012692:	f002 fccd 	bl	8015030 <itoa>
	itoa(gu32MBClientConnectedFlag,gacModbusStatus,10);
 8012696:	4b8f      	ldr	r3, [pc, #572]	; (80128d4 <getSystemDataString+0x278>)
 8012698:	6818      	ldr	r0, [r3, #0]
 801269a:	4d8f      	ldr	r5, [pc, #572]	; (80128d8 <getSystemDataString+0x27c>)
 801269c:	220a      	movs	r2, #10
 801269e:	f105 010c 	add.w	r1, r5, #12
 80126a2:	f002 fcc5 	bl	8015030 <itoa>
	itoa(gu32MBRTUClientConnectedFlag,gacModbusStatusRTU,10);
 80126a6:	4b8d      	ldr	r3, [pc, #564]	; (80128dc <getSystemDataString+0x280>)
 80126a8:	6818      	ldr	r0, [r3, #0]
 80126aa:	220a      	movs	r2, #10
 80126ac:	f105 0110 	add.w	r1, r5, #16
 80126b0:	f002 fcbe 	bl	8015030 <itoa>
	if(strlen(gsmInstance.agpsLocationData) > 10)
 80126b4:	488a      	ldr	r0, [pc, #552]	; (80128e0 <getSystemDataString+0x284>)
 80126b6:	f7f1 fd9b 	bl	80041f0 <strlen>
 80126ba:	280a      	cmp	r0, #10
 80126bc:	d812      	bhi.n	80126e4 <getSystemDataString+0x88>
	if(systemPayload != NULL)
 80126be:	b174      	cbz	r4, 80126de <getSystemDataString+0x82>
		memset(systemPayload,0x00,sizeof(char) * GSM_PAYLOAD_MAX_SIZE);
 80126c0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80126c4:	2100      	movs	r1, #0
 80126c6:	4620      	mov	r0, r4
 80126c8:	f002 ff22 	bl	8015510 <memset>
		if(gu32OperateModbusTCP == 1)
 80126cc:	4b85      	ldr	r3, [pc, #532]	; (80128e4 <getSystemDataString+0x288>)
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	2b01      	cmp	r3, #1
 80126d2:	d00f      	beq.n	80126f4 <getSystemDataString+0x98>
		if(gu32OperateModbus485 == 1)
 80126d4:	4b84      	ldr	r3, [pc, #528]	; (80128e8 <getSystemDataString+0x28c>)
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	2b01      	cmp	r3, #1
 80126da:	f000 8133 	beq.w	8012944 <getSystemDataString+0x2e8>
}
 80126de:	4620      	mov	r0, r4
 80126e0:	b00f      	add	sp, #60	; 0x3c
 80126e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(agpsLastLocationData,gsmInstance.agpsLocationData,strlen(gsmInstance.agpsLocationData));
 80126e4:	4602      	mov	r2, r0
 80126e6:	497e      	ldr	r1, [pc, #504]	; (80128e0 <getSystemDataString+0x284>)
 80126e8:	4880      	ldr	r0, [pc, #512]	; (80128ec <getSystemDataString+0x290>)
 80126ea:	f002 ff03 	bl	80154f4 <memcpy>
		formatGPSSring();
 80126ee:	f7ff fe9f 	bl	8012430 <formatGPSSring>
 80126f2:	e7e4      	b.n	80126be <getSystemDataString+0x62>
			strcpy((char *)systemPayload,(char * )START_OF_FRAME);
 80126f4:	4b7e      	ldr	r3, [pc, #504]	; (80128f0 <getSystemDataString+0x294>)
 80126f6:	881b      	ldrh	r3, [r3, #0]
 80126f8:	8023      	strh	r3, [r4, #0]
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 80126fa:	4620      	mov	r0, r4
 80126fc:	f7f1 fd78 	bl	80041f0 <strlen>
 8012700:	4b7c      	ldr	r3, [pc, #496]	; (80128f4 <getSystemDataString+0x298>)
 8012702:	881d      	ldrh	r5, [r3, #0]
 8012704:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,(char * )dinfo);
 8012706:	497c      	ldr	r1, [pc, #496]	; (80128f8 <getSystemDataString+0x29c>)
 8012708:	4620      	mov	r0, r4
 801270a:	f002 ff57 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 801270e:	4620      	mov	r0, r4
 8012710:	f7f1 fd6e 	bl	80041f0 <strlen>
 8012714:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,(char * )MODEL_NUMBER);
 8012716:	4620      	mov	r0, r4
 8012718:	f7f1 fd6a 	bl	80041f0 <strlen>
 801271c:	4603      	mov	r3, r0
 801271e:	1826      	adds	r6, r4, r0
 8012720:	4a76      	ldr	r2, [pc, #472]	; (80128fc <getSystemDataString+0x2a0>)
 8012722:	ca03      	ldmia	r2!, {r0, r1}
 8012724:	50e0      	str	r0, [r4, r3]
 8012726:	6071      	str	r1, [r6, #4]
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 8012728:	4620      	mov	r0, r4
 801272a:	f7f1 fd61 	bl	80041f0 <strlen>
 801272e:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,(char * )aShowDateStamp);
 8012730:	4973      	ldr	r1, [pc, #460]	; (8012900 <getSystemDataString+0x2a4>)
 8012732:	4620      	mov	r0, r4
 8012734:	f002 ff42 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )" ");
 8012738:	4620      	mov	r0, r4
 801273a:	f7f1 fd59 	bl	80041f0 <strlen>
 801273e:	4b71      	ldr	r3, [pc, #452]	; (8012904 <getSystemDataString+0x2a8>)
 8012740:	881b      	ldrh	r3, [r3, #0]
 8012742:	5223      	strh	r3, [r4, r0]
			strcat((char *)systemPayload,(char * )aShowTimeStamp);
 8012744:	4970      	ldr	r1, [pc, #448]	; (8012908 <getSystemDataString+0x2ac>)
 8012746:	4620      	mov	r0, r4
 8012748:	f002 ff38 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 801274c:	4620      	mov	r0, r4
 801274e:	f7f1 fd4f 	bl	80041f0 <strlen>
 8012752:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,(char * )FIRMWARE_VER);
 8012754:	4620      	mov	r0, r4
 8012756:	f7f1 fd4b 	bl	80041f0 <strlen>
 801275a:	4607      	mov	r7, r0
 801275c:	1826      	adds	r6, r4, r0
 801275e:	4b6b      	ldr	r3, [pc, #428]	; (801290c <getSystemDataString+0x2b0>)
 8012760:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012762:	51e0      	str	r0, [r4, r7]
 8012764:	6071      	str	r1, [r6, #4]
 8012766:	60b2      	str	r2, [r6, #8]
 8012768:	881a      	ldrh	r2, [r3, #0]
 801276a:	789b      	ldrb	r3, [r3, #2]
 801276c:	81b2      	strh	r2, [r6, #12]
 801276e:	73b3      	strb	r3, [r6, #14]
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 8012770:	4620      	mov	r0, r4
 8012772:	f7f1 fd3d 	bl	80041f0 <strlen>
 8012776:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,(char * )BOOT_REGION);
 8012778:	4620      	mov	r0, r4
 801277a:	f7f1 fd39 	bl	80041f0 <strlen>
 801277e:	4b64      	ldr	r3, [pc, #400]	; (8012910 <getSystemDataString+0x2b4>)
 8012780:	881b      	ldrh	r3, [r3, #0]
 8012782:	5223      	strh	r3, [r4, r0]
			strcat((char *)systemPayload,(char * )",");
 8012784:	4620      	mov	r0, r4
 8012786:	f7f1 fd33 	bl	80041f0 <strlen>
 801278a:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,(char * )gacEthernetLinkStatus);
 801278c:	494b      	ldr	r1, [pc, #300]	; (80128bc <getSystemDataString+0x260>)
 801278e:	4620      	mov	r0, r4
 8012790:	f002 ff14 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 8012794:	4620      	mov	r0, r4
 8012796:	f7f1 fd2b 	bl	80041f0 <strlen>
 801279a:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,(char * )gacMBDataPoints);
 801279c:	4949      	ldr	r1, [pc, #292]	; (80128c4 <getSystemDataString+0x268>)
 801279e:	4620      	mov	r0, r4
 80127a0:	f002 ff0c 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 80127a4:	4620      	mov	r0, r4
 80127a6:	f7f1 fd23 	bl	80041f0 <strlen>
 80127aa:	5225      	strh	r5, [r4, r0]
			if((float)gfInputSupplyVoltage < 9.00f)
 80127ac:	4b59      	ldr	r3, [pc, #356]	; (8012914 <getSystemDataString+0x2b8>)
 80127ae:	ed93 7a00 	vldr	s14, [r3]
 80127b2:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
 80127b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80127ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127be:	d56a      	bpl.n	8012896 <getSystemDataString+0x23a>
				strcat((char *)systemPayload,(char * )gcBatterySupplyVoltage);
 80127c0:	4955      	ldr	r1, [pc, #340]	; (8012918 <getSystemDataString+0x2bc>)
 80127c2:	4620      	mov	r0, r4
 80127c4:	f002 fefa 	bl	80155bc <strcat>
				strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 80127c8:	4620      	mov	r0, r4
 80127ca:	f7f1 fd11 	bl	80041f0 <strlen>
 80127ce:	4b49      	ldr	r3, [pc, #292]	; (80128f4 <getSystemDataString+0x298>)
 80127d0:	881b      	ldrh	r3, [r3, #0]
 80127d2:	5223      	strh	r3, [r4, r0]
			strcat((char *)systemPayload,(char * )gacModbusStatus);
 80127d4:	4951      	ldr	r1, [pc, #324]	; (801291c <getSystemDataString+0x2c0>)
 80127d6:	4620      	mov	r0, r4
 80127d8:	f002 fef0 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 80127dc:	4620      	mov	r0, r4
 80127de:	f7f1 fd07 	bl	80041f0 <strlen>
 80127e2:	4b44      	ldr	r3, [pc, #272]	; (80128f4 <getSystemDataString+0x298>)
 80127e4:	881d      	ldrh	r5, [r3, #0]
 80127e6:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,"IP,");
 80127e8:	4620      	mov	r0, r4
 80127ea:	f7f1 fd01 	bl	80041f0 <strlen>
 80127ee:	4603      	mov	r3, r0
 80127f0:	4a4b      	ldr	r2, [pc, #300]	; (8012920 <getSystemDataString+0x2c4>)
 80127f2:	6810      	ldr	r0, [r2, #0]
 80127f4:	50e0      	str	r0, [r4, r3]
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 80127f6:	4620      	mov	r0, r4
 80127f8:	f7f1 fcfa 	bl	80041f0 <strlen>
 80127fc:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,(char * )agpsLastLocationDataFormatted);
 80127fe:	4949      	ldr	r1, [pc, #292]	; (8012924 <getSystemDataString+0x2c8>)
 8012800:	4620      	mov	r0, r4
 8012802:	f002 fedb 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 8012806:	4620      	mov	r0, r4
 8012808:	f7f1 fcf2 	bl	80041f0 <strlen>
 801280c:	5225      	strh	r5, [r4, r0]
			if(strlen(gsmInstance.agsmSignalStrength ) > 0)
 801280e:	4b34      	ldr	r3, [pc, #208]	; (80128e0 <getSystemDataString+0x284>)
 8012810:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8012814:	2b00      	cmp	r3, #0
 8012816:	d049      	beq.n	80128ac <getSystemDataString+0x250>
				strcat((char *)systemPayload,(char * )gsmInstance.agsmSignalStrength);
 8012818:	4943      	ldr	r1, [pc, #268]	; (8012928 <getSystemDataString+0x2cc>)
 801281a:	4620      	mov	r0, r4
 801281c:	f002 fece 	bl	80155bc <strcat>
			u32TempVar = gu32GSMConfigCheckTimer / 1000;
 8012820:	4b42      	ldr	r3, [pc, #264]	; (801292c <getSystemDataString+0x2d0>)
 8012822:	681d      	ldr	r5, [r3, #0]
 8012824:	4b42      	ldr	r3, [pc, #264]	; (8012930 <getSystemDataString+0x2d4>)
 8012826:	fba3 3505 	umull	r3, r5, r3, r5
 801282a:	09ad      	lsrs	r5, r5, #6
			memset(temp_array, 0, sizeof(temp_array));
 801282c:	2232      	movs	r2, #50	; 0x32
 801282e:	2100      	movs	r1, #0
 8012830:	a801      	add	r0, sp, #4
 8012832:	f002 fe6d 	bl	8015510 <memset>
			itoa(u32TempVar, temp_array, 10);
 8012836:	220a      	movs	r2, #10
 8012838:	a901      	add	r1, sp, #4
 801283a:	4628      	mov	r0, r5
 801283c:	f002 fbf8 	bl	8015030 <itoa>
			strcat((char *)systemPayload,(char * )",ConfigCheckTime:  ");
 8012840:	4620      	mov	r0, r4
 8012842:	f7f1 fcd5 	bl	80041f0 <strlen>
 8012846:	4607      	mov	r7, r0
 8012848:	1826      	adds	r6, r4, r0
 801284a:	4d3a      	ldr	r5, [pc, #232]	; (8012934 <getSystemDataString+0x2d8>)
 801284c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801284e:	51e0      	str	r0, [r4, r7]
 8012850:	6071      	str	r1, [r6, #4]
 8012852:	60b2      	str	r2, [r6, #8]
 8012854:	60f3      	str	r3, [r6, #12]
 8012856:	6828      	ldr	r0, [r5, #0]
 8012858:	6130      	str	r0, [r6, #16]
			strcat((char *)systemPayload,(char * )temp_array);
 801285a:	a901      	add	r1, sp, #4
 801285c:	4620      	mov	r0, r4
 801285e:	f002 fead 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 8012862:	4620      	mov	r0, r4
 8012864:	f7f1 fcc4 	bl	80041f0 <strlen>
 8012868:	4b22      	ldr	r3, [pc, #136]	; (80128f4 <getSystemDataString+0x298>)
 801286a:	881b      	ldrh	r3, [r3, #0]
 801286c:	5223      	strh	r3, [r4, r0]
			strcat((char *)systemPayload,gau8TempMBPayloadString);
 801286e:	4d32      	ldr	r5, [pc, #200]	; (8012938 <getSystemDataString+0x2dc>)
 8012870:	4629      	mov	r1, r5
 8012872:	4620      	mov	r0, r4
 8012874:	f002 fea2 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )END_OF_FRAME);
 8012878:	4620      	mov	r0, r4
 801287a:	f7f1 fcb9 	bl	80041f0 <strlen>
 801287e:	4b2f      	ldr	r3, [pc, #188]	; (801293c <getSystemDataString+0x2e0>)
 8012880:	881b      	ldrh	r3, [r3, #0]
 8012882:	5223      	strh	r3, [r4, r0]
			gu32TempLoopCounter = 0;
 8012884:	2100      	movs	r1, #0
 8012886:	4b14      	ldr	r3, [pc, #80]	; (80128d8 <getSystemDataString+0x27c>)
 8012888:	6159      	str	r1, [r3, #20]
			memset(gau8TempMBPayloadString,0x00,sizeof(char) * gu32MBDataByteCounterLimit);
 801288a:	4b0f      	ldr	r3, [pc, #60]	; (80128c8 <getSystemDataString+0x26c>)
 801288c:	681a      	ldr	r2, [r3, #0]
 801288e:	4628      	mov	r0, r5
 8012890:	f002 fe3e 	bl	8015510 <memset>
 8012894:	e71e      	b.n	80126d4 <getSystemDataString+0x78>
				strcat((char *)systemPayload,(char * )gcSystemSupplyVoltage);
 8012896:	492a      	ldr	r1, [pc, #168]	; (8012940 <getSystemDataString+0x2e4>)
 8012898:	4620      	mov	r0, r4
 801289a:	f002 fe8f 	bl	80155bc <strcat>
				strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 801289e:	4620      	mov	r0, r4
 80128a0:	f7f1 fca6 	bl	80041f0 <strlen>
 80128a4:	4b13      	ldr	r3, [pc, #76]	; (80128f4 <getSystemDataString+0x298>)
 80128a6:	881b      	ldrh	r3, [r3, #0]
 80128a8:	5223      	strh	r3, [r4, r0]
 80128aa:	e793      	b.n	80127d4 <getSystemDataString+0x178>
				strcat((char *)systemPayload,gpu8Norssi);
 80128ac:	4b0f      	ldr	r3, [pc, #60]	; (80128ec <getSystemDataString+0x290>)
 80128ae:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
 80128b2:	4620      	mov	r0, r4
 80128b4:	f002 fe82 	bl	80155bc <strcat>
 80128b8:	e7b2      	b.n	8012820 <getSystemDataString+0x1c4>
 80128ba:	bf00      	nop
 80128bc:	2000fb5c 	.word	0x2000fb5c
 80128c0:	2000383c 	.word	0x2000383c
 80128c4:	2000fb54 	.word	0x2000fb54
 80128c8:	20005808 	.word	0x20005808
 80128cc:	2000fb44 	.word	0x2000fb44
 80128d0:	200057d0 	.word	0x200057d0
 80128d4:	200057f0 	.word	0x200057f0
 80128d8:	20005cfc 	.word	0x20005cfc
 80128dc:	2000531c 	.word	0x2000531c
 80128e0:	2000d390 	.word	0x2000d390
 80128e4:	20003824 	.word	0x20003824
 80128e8:	20003804 	.word	0x20003804
 80128ec:	200026c8 	.word	0x200026c8
 80128f0:	0801e52c 	.word	0x0801e52c
 80128f4:	0801e3fc 	.word	0x0801e3fc
 80128f8:	200097d4 	.word	0x200097d4
 80128fc:	0801e390 	.word	0x0801e390
 8012900:	20006070 	.word	0x20006070
 8012904:	0801e3dc 	.word	0x0801e3dc
 8012908:	2000603c 	.word	0x2000603c
 801290c:	0801e53c 	.word	0x0801e53c
 8012910:	0801e590 	.word	0x0801e590
 8012914:	20005f8c 	.word	0x20005f8c
 8012918:	2000fb3c 	.word	0x2000fb3c
 801291c:	20005d08 	.word	0x20005d08
 8012920:	0801e594 	.word	0x0801e594
 8012924:	20002780 	.word	0x20002780
 8012928:	2000d426 	.word	0x2000d426
 801292c:	20006170 	.word	0x20006170
 8012930:	10624dd3 	.word	0x10624dd3
 8012934:	0801e598 	.word	0x0801e598
 8012938:	2000227c 	.word	0x2000227c
 801293c:	0801e57c 	.word	0x0801e57c
 8012940:	2000fb4c 	.word	0x2000fb4c
			strcat((char *)systemPayload,(char * )START_OF_FRAME);
 8012944:	4620      	mov	r0, r4
 8012946:	f7f1 fc53 	bl	80041f0 <strlen>
 801294a:	4b88      	ldr	r3, [pc, #544]	; (8012b6c <getSystemDataString+0x510>)
 801294c:	881b      	ldrh	r3, [r3, #0]
 801294e:	5223      	strh	r3, [r4, r0]
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 8012950:	4620      	mov	r0, r4
 8012952:	f7f1 fc4d 	bl	80041f0 <strlen>
 8012956:	4b86      	ldr	r3, [pc, #536]	; (8012b70 <getSystemDataString+0x514>)
 8012958:	881d      	ldrh	r5, [r3, #0]
 801295a:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,(char * )dinfo);
 801295c:	4985      	ldr	r1, [pc, #532]	; (8012b74 <getSystemDataString+0x518>)
 801295e:	4620      	mov	r0, r4
 8012960:	f002 fe2c 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )"_RTU");
 8012964:	4620      	mov	r0, r4
 8012966:	f7f1 fc43 	bl	80041f0 <strlen>
 801296a:	4603      	mov	r3, r0
 801296c:	1821      	adds	r1, r4, r0
 801296e:	4a82      	ldr	r2, [pc, #520]	; (8012b78 <getSystemDataString+0x51c>)
 8012970:	6810      	ldr	r0, [r2, #0]
 8012972:	50e0      	str	r0, [r4, r3]
 8012974:	7913      	ldrb	r3, [r2, #4]
 8012976:	710b      	strb	r3, [r1, #4]
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 8012978:	4620      	mov	r0, r4
 801297a:	f7f1 fc39 	bl	80041f0 <strlen>
 801297e:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,(char * )MODEL_NUMBER);
 8012980:	4620      	mov	r0, r4
 8012982:	f7f1 fc35 	bl	80041f0 <strlen>
 8012986:	4603      	mov	r3, r0
 8012988:	1826      	adds	r6, r4, r0
 801298a:	4a7c      	ldr	r2, [pc, #496]	; (8012b7c <getSystemDataString+0x520>)
 801298c:	ca03      	ldmia	r2!, {r0, r1}
 801298e:	50e0      	str	r0, [r4, r3]
 8012990:	6071      	str	r1, [r6, #4]
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 8012992:	4620      	mov	r0, r4
 8012994:	f7f1 fc2c 	bl	80041f0 <strlen>
 8012998:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,(char * )gau8Date);
 801299a:	4979      	ldr	r1, [pc, #484]	; (8012b80 <getSystemDataString+0x524>)
 801299c:	4620      	mov	r0, r4
 801299e:	f002 fe0d 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )RTC_DATESEPARATOR);
 80129a2:	4620      	mov	r0, r4
 80129a4:	f7f1 fc24 	bl	80041f0 <strlen>
 80129a8:	4b76      	ldr	r3, [pc, #472]	; (8012b84 <getSystemDataString+0x528>)
 80129aa:	881e      	ldrh	r6, [r3, #0]
 80129ac:	5226      	strh	r6, [r4, r0]
			strcat((char *)systemPayload,(char * )gau8Month);
 80129ae:	4976      	ldr	r1, [pc, #472]	; (8012b88 <getSystemDataString+0x52c>)
 80129b0:	4620      	mov	r0, r4
 80129b2:	f002 fe03 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )RTC_DATESEPARATOR);
 80129b6:	4620      	mov	r0, r4
 80129b8:	f7f1 fc1a 	bl	80041f0 <strlen>
 80129bc:	5226      	strh	r6, [r4, r0]
			strcat((char *)systemPayload,(char * )gau8Year);
 80129be:	4973      	ldr	r1, [pc, #460]	; (8012b8c <getSystemDataString+0x530>)
 80129c0:	4620      	mov	r0, r4
 80129c2:	f002 fdfb 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )RTC_PARAM_SEPARATOR);
 80129c6:	4620      	mov	r0, r4
 80129c8:	f7f1 fc12 	bl	80041f0 <strlen>
 80129cc:	4b70      	ldr	r3, [pc, #448]	; (8012b90 <getSystemDataString+0x534>)
 80129ce:	881b      	ldrh	r3, [r3, #0]
 80129d0:	5223      	strh	r3, [r4, r0]
			strcat((char *)systemPayload,(char * )gau8Hour);
 80129d2:	4970      	ldr	r1, [pc, #448]	; (8012b94 <getSystemDataString+0x538>)
 80129d4:	4620      	mov	r0, r4
 80129d6:	f002 fdf1 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )RTC_TIMESEPARATOR);
 80129da:	4620      	mov	r0, r4
 80129dc:	f7f1 fc08 	bl	80041f0 <strlen>
 80129e0:	4b6d      	ldr	r3, [pc, #436]	; (8012b98 <getSystemDataString+0x53c>)
 80129e2:	881e      	ldrh	r6, [r3, #0]
 80129e4:	5226      	strh	r6, [r4, r0]
			strcat((char *)systemPayload,(char * )gau8Minutes);
 80129e6:	496d      	ldr	r1, [pc, #436]	; (8012b9c <getSystemDataString+0x540>)
 80129e8:	4620      	mov	r0, r4
 80129ea:	f002 fde7 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )RTC_TIMESEPARATOR);
 80129ee:	4620      	mov	r0, r4
 80129f0:	f7f1 fbfe 	bl	80041f0 <strlen>
 80129f4:	5226      	strh	r6, [r4, r0]
			strcat((char *)systemPayload,(char * )gau8Seconds);
 80129f6:	496a      	ldr	r1, [pc, #424]	; (8012ba0 <getSystemDataString+0x544>)
 80129f8:	4620      	mov	r0, r4
 80129fa:	f002 fddf 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 80129fe:	4620      	mov	r0, r4
 8012a00:	f7f1 fbf6 	bl	80041f0 <strlen>
 8012a04:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,(char * )FIRMWARE_VER);
 8012a06:	4620      	mov	r0, r4
 8012a08:	f7f1 fbf2 	bl	80041f0 <strlen>
 8012a0c:	4607      	mov	r7, r0
 8012a0e:	1826      	adds	r6, r4, r0
 8012a10:	4b64      	ldr	r3, [pc, #400]	; (8012ba4 <getSystemDataString+0x548>)
 8012a12:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012a14:	51e0      	str	r0, [r4, r7]
 8012a16:	6071      	str	r1, [r6, #4]
 8012a18:	60b2      	str	r2, [r6, #8]
 8012a1a:	881a      	ldrh	r2, [r3, #0]
 8012a1c:	789b      	ldrb	r3, [r3, #2]
 8012a1e:	81b2      	strh	r2, [r6, #12]
 8012a20:	73b3      	strb	r3, [r6, #14]
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 8012a22:	4620      	mov	r0, r4
 8012a24:	f7f1 fbe4 	bl	80041f0 <strlen>
 8012a28:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,(char * )BOOT_REGION);
 8012a2a:	4620      	mov	r0, r4
 8012a2c:	f7f1 fbe0 	bl	80041f0 <strlen>
 8012a30:	4b5d      	ldr	r3, [pc, #372]	; (8012ba8 <getSystemDataString+0x54c>)
 8012a32:	881b      	ldrh	r3, [r3, #0]
 8012a34:	5223      	strh	r3, [r4, r0]
			strcat((char *)systemPayload,(char * )",");
 8012a36:	4620      	mov	r0, r4
 8012a38:	f7f1 fbda 	bl	80041f0 <strlen>
 8012a3c:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,(char * )gacEthernetLinkStatus);
 8012a3e:	495b      	ldr	r1, [pc, #364]	; (8012bac <getSystemDataString+0x550>)
 8012a40:	4620      	mov	r0, r4
 8012a42:	f002 fdbb 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 8012a46:	4620      	mov	r0, r4
 8012a48:	f7f1 fbd2 	bl	80041f0 <strlen>
 8012a4c:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,(char * )gacMBDataPointsRTU);
 8012a4e:	4958      	ldr	r1, [pc, #352]	; (8012bb0 <getSystemDataString+0x554>)
 8012a50:	4620      	mov	r0, r4
 8012a52:	f002 fdb3 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 8012a56:	4620      	mov	r0, r4
 8012a58:	f7f1 fbca 	bl	80041f0 <strlen>
 8012a5c:	5225      	strh	r5, [r4, r0]
			if((float)gfInputSupplyVoltage < 9.00f)
 8012a5e:	4b55      	ldr	r3, [pc, #340]	; (8012bb4 <getSystemDataString+0x558>)
 8012a60:	ed93 7a00 	vldr	s14, [r3]
 8012a64:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
 8012a68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a70:	d56a      	bpl.n	8012b48 <getSystemDataString+0x4ec>
				strcat((char *)systemPayload,(char * )gcBatterySupplyVoltage);
 8012a72:	4951      	ldr	r1, [pc, #324]	; (8012bb8 <getSystemDataString+0x55c>)
 8012a74:	4620      	mov	r0, r4
 8012a76:	f002 fda1 	bl	80155bc <strcat>
				strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 8012a7a:	4620      	mov	r0, r4
 8012a7c:	f7f1 fbb8 	bl	80041f0 <strlen>
 8012a80:	4b3b      	ldr	r3, [pc, #236]	; (8012b70 <getSystemDataString+0x514>)
 8012a82:	881b      	ldrh	r3, [r3, #0]
 8012a84:	5223      	strh	r3, [r4, r0]
			strcat((char *)systemPayload,(char * )gacModbusStatusRTU);
 8012a86:	494d      	ldr	r1, [pc, #308]	; (8012bbc <getSystemDataString+0x560>)
 8012a88:	4620      	mov	r0, r4
 8012a8a:	f002 fd97 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 8012a8e:	4620      	mov	r0, r4
 8012a90:	f7f1 fbae 	bl	80041f0 <strlen>
 8012a94:	4b36      	ldr	r3, [pc, #216]	; (8012b70 <getSystemDataString+0x514>)
 8012a96:	881d      	ldrh	r5, [r3, #0]
 8012a98:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,"RT,");
 8012a9a:	4620      	mov	r0, r4
 8012a9c:	f7f1 fba8 	bl	80041f0 <strlen>
 8012aa0:	4603      	mov	r3, r0
 8012aa2:	4a47      	ldr	r2, [pc, #284]	; (8012bc0 <getSystemDataString+0x564>)
 8012aa4:	6810      	ldr	r0, [r2, #0]
 8012aa6:	50e0      	str	r0, [r4, r3]
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 8012aa8:	4620      	mov	r0, r4
 8012aaa:	f7f1 fba1 	bl	80041f0 <strlen>
 8012aae:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,(char * )agpsLastLocationDataFormatted);
 8012ab0:	4944      	ldr	r1, [pc, #272]	; (8012bc4 <getSystemDataString+0x568>)
 8012ab2:	4620      	mov	r0, r4
 8012ab4:	f002 fd82 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 8012ab8:	4620      	mov	r0, r4
 8012aba:	f7f1 fb99 	bl	80041f0 <strlen>
 8012abe:	5225      	strh	r5, [r4, r0]
			if(strlen(gsmInstance.agsmSignalStrength ) > 0)
 8012ac0:	4b41      	ldr	r3, [pc, #260]	; (8012bc8 <getSystemDataString+0x56c>)
 8012ac2:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d049      	beq.n	8012b5e <getSystemDataString+0x502>
				strcat((char *)systemPayload,(char * )gsmInstance.agsmSignalStrength);
 8012aca:	4940      	ldr	r1, [pc, #256]	; (8012bcc <getSystemDataString+0x570>)
 8012acc:	4620      	mov	r0, r4
 8012ace:	f002 fd75 	bl	80155bc <strcat>
			u32TempVar = gu32GSMConfigCheckTimer / 1000;
 8012ad2:	4b3f      	ldr	r3, [pc, #252]	; (8012bd0 <getSystemDataString+0x574>)
 8012ad4:	681d      	ldr	r5, [r3, #0]
 8012ad6:	4b3f      	ldr	r3, [pc, #252]	; (8012bd4 <getSystemDataString+0x578>)
 8012ad8:	fba3 3505 	umull	r3, r5, r3, r5
 8012adc:	09ad      	lsrs	r5, r5, #6
			memset(temp_array, 0, sizeof(temp_array));
 8012ade:	2232      	movs	r2, #50	; 0x32
 8012ae0:	2100      	movs	r1, #0
 8012ae2:	a801      	add	r0, sp, #4
 8012ae4:	f002 fd14 	bl	8015510 <memset>
			itoa(u32TempVar, temp_array, 10);
 8012ae8:	220a      	movs	r2, #10
 8012aea:	a901      	add	r1, sp, #4
 8012aec:	4628      	mov	r0, r5
 8012aee:	f002 fa9f 	bl	8015030 <itoa>
			strcat((char *)systemPayload,(char * )",ConfigCheckTime ");
 8012af2:	4620      	mov	r0, r4
 8012af4:	f7f1 fb7c 	bl	80041f0 <strlen>
 8012af8:	4607      	mov	r7, r0
 8012afa:	1826      	adds	r6, r4, r0
 8012afc:	4d36      	ldr	r5, [pc, #216]	; (8012bd8 <getSystemDataString+0x57c>)
 8012afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012b00:	51e0      	str	r0, [r4, r7]
 8012b02:	6071      	str	r1, [r6, #4]
 8012b04:	60b2      	str	r2, [r6, #8]
 8012b06:	60f3      	str	r3, [r6, #12]
 8012b08:	882b      	ldrh	r3, [r5, #0]
 8012b0a:	8233      	strh	r3, [r6, #16]
			strcat((char *)systemPayload,(char * )temp_array);
 8012b0c:	a901      	add	r1, sp, #4
 8012b0e:	4620      	mov	r0, r4
 8012b10:	f002 fd54 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 8012b14:	4620      	mov	r0, r4
 8012b16:	f7f1 fb6b 	bl	80041f0 <strlen>
 8012b1a:	4b15      	ldr	r3, [pc, #84]	; (8012b70 <getSystemDataString+0x514>)
 8012b1c:	881b      	ldrh	r3, [r3, #0]
 8012b1e:	5223      	strh	r3, [r4, r0]
			strcat((char *)systemPayload,gau8TempMBRTUPayloadString);
 8012b20:	4d2e      	ldr	r5, [pc, #184]	; (8012bdc <getSystemDataString+0x580>)
 8012b22:	4629      	mov	r1, r5
 8012b24:	4620      	mov	r0, r4
 8012b26:	f002 fd49 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )END_OF_FRAME);
 8012b2a:	4620      	mov	r0, r4
 8012b2c:	f7f1 fb60 	bl	80041f0 <strlen>
 8012b30:	4b2b      	ldr	r3, [pc, #172]	; (8012be0 <getSystemDataString+0x584>)
 8012b32:	881b      	ldrh	r3, [r3, #0]
 8012b34:	5223      	strh	r3, [r4, r0]
			gu32TempLoopCounter = 0;
 8012b36:	2100      	movs	r1, #0
 8012b38:	4b2a      	ldr	r3, [pc, #168]	; (8012be4 <getSystemDataString+0x588>)
 8012b3a:	6159      	str	r1, [r3, #20]
			memset(gau8TempMBRTUPayloadString,0x00,sizeof(char) * gu32MBDataByteCounterLimitRTU);
 8012b3c:	4b2a      	ldr	r3, [pc, #168]	; (8012be8 <getSystemDataString+0x58c>)
 8012b3e:	681a      	ldr	r2, [r3, #0]
 8012b40:	4628      	mov	r0, r5
 8012b42:	f002 fce5 	bl	8015510 <memset>
		return systemPayload;
 8012b46:	e5ca      	b.n	80126de <getSystemDataString+0x82>
				strcat((char *)systemPayload,(char * )gcSystemSupplyVoltage);
 8012b48:	4928      	ldr	r1, [pc, #160]	; (8012bec <getSystemDataString+0x590>)
 8012b4a:	4620      	mov	r0, r4
 8012b4c:	f002 fd36 	bl	80155bc <strcat>
				strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 8012b50:	4620      	mov	r0, r4
 8012b52:	f7f1 fb4d 	bl	80041f0 <strlen>
 8012b56:	4b06      	ldr	r3, [pc, #24]	; (8012b70 <getSystemDataString+0x514>)
 8012b58:	881b      	ldrh	r3, [r3, #0]
 8012b5a:	5223      	strh	r3, [r4, r0]
 8012b5c:	e793      	b.n	8012a86 <getSystemDataString+0x42a>
				strcat((char *)systemPayload,gpu8Norssi);
 8012b5e:	4b24      	ldr	r3, [pc, #144]	; (8012bf0 <getSystemDataString+0x594>)
 8012b60:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
 8012b64:	4620      	mov	r0, r4
 8012b66:	f002 fd29 	bl	80155bc <strcat>
 8012b6a:	e7b2      	b.n	8012ad2 <getSystemDataString+0x476>
 8012b6c:	0801e52c 	.word	0x0801e52c
 8012b70:	0801e3fc 	.word	0x0801e3fc
 8012b74:	200097d4 	.word	0x200097d4
 8012b78:	0801e5ac 	.word	0x0801e5ac
 8012b7c:	0801e390 	.word	0x0801e390
 8012b80:	20003850 	.word	0x20003850
 8012b84:	0801e538 	.word	0x0801e538
 8012b88:	20003848 	.word	0x20003848
 8012b8c:	20003840 	.word	0x20003840
 8012b90:	0801e3dc 	.word	0x0801e3dc
 8012b94:	20003858 	.word	0x20003858
 8012b98:	0801e494 	.word	0x0801e494
 8012b9c:	20003860 	.word	0x20003860
 8012ba0:	20003868 	.word	0x20003868
 8012ba4:	0801e53c 	.word	0x0801e53c
 8012ba8:	0801e590 	.word	0x0801e590
 8012bac:	2000fb5c 	.word	0x2000fb5c
 8012bb0:	2000fb44 	.word	0x2000fb44
 8012bb4:	20005f8c 	.word	0x20005f8c
 8012bb8:	2000fb3c 	.word	0x2000fb3c
 8012bbc:	20005d0c 	.word	0x20005d0c
 8012bc0:	0801e5b4 	.word	0x0801e5b4
 8012bc4:	20002780 	.word	0x20002780
 8012bc8:	2000d390 	.word	0x2000d390
 8012bcc:	2000d426 	.word	0x2000d426
 8012bd0:	20006170 	.word	0x20006170
 8012bd4:	10624dd3 	.word	0x10624dd3
 8012bd8:	0801e5b8 	.word	0x0801e5b8
 8012bdc:	2000165c 	.word	0x2000165c
 8012be0:	0801e57c 	.word	0x0801e57c
 8012be4:	20005cfc 	.word	0x20005cfc
 8012be8:	200057d0 	.word	0x200057d0
 8012bec:	2000fb4c 	.word	0x2000fb4c
 8012bf0:	200026c8 	.word	0x200026c8

08012bf4 <DiagnosticString>:
	else
		return NULL; // malloc Error . Memory Allocation Failure
}

void DiagnosticString(char * systemPayload, enmDiagnosticStatus DiagnosticStatus)
{
 8012bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012bf6:	b087      	sub	sp, #28
 8012bf8:	4604      	mov	r4, r0
 8012bfa:	460d      	mov	r5, r1
	char temp[20] = "";
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	9301      	str	r3, [sp, #4]
 8012c00:	9302      	str	r3, [sp, #8]
 8012c02:	9303      	str	r3, [sp, #12]
 8012c04:	9304      	str	r3, [sp, #16]
 8012c06:	9305      	str	r3, [sp, #20]
	switch(DiagnosticStatus)
 8012c08:	290c      	cmp	r1, #12
 8012c0a:	d811      	bhi.n	8012c30 <DiagnosticString+0x3c>
 8012c0c:	290c      	cmp	r1, #12
 8012c0e:	f200 81cd 	bhi.w	8012fac <DiagnosticString+0x3b8>
 8012c12:	e8df f011 	tbh	[pc, r1, lsl #1]
 8012c16:	0020      	.short	0x0020
 8012c18:	01cb01cb 	.word	0x01cb01cb
 8012c1c:	005c0040 	.word	0x005c0040
 8012c20:	00c50073 	.word	0x00c50073
 8012c24:	012300fd 	.word	0x012300fd
 8012c28:	015b013f 	.word	0x015b013f
 8012c2c:	01930177 	.word	0x01930177
 8012c30:	2963      	cmp	r1, #99	; 0x63
 8012c32:	f040 81bb 	bne.w	8012fac <DiagnosticString+0x3b8>
			strcat((char *)systemPayload,temp);
			strcat((char *)systemPayload,(char * )",");
			break;

		case enmDiagnostic_IDLE:
			strcat((char *)systemPayload,"IDLE");
 8012c36:	f7f1 fadb 	bl	80041f0 <strlen>
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	1821      	adds	r1, r4, r0
 8012c3e:	4acd      	ldr	r2, [pc, #820]	; (8012f74 <DiagnosticString+0x380>)
 8012c40:	6810      	ldr	r0, [r2, #0]
 8012c42:	50e0      	str	r0, [r4, r3]
 8012c44:	7913      	ldrb	r3, [r2, #4]
 8012c46:	710b      	strb	r3, [r1, #4]
			strcat((char *)systemPayload,(char * )",");
 8012c48:	4620      	mov	r0, r4
 8012c4a:	f7f1 fad1 	bl	80041f0 <strlen>
 8012c4e:	4bca      	ldr	r3, [pc, #808]	; (8012f78 <DiagnosticString+0x384>)
 8012c50:	881b      	ldrh	r3, [r3, #0]
 8012c52:	5223      	strh	r3, [r4, r0]
			break;
 8012c54:	e01d      	b.n	8012c92 <DiagnosticString+0x9e>
			strcat((char *)systemPayload,"FS");
 8012c56:	f7f1 facb 	bl	80041f0 <strlen>
 8012c5a:	1822      	adds	r2, r4, r0
 8012c5c:	4bc7      	ldr	r3, [pc, #796]	; (8012f7c <DiagnosticString+0x388>)
 8012c5e:	8819      	ldrh	r1, [r3, #0]
 8012c60:	789b      	ldrb	r3, [r3, #2]
 8012c62:	5221      	strh	r1, [r4, r0]
 8012c64:	7093      	strb	r3, [r2, #2]
			strcat((char *)systemPayload,(char * )",");
 8012c66:	4620      	mov	r0, r4
 8012c68:	f7f1 fac2 	bl	80041f0 <strlen>
 8012c6c:	4bc2      	ldr	r3, [pc, #776]	; (8012f78 <DiagnosticString+0x384>)
 8012c6e:	881e      	ldrh	r6, [r3, #0]
 8012c70:	5226      	strh	r6, [r4, r0]
			itoa(DiagnosticStatus,temp,CAN_PAYLOADSTRING_RADIX);
 8012c72:	2210      	movs	r2, #16
 8012c74:	a901      	add	r1, sp, #4
 8012c76:	4628      	mov	r0, r5
 8012c78:	f002 f9da 	bl	8015030 <itoa>
			strcat((char *)systemPayload,temp);
 8012c7c:	a901      	add	r1, sp, #4
 8012c7e:	4620      	mov	r0, r4
 8012c80:	f002 fc9c 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )",");
 8012c84:	4620      	mov	r0, r4
 8012c86:	f7f1 fab3 	bl	80041f0 <strlen>
 8012c8a:	5226      	strh	r6, [r4, r0]
			FOTACompleteFlag = TRUE;
 8012c8c:	4bbc      	ldr	r3, [pc, #752]	; (8012f80 <DiagnosticString+0x38c>)
 8012c8e:	2201      	movs	r2, #1
 8012c90:	761a      	strb	r2, [r3, #24]
			strcat((char *)systemPayload,"IDLE");
			strcat((char *)systemPayload,(char * )",");
			break;
	}//end of switch(DiagnosticStatus)

}//end of void DiagnosticString(char * systemPayload,enmDiagnosticStatus DiagnosticStatus)
 8012c92:	b007      	add	sp, #28
 8012c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
			strcat((char *)systemPayload,"FF");
 8012c96:	f7f1 faab 	bl	80041f0 <strlen>
 8012c9a:	1822      	adds	r2, r4, r0
 8012c9c:	4bb9      	ldr	r3, [pc, #740]	; (8012f84 <DiagnosticString+0x390>)
 8012c9e:	8819      	ldrh	r1, [r3, #0]
 8012ca0:	789b      	ldrb	r3, [r3, #2]
 8012ca2:	5221      	strh	r1, [r4, r0]
 8012ca4:	7093      	strb	r3, [r2, #2]
			strcat((char *)systemPayload,(char * )",");
 8012ca6:	4620      	mov	r0, r4
 8012ca8:	f7f1 faa2 	bl	80041f0 <strlen>
 8012cac:	4bb2      	ldr	r3, [pc, #712]	; (8012f78 <DiagnosticString+0x384>)
 8012cae:	881e      	ldrh	r6, [r3, #0]
 8012cb0:	5226      	strh	r6, [r4, r0]
			itoa(DiagnosticStatus,temp,CAN_PAYLOADSTRING_RADIX);
 8012cb2:	2210      	movs	r2, #16
 8012cb4:	a901      	add	r1, sp, #4
 8012cb6:	4628      	mov	r0, r5
 8012cb8:	f002 f9ba 	bl	8015030 <itoa>
			strcat((char *)systemPayload,temp);
 8012cbc:	a901      	add	r1, sp, #4
 8012cbe:	4620      	mov	r0, r4
 8012cc0:	f002 fc7c 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )",");
 8012cc4:	4620      	mov	r0, r4
 8012cc6:	f7f1 fa93 	bl	80041f0 <strlen>
 8012cca:	5226      	strh	r6, [r4, r0]
			break;
 8012ccc:	e7e1      	b.n	8012c92 <DiagnosticString+0x9e>
		strcat((char *)systemPayload,"FR");
 8012cce:	f7f1 fa8f 	bl	80041f0 <strlen>
 8012cd2:	1822      	adds	r2, r4, r0
 8012cd4:	4bac      	ldr	r3, [pc, #688]	; (8012f88 <DiagnosticString+0x394>)
 8012cd6:	8819      	ldrh	r1, [r3, #0]
 8012cd8:	789b      	ldrb	r3, [r3, #2]
 8012cda:	5221      	strh	r1, [r4, r0]
 8012cdc:	7093      	strb	r3, [r2, #2]
		strcat((char *)systemPayload,(char * )",");
 8012cde:	4620      	mov	r0, r4
 8012ce0:	f7f1 fa86 	bl	80041f0 <strlen>
 8012ce4:	4ba4      	ldr	r3, [pc, #656]	; (8012f78 <DiagnosticString+0x384>)
 8012ce6:	881d      	ldrh	r5, [r3, #0]
 8012ce8:	5225      	strh	r5, [r4, r0]
		strcat((char *)systemPayload,(char *)gau8FotaURL);
 8012cea:	49a8      	ldr	r1, [pc, #672]	; (8012f8c <DiagnosticString+0x398>)
 8012cec:	4620      	mov	r0, r4
 8012cee:	f002 fc65 	bl	80155bc <strcat>
		strcat((char *)systemPayload,(char * )",");
 8012cf2:	4620      	mov	r0, r4
 8012cf4:	f7f1 fa7c 	bl	80041f0 <strlen>
 8012cf8:	5225      	strh	r5, [r4, r0]
			break;
 8012cfa:	e7ca      	b.n	8012c92 <DiagnosticString+0x9e>
			strcat((char *)systemPayload,"FF");
 8012cfc:	f7f1 fa78 	bl	80041f0 <strlen>
 8012d00:	1822      	adds	r2, r4, r0
 8012d02:	4ba0      	ldr	r3, [pc, #640]	; (8012f84 <DiagnosticString+0x390>)
 8012d04:	8819      	ldrh	r1, [r3, #0]
 8012d06:	789b      	ldrb	r3, [r3, #2]
 8012d08:	5221      	strh	r1, [r4, r0]
 8012d0a:	7093      	strb	r3, [r2, #2]
			strcat((char *)systemPayload,(char * )",");
 8012d0c:	4620      	mov	r0, r4
 8012d0e:	f7f1 fa6f 	bl	80041f0 <strlen>
 8012d12:	4b99      	ldr	r3, [pc, #612]	; (8012f78 <DiagnosticString+0x384>)
 8012d14:	881f      	ldrh	r7, [r3, #0]
 8012d16:	5227      	strh	r7, [r4, r0]
			itoa(DiagnosticStatus,temp,CAN_PAYLOADSTRING_RADIX);
 8012d18:	2210      	movs	r2, #16
 8012d1a:	a901      	add	r1, sp, #4
 8012d1c:	4628      	mov	r0, r5
 8012d1e:	f002 f987 	bl	8015030 <itoa>
			strcat((char *)systemPayload,temp);
 8012d22:	a901      	add	r1, sp, #4
 8012d24:	4620      	mov	r0, r4
 8012d26:	f002 fc49 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )",");
 8012d2a:	4620      	mov	r0, r4
 8012d2c:	f7f1 fa60 	bl	80041f0 <strlen>
 8012d30:	5227      	strh	r7, [r4, r0]
			strcat((char *)systemPayload,"Input Supply : ");
 8012d32:	4620      	mov	r0, r4
 8012d34:	f7f1 fa5c 	bl	80041f0 <strlen>
 8012d38:	4606      	mov	r6, r0
 8012d3a:	eb04 0c00 	add.w	ip, r4, r0
 8012d3e:	4d94      	ldr	r5, [pc, #592]	; (8012f90 <DiagnosticString+0x39c>)
 8012d40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012d42:	51a0      	str	r0, [r4, r6]
 8012d44:	f8cc 1004 	str.w	r1, [ip, #4]
 8012d48:	f8cc 2008 	str.w	r2, [ip, #8]
 8012d4c:	f8cc 300c 	str.w	r3, [ip, #12]
			updateInputVoltage();
 8012d50:	f7ff fb4c 	bl	80123ec <updateInputVoltage>
			strcat((char *)systemPayload,(char * )gcSystemSupplyVoltage);
 8012d54:	498f      	ldr	r1, [pc, #572]	; (8012f94 <DiagnosticString+0x3a0>)
 8012d56:	4620      	mov	r0, r4
 8012d58:	f002 fc30 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )",");
 8012d5c:	4620      	mov	r0, r4
 8012d5e:	f7f1 fa47 	bl	80041f0 <strlen>
 8012d62:	5227      	strh	r7, [r4, r0]
			strcat((char *)systemPayload,"Internal Battery Supply : ");
 8012d64:	4620      	mov	r0, r4
 8012d66:	f7f1 fa43 	bl	80041f0 <strlen>
 8012d6a:	4684      	mov	ip, r0
 8012d6c:	1826      	adds	r6, r4, r0
 8012d6e:	4d8a      	ldr	r5, [pc, #552]	; (8012f98 <DiagnosticString+0x3a4>)
 8012d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012d72:	f844 000c 	str.w	r0, [r4, ip]
 8012d76:	6071      	str	r1, [r6, #4]
 8012d78:	60b2      	str	r2, [r6, #8]
 8012d7a:	60f3      	str	r3, [r6, #12]
 8012d7c:	cd03      	ldmia	r5!, {r0, r1}
 8012d7e:	6130      	str	r0, [r6, #16]
 8012d80:	6171      	str	r1, [r6, #20]
 8012d82:	882a      	ldrh	r2, [r5, #0]
 8012d84:	78ab      	ldrb	r3, [r5, #2]
 8012d86:	8332      	strh	r2, [r6, #24]
 8012d88:	76b3      	strb	r3, [r6, #26]
			updateInputVoltage();
 8012d8a:	f7ff fb2f 	bl	80123ec <updateInputVoltage>
			strcat((char *)systemPayload,(char * )gcBatterySupplyVoltage);
 8012d8e:	4983      	ldr	r1, [pc, #524]	; (8012f9c <DiagnosticString+0x3a8>)
 8012d90:	4620      	mov	r0, r4
 8012d92:	f002 fc13 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )",");
 8012d96:	4620      	mov	r0, r4
 8012d98:	f7f1 fa2a 	bl	80041f0 <strlen>
 8012d9c:	5227      	strh	r7, [r4, r0]
			break;
 8012d9e:	e778      	b.n	8012c92 <DiagnosticString+0x9e>
			strcat((char *)systemPayload,"FF");
 8012da0:	f7f1 fa26 	bl	80041f0 <strlen>
 8012da4:	1822      	adds	r2, r4, r0
 8012da6:	4b77      	ldr	r3, [pc, #476]	; (8012f84 <DiagnosticString+0x390>)
 8012da8:	8819      	ldrh	r1, [r3, #0]
 8012daa:	789b      	ldrb	r3, [r3, #2]
 8012dac:	5221      	strh	r1, [r4, r0]
 8012dae:	7093      	strb	r3, [r2, #2]
			strcat((char *)systemPayload,(char * )",");
 8012db0:	4620      	mov	r0, r4
 8012db2:	f7f1 fa1d 	bl	80041f0 <strlen>
 8012db6:	4b70      	ldr	r3, [pc, #448]	; (8012f78 <DiagnosticString+0x384>)
 8012db8:	881b      	ldrh	r3, [r3, #0]
 8012dba:	5223      	strh	r3, [r4, r0]
			itoa(DiagnosticStatus,temp,CAN_PAYLOADSTRING_RADIX);
 8012dbc:	2210      	movs	r2, #16
 8012dbe:	a901      	add	r1, sp, #4
 8012dc0:	4628      	mov	r0, r5
 8012dc2:	f002 f935 	bl	8015030 <itoa>
			strcat((char *)systemPayload,temp);
 8012dc6:	a901      	add	r1, sp, #4
 8012dc8:	4620      	mov	r0, r4
 8012dca:	f002 fbf7 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )",Received File Size : ");
 8012dce:	4620      	mov	r0, r4
 8012dd0:	f7f1 fa0e 	bl	80041f0 <strlen>
 8012dd4:	4607      	mov	r7, r0
 8012dd6:	1826      	adds	r6, r4, r0
 8012dd8:	4d71      	ldr	r5, [pc, #452]	; (8012fa0 <DiagnosticString+0x3ac>)
 8012dda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012ddc:	51e0      	str	r0, [r4, r7]
 8012dde:	6071      	str	r1, [r6, #4]
 8012de0:	60b2      	str	r2, [r6, #8]
 8012de2:	60f3      	str	r3, [r6, #12]
 8012de4:	6828      	ldr	r0, [r5, #0]
 8012de6:	6130      	str	r0, [r6, #16]
 8012de8:	88aa      	ldrh	r2, [r5, #4]
 8012dea:	79ab      	ldrb	r3, [r5, #6]
 8012dec:	82b2      	strh	r2, [r6, #20]
 8012dee:	75b3      	strb	r3, [r6, #22]
			strcat((char *)systemPayload,(char *)gsmInstance.gu32RemoteConfigSizeinBytes);
 8012df0:	4b6c      	ldr	r3, [pc, #432]	; (8012fa4 <DiagnosticString+0x3b0>)
 8012df2:	f8d3 1e34 	ldr.w	r1, [r3, #3636]	; 0xe34
 8012df6:	4620      	mov	r0, r4
 8012df8:	f002 fbe0 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )" Bytes,");
 8012dfc:	4620      	mov	r0, r4
 8012dfe:	f7f1 f9f7 	bl	80041f0 <strlen>
 8012e02:	4603      	mov	r3, r0
 8012e04:	1825      	adds	r5, r4, r0
 8012e06:	4a68      	ldr	r2, [pc, #416]	; (8012fa8 <DiagnosticString+0x3b4>)
 8012e08:	ca03      	ldmia	r2!, {r0, r1}
 8012e0a:	50e0      	str	r0, [r4, r3]
 8012e0c:	6069      	str	r1, [r5, #4]
			break;
 8012e0e:	e740      	b.n	8012c92 <DiagnosticString+0x9e>
			strcat((char *)systemPayload,"FF");
 8012e10:	f7f1 f9ee 	bl	80041f0 <strlen>
 8012e14:	1822      	adds	r2, r4, r0
 8012e16:	4b5b      	ldr	r3, [pc, #364]	; (8012f84 <DiagnosticString+0x390>)
 8012e18:	8819      	ldrh	r1, [r3, #0]
 8012e1a:	789b      	ldrb	r3, [r3, #2]
 8012e1c:	5221      	strh	r1, [r4, r0]
 8012e1e:	7093      	strb	r3, [r2, #2]
			strcat((char *)systemPayload,(char * )",");
 8012e20:	4620      	mov	r0, r4
 8012e22:	f7f1 f9e5 	bl	80041f0 <strlen>
 8012e26:	4b54      	ldr	r3, [pc, #336]	; (8012f78 <DiagnosticString+0x384>)
 8012e28:	881e      	ldrh	r6, [r3, #0]
 8012e2a:	5226      	strh	r6, [r4, r0]
			itoa(DiagnosticStatus,temp,CAN_PAYLOADSTRING_RADIX);
 8012e2c:	2210      	movs	r2, #16
 8012e2e:	a901      	add	r1, sp, #4
 8012e30:	4628      	mov	r0, r5
 8012e32:	f002 f8fd 	bl	8015030 <itoa>
			strcat((char *)systemPayload,temp);
 8012e36:	a901      	add	r1, sp, #4
 8012e38:	4620      	mov	r0, r4
 8012e3a:	f002 fbbf 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )",");
 8012e3e:	4620      	mov	r0, r4
 8012e40:	f7f1 f9d6 	bl	80041f0 <strlen>
 8012e44:	5226      	strh	r6, [r4, r0]
			strcat((char *)systemPayload,(char * )gsmInstance.u8LastMqttResponseCode);
 8012e46:	4b57      	ldr	r3, [pc, #348]	; (8012fa4 <DiagnosticString+0x3b0>)
 8012e48:	f8b3 1e22 	ldrh.w	r1, [r3, #3618]	; 0xe22
 8012e4c:	4620      	mov	r0, r4
 8012e4e:	f002 fbb5 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )",");
 8012e52:	4620      	mov	r0, r4
 8012e54:	f7f1 f9cc 	bl	80041f0 <strlen>
 8012e58:	5226      	strh	r6, [r4, r0]
			break;
 8012e5a:	e71a      	b.n	8012c92 <DiagnosticString+0x9e>
			strcat((char *)systemPayload,"FF");
 8012e5c:	f7f1 f9c8 	bl	80041f0 <strlen>
 8012e60:	1822      	adds	r2, r4, r0
 8012e62:	4b48      	ldr	r3, [pc, #288]	; (8012f84 <DiagnosticString+0x390>)
 8012e64:	8819      	ldrh	r1, [r3, #0]
 8012e66:	789b      	ldrb	r3, [r3, #2]
 8012e68:	5221      	strh	r1, [r4, r0]
 8012e6a:	7093      	strb	r3, [r2, #2]
			strcat((char *)systemPayload,(char * )",");
 8012e6c:	4620      	mov	r0, r4
 8012e6e:	f7f1 f9bf 	bl	80041f0 <strlen>
 8012e72:	4b41      	ldr	r3, [pc, #260]	; (8012f78 <DiagnosticString+0x384>)
 8012e74:	881e      	ldrh	r6, [r3, #0]
 8012e76:	5226      	strh	r6, [r4, r0]
			itoa(DiagnosticStatus,temp,CAN_PAYLOADSTRING_RADIX);
 8012e78:	2210      	movs	r2, #16
 8012e7a:	a901      	add	r1, sp, #4
 8012e7c:	4628      	mov	r0, r5
 8012e7e:	f002 f8d7 	bl	8015030 <itoa>
			strcat((char *)systemPayload,temp);
 8012e82:	a901      	add	r1, sp, #4
 8012e84:	4620      	mov	r0, r4
 8012e86:	f002 fb99 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )",");
 8012e8a:	4620      	mov	r0, r4
 8012e8c:	f7f1 f9b0 	bl	80041f0 <strlen>
 8012e90:	5226      	strh	r6, [r4, r0]
			break;
 8012e92:	e6fe      	b.n	8012c92 <DiagnosticString+0x9e>
			strcat((char *)systemPayload,"FF");
 8012e94:	f7f1 f9ac 	bl	80041f0 <strlen>
 8012e98:	1822      	adds	r2, r4, r0
 8012e9a:	4b3a      	ldr	r3, [pc, #232]	; (8012f84 <DiagnosticString+0x390>)
 8012e9c:	8819      	ldrh	r1, [r3, #0]
 8012e9e:	789b      	ldrb	r3, [r3, #2]
 8012ea0:	5221      	strh	r1, [r4, r0]
 8012ea2:	7093      	strb	r3, [r2, #2]
			strcat((char *)systemPayload,(char * )",");
 8012ea4:	4620      	mov	r0, r4
 8012ea6:	f7f1 f9a3 	bl	80041f0 <strlen>
 8012eaa:	4b33      	ldr	r3, [pc, #204]	; (8012f78 <DiagnosticString+0x384>)
 8012eac:	881e      	ldrh	r6, [r3, #0]
 8012eae:	5226      	strh	r6, [r4, r0]
			itoa(DiagnosticStatus,temp,CAN_PAYLOADSTRING_RADIX);
 8012eb0:	2210      	movs	r2, #16
 8012eb2:	a901      	add	r1, sp, #4
 8012eb4:	4628      	mov	r0, r5
 8012eb6:	f002 f8bb 	bl	8015030 <itoa>
			strcat((char *)systemPayload,temp);
 8012eba:	a901      	add	r1, sp, #4
 8012ebc:	4620      	mov	r0, r4
 8012ebe:	f002 fb7d 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )",");
 8012ec2:	4620      	mov	r0, r4
 8012ec4:	f7f1 f994 	bl	80041f0 <strlen>
 8012ec8:	5226      	strh	r6, [r4, r0]
			break;
 8012eca:	e6e2      	b.n	8012c92 <DiagnosticString+0x9e>
			strcat((char *)systemPayload,"FF");
 8012ecc:	f7f1 f990 	bl	80041f0 <strlen>
 8012ed0:	1822      	adds	r2, r4, r0
 8012ed2:	4b2c      	ldr	r3, [pc, #176]	; (8012f84 <DiagnosticString+0x390>)
 8012ed4:	8819      	ldrh	r1, [r3, #0]
 8012ed6:	789b      	ldrb	r3, [r3, #2]
 8012ed8:	5221      	strh	r1, [r4, r0]
 8012eda:	7093      	strb	r3, [r2, #2]
			strcat((char *)systemPayload,(char * )",");
 8012edc:	4620      	mov	r0, r4
 8012ede:	f7f1 f987 	bl	80041f0 <strlen>
 8012ee2:	4b25      	ldr	r3, [pc, #148]	; (8012f78 <DiagnosticString+0x384>)
 8012ee4:	881e      	ldrh	r6, [r3, #0]
 8012ee6:	5226      	strh	r6, [r4, r0]
			itoa(DiagnosticStatus,temp,CAN_PAYLOADSTRING_RADIX);
 8012ee8:	2210      	movs	r2, #16
 8012eea:	a901      	add	r1, sp, #4
 8012eec:	4628      	mov	r0, r5
 8012eee:	f002 f89f 	bl	8015030 <itoa>
			strcat((char *)systemPayload,temp);
 8012ef2:	a901      	add	r1, sp, #4
 8012ef4:	4620      	mov	r0, r4
 8012ef6:	f002 fb61 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )",");
 8012efa:	4620      	mov	r0, r4
 8012efc:	f7f1 f978 	bl	80041f0 <strlen>
 8012f00:	5226      	strh	r6, [r4, r0]
		break;
 8012f02:	e6c6      	b.n	8012c92 <DiagnosticString+0x9e>
			strcat((char *)systemPayload,"FF");
 8012f04:	f7f1 f974 	bl	80041f0 <strlen>
 8012f08:	1822      	adds	r2, r4, r0
 8012f0a:	4b1e      	ldr	r3, [pc, #120]	; (8012f84 <DiagnosticString+0x390>)
 8012f0c:	8819      	ldrh	r1, [r3, #0]
 8012f0e:	789b      	ldrb	r3, [r3, #2]
 8012f10:	5221      	strh	r1, [r4, r0]
 8012f12:	7093      	strb	r3, [r2, #2]
			strcat((char *)systemPayload,(char * )",");
 8012f14:	4620      	mov	r0, r4
 8012f16:	f7f1 f96b 	bl	80041f0 <strlen>
 8012f1a:	4b17      	ldr	r3, [pc, #92]	; (8012f78 <DiagnosticString+0x384>)
 8012f1c:	881e      	ldrh	r6, [r3, #0]
 8012f1e:	5226      	strh	r6, [r4, r0]
			itoa(DiagnosticStatus,temp,CAN_PAYLOADSTRING_RADIX);
 8012f20:	2210      	movs	r2, #16
 8012f22:	a901      	add	r1, sp, #4
 8012f24:	4628      	mov	r0, r5
 8012f26:	f002 f883 	bl	8015030 <itoa>
			strcat((char *)systemPayload,temp);
 8012f2a:	a901      	add	r1, sp, #4
 8012f2c:	4620      	mov	r0, r4
 8012f2e:	f002 fb45 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )",");
 8012f32:	4620      	mov	r0, r4
 8012f34:	f7f1 f95c 	bl	80041f0 <strlen>
 8012f38:	5226      	strh	r6, [r4, r0]
			break;
 8012f3a:	e6aa      	b.n	8012c92 <DiagnosticString+0x9e>
			strcat((char *)systemPayload,"FF");
 8012f3c:	f7f1 f958 	bl	80041f0 <strlen>
 8012f40:	1822      	adds	r2, r4, r0
 8012f42:	4b10      	ldr	r3, [pc, #64]	; (8012f84 <DiagnosticString+0x390>)
 8012f44:	8819      	ldrh	r1, [r3, #0]
 8012f46:	789b      	ldrb	r3, [r3, #2]
 8012f48:	5221      	strh	r1, [r4, r0]
 8012f4a:	7093      	strb	r3, [r2, #2]
			strcat((char *)systemPayload,(char * )",");
 8012f4c:	4620      	mov	r0, r4
 8012f4e:	f7f1 f94f 	bl	80041f0 <strlen>
 8012f52:	4b09      	ldr	r3, [pc, #36]	; (8012f78 <DiagnosticString+0x384>)
 8012f54:	881e      	ldrh	r6, [r3, #0]
 8012f56:	5226      	strh	r6, [r4, r0]
			itoa(DiagnosticStatus,temp,CAN_PAYLOADSTRING_RADIX);
 8012f58:	2210      	movs	r2, #16
 8012f5a:	a901      	add	r1, sp, #4
 8012f5c:	4628      	mov	r0, r5
 8012f5e:	f002 f867 	bl	8015030 <itoa>
			strcat((char *)systemPayload,temp);
 8012f62:	a901      	add	r1, sp, #4
 8012f64:	4620      	mov	r0, r4
 8012f66:	f002 fb29 	bl	80155bc <strcat>
			strcat((char *)systemPayload,(char * )",");
 8012f6a:	4620      	mov	r0, r4
 8012f6c:	f7f1 f940 	bl	80041f0 <strlen>
 8012f70:	5226      	strh	r6, [r4, r0]
			break;
 8012f72:	e68e      	b.n	8012c92 <DiagnosticString+0x9e>
 8012f74:	0801e624 	.word	0x0801e624
 8012f78:	0801e3fc 	.word	0x0801e3fc
 8012f7c:	0801e5cc 	.word	0x0801e5cc
 8012f80:	20005cfc 	.word	0x20005cfc
 8012f84:	0801e5d0 	.word	0x0801e5d0
 8012f88:	0801e5d4 	.word	0x0801e5d4
 8012f8c:	20000504 	.word	0x20000504
 8012f90:	0801e5d8 	.word	0x0801e5d8
 8012f94:	2000fb4c 	.word	0x2000fb4c
 8012f98:	0801e5e8 	.word	0x0801e5e8
 8012f9c:	2000fb3c 	.word	0x2000fb3c
 8012fa0:	0801e604 	.word	0x0801e604
 8012fa4:	2000d390 	.word	0x2000d390
 8012fa8:	0801e61c 	.word	0x0801e61c
			strcat((char *)systemPayload,"IDLE");
 8012fac:	4620      	mov	r0, r4
 8012fae:	f7f1 f91f 	bl	80041f0 <strlen>
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	1821      	adds	r1, r4, r0
 8012fb6:	4a06      	ldr	r2, [pc, #24]	; (8012fd0 <DiagnosticString+0x3dc>)
 8012fb8:	6810      	ldr	r0, [r2, #0]
 8012fba:	50e0      	str	r0, [r4, r3]
 8012fbc:	7913      	ldrb	r3, [r2, #4]
 8012fbe:	710b      	strb	r3, [r1, #4]
			strcat((char *)systemPayload,(char * )",");
 8012fc0:	4620      	mov	r0, r4
 8012fc2:	f7f1 f915 	bl	80041f0 <strlen>
 8012fc6:	4b03      	ldr	r3, [pc, #12]	; (8012fd4 <DiagnosticString+0x3e0>)
 8012fc8:	881b      	ldrh	r3, [r3, #0]
 8012fca:	5223      	strh	r3, [r4, r0]
}//end of void DiagnosticString(char * systemPayload,enmDiagnosticStatus DiagnosticStatus)
 8012fcc:	e661      	b.n	8012c92 <DiagnosticString+0x9e>
 8012fce:	bf00      	nop
 8012fd0:	0801e624 	.word	0x0801e624
 8012fd4:	0801e3fc 	.word	0x0801e3fc

08012fd8 <getDiagDataString>:
{
 8012fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fdc:	4680      	mov	r8, r0
	char * systemPayload = malloc(sizeof(char) * GSM_PAYLOAD_MAX_SIZE);
 8012fde:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8012fe2:	f002 f827 	bl	8015034 <malloc>
	if(systemPayload != NULL)
 8012fe6:	4604      	mov	r4, r0
 8012fe8:	2800      	cmp	r0, #0
 8012fea:	f000 8090 	beq.w	801310e <getDiagDataString+0x136>
		memset(systemPayload,0x00,sizeof(char) * GSM_PAYLOAD_MAX_SIZE);
 8012fee:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8012ff2:	2100      	movs	r1, #0
 8012ff4:	f002 fa8c 	bl	8015510 <memset>
		strcpy((char *)systemPayload,(char * )START_OF_FRAME);
 8012ff8:	4b46      	ldr	r3, [pc, #280]	; (8013114 <getDiagDataString+0x13c>)
 8012ffa:	881b      	ldrh	r3, [r3, #0]
 8012ffc:	8023      	strh	r3, [r4, #0]
		strcat((char *)systemPayload,(char * )",");
 8012ffe:	4620      	mov	r0, r4
 8013000:	f7f1 f8f6 	bl	80041f0 <strlen>
 8013004:	4b44      	ldr	r3, [pc, #272]	; (8013118 <getDiagDataString+0x140>)
 8013006:	881d      	ldrh	r5, [r3, #0]
 8013008:	5225      	strh	r5, [r4, r0]
		strcat((char *)systemPayload,(char * )dinfo);
 801300a:	4944      	ldr	r1, [pc, #272]	; (801311c <getDiagDataString+0x144>)
 801300c:	4620      	mov	r0, r4
 801300e:	f002 fad5 	bl	80155bc <strcat>
		strcat((char *)systemPayload,(char * )",");
 8013012:	4620      	mov	r0, r4
 8013014:	f7f1 f8ec 	bl	80041f0 <strlen>
 8013018:	5225      	strh	r5, [r4, r0]
		strcat((char *)systemPayload,"Diagnostic");
 801301a:	4620      	mov	r0, r4
 801301c:	f7f1 f8e8 	bl	80041f0 <strlen>
 8013020:	4602      	mov	r2, r0
 8013022:	1826      	adds	r6, r4, r0
 8013024:	4b3e      	ldr	r3, [pc, #248]	; (8013120 <getDiagDataString+0x148>)
 8013026:	cb03      	ldmia	r3!, {r0, r1}
 8013028:	50a0      	str	r0, [r4, r2]
 801302a:	6071      	str	r1, [r6, #4]
 801302c:	881a      	ldrh	r2, [r3, #0]
 801302e:	789b      	ldrb	r3, [r3, #2]
 8013030:	8132      	strh	r2, [r6, #8]
 8013032:	72b3      	strb	r3, [r6, #10]
		strcat((char *)systemPayload,(char * )",");
 8013034:	4620      	mov	r0, r4
 8013036:	f7f1 f8db 	bl	80041f0 <strlen>
 801303a:	5225      	strh	r5, [r4, r0]
		strcat((char *)systemPayload,(char * )MODEL_NUMBER);
 801303c:	4620      	mov	r0, r4
 801303e:	f7f1 f8d7 	bl	80041f0 <strlen>
 8013042:	4603      	mov	r3, r0
 8013044:	1826      	adds	r6, r4, r0
 8013046:	4a37      	ldr	r2, [pc, #220]	; (8013124 <getDiagDataString+0x14c>)
 8013048:	ca03      	ldmia	r2!, {r0, r1}
 801304a:	50e0      	str	r0, [r4, r3]
 801304c:	6071      	str	r1, [r6, #4]
		strcat((char *)systemPayload,(char * )",");
 801304e:	4620      	mov	r0, r4
 8013050:	f7f1 f8ce 	bl	80041f0 <strlen>
 8013054:	5225      	strh	r5, [r4, r0]
		strcat((char *)systemPayload,(char * )gau8Date);
 8013056:	4934      	ldr	r1, [pc, #208]	; (8013128 <getDiagDataString+0x150>)
 8013058:	4620      	mov	r0, r4
 801305a:	f002 faaf 	bl	80155bc <strcat>
		strcat((char *)systemPayload,(char * )RTC_DATESEPARATOR);
 801305e:	4620      	mov	r0, r4
 8013060:	f7f1 f8c6 	bl	80041f0 <strlen>
 8013064:	4b31      	ldr	r3, [pc, #196]	; (801312c <getDiagDataString+0x154>)
 8013066:	881e      	ldrh	r6, [r3, #0]
 8013068:	5226      	strh	r6, [r4, r0]
		strcat((char *)systemPayload,(char * )gau8Month);
 801306a:	4931      	ldr	r1, [pc, #196]	; (8013130 <getDiagDataString+0x158>)
 801306c:	4620      	mov	r0, r4
 801306e:	f002 faa5 	bl	80155bc <strcat>
		strcat((char *)systemPayload,(char * )RTC_DATESEPARATOR);
 8013072:	4620      	mov	r0, r4
 8013074:	f7f1 f8bc 	bl	80041f0 <strlen>
 8013078:	5226      	strh	r6, [r4, r0]
		strcat((char *)systemPayload,(char * )gau8Year);
 801307a:	492e      	ldr	r1, [pc, #184]	; (8013134 <getDiagDataString+0x15c>)
 801307c:	4620      	mov	r0, r4
 801307e:	f002 fa9d 	bl	80155bc <strcat>
		strcat((char *)systemPayload,(char * )RTC_PARAM_SEPARATOR);
 8013082:	4620      	mov	r0, r4
 8013084:	f7f1 f8b4 	bl	80041f0 <strlen>
 8013088:	4b2b      	ldr	r3, [pc, #172]	; (8013138 <getDiagDataString+0x160>)
 801308a:	881b      	ldrh	r3, [r3, #0]
 801308c:	5223      	strh	r3, [r4, r0]
		strcat((char *)systemPayload,(char * )gau8Hour);
 801308e:	492b      	ldr	r1, [pc, #172]	; (801313c <getDiagDataString+0x164>)
 8013090:	4620      	mov	r0, r4
 8013092:	f002 fa93 	bl	80155bc <strcat>
		strcat((char *)systemPayload,(char * )RTC_TIMESEPARATOR);
 8013096:	4620      	mov	r0, r4
 8013098:	f7f1 f8aa 	bl	80041f0 <strlen>
 801309c:	4b28      	ldr	r3, [pc, #160]	; (8013140 <getDiagDataString+0x168>)
 801309e:	881e      	ldrh	r6, [r3, #0]
 80130a0:	5226      	strh	r6, [r4, r0]
		strcat((char *)systemPayload,(char * )gau8Minutes);
 80130a2:	4928      	ldr	r1, [pc, #160]	; (8013144 <getDiagDataString+0x16c>)
 80130a4:	4620      	mov	r0, r4
 80130a6:	f002 fa89 	bl	80155bc <strcat>
		strcat((char *)systemPayload,(char * )RTC_TIMESEPARATOR);
 80130aa:	4620      	mov	r0, r4
 80130ac:	f7f1 f8a0 	bl	80041f0 <strlen>
 80130b0:	5226      	strh	r6, [r4, r0]
		strcat((char *)systemPayload,(char * )gau8Seconds);
 80130b2:	4925      	ldr	r1, [pc, #148]	; (8013148 <getDiagDataString+0x170>)
 80130b4:	4620      	mov	r0, r4
 80130b6:	f002 fa81 	bl	80155bc <strcat>
		strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 80130ba:	4620      	mov	r0, r4
 80130bc:	f7f1 f898 	bl	80041f0 <strlen>
 80130c0:	5225      	strh	r5, [r4, r0]
		strcat((char *)systemPayload,(char * )FIRMWARE_VER);
 80130c2:	4620      	mov	r0, r4
 80130c4:	f7f1 f894 	bl	80041f0 <strlen>
 80130c8:	4607      	mov	r7, r0
 80130ca:	1826      	adds	r6, r4, r0
 80130cc:	4b1f      	ldr	r3, [pc, #124]	; (801314c <getDiagDataString+0x174>)
 80130ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80130d0:	51e0      	str	r0, [r4, r7]
 80130d2:	6071      	str	r1, [r6, #4]
 80130d4:	60b2      	str	r2, [r6, #8]
 80130d6:	881a      	ldrh	r2, [r3, #0]
 80130d8:	789b      	ldrb	r3, [r3, #2]
 80130da:	81b2      	strh	r2, [r6, #12]
 80130dc:	73b3      	strb	r3, [r6, #14]
		strcat((char *)systemPayload,(char * )",");
 80130de:	4620      	mov	r0, r4
 80130e0:	f7f1 f886 	bl	80041f0 <strlen>
 80130e4:	5225      	strh	r5, [r4, r0]
		strcat((char *)systemPayload,(char * )BOOT_REGION);
 80130e6:	4620      	mov	r0, r4
 80130e8:	f7f1 f882 	bl	80041f0 <strlen>
 80130ec:	4b18      	ldr	r3, [pc, #96]	; (8013150 <getDiagDataString+0x178>)
 80130ee:	881b      	ldrh	r3, [r3, #0]
 80130f0:	5223      	strh	r3, [r4, r0]
		strcat((char *)systemPayload,(char * )",");
 80130f2:	4620      	mov	r0, r4
 80130f4:	f7f1 f87c 	bl	80041f0 <strlen>
 80130f8:	5225      	strh	r5, [r4, r0]
		DiagnosticString(systemPayload,DiagnosticStatus);
 80130fa:	4641      	mov	r1, r8
 80130fc:	4620      	mov	r0, r4
 80130fe:	f7ff fd79 	bl	8012bf4 <DiagnosticString>
		strcat((char *)systemPayload,(char * )END_OF_FRAME);
 8013102:	4620      	mov	r0, r4
 8013104:	f7f1 f874 	bl	80041f0 <strlen>
 8013108:	4b12      	ldr	r3, [pc, #72]	; (8013154 <getDiagDataString+0x17c>)
 801310a:	881b      	ldrh	r3, [r3, #0]
 801310c:	5223      	strh	r3, [r4, r0]
}
 801310e:	4620      	mov	r0, r4
 8013110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013114:	0801e52c 	.word	0x0801e52c
 8013118:	0801e3fc 	.word	0x0801e3fc
 801311c:	200097d4 	.word	0x200097d4
 8013120:	0801e358 	.word	0x0801e358
 8013124:	0801e390 	.word	0x0801e390
 8013128:	20003850 	.word	0x20003850
 801312c:	0801e538 	.word	0x0801e538
 8013130:	20003848 	.word	0x20003848
 8013134:	20003840 	.word	0x20003840
 8013138:	0801e3dc 	.word	0x0801e3dc
 801313c:	20003858 	.word	0x20003858
 8013140:	0801e494 	.word	0x0801e494
 8013144:	20003860 	.word	0x20003860
 8013148:	20003868 	.word	0x20003868
 801314c:	0801e53c 	.word	0x0801e53c
 8013150:	0801e590 	.word	0x0801e590
 8013154:	0801e57c 	.word	0x0801e57c

08013158 <enqueue>:
* <hr>
*
*******************************************************************************/
void enqueue(strctQUEUE * queue,char * data)
{
	if(data != NULL)
 8013158:	b1d9      	cbz	r1, 8013192 <enqueue+0x3a>
{
 801315a:	b538      	push	{r3, r4, r5, lr}
 801315c:	4604      	mov	r4, r0
 801315e:	460d      	mov	r5, r1
	{
		if(queue->head == (MAX_QUEUE_SIZE))
 8013160:	6803      	ldr	r3, [r0, #0]
 8013162:	2b0a      	cmp	r3, #10
 8013164:	d012      	beq.n	801318c <enqueue+0x34>
		{
			/*Queue Overflow */
			queue->head = 0;
		}
		/* If queue has data overwrite it */
		if(queue->data[queue->head] != NULL)
 8013166:	6823      	ldr	r3, [r4, #0]
 8013168:	3302      	adds	r3, #2
 801316a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801316e:	b130      	cbz	r0, 801317e <enqueue+0x26>
		{
			free(queue->data[queue->head]);
 8013170:	f001 ff68 	bl	8015044 <free>
			queue->data[queue->head] = NULL;
 8013174:	6823      	ldr	r3, [r4, #0]
 8013176:	3302      	adds	r3, #2
 8013178:	2200      	movs	r2, #0
 801317a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		}
		queue->data[queue->head]= data;
 801317e:	6823      	ldr	r3, [r4, #0]
 8013180:	1c9a      	adds	r2, r3, #2
 8013182:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
		queue->head++;
 8013186:	3301      	adds	r3, #1
 8013188:	6023      	str	r3, [r4, #0]
	else
	{
		/* Log Error */
		//Error_Callback(enmERROR_ENQUEUE);
	}
}
 801318a:	bd38      	pop	{r3, r4, r5, pc}
			queue->head = 0;
 801318c:	2300      	movs	r3, #0
 801318e:	6003      	str	r3, [r0, #0]
 8013190:	e7e9      	b.n	8013166 <enqueue+0xe>
 8013192:	4770      	bx	lr

08013194 <dequeue>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void dequeue(strctQUEUE * queue)
{
 8013194:	b510      	push	{r4, lr}
 8013196:	4604      	mov	r4, r0
	/* After data is uploaded free the pointer in queue->data */
    if(((queue->tail == 0) && (queue->head == 0)) || (queue->tail == queue->head))
 8013198:	6843      	ldr	r3, [r0, #4]
 801319a:	b90b      	cbnz	r3, 80131a0 <dequeue+0xc>
 801319c:	6802      	ldr	r2, [r0, #0]
 801319e:	b112      	cbz	r2, 80131a6 <dequeue+0x12>
 80131a0:	6822      	ldr	r2, [r4, #0]
 80131a2:	4293      	cmp	r3, r2
 80131a4:	d100      	bne.n	80131a8 <dequeue+0x14>
        free(queue->data[queue->tail]);
        queue->data[queue->tail] = NULL;
        queue->tail++;
        if(queue->tail > (MAX_QUEUE_SIZE-1)) queue->tail=0;
    }
}
 80131a6:	bd10      	pop	{r4, pc}
        free(queue->data[queue->tail]);
 80131a8:	3302      	adds	r3, #2
 80131aa:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80131ae:	f001 ff49 	bl	8015044 <free>
        queue->data[queue->tail] = NULL;
 80131b2:	6863      	ldr	r3, [r4, #4]
 80131b4:	1c9a      	adds	r2, r3, #2
 80131b6:	2100      	movs	r1, #0
 80131b8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
        queue->tail++;
 80131bc:	3301      	adds	r3, #1
 80131be:	6063      	str	r3, [r4, #4]
        if(queue->tail > (MAX_QUEUE_SIZE-1)) queue->tail=0;
 80131c0:	2b09      	cmp	r3, #9
 80131c2:	ddf0      	ble.n	80131a6 <dequeue+0x12>
 80131c4:	6061      	str	r1, [r4, #4]
}
 80131c6:	e7ee      	b.n	80131a6 <dequeue+0x12>

080131c8 <isQueueEmpty>:
* <hr>
*
*******************************************************************************/
uint32_t isQueueEmpty(strctQUEUE * queue)
{
	return((queue->head) == (queue->tail));
 80131c8:	6802      	ldr	r2, [r0, #0]
 80131ca:	6840      	ldr	r0, [r0, #4]
}
 80131cc:	4282      	cmp	r2, r0
 80131ce:	bf14      	ite	ne
 80131d0:	2000      	movne	r0, #0
 80131d2:	2001      	moveq	r0, #1
 80131d4:	4770      	bx	lr
	...

080131d8 <verifyNetworkConfigData>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
static void verifyNetworkConfigData(void)
{
 80131d8:	b510      	push	{r4, lr}
	/*Log Errors Related to */
	if(atoi(gau8ConfigNewtorkIsEnabled) > 2)
 80131da:	4858      	ldr	r0, [pc, #352]	; (801333c <verifyNetworkConfigData+0x164>)
 80131dc:	f001 fee8 	bl	8014fb0 <atoi>
 80131e0:	2802      	cmp	r0, #2
 80131e2:	dd62      	ble.n	80132aa <verifyNetworkConfigData+0xd2>
		gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWISENABLED);
 80131e4:	4a55      	ldr	r2, [pc, #340]	; (801333c <verifyNetworkConfigData+0x164>)
 80131e6:	6853      	ldr	r3, [r2, #4]
 80131e8:	f043 0302 	orr.w	r3, r3, #2
 80131ec:	6053      	str	r3, [r2, #4]
	else
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWISENABLED);

	if(strlen(gau8ConfigNewtorkServerURL) > 150)
 80131ee:	4854      	ldr	r0, [pc, #336]	; (8013340 <verifyNetworkConfigData+0x168>)
 80131f0:	f7f0 fffe 	bl	80041f0 <strlen>
 80131f4:	2896      	cmp	r0, #150	; 0x96
 80131f6:	d95e      	bls.n	80132b6 <verifyNetworkConfigData+0xde>
		gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWSERURLLEN);
 80131f8:	4a50      	ldr	r2, [pc, #320]	; (801333c <verifyNetworkConfigData+0x164>)
 80131fa:	6853      	ldr	r3, [r2, #4]
 80131fc:	f043 0304 	orr.w	r3, r3, #4
 8013200:	6053      	str	r3, [r2, #4]
	else
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWSERURLLEN);

	if(strlen(gau8ConfigNewtorkConfigURL) > 150)
 8013202:	4850      	ldr	r0, [pc, #320]	; (8013344 <verifyNetworkConfigData+0x16c>)
 8013204:	f7f0 fff4 	bl	80041f0 <strlen>
 8013208:	2896      	cmp	r0, #150	; 0x96
 801320a:	d95a      	bls.n	80132c2 <verifyNetworkConfigData+0xea>
		gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWCONFURLLEN);
 801320c:	4a4b      	ldr	r2, [pc, #300]	; (801333c <verifyNetworkConfigData+0x164>)
 801320e:	6853      	ldr	r3, [r2, #4]
 8013210:	f043 0308 	orr.w	r3, r3, #8
 8013214:	6053      	str	r3, [r2, #4]
	else
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWCONFURLLEN);

	if(strlen(gau8ConfigNewtorkAPN) > 50)
 8013216:	484c      	ldr	r0, [pc, #304]	; (8013348 <verifyNetworkConfigData+0x170>)
 8013218:	f7f0 ffea 	bl	80041f0 <strlen>
 801321c:	2832      	cmp	r0, #50	; 0x32
 801321e:	d956      	bls.n	80132ce <verifyNetworkConfigData+0xf6>
		gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWAPN);
 8013220:	4a46      	ldr	r2, [pc, #280]	; (801333c <verifyNetworkConfigData+0x164>)
 8013222:	6853      	ldr	r3, [r2, #4]
 8013224:	f043 0310 	orr.w	r3, r3, #16
 8013228:	6053      	str	r3, [r2, #4]
	else
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWAPN);

	if(atoi(gau8ConfigNewtorkUpFreqSupply) > 10000000)
 801322a:	4848      	ldr	r0, [pc, #288]	; (801334c <verifyNetworkConfigData+0x174>)
 801322c:	f001 fec0 	bl	8014fb0 <atoi>
 8013230:	4b47      	ldr	r3, [pc, #284]	; (8013350 <verifyNetworkConfigData+0x178>)
 8013232:	4298      	cmp	r0, r3
 8013234:	dd51      	ble.n	80132da <verifyNetworkConfigData+0x102>
		gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWUPFREQSUPPLY);
 8013236:	4a41      	ldr	r2, [pc, #260]	; (801333c <verifyNetworkConfigData+0x164>)
 8013238:	6853      	ldr	r3, [r2, #4]
 801323a:	f043 0320 	orr.w	r3, r3, #32
 801323e:	6053      	str	r3, [r2, #4]
	{
		gu32UploadTimeSupply = atoi(gau8ConfigNewtorkUpFreqSupply);
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWUPFREQSUPPLY);
	}

	if(atoi(gau8ConfigNewtorkUpFreqBatt) > 10000000)
 8013240:	4844      	ldr	r0, [pc, #272]	; (8013354 <verifyNetworkConfigData+0x17c>)
 8013242:	f001 feb5 	bl	8014fb0 <atoi>
 8013246:	4b42      	ldr	r3, [pc, #264]	; (8013350 <verifyNetworkConfigData+0x178>)
 8013248:	4298      	cmp	r0, r3
 801324a:	dd52      	ble.n	80132f2 <verifyNetworkConfigData+0x11a>
		gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWUPFREQBATT);
 801324c:	4a3b      	ldr	r2, [pc, #236]	; (801333c <verifyNetworkConfigData+0x164>)
 801324e:	6853      	ldr	r3, [r2, #4]
 8013250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013254:	6053      	str	r3, [r2, #4]
	else
	{
		gu32UploadTimeBatt = atoi(gau8ConfigNewtorkUpFreqBatt);
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWUPFREQBATT);
	}
	if(atoi(gau8ConfigNewtorkType) > 2)
 8013256:	4840      	ldr	r0, [pc, #256]	; (8013358 <verifyNetworkConfigData+0x180>)
 8013258:	f001 feaa 	bl	8014fb0 <atoi>
 801325c:	2802      	cmp	r0, #2
 801325e:	dd54      	ble.n	801330a <verifyNetworkConfigData+0x132>
		gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWTYPE);
 8013260:	4a36      	ldr	r2, [pc, #216]	; (801333c <verifyNetworkConfigData+0x164>)
 8013262:	6853      	ldr	r3, [r2, #4]
 8013264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013268:	6053      	str	r3, [r2, #4]
	else
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWTYPE);

	if(atoi(gau8ConfigNewtorkGPSEnable) > 1)
 801326a:	483c      	ldr	r0, [pc, #240]	; (801335c <verifyNetworkConfigData+0x184>)
 801326c:	f001 fea0 	bl	8014fb0 <atoi>
 8013270:	2801      	cmp	r0, #1
 8013272:	dd50      	ble.n	8013316 <verifyNetworkConfigData+0x13e>
		gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWGPSEN);
 8013274:	4a31      	ldr	r2, [pc, #196]	; (801333c <verifyNetworkConfigData+0x164>)
 8013276:	6853      	ldr	r3, [r2, #4]
 8013278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801327c:	6053      	str	r3, [r2, #4]
	else
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWGPSEN);

	if(atoi(gau8ConfigNewtorkSendData) > 1)
 801327e:	4838      	ldr	r0, [pc, #224]	; (8013360 <verifyNetworkConfigData+0x188>)
 8013280:	f001 fe96 	bl	8014fb0 <atoi>
 8013284:	2801      	cmp	r0, #1
 8013286:	dd4c      	ble.n	8013322 <verifyNetworkConfigData+0x14a>
		gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWSENDDATAEN);
 8013288:	4a2c      	ldr	r2, [pc, #176]	; (801333c <verifyNetworkConfigData+0x164>)
 801328a:	6853      	ldr	r3, [r2, #4]
 801328c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013290:	6053      	str	r3, [r2, #4]
	else
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWSENDDATAEN);

	if(atoi(gau8ConfigNewtorkSendDataDisableTime) > 10000000)
 8013292:	4834      	ldr	r0, [pc, #208]	; (8013364 <verifyNetworkConfigData+0x18c>)
 8013294:	f001 fe8c 	bl	8014fb0 <atoi>
 8013298:	4b2d      	ldr	r3, [pc, #180]	; (8013350 <verifyNetworkConfigData+0x178>)
 801329a:	4298      	cmp	r0, r3
 801329c:	dd47      	ble.n	801332e <verifyNetworkConfigData+0x156>
		gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWSENDDATADISABLE);
 801329e:	4a27      	ldr	r2, [pc, #156]	; (801333c <verifyNetworkConfigData+0x164>)
 80132a0:	6853      	ldr	r3, [r2, #4]
 80132a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80132a6:	6053      	str	r3, [r2, #4]
	else
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWSENDDATADISABLE);

}
 80132a8:	bd10      	pop	{r4, pc}
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWISENABLED);
 80132aa:	4a24      	ldr	r2, [pc, #144]	; (801333c <verifyNetworkConfigData+0x164>)
 80132ac:	6853      	ldr	r3, [r2, #4]
 80132ae:	f023 0302 	bic.w	r3, r3, #2
 80132b2:	6053      	str	r3, [r2, #4]
 80132b4:	e79b      	b.n	80131ee <verifyNetworkConfigData+0x16>
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWSERURLLEN);
 80132b6:	4a21      	ldr	r2, [pc, #132]	; (801333c <verifyNetworkConfigData+0x164>)
 80132b8:	6853      	ldr	r3, [r2, #4]
 80132ba:	f023 0304 	bic.w	r3, r3, #4
 80132be:	6053      	str	r3, [r2, #4]
 80132c0:	e79f      	b.n	8013202 <verifyNetworkConfigData+0x2a>
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWCONFURLLEN);
 80132c2:	4a1e      	ldr	r2, [pc, #120]	; (801333c <verifyNetworkConfigData+0x164>)
 80132c4:	6853      	ldr	r3, [r2, #4]
 80132c6:	f023 0308 	bic.w	r3, r3, #8
 80132ca:	6053      	str	r3, [r2, #4]
 80132cc:	e7a3      	b.n	8013216 <verifyNetworkConfigData+0x3e>
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWAPN);
 80132ce:	4a1b      	ldr	r2, [pc, #108]	; (801333c <verifyNetworkConfigData+0x164>)
 80132d0:	6853      	ldr	r3, [r2, #4]
 80132d2:	f023 0310 	bic.w	r3, r3, #16
 80132d6:	6053      	str	r3, [r2, #4]
 80132d8:	e7a7      	b.n	801322a <verifyNetworkConfigData+0x52>
		gu32UploadTimeSupply = atoi(gau8ConfigNewtorkUpFreqSupply);
 80132da:	4c18      	ldr	r4, [pc, #96]	; (801333c <verifyNetworkConfigData+0x164>)
 80132dc:	f504 709c 	add.w	r0, r4, #312	; 0x138
 80132e0:	f001 fe66 	bl	8014fb0 <atoi>
 80132e4:	4b18      	ldr	r3, [pc, #96]	; (8013348 <verifyNetworkConfigData+0x170>)
 80132e6:	6358      	str	r0, [r3, #52]	; 0x34
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWUPFREQSUPPLY);
 80132e8:	6863      	ldr	r3, [r4, #4]
 80132ea:	f023 0320 	bic.w	r3, r3, #32
 80132ee:	6063      	str	r3, [r4, #4]
 80132f0:	e7a6      	b.n	8013240 <verifyNetworkConfigData+0x68>
		gu32UploadTimeBatt = atoi(gau8ConfigNewtorkUpFreqBatt);
 80132f2:	4c12      	ldr	r4, [pc, #72]	; (801333c <verifyNetworkConfigData+0x164>)
 80132f4:	f504 70a2 	add.w	r0, r4, #324	; 0x144
 80132f8:	f001 fe5a 	bl	8014fb0 <atoi>
 80132fc:	4b12      	ldr	r3, [pc, #72]	; (8013348 <verifyNetworkConfigData+0x170>)
 80132fe:	6398      	str	r0, [r3, #56]	; 0x38
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWUPFREQBATT);
 8013300:	6863      	ldr	r3, [r4, #4]
 8013302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013306:	6063      	str	r3, [r4, #4]
 8013308:	e7a5      	b.n	8013256 <verifyNetworkConfigData+0x7e>
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWTYPE);
 801330a:	4a0c      	ldr	r2, [pc, #48]	; (801333c <verifyNetworkConfigData+0x164>)
 801330c:	6853      	ldr	r3, [r2, #4]
 801330e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013312:	6053      	str	r3, [r2, #4]
 8013314:	e7a9      	b.n	801326a <verifyNetworkConfigData+0x92>
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWGPSEN);
 8013316:	4a09      	ldr	r2, [pc, #36]	; (801333c <verifyNetworkConfigData+0x164>)
 8013318:	6853      	ldr	r3, [r2, #4]
 801331a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801331e:	6053      	str	r3, [r2, #4]
 8013320:	e7ad      	b.n	801327e <verifyNetworkConfigData+0xa6>
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWSENDDATAEN);
 8013322:	4a06      	ldr	r2, [pc, #24]	; (801333c <verifyNetworkConfigData+0x164>)
 8013324:	6853      	ldr	r3, [r2, #4]
 8013326:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801332a:	6053      	str	r3, [r2, #4]
 801332c:	e7b1      	b.n	8013292 <verifyNetworkConfigData+0xba>
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWSENDDATADISABLE);
 801332e:	4a03      	ldr	r2, [pc, #12]	; (801333c <verifyNetworkConfigData+0x164>)
 8013330:	6853      	ldr	r3, [r2, #4]
 8013332:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013336:	6053      	str	r3, [r2, #4]
}
 8013338:	e7b6      	b.n	80132a8 <verifyNetworkConfigData+0xd0>
 801333a:	bf00      	nop
 801333c:	20005d18 	.word	0x20005d18
 8013340:	20005d20 	.word	0x20005d20
 8013344:	20005db8 	.word	0x20005db8
 8013348:	20002848 	.word	0x20002848
 801334c:	20005e50 	.word	0x20005e50
 8013350:	00989680 	.word	0x00989680
 8013354:	20005e5c 	.word	0x20005e5c
 8013358:	20005e68 	.word	0x20005e68
 801335c:	20005e6c 	.word	0x20005e6c
 8013360:	20005e70 	.word	0x20005e70
 8013364:	20005e74 	.word	0x20005e74

08013368 <verifyModbus485ConfigData>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
static void verifyModbus485ConfigData(void)
{
 8013368:	b538      	push	{r3, r4, r5, lr}
   /* Log Errors Related to Modbus485 Configuration */
	uint32_t u32LoopCounter = 0;

	if(atoi(gau8ConfigModbus485IsEnabled) > 2)
 801336a:	48a5      	ldr	r0, [pc, #660]	; (8013600 <verifyModbus485ConfigData+0x298>)
 801336c:	f001 fe20 	bl	8014fb0 <atoi>
 8013370:	2802      	cmp	r0, #2
 8013372:	f340 8090 	ble.w	8013496 <verifyModbus485ConfigData+0x12e>
		gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485ISENABLED);
 8013376:	4aa3      	ldr	r2, [pc, #652]	; (8013604 <verifyModbus485ConfigData+0x29c>)
 8013378:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 801337c:	f043 0302 	orr.w	r3, r3, #2
 8013380:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	else
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485ISENABLED);

	if((atoi(gau8ConfigModbus485SlaveID) <= 0) | (atoi(gau8ConfigModbus485SlaveID) > 255)) // 1 to 255
 8013384:	4da0      	ldr	r5, [pc, #640]	; (8013608 <verifyModbus485ConfigData+0x2a0>)
 8013386:	4628      	mov	r0, r5
 8013388:	f001 fe12 	bl	8014fb0 <atoi>
 801338c:	4604      	mov	r4, r0
 801338e:	4628      	mov	r0, r5
 8013390:	f001 fe0e 	bl	8014fb0 <atoi>
 8013394:	28ff      	cmp	r0, #255	; 0xff
 8013396:	bfd4      	ite	le
 8013398:	2300      	movle	r3, #0
 801339a:	2301      	movgt	r3, #1
 801339c:	2c00      	cmp	r4, #0
 801339e:	bfd8      	it	le
 80133a0:	f043 0301 	orrle.w	r3, r3, #1
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d07e      	beq.n	80134a6 <verifyModbus485ConfigData+0x13e>
		gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485SLAVEID);
 80133a8:	f5a5 72b8 	sub.w	r2, r5, #368	; 0x170
 80133ac:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 80133b0:	f043 0304 	orr.w	r3, r3, #4
 80133b4:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	else
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485SLAVEID);

	if(atoi(gau8ConfigModbus485Termination) > 1)
 80133b8:	4894      	ldr	r0, [pc, #592]	; (801360c <verifyModbus485ConfigData+0x2a4>)
 80133ba:	f001 fdf9 	bl	8014fb0 <atoi>
 80133be:	2801      	cmp	r0, #1
 80133c0:	dd79      	ble.n	80134b6 <verifyModbus485ConfigData+0x14e>
		gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485TERMINATE);
 80133c2:	4a90      	ldr	r2, [pc, #576]	; (8013604 <verifyModbus485ConfigData+0x29c>)
 80133c4:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 80133c8:	f043 0308 	orr.w	r3, r3, #8
 80133cc:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	else
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485TERMINATE);

	if(atoi(gau8ConfigModbus485DataPoints) > CONFIG_MB485_MAXPARAMS)
 80133d0:	488f      	ldr	r0, [pc, #572]	; (8013610 <verifyModbus485ConfigData+0x2a8>)
 80133d2:	f001 fded 	bl	8014fb0 <atoi>
 80133d6:	284b      	cmp	r0, #75	; 0x4b
 80133d8:	dd75      	ble.n	80134c6 <verifyModbus485ConfigData+0x15e>
		gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485DATAPOINTS);
 80133da:	4a8a      	ldr	r2, [pc, #552]	; (8013604 <verifyModbus485ConfigData+0x29c>)
 80133dc:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 80133e0:	f043 0310 	orr.w	r3, r3, #16
 80133e4:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	else
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485DATAPOINTS);

	if(atoi(gau8ConfigModbus485UARTBR) > 115200)
 80133e8:	488a      	ldr	r0, [pc, #552]	; (8013614 <verifyModbus485ConfigData+0x2ac>)
 80133ea:	f001 fde1 	bl	8014fb0 <atoi>
 80133ee:	f5b0 3fe1 	cmp.w	r0, #115200	; 0x1c200
 80133f2:	dd70      	ble.n	80134d6 <verifyModbus485ConfigData+0x16e>
		gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485UARTBR);
 80133f4:	4a83      	ldr	r2, [pc, #524]	; (8013604 <verifyModbus485ConfigData+0x29c>)
 80133f6:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 80133fa:	f043 0320 	orr.w	r3, r3, #32
 80133fe:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	else
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485UARTBR);

	if(atoi(gau8ConfigModbus485UARTStartBit) > 3)
 8013402:	4885      	ldr	r0, [pc, #532]	; (8013618 <verifyModbus485ConfigData+0x2b0>)
 8013404:	f001 fdd4 	bl	8014fb0 <atoi>
 8013408:	2803      	cmp	r0, #3
 801340a:	dd6c      	ble.n	80134e6 <verifyModbus485ConfigData+0x17e>
		gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485UARTSTARTBIT);
 801340c:	4a7d      	ldr	r2, [pc, #500]	; (8013604 <verifyModbus485ConfigData+0x29c>)
 801340e:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 8013412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013416:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	else
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485UARTSTARTBIT);

	if(atoi(gau8ConfigModbus485UARTStopBit) > 3)
 801341a:	4880      	ldr	r0, [pc, #512]	; (801361c <verifyModbus485ConfigData+0x2b4>)
 801341c:	f001 fdc8 	bl	8014fb0 <atoi>
 8013420:	2803      	cmp	r0, #3
 8013422:	dd68      	ble.n	80134f6 <verifyModbus485ConfigData+0x18e>
		gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485UARTSTOPBIT);
 8013424:	4a77      	ldr	r2, [pc, #476]	; (8013604 <verifyModbus485ConfigData+0x29c>)
 8013426:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 801342a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801342e:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	else
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485UARTSTOPBIT);

	if(atoi(gau8ConfigModbus485PollingTime) > 1000000)
 8013432:	487b      	ldr	r0, [pc, #492]	; (8013620 <verifyModbus485ConfigData+0x2b8>)
 8013434:	f001 fdbc 	bl	8014fb0 <atoi>
 8013438:	4b7a      	ldr	r3, [pc, #488]	; (8013624 <verifyModbus485ConfigData+0x2bc>)
 801343a:	4298      	cmp	r0, r3
 801343c:	dd63      	ble.n	8013506 <verifyModbus485ConfigData+0x19e>
		gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485POLLTIME);
 801343e:	4a71      	ldr	r2, [pc, #452]	; (8013604 <verifyModbus485ConfigData+0x29c>)
 8013440:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 8013444:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013448:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	{
		gu32Modbus485PollingTime = atoi(gau8ConfigModbus485PollingTime);
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485POLLTIME);
	}

	if(atoi(gau8ConfigModbus485ResponseTime) > 1000000)
 801344c:	4876      	ldr	r0, [pc, #472]	; (8013628 <verifyModbus485ConfigData+0x2c0>)
 801344e:	f001 fdaf 	bl	8014fb0 <atoi>
 8013452:	4b74      	ldr	r3, [pc, #464]	; (8013624 <verifyModbus485ConfigData+0x2bc>)
 8013454:	4298      	cmp	r0, r3
 8013456:	dd64      	ble.n	8013522 <verifyModbus485ConfigData+0x1ba>
		gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485RESPTIME);
 8013458:	4a6a      	ldr	r2, [pc, #424]	; (8013604 <verifyModbus485ConfigData+0x29c>)
 801345a:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 801345e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013462:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
{
 8013466:	2400      	movs	r4, #0
	else
	{	gu32ModbusResponseTimeout = atoi(gau8ConfigModbus485ResponseTime);
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485RESPTIME);
	}
	for(u32LoopCounter = 0 ; u32LoopCounter < atoi(gau8ConfigModbus485DataPoints) ; u32LoopCounter++ )
 8013468:	4869      	ldr	r0, [pc, #420]	; (8013610 <verifyModbus485ConfigData+0x2a8>)
 801346a:	f001 fda1 	bl	8014fb0 <atoi>
 801346e:	42a0      	cmp	r0, r4
 8013470:	d96c      	bls.n	801354c <verifyModbus485ConfigData+0x1e4>
	{
		if((gau32ConfigModbus485Address[u32LoopCounter] == 0) || (gau32ConfigModbus485Address[u32LoopCounter] > 65535))
 8013472:	4b6e      	ldr	r3, [pc, #440]	; (801362c <verifyModbus485ConfigData+0x2c4>)
 8013474:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801347a:	3b01      	subs	r3, #1
 801347c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013480:	4293      	cmp	r3, r2
 8013482:	d85c      	bhi.n	801353e <verifyModbus485ConfigData+0x1d6>
			 * Log Error*/
			gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485ADDRESS);
			break;
		}
		else
			gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485ADDRESS);
 8013484:	4a5f      	ldr	r2, [pc, #380]	; (8013604 <verifyModbus485ConfigData+0x29c>)
 8013486:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 801348a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801348e:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	for(u32LoopCounter = 0 ; u32LoopCounter < atoi(gau8ConfigModbus485DataPoints) ; u32LoopCounter++ )
 8013492:	3401      	adds	r4, #1
 8013494:	e7e8      	b.n	8013468 <verifyModbus485ConfigData+0x100>
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485ISENABLED);
 8013496:	4a5b      	ldr	r2, [pc, #364]	; (8013604 <verifyModbus485ConfigData+0x29c>)
 8013498:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 801349c:	f023 0302 	bic.w	r3, r3, #2
 80134a0:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 80134a4:	e76e      	b.n	8013384 <verifyModbus485ConfigData+0x1c>
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485SLAVEID);
 80134a6:	4a57      	ldr	r2, [pc, #348]	; (8013604 <verifyModbus485ConfigData+0x29c>)
 80134a8:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 80134ac:	f023 0304 	bic.w	r3, r3, #4
 80134b0:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 80134b4:	e780      	b.n	80133b8 <verifyModbus485ConfigData+0x50>
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485TERMINATE);
 80134b6:	4a53      	ldr	r2, [pc, #332]	; (8013604 <verifyModbus485ConfigData+0x29c>)
 80134b8:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 80134bc:	f023 0308 	bic.w	r3, r3, #8
 80134c0:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 80134c4:	e784      	b.n	80133d0 <verifyModbus485ConfigData+0x68>
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485DATAPOINTS);
 80134c6:	4a4f      	ldr	r2, [pc, #316]	; (8013604 <verifyModbus485ConfigData+0x29c>)
 80134c8:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 80134cc:	f023 0310 	bic.w	r3, r3, #16
 80134d0:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 80134d4:	e788      	b.n	80133e8 <verifyModbus485ConfigData+0x80>
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485UARTBR);
 80134d6:	4a4b      	ldr	r2, [pc, #300]	; (8013604 <verifyModbus485ConfigData+0x29c>)
 80134d8:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 80134dc:	f023 0320 	bic.w	r3, r3, #32
 80134e0:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 80134e4:	e78d      	b.n	8013402 <verifyModbus485ConfigData+0x9a>
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485UARTSTARTBIT);
 80134e6:	4a47      	ldr	r2, [pc, #284]	; (8013604 <verifyModbus485ConfigData+0x29c>)
 80134e8:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 80134ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80134f0:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 80134f4:	e791      	b.n	801341a <verifyModbus485ConfigData+0xb2>
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485UARTSTOPBIT);
 80134f6:	4a43      	ldr	r2, [pc, #268]	; (8013604 <verifyModbus485ConfigData+0x29c>)
 80134f8:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 80134fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013500:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 8013504:	e795      	b.n	8013432 <verifyModbus485ConfigData+0xca>
		gu32Modbus485PollingTime = atoi(gau8ConfigModbus485PollingTime);
 8013506:	4c3f      	ldr	r4, [pc, #252]	; (8013604 <verifyModbus485ConfigData+0x29c>)
 8013508:	f504 70c4 	add.w	r0, r4, #392	; 0x188
 801350c:	f001 fd50 	bl	8014fb0 <atoi>
 8013510:	4b46      	ldr	r3, [pc, #280]	; (801362c <verifyModbus485ConfigData+0x2c4>)
 8013512:	6458      	str	r0, [r3, #68]	; 0x44
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485POLLTIME);
 8013514:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 8013518:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801351c:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
 8013520:	e794      	b.n	801344c <verifyModbus485ConfigData+0xe4>
	{	gu32ModbusResponseTimeout = atoi(gau8ConfigModbus485ResponseTime);
 8013522:	4c38      	ldr	r4, [pc, #224]	; (8013604 <verifyModbus485ConfigData+0x29c>)
 8013524:	f504 70c8 	add.w	r0, r4, #400	; 0x190
 8013528:	f001 fd42 	bl	8014fb0 <atoi>
 801352c:	4b40      	ldr	r3, [pc, #256]	; (8013630 <verifyModbus485ConfigData+0x2c8>)
 801352e:	6018      	str	r0, [r3, #0]
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485RESPTIME);
 8013530:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 8013534:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013538:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
 801353c:	e793      	b.n	8013466 <verifyModbus485ConfigData+0xfe>
			gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485ADDRESS);
 801353e:	4a31      	ldr	r2, [pc, #196]	; (8013604 <verifyModbus485ConfigData+0x29c>)
 8013540:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 8013544:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013548:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
{
 801354c:	2400      	movs	r4, #0
	}

	u32LoopCounter = 0;
	for(u32LoopCounter = 0 ; u32LoopCounter < atoi(gau8ConfigModbus485DataPoints) ; u32LoopCounter++ )
 801354e:	4830      	ldr	r0, [pc, #192]	; (8013610 <verifyModbus485ConfigData+0x2a8>)
 8013550:	f001 fd2e 	bl	8014fb0 <atoi>
 8013554:	42a0      	cmp	r0, r4
 8013556:	d917      	bls.n	8013588 <verifyModbus485ConfigData+0x220>
	{
		if((gau32ConfigModbus485DFunctionCode[u32LoopCounter] == 0) || (gau32ConfigModbus485DFunctionCode[u32LoopCounter] > 5))
 8013558:	4b34      	ldr	r3, [pc, #208]	; (801362c <verifyModbus485ConfigData+0x2c4>)
 801355a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801355e:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8013562:	3b01      	subs	r3, #1
 8013564:	2b04      	cmp	r3, #4
 8013566:	d808      	bhi.n	801357a <verifyModbus485ConfigData+0x212>
			 * Log Error*/
			gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485FUCNTIONCODE);
			break;
		}
		else
			gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485FUCNTIONCODE);
 8013568:	4a26      	ldr	r2, [pc, #152]	; (8013604 <verifyModbus485ConfigData+0x29c>)
 801356a:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 801356e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013572:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	for(u32LoopCounter = 0 ; u32LoopCounter < atoi(gau8ConfigModbus485DataPoints) ; u32LoopCounter++ )
 8013576:	3401      	adds	r4, #1
 8013578:	e7e9      	b.n	801354e <verifyModbus485ConfigData+0x1e6>
			gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485FUCNTIONCODE);
 801357a:	4a22      	ldr	r2, [pc, #136]	; (8013604 <verifyModbus485ConfigData+0x29c>)
 801357c:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 8013580:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8013584:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
{
 8013588:	2400      	movs	r4, #0
	}
	u32LoopCounter = 0;
	for(u32LoopCounter = 0 ; u32LoopCounter < atoi(gau8ConfigModbus485DataPoints) ; u32LoopCounter++ )
 801358a:	4821      	ldr	r0, [pc, #132]	; (8013610 <verifyModbus485ConfigData+0x2a8>)
 801358c:	f001 fd10 	bl	8014fb0 <atoi>
 8013590:	42a0      	cmp	r0, r4
 8013592:	d917      	bls.n	80135c4 <verifyModbus485ConfigData+0x25c>
	{
		if((gau32ConfigModbus485NoPoints[u32LoopCounter] == 0) || (gau32ConfigModbus485NoPoints[u32LoopCounter] > 255))
 8013594:	4b25      	ldr	r3, [pc, #148]	; (801362c <verifyModbus485ConfigData+0x2c4>)
 8013596:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801359a:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 801359e:	3b01      	subs	r3, #1
 80135a0:	2bfe      	cmp	r3, #254	; 0xfe
 80135a2:	d808      	bhi.n	80135b6 <verifyModbus485ConfigData+0x24e>
			 * Log Error*/
			gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485DATAPOINTS);
			break;
		}
		else
			gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485DATAPOINTS);
 80135a4:	4a17      	ldr	r2, [pc, #92]	; (8013604 <verifyModbus485ConfigData+0x29c>)
 80135a6:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 80135aa:	f023 0310 	bic.w	r3, r3, #16
 80135ae:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	for(u32LoopCounter = 0 ; u32LoopCounter < atoi(gau8ConfigModbus485DataPoints) ; u32LoopCounter++ )
 80135b2:	3401      	adds	r4, #1
 80135b4:	e7e9      	b.n	801358a <verifyModbus485ConfigData+0x222>
			gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485DATAPOINTS);
 80135b6:	4a13      	ldr	r2, [pc, #76]	; (8013604 <verifyModbus485ConfigData+0x29c>)
 80135b8:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 80135bc:	f043 0310 	orr.w	r3, r3, #16
 80135c0:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	}

	if(IP_IS_TYPE_V4(gau8ConfigModbusTCPIPDEVICE) != 1)
		gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MBTCPIPDEVICE);
	else
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPIPDEVICE);
 80135c4:	480f      	ldr	r0, [pc, #60]	; (8013604 <verifyModbus485ConfigData+0x29c>)
 80135c6:	f8d0 3198 	ldr.w	r3, [r0, #408]	; 0x198
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MB485UARTSTOPBIT);

	if(IP_IS_TYPE_V4(gau8ConfigModbusTCPIPGATEWAY) != 1)
		gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MB485POLLTIME);
	else
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MB485POLLTIME);
 80135ca:	f423 43a1 	bic.w	r3, r3, #20608	; 0x5080
 80135ce:	f8c0 3198 	str.w	r3, [r0, #408]	; 0x198

	if(atoi(gau8ConfigModbusTCPPORT) > 65535)
 80135d2:	f500 70ce 	add.w	r0, r0, #412	; 0x19c
 80135d6:	f001 fceb 	bl	8014fb0 <atoi>
 80135da:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80135de:	db07      	blt.n	80135f0 <verifyModbus485ConfigData+0x288>
		gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MBTCPIPPORT);
 80135e0:	4a08      	ldr	r2, [pc, #32]	; (8013604 <verifyModbus485ConfigData+0x29c>)
 80135e2:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 80135e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80135ea:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	else
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPIPPORT);

}
 80135ee:	bd38      	pop	{r3, r4, r5, pc}
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPIPPORT);
 80135f0:	4a04      	ldr	r2, [pc, #16]	; (8013604 <verifyModbus485ConfigData+0x29c>)
 80135f2:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 80135f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80135fa:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
}
 80135fe:	e7f6      	b.n	80135ee <verifyModbus485ConfigData+0x286>
 8013600:	20005e80 	.word	0x20005e80
 8013604:	20005d18 	.word	0x20005d18
 8013608:	20005e88 	.word	0x20005e88
 801360c:	20005e90 	.word	0x20005e90
 8013610:	20005e94 	.word	0x20005e94
 8013614:	20002884 	.word	0x20002884
 8013618:	20005e98 	.word	0x20005e98
 801361c:	20005e9c 	.word	0x20005e9c
 8013620:	20005ea0 	.word	0x20005ea0
 8013624:	000f4240 	.word	0x000f4240
 8013628:	20005ea8 	.word	0x20005ea8
 801362c:	20002848 	.word	0x20002848
 8013630:	20005318 	.word	0x20005318

08013634 <extractNewtorkConfiguration>:
{
 8013634:	b510      	push	{r4, lr}
	gu32ExtractParamCounter = 0;
 8013636:	4b31      	ldr	r3, [pc, #196]	; (80136fc <extractNewtorkConfiguration+0xc8>)
 8013638:	2200      	movs	r2, #0
 801363a:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	char *configptr = strtok(nwsof, ",");
 801363e:	4930      	ldr	r1, [pc, #192]	; (8013700 <extractNewtorkConfiguration+0xcc>)
 8013640:	4b30      	ldr	r3, [pc, #192]	; (8013704 <extractNewtorkConfiguration+0xd0>)
 8013642:	f8d3 075c 	ldr.w	r0, [r3, #1884]	; 0x75c
 8013646:	f002 fe4d 	bl	80162e4 <strtok>
 801364a:	4601      	mov	r1, r0
	while(configptr != NULL)
 801364c:	e00b      	b.n	8013666 <extractNewtorkConfiguration+0x32>
				strcpy(gau8ConfigNewtorkIsEnabled,configptr);
 801364e:	482b      	ldr	r0, [pc, #172]	; (80136fc <extractNewtorkConfiguration+0xc8>)
 8013650:	f001 ffd0 	bl	80155f4 <strcpy>
		gu32ExtractParamCounter++;
 8013654:	3401      	adds	r4, #1
 8013656:	4b29      	ldr	r3, [pc, #164]	; (80136fc <extractNewtorkConfiguration+0xc8>)
 8013658:	f8c3 41dc 	str.w	r4, [r3, #476]	; 0x1dc
		configptr = strtok(NULL, ",");
 801365c:	4928      	ldr	r1, [pc, #160]	; (8013700 <extractNewtorkConfiguration+0xcc>)
 801365e:	2000      	movs	r0, #0
 8013660:	f002 fe40 	bl	80162e4 <strtok>
 8013664:	4601      	mov	r1, r0
	while(configptr != NULL)
 8013666:	2900      	cmp	r1, #0
 8013668:	d040      	beq.n	80136ec <extractNewtorkConfiguration+0xb8>
		switch(gu32ExtractParamCounter)
 801366a:	4b24      	ldr	r3, [pc, #144]	; (80136fc <extractNewtorkConfiguration+0xc8>)
 801366c:	f8d3 41dc 	ldr.w	r4, [r3, #476]	; 0x1dc
 8013670:	1e63      	subs	r3, r4, #1
 8013672:	2b09      	cmp	r3, #9
 8013674:	d8ee      	bhi.n	8013654 <extractNewtorkConfiguration+0x20>
 8013676:	a201      	add	r2, pc, #4	; (adr r2, 801367c <extractNewtorkConfiguration+0x48>)
 8013678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801367c:	0801364f 	.word	0x0801364f
 8013680:	080136a5 	.word	0x080136a5
 8013684:	080136ad 	.word	0x080136ad
 8013688:	080136b5 	.word	0x080136b5
 801368c:	080136bd 	.word	0x080136bd
 8013690:	080136c5 	.word	0x080136c5
 8013694:	080136cd 	.word	0x080136cd
 8013698:	080136d5 	.word	0x080136d5
 801369c:	080136dd 	.word	0x080136dd
 80136a0:	080136e5 	.word	0x080136e5
				strcpy(gau8ConfigNewtorkServerURL,configptr);
 80136a4:	4818      	ldr	r0, [pc, #96]	; (8013708 <extractNewtorkConfiguration+0xd4>)
 80136a6:	f001 ffa5 	bl	80155f4 <strcpy>
				break;
 80136aa:	e7d3      	b.n	8013654 <extractNewtorkConfiguration+0x20>
				strcpy(gau8ConfigNewtorkConfigURL,configptr);
 80136ac:	4817      	ldr	r0, [pc, #92]	; (801370c <extractNewtorkConfiguration+0xd8>)
 80136ae:	f001 ffa1 	bl	80155f4 <strcpy>
				break;
 80136b2:	e7cf      	b.n	8013654 <extractNewtorkConfiguration+0x20>
				strcpy(gau8ConfigNewtorkAPN,configptr);
 80136b4:	4813      	ldr	r0, [pc, #76]	; (8013704 <extractNewtorkConfiguration+0xd0>)
 80136b6:	f001 ff9d 	bl	80155f4 <strcpy>
				break;
 80136ba:	e7cb      	b.n	8013654 <extractNewtorkConfiguration+0x20>
				strcpy(gau8ConfigNewtorkUpFreqSupply,configptr);
 80136bc:	4814      	ldr	r0, [pc, #80]	; (8013710 <extractNewtorkConfiguration+0xdc>)
 80136be:	f001 ff99 	bl	80155f4 <strcpy>
				break;
 80136c2:	e7c7      	b.n	8013654 <extractNewtorkConfiguration+0x20>
				strcpy(gau8ConfigNewtorkUpFreqBatt,configptr);
 80136c4:	4813      	ldr	r0, [pc, #76]	; (8013714 <extractNewtorkConfiguration+0xe0>)
 80136c6:	f001 ff95 	bl	80155f4 <strcpy>
				break;
 80136ca:	e7c3      	b.n	8013654 <extractNewtorkConfiguration+0x20>
				strcpy(gau8ConfigNewtorkType,configptr);
 80136cc:	4812      	ldr	r0, [pc, #72]	; (8013718 <extractNewtorkConfiguration+0xe4>)
 80136ce:	f001 ff91 	bl	80155f4 <strcpy>
				break;
 80136d2:	e7bf      	b.n	8013654 <extractNewtorkConfiguration+0x20>
				strcpy(gau8ConfigNewtorkGPSEnable,configptr);
 80136d4:	4811      	ldr	r0, [pc, #68]	; (801371c <extractNewtorkConfiguration+0xe8>)
 80136d6:	f001 ff8d 	bl	80155f4 <strcpy>
				break;
 80136da:	e7bb      	b.n	8013654 <extractNewtorkConfiguration+0x20>
				strcpy(gau8ConfigNewtorkSendData,configptr);
 80136dc:	4810      	ldr	r0, [pc, #64]	; (8013720 <extractNewtorkConfiguration+0xec>)
 80136de:	f001 ff89 	bl	80155f4 <strcpy>
				break;
 80136e2:	e7b7      	b.n	8013654 <extractNewtorkConfiguration+0x20>
				strcpy(gau8ConfigNewtorkSendDataDisableTime,configptr);
 80136e4:	480f      	ldr	r0, [pc, #60]	; (8013724 <extractNewtorkConfiguration+0xf0>)
 80136e6:	f001 ff85 	bl	80155f4 <strcpy>
				break;
 80136ea:	e7b3      	b.n	8013654 <extractNewtorkConfiguration+0x20>
	gu32ExtractParamCounter = 0;
 80136ec:	4b03      	ldr	r3, [pc, #12]	; (80136fc <extractNewtorkConfiguration+0xc8>)
 80136ee:	2200      	movs	r2, #0
 80136f0:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	verifyNetworkConfigData();
 80136f4:	f7ff fd70 	bl	80131d8 <verifyNetworkConfigData>
}
 80136f8:	bd10      	pop	{r4, pc}
 80136fa:	bf00      	nop
 80136fc:	20005d18 	.word	0x20005d18
 8013700:	0801e3fc 	.word	0x0801e3fc
 8013704:	20002848 	.word	0x20002848
 8013708:	20005d20 	.word	0x20005d20
 801370c:	20005db8 	.word	0x20005db8
 8013710:	20005e50 	.word	0x20005e50
 8013714:	20005e5c 	.word	0x20005e5c
 8013718:	20005e68 	.word	0x20005e68
 801371c:	20005e6c 	.word	0x20005e6c
 8013720:	20005e70 	.word	0x20005e70
 8013724:	20005e74 	.word	0x20005e74

08013728 <extractModbus485Configuration>:
{
 8013728:	b570      	push	{r4, r5, r6, lr}
	char *configptr = strtok(mb485config, ",");//mb485config
 801372a:	4977      	ldr	r1, [pc, #476]	; (8013908 <extractModbus485Configuration+0x1e0>)
 801372c:	4b77      	ldr	r3, [pc, #476]	; (801390c <extractModbus485Configuration+0x1e4>)
 801372e:	f8d3 07e0 	ldr.w	r0, [r3, #2016]	; 0x7e0
 8013732:	f002 fdd7 	bl	80162e4 <strtok>
 8013736:	4604      	mov	r4, r0
	gu32ExtractParamCounter = 0;
 8013738:	4b75      	ldr	r3, [pc, #468]	; (8013910 <extractModbus485Configuration+0x1e8>)
 801373a:	2200      	movs	r2, #0
 801373c:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	while(configptr != NULL)
 8013740:	e00f      	b.n	8013762 <extractModbus485Configuration+0x3a>
				strcpy(gau8ConfigModbus485IsEnabled,configptr);
 8013742:	4621      	mov	r1, r4
 8013744:	4873      	ldr	r0, [pc, #460]	; (8013914 <extractModbus485Configuration+0x1ec>)
 8013746:	f001 ff55 	bl	80155f4 <strcpy>
		if(gu32ExtractParamCounter != 9)
 801374a:	4b71      	ldr	r3, [pc, #452]	; (8013910 <extractModbus485Configuration+0x1e8>)
 801374c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8013750:	2b09      	cmp	r3, #9
 8013752:	f040 80cc 	bne.w	80138ee <extractModbus485Configuration+0x1c6>
		gu32ExtractParamCounter++;
 8013756:	4a6e      	ldr	r2, [pc, #440]	; (8013910 <extractModbus485Configuration+0x1e8>)
 8013758:	f8d2 31dc 	ldr.w	r3, [r2, #476]	; 0x1dc
 801375c:	3301      	adds	r3, #1
 801375e:	f8c2 31dc 	str.w	r3, [r2, #476]	; 0x1dc
	while(configptr != NULL)
 8013762:	2c00      	cmp	r4, #0
 8013764:	f000 80c9 	beq.w	80138fa <extractModbus485Configuration+0x1d2>
		switch(gu32ExtractParamCounter)
 8013768:	4b69      	ldr	r3, [pc, #420]	; (8013910 <extractModbus485Configuration+0x1e8>)
 801376a:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 801376e:	3b01      	subs	r3, #1
 8013770:	2b0f      	cmp	r3, #15
 8013772:	d8ea      	bhi.n	801374a <extractModbus485Configuration+0x22>
 8013774:	a201      	add	r2, pc, #4	; (adr r2, 801377c <extractModbus485Configuration+0x54>)
 8013776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801377a:	bf00      	nop
 801377c:	08013743 	.word	0x08013743
 8013780:	080137bd 	.word	0x080137bd
 8013784:	080137c7 	.word	0x080137c7
 8013788:	080137d1 	.word	0x080137d1
 801378c:	080137db 	.word	0x080137db
 8013790:	080137e5 	.word	0x080137e5
 8013794:	080137ef 	.word	0x080137ef
 8013798:	080137f9 	.word	0x080137f9
 801379c:	08013803 	.word	0x08013803
 80137a0:	080138a9 	.word	0x080138a9
 80137a4:	080138b3 	.word	0x080138b3
 80137a8:	080138bd 	.word	0x080138bd
 80137ac:	080138c7 	.word	0x080138c7
 80137b0:	080138d1 	.word	0x080138d1
 80137b4:	080138db 	.word	0x080138db
 80137b8:	080138e5 	.word	0x080138e5
				strcpy(gau8ConfigModbus485SlaveID,configptr);
 80137bc:	4621      	mov	r1, r4
 80137be:	4856      	ldr	r0, [pc, #344]	; (8013918 <extractModbus485Configuration+0x1f0>)
 80137c0:	f001 ff18 	bl	80155f4 <strcpy>
				break;
 80137c4:	e7c1      	b.n	801374a <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbus485Termination,configptr);
 80137c6:	4621      	mov	r1, r4
 80137c8:	4854      	ldr	r0, [pc, #336]	; (801391c <extractModbus485Configuration+0x1f4>)
 80137ca:	f001 ff13 	bl	80155f4 <strcpy>
				break;
 80137ce:	e7bc      	b.n	801374a <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbus485DataPoints,configptr);
 80137d0:	4621      	mov	r1, r4
 80137d2:	4853      	ldr	r0, [pc, #332]	; (8013920 <extractModbus485Configuration+0x1f8>)
 80137d4:	f001 ff0e 	bl	80155f4 <strcpy>
				break;
 80137d8:	e7b7      	b.n	801374a <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbus485UARTBR,configptr);
 80137da:	4621      	mov	r1, r4
 80137dc:	4851      	ldr	r0, [pc, #324]	; (8013924 <extractModbus485Configuration+0x1fc>)
 80137de:	f001 ff09 	bl	80155f4 <strcpy>
				break;
 80137e2:	e7b2      	b.n	801374a <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbus485UARTStartBit,configptr);
 80137e4:	4621      	mov	r1, r4
 80137e6:	4850      	ldr	r0, [pc, #320]	; (8013928 <extractModbus485Configuration+0x200>)
 80137e8:	f001 ff04 	bl	80155f4 <strcpy>
				break;
 80137ec:	e7ad      	b.n	801374a <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbus485UARTStopBit,configptr);
 80137ee:	4621      	mov	r1, r4
 80137f0:	484e      	ldr	r0, [pc, #312]	; (801392c <extractModbus485Configuration+0x204>)
 80137f2:	f001 feff 	bl	80155f4 <strcpy>
				break;
 80137f6:	e7a8      	b.n	801374a <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbus485UARTParity,configptr);
 80137f8:	4621      	mov	r1, r4
 80137fa:	484d      	ldr	r0, [pc, #308]	; (8013930 <extractModbus485Configuration+0x208>)
 80137fc:	f001 fefa 	bl	80155f4 <strcpy>
				break;
 8013800:	e7a3      	b.n	801374a <extractModbus485Configuration+0x22>
				if(atoi(gau8ConfigModbus485DataPoints) <= CONFIG_MB485_MAXPARAMS)
 8013802:	4847      	ldr	r0, [pc, #284]	; (8013920 <extractModbus485Configuration+0x1f8>)
 8013804:	f001 fbd4 	bl	8014fb0 <atoi>
 8013808:	284b      	cmp	r0, #75	; 0x4b
 801380a:	dc9e      	bgt.n	801374a <extractModbus485Configuration+0x22>
					for(u32Loopcounter = 0; u32Loopcounter < atoi(gau8ConfigModbus485DataPoints) ;u32Loopcounter++)
 801380c:	2600      	movs	r6, #0
 801380e:	4844      	ldr	r0, [pc, #272]	; (8013920 <extractModbus485Configuration+0x1f8>)
 8013810:	f001 fbce 	bl	8014fb0 <atoi>
 8013814:	42b0      	cmp	r0, r6
 8013816:	d912      	bls.n	801383e <extractModbus485Configuration+0x116>
						gau32ConfigModbus485Address[u32Loopcounter] = atoi(configptr);
 8013818:	4620      	mov	r0, r4
 801381a:	f001 fbc9 	bl	8014fb0 <atoi>
 801381e:	4d3b      	ldr	r5, [pc, #236]	; (801390c <extractModbus485Configuration+0x1e4>)
 8013820:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 8013824:	64a8      	str	r0, [r5, #72]	; 0x48
						gau32ConfigModbusTCPAddress[u32Loopcounter] = atoi(configptr);
 8013826:	4620      	mov	r0, r4
 8013828:	f001 fbc2 	bl	8014fb0 <atoi>
 801382c:	f8c5 03d0 	str.w	r0, [r5, #976]	; 0x3d0
						configptr = strtok(NULL, ",");
 8013830:	4935      	ldr	r1, [pc, #212]	; (8013908 <extractModbus485Configuration+0x1e0>)
 8013832:	2000      	movs	r0, #0
 8013834:	f002 fd56 	bl	80162e4 <strtok>
 8013838:	4604      	mov	r4, r0
					for(u32Loopcounter = 0; u32Loopcounter < atoi(gau8ConfigModbus485DataPoints) ;u32Loopcounter++)
 801383a:	3601      	adds	r6, #1
 801383c:	e7e7      	b.n	801380e <extractModbus485Configuration+0xe6>
					for(u32Loopcounter = 0; u32Loopcounter < atoi(gau8ConfigModbus485DataPoints) ;u32Loopcounter++)
 801383e:	2600      	movs	r6, #0
 8013840:	e012      	b.n	8013868 <extractModbus485Configuration+0x140>
						gau32ConfigModbus485DFunctionCode[u32Loopcounter] = atoi(configptr);
 8013842:	4620      	mov	r0, r4
 8013844:	f001 fbb4 	bl	8014fb0 <atoi>
 8013848:	4d30      	ldr	r5, [pc, #192]	; (801390c <extractModbus485Configuration+0x1e4>)
 801384a:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 801384e:	f8c5 0174 	str.w	r0, [r5, #372]	; 0x174
						gau32ConfigModbusTCPDFunctionCode[u32Loopcounter] = atoi(configptr);
 8013852:	4620      	mov	r0, r4
 8013854:	f001 fbac 	bl	8014fb0 <atoi>
 8013858:	f8c5 04fc 	str.w	r0, [r5, #1276]	; 0x4fc
						configptr = strtok(NULL, ",");
 801385c:	492a      	ldr	r1, [pc, #168]	; (8013908 <extractModbus485Configuration+0x1e0>)
 801385e:	2000      	movs	r0, #0
 8013860:	f002 fd40 	bl	80162e4 <strtok>
 8013864:	4604      	mov	r4, r0
					for(u32Loopcounter = 0; u32Loopcounter < atoi(gau8ConfigModbus485DataPoints) ;u32Loopcounter++)
 8013866:	3601      	adds	r6, #1
 8013868:	482d      	ldr	r0, [pc, #180]	; (8013920 <extractModbus485Configuration+0x1f8>)
 801386a:	f001 fba1 	bl	8014fb0 <atoi>
 801386e:	42b0      	cmp	r0, r6
 8013870:	d8e7      	bhi.n	8013842 <extractModbus485Configuration+0x11a>
					for(u32Loopcounter = 0; u32Loopcounter < atoi(gau8ConfigModbus485DataPoints) ;u32Loopcounter++)
 8013872:	2600      	movs	r6, #0
 8013874:	e012      	b.n	801389c <extractModbus485Configuration+0x174>
						gau32ConfigModbus485NoPoints[u32Loopcounter] = atoi(configptr);
 8013876:	4620      	mov	r0, r4
 8013878:	f001 fb9a 	bl	8014fb0 <atoi>
 801387c:	4d23      	ldr	r5, [pc, #140]	; (801390c <extractModbus485Configuration+0x1e4>)
 801387e:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 8013882:	f8c5 02a0 	str.w	r0, [r5, #672]	; 0x2a0
						gau32ConfigModbusTCPNoPoints[u32Loopcounter] = atoi(configptr);
 8013886:	4620      	mov	r0, r4
 8013888:	f001 fb92 	bl	8014fb0 <atoi>
 801388c:	f8c5 0628 	str.w	r0, [r5, #1576]	; 0x628
						configptr = strtok(NULL, ",");
 8013890:	491d      	ldr	r1, [pc, #116]	; (8013908 <extractModbus485Configuration+0x1e0>)
 8013892:	2000      	movs	r0, #0
 8013894:	f002 fd26 	bl	80162e4 <strtok>
 8013898:	4604      	mov	r4, r0
					for(u32Loopcounter = 0; u32Loopcounter < atoi(gau8ConfigModbus485DataPoints) ;u32Loopcounter++)
 801389a:	3601      	adds	r6, #1
 801389c:	4820      	ldr	r0, [pc, #128]	; (8013920 <extractModbus485Configuration+0x1f8>)
 801389e:	f001 fb87 	bl	8014fb0 <atoi>
 80138a2:	42b0      	cmp	r0, r6
 80138a4:	d8e7      	bhi.n	8013876 <extractModbus485Configuration+0x14e>
 80138a6:	e750      	b.n	801374a <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbus485PollingTime,configptr);
 80138a8:	4621      	mov	r1, r4
 80138aa:	4822      	ldr	r0, [pc, #136]	; (8013934 <extractModbus485Configuration+0x20c>)
 80138ac:	f001 fea2 	bl	80155f4 <strcpy>
				break;
 80138b0:	e74b      	b.n	801374a <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbus485ResponseTime,configptr);
 80138b2:	4621      	mov	r1, r4
 80138b4:	4820      	ldr	r0, [pc, #128]	; (8013938 <extractModbus485Configuration+0x210>)
 80138b6:	f001 fe9d 	bl	80155f4 <strcpy>
				break;
 80138ba:	e746      	b.n	801374a <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbusTCPIPDEVICE,configptr);
 80138bc:	4621      	mov	r1, r4
 80138be:	481f      	ldr	r0, [pc, #124]	; (801393c <extractModbus485Configuration+0x214>)
 80138c0:	f001 fe98 	bl	80155f4 <strcpy>
				break;
 80138c4:	e741      	b.n	801374a <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbusTCPIPSUBNET,configptr);
 80138c6:	4621      	mov	r1, r4
 80138c8:	481d      	ldr	r0, [pc, #116]	; (8013940 <extractModbus485Configuration+0x218>)
 80138ca:	f001 fe93 	bl	80155f4 <strcpy>
				break;
 80138ce:	e73c      	b.n	801374a <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbusTCPIPSERVER,configptr);
 80138d0:	4621      	mov	r1, r4
 80138d2:	481c      	ldr	r0, [pc, #112]	; (8013944 <extractModbus485Configuration+0x21c>)
 80138d4:	f001 fe8e 	bl	80155f4 <strcpy>
				break;
 80138d8:	e737      	b.n	801374a <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbusTCPIPGATEWAY,configptr);
 80138da:	4621      	mov	r1, r4
 80138dc:	481a      	ldr	r0, [pc, #104]	; (8013948 <extractModbus485Configuration+0x220>)
 80138de:	f001 fe89 	bl	80155f4 <strcpy>
				break;
 80138e2:	e732      	b.n	801374a <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbusTCPPORT,configptr);
 80138e4:	4621      	mov	r1, r4
 80138e6:	4819      	ldr	r0, [pc, #100]	; (801394c <extractModbus485Configuration+0x224>)
 80138e8:	f001 fe84 	bl	80155f4 <strcpy>
				break;
 80138ec:	e72d      	b.n	801374a <extractModbus485Configuration+0x22>
			configptr = strtok(NULL, ",");
 80138ee:	4906      	ldr	r1, [pc, #24]	; (8013908 <extractModbus485Configuration+0x1e0>)
 80138f0:	2000      	movs	r0, #0
 80138f2:	f002 fcf7 	bl	80162e4 <strtok>
 80138f6:	4604      	mov	r4, r0
 80138f8:	e72d      	b.n	8013756 <extractModbus485Configuration+0x2e>
	gu32ExtractParamCounter = 0;
 80138fa:	4b05      	ldr	r3, [pc, #20]	; (8013910 <extractModbus485Configuration+0x1e8>)
 80138fc:	2200      	movs	r2, #0
 80138fe:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	verifyModbus485ConfigData();
 8013902:	f7ff fd31 	bl	8013368 <verifyModbus485ConfigData>
}
 8013906:	bd70      	pop	{r4, r5, r6, pc}
 8013908:	0801e3fc 	.word	0x0801e3fc
 801390c:	20002848 	.word	0x20002848
 8013910:	20005d18 	.word	0x20005d18
 8013914:	20005e80 	.word	0x20005e80
 8013918:	20005e88 	.word	0x20005e88
 801391c:	20005e90 	.word	0x20005e90
 8013920:	20005e94 	.word	0x20005e94
 8013924:	20002884 	.word	0x20002884
 8013928:	20005e98 	.word	0x20005e98
 801392c:	20005e9c 	.word	0x20005e9c
 8013930:	20005ef8 	.word	0x20005ef8
 8013934:	20005ea0 	.word	0x20005ea0
 8013938:	20005ea8 	.word	0x20005ea8
 801393c:	20005efc 	.word	0x20005efc
 8013940:	20005f0c 	.word	0x20005f0c
 8013944:	20005f1c 	.word	0x20005f1c
 8013948:	20005f2c 	.word	0x20005f2c
 801394c:	20005eb4 	.word	0x20005eb4

08013950 <getLastKnownConfiguration>:
*
*******************************************************************************/
/*
 * TODO - If we parse network configuration before modbus then modbus configuration gets corrupted */
void getLastKnownConfiguration(void)
{
 8013950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013954:	af00      	add	r7, sp, #0
	/* Read Sector 22 till we get FF */
	uint32_t flashAddress = ADDR_FLASH_SECTOR_11;
	uint32_t loopCounter = 0;

	if(strlen(tempconfig) == 0)
 8013956:	4bc9      	ldr	r3, [pc, #804]	; (8013c7c <getLastKnownConfiguration+0x32c>)
 8013958:	f8d3 37d4 	ldr.w	r3, [r3, #2004]	; 0x7d4
 801395c:	781b      	ldrb	r3, [r3, #0]
 801395e:	2b00      	cmp	r3, #0
 8013960:	f000 8188 	beq.w	8013c74 <getLastKnownConfiguration+0x324>
				gau8LastKnownConfiguration[loopCounter] = *(uint8_t *)flashAddress;
				flashAddress++;
			}
		}
	}
}
 8013964:	46bd      	mov	sp, r7
 8013966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						mb485mlen = mb485eof - mb485sof;
 801396a:	1b86      	subs	r6, r0, r6
 801396c:	4bc4      	ldr	r3, [pc, #784]	; (8013c80 <getLastKnownConfiguration+0x330>)
 801396e:	f8c3 61d4 	str.w	r6, [r3, #468]	; 0x1d4
						mb485config = (char *)malloc((sizeof(char) *mb485mlen));
 8013972:	4630      	mov	r0, r6
 8013974:	f001 fb5e 	bl	8015034 <malloc>
 8013978:	4bc0      	ldr	r3, [pc, #768]	; (8013c7c <getLastKnownConfiguration+0x32c>)
 801397a:	f8c3 07e0 	str.w	r0, [r3, #2016]	; 0x7e0
						if(mb485config!= NULL)
 801397e:	b180      	cbz	r0, 80139a2 <getLastKnownConfiguration+0x52>
							memset(mb485config, 0, mb485mlen);
 8013980:	4632      	mov	r2, r6
 8013982:	2100      	movs	r1, #0
 8013984:	f001 fdc4 	bl	8015510 <memset>
							memcpy(mb485config,mb485sof,mb485mlen);
 8013988:	4bbc      	ldr	r3, [pc, #752]	; (8013c7c <getLastKnownConfiguration+0x32c>)
 801398a:	4abd      	ldr	r2, [pc, #756]	; (8013c80 <getLastKnownConfiguration+0x330>)
 801398c:	f8d2 21d4 	ldr.w	r2, [r2, #468]	; 0x1d4
 8013990:	f8d3 1764 	ldr.w	r1, [r3, #1892]	; 0x764
 8013994:	f8d3 07e0 	ldr.w	r0, [r3, #2016]	; 0x7e0
 8013998:	f001 fdac 	bl	80154f4 <memcpy>
							extractModbus485Configuration();
 801399c:	f7ff fec4 	bl	8013728 <extractModbus485Configuration>
 80139a0:	e0e0      	b.n	8013b64 <getLastKnownConfiguration+0x214>
							gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485CONFIGNOTFOUND);
 80139a2:	4ab7      	ldr	r2, [pc, #732]	; (8013c80 <getLastKnownConfiguration+0x330>)
 80139a4:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 80139a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80139ac:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 80139b0:	e0d8      	b.n	8013b64 <getLastKnownConfiguration+0x214>
						nwmlen = nweof - nwsof;
 80139b2:	1b0c      	subs	r4, r1, r4
 80139b4:	4bb2      	ldr	r3, [pc, #712]	; (8013c80 <getLastKnownConfiguration+0x330>)
 80139b6:	f8c3 41d0 	str.w	r4, [r3, #464]	; 0x1d0
						nwconfig = (char *)malloc((sizeof(char) *nwmlen));
 80139ba:	4620      	mov	r0, r4
 80139bc:	f001 fb3a 	bl	8015034 <malloc>
 80139c0:	4bae      	ldr	r3, [pc, #696]	; (8013c7c <getLastKnownConfiguration+0x32c>)
 80139c2:	f8c3 0fb8 	str.w	r0, [r3, #4024]	; 0xfb8
						if(nwconfig!= NULL)
 80139c6:	b300      	cbz	r0, 8013a0a <getLastKnownConfiguration+0xba>
						{
 80139c8:	466d      	mov	r5, sp
							char u8temp_array[nwmlen];
 80139ca:	1de3      	adds	r3, r4, #7
 80139cc:	f023 0307 	bic.w	r3, r3, #7
 80139d0:	ebad 0d03 	sub.w	sp, sp, r3
							memset(nwconfig, 0, nwmlen);
 80139d4:	4622      	mov	r2, r4
 80139d6:	2100      	movs	r1, #0
 80139d8:	f001 fd9a 	bl	8015510 <memset>
							memset(u8temp_array, 0, sizeof(u8temp_array));
 80139dc:	4622      	mov	r2, r4
 80139de:	2100      	movs	r1, #0
 80139e0:	4668      	mov	r0, sp
 80139e2:	f001 fd95 	bl	8015510 <memset>
							memcpy(u8temp_array,nwsof,nwmlen);
 80139e6:	4ca5      	ldr	r4, [pc, #660]	; (8013c7c <getLastKnownConfiguration+0x32c>)
 80139e8:	4ba5      	ldr	r3, [pc, #660]	; (8013c80 <getLastKnownConfiguration+0x330>)
 80139ea:	f8d3 21d0 	ldr.w	r2, [r3, #464]	; 0x1d0
 80139ee:	f8d4 175c 	ldr.w	r1, [r4, #1884]	; 0x75c
 80139f2:	4668      	mov	r0, sp
 80139f4:	f001 fd7e 	bl	80154f4 <memcpy>
							strcpy(nwconfig,u8temp_array);
 80139f8:	4669      	mov	r1, sp
 80139fa:	f8d4 0fb8 	ldr.w	r0, [r4, #4024]	; 0xfb8
 80139fe:	f001 fdf9 	bl	80155f4 <strcpy>
							extractNewtorkConfiguration();
 8013a02:	f7ff fe17 	bl	8013634 <extractNewtorkConfiguration>
 8013a06:	46ad      	mov	sp, r5
 8013a08:	e0bf      	b.n	8013b8a <getLastKnownConfiguration+0x23a>
							gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWCONFIGNOTFOUND);
 8013a0a:	4a9d      	ldr	r2, [pc, #628]	; (8013c80 <getLastKnownConfiguration+0x330>)
 8013a0c:	6853      	ldr	r3, [r2, #4]
 8013a0e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013a12:	6053      	str	r3, [r2, #4]
 8013a14:	e0b9      	b.n	8013b8a <getLastKnownConfiguration+0x23a>
							gu32MBRTUClientAddress[gu32LoopCounter] = gau32ConfigModbus485Address[gu32LoopCounter];
 8013a16:	4a99      	ldr	r2, [pc, #612]	; (8013c7c <getLastKnownConfiguration+0x32c>)
 8013a18:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013a1c:	6c90      	ldr	r0, [r2, #72]	; 0x48
 8013a1e:	4999      	ldr	r1, [pc, #612]	; (8013c84 <getLastKnownConfiguration+0x334>)
 8013a20:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
							gu32MBRTUClientFuncCode[gu32LoopCounter] = gau32ConfigModbus485DFunctionCode[gu32LoopCounter];
 8013a24:	f8d2 0174 	ldr.w	r0, [r2, #372]	; 0x174
 8013a28:	4997      	ldr	r1, [pc, #604]	; (8013c88 <getLastKnownConfiguration+0x338>)
 8013a2a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
							gu32MBRTUClientNoofPoints[gu32LoopCounter] = gau32ConfigModbus485NoPoints[gu32LoopCounter];
 8013a2e:	f8d2 02a0 	ldr.w	r0, [r2, #672]	; 0x2a0
 8013a32:	4996      	ldr	r1, [pc, #600]	; (8013c8c <getLastKnownConfiguration+0x33c>)
 8013a34:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
							gu32MBTCPClientAddress[gu32LoopCounter] = gau32ConfigModbusTCPAddress[gu32LoopCounter];
 8013a38:	f8d2 03d0 	ldr.w	r0, [r2, #976]	; 0x3d0
 8013a3c:	4994      	ldr	r1, [pc, #592]	; (8013c90 <getLastKnownConfiguration+0x340>)
 8013a3e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
							gu32MBTCPClientFuncCode[gu32LoopCounter] = gau32ConfigModbusTCPDFunctionCode[gu32LoopCounter];
 8013a42:	f8d2 04fc 	ldr.w	r0, [r2, #1276]	; 0x4fc
 8013a46:	4993      	ldr	r1, [pc, #588]	; (8013c94 <getLastKnownConfiguration+0x344>)
 8013a48:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
							gu32MBTCPClientNoofPoints[gu32LoopCounter] = gau32ConfigModbusTCPNoPoints[gu32LoopCounter];
 8013a4c:	f8d2 1628 	ldr.w	r1, [r2, #1576]	; 0x628
 8013a50:	4a91      	ldr	r2, [pc, #580]	; (8013c98 <getLastKnownConfiguration+0x348>)
 8013a52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						for(gu32LoopCounter = 0; gu32LoopCounter <gu32Modbus485RegisterFetch; gu32LoopCounter++)
 8013a56:	3301      	adds	r3, #1
 8013a58:	4a89      	ldr	r2, [pc, #548]	; (8013c80 <getLastKnownConfiguration+0x330>)
 8013a5a:	f8c2 3224 	str.w	r3, [r2, #548]	; 0x224
 8013a5e:	4b88      	ldr	r3, [pc, #544]	; (8013c80 <getLastKnownConfiguration+0x330>)
 8013a60:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8013a64:	4a85      	ldr	r2, [pc, #532]	; (8013c7c <getLastKnownConfiguration+0x32c>)
 8013a66:	f8d2 2fc4 	ldr.w	r2, [r2, #4036]	; 0xfc4
 8013a6a:	4293      	cmp	r3, r2
 8013a6c:	d3d3      	bcc.n	8013a16 <getLastKnownConfiguration+0xc6>
						inet_aton(gau8ConfigModbusTCPIPDEVICE,IP_ADDRESS);
 8013a6e:	4c84      	ldr	r4, [pc, #528]	; (8013c80 <getLastKnownConfiguration+0x330>)
 8013a70:	498a      	ldr	r1, [pc, #552]	; (8013c9c <getLastKnownConfiguration+0x34c>)
 8013a72:	f504 70f2 	add.w	r0, r4, #484	; 0x1e4
 8013a76:	f7fb f8d7 	bl	800ec28 <ip4addr_aton>
						inet_aton(gau8ConfigModbusTCPIPSUBNET,NETMASK_ADDRESS);
 8013a7a:	4989      	ldr	r1, [pc, #548]	; (8013ca0 <getLastKnownConfiguration+0x350>)
 8013a7c:	f504 70fa 	add.w	r0, r4, #500	; 0x1f4
 8013a80:	f7fb f8d2 	bl	800ec28 <ip4addr_aton>
						inet_aton(gau8ConfigModbusTCPIPGATEWAY,GATEWAY_ADDRESS);
 8013a84:	4987      	ldr	r1, [pc, #540]	; (8013ca4 <getLastKnownConfiguration+0x354>)
 8013a86:	f504 7005 	add.w	r0, r4, #532	; 0x214
 8013a8a:	f7fb f8cd 	bl	800ec28 <ip4addr_aton>
						inet_aton(gau8ConfigModbusTCPIPSERVER,IP_ADDRESS_DESTI);
 8013a8e:	4d7b      	ldr	r5, [pc, #492]	; (8013c7c <getLastKnownConfiguration+0x32c>)
 8013a90:	f605 71cc 	addw	r1, r5, #4044	; 0xfcc
 8013a94:	f504 7001 	add.w	r0, r4, #516	; 0x204
 8013a98:	f7fb f8c6 	bl	800ec28 <ip4addr_aton>
						gu32ModbusTCPPort = atoi(gau8ConfigModbusTCPPORT);
 8013a9c:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
 8013aa0:	f001 fa86 	bl	8014fb0 <atoi>
 8013aa4:	f8c5 0fd0 	str.w	r0, [r5, #4048]	; 0xfd0
					strcpy(gau8LastKnownConfiguration,gau8ConfigurationCopy);
 8013aa8:	497f      	ldr	r1, [pc, #508]	; (8013ca8 <getLastKnownConfiguration+0x358>)
 8013aaa:	4880      	ldr	r0, [pc, #512]	; (8013cac <getLastKnownConfiguration+0x35c>)
 8013aac:	f001 fda2 	bl	80155f4 <strcpy>
 8013ab0:	e758      	b.n	8013964 <getLastKnownConfiguration+0x14>
				gau8LastKnownConfiguration[loopCounter] = *(uint8_t *)flashAddress;
 8013ab2:	487e      	ldr	r0, [pc, #504]	; (8013cac <getLastKnownConfiguration+0x35c>)
 8013ab4:	54c1      	strb	r1, [r0, r3]
				flashAddress++;
 8013ab6:	3201      	adds	r2, #1
		for(loopCounter = 0 ; loopCounter < 2000; loopCounter++)
 8013ab8:	3301      	adds	r3, #1
 8013aba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8013abe:	f4bf af51 	bcs.w	8013964 <getLastKnownConfiguration+0x14>
			if(*(uint8_t *)flashAddress == 0xFF)
 8013ac2:	7811      	ldrb	r1, [r2, #0]
 8013ac4:	29ff      	cmp	r1, #255	; 0xff
 8013ac6:	d1f4      	bne.n	8013ab2 <getLastKnownConfiguration+0x162>
				if(strlen(gau8LastKnownConfiguration) != 0 )
 8013ac8:	4b78      	ldr	r3, [pc, #480]	; (8013cac <getLastKnownConfiguration+0x35c>)
 8013aca:	781b      	ldrb	r3, [r3, #0]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	f43f af49 	beq.w	8013964 <getLastKnownConfiguration+0x14>
					memset(nwsof, 0, 5);
 8013ad2:	4c6a      	ldr	r4, [pc, #424]	; (8013c7c <getLastKnownConfiguration+0x32c>)
 8013ad4:	f8d4 275c 	ldr.w	r2, [r4, #1884]	; 0x75c
 8013ad8:	2300      	movs	r3, #0
 8013ada:	6013      	str	r3, [r2, #0]
 8013adc:	7113      	strb	r3, [r2, #4]
					memset(nweof, 0, 5);
 8013ade:	f8d4 2760 	ldr.w	r2, [r4, #1888]	; 0x760
 8013ae2:	6013      	str	r3, [r2, #0]
 8013ae4:	7113      	strb	r3, [r2, #4]
					memset(mb485sof, 0, 5);
 8013ae6:	f8d4 2764 	ldr.w	r2, [r4, #1892]	; 0x764
 8013aea:	6013      	str	r3, [r2, #0]
 8013aec:	7113      	strb	r3, [r2, #4]
					memset(mb485eof, 0,5);
 8013aee:	f8d4 2768 	ldr.w	r2, [r4, #1896]	; 0x768
 8013af2:	6013      	str	r3, [r2, #0]
 8013af4:	7113      	strb	r3, [r2, #4]
					memset(mbTCPsof, 0, 5);
 8013af6:	f8d4 27d8 	ldr.w	r2, [r4, #2008]	; 0x7d8
 8013afa:	6013      	str	r3, [r2, #0]
 8013afc:	7113      	strb	r3, [r2, #4]
					memset(mbTCPeof, 0, 5);
 8013afe:	f8d4 27dc 	ldr.w	r2, [r4, #2012]	; 0x7dc
 8013b02:	6013      	str	r3, [r2, #0]
 8013b04:	7113      	strb	r3, [r2, #4]
					strcpy(gau8ConfigurationCopy, gau8LastKnownConfiguration);
 8013b06:	4d69      	ldr	r5, [pc, #420]	; (8013cac <getLastKnownConfiguration+0x35c>)
 8013b08:	4629      	mov	r1, r5
 8013b0a:	f504 60fd 	add.w	r0, r4, #2024	; 0x7e8
 8013b0e:	f001 fd71 	bl	80155f4 <strcpy>
					nwsof = strstr(gau8LastKnownConfiguration,"NS,");
 8013b12:	4967      	ldr	r1, [pc, #412]	; (8013cb0 <getLastKnownConfiguration+0x360>)
 8013b14:	4628      	mov	r0, r5
 8013b16:	f001 fd9a 	bl	801564e <strstr>
 8013b1a:	f8c4 075c 	str.w	r0, [r4, #1884]	; 0x75c
					nweof = strstr(gau8LastKnownConfiguration,",NE");
 8013b1e:	4965      	ldr	r1, [pc, #404]	; (8013cb4 <getLastKnownConfiguration+0x364>)
 8013b20:	4628      	mov	r0, r5
 8013b22:	f001 fd94 	bl	801564e <strstr>
 8013b26:	f8c4 0760 	str.w	r0, [r4, #1888]	; 0x760
					mb485sof =  strstr(gau8LastKnownConfiguration,"MS,");
 8013b2a:	4963      	ldr	r1, [pc, #396]	; (8013cb8 <getLastKnownConfiguration+0x368>)
 8013b2c:	4628      	mov	r0, r5
 8013b2e:	f001 fd8e 	bl	801564e <strstr>
 8013b32:	4606      	mov	r6, r0
 8013b34:	f8c4 0764 	str.w	r0, [r4, #1892]	; 0x764
					mb485eof =  strstr(gau8LastKnownConfiguration,",ME");
 8013b38:	4960      	ldr	r1, [pc, #384]	; (8013cbc <getLastKnownConfiguration+0x36c>)
 8013b3a:	4628      	mov	r0, r5
 8013b3c:	f001 fd87 	bl	801564e <strstr>
 8013b40:	f8c4 0768 	str.w	r0, [r4, #1896]	; 0x768
					if((mb485sof == NULL )|(mb485eof == NULL))
 8013b44:	fab0 f380 	clz	r3, r0
 8013b48:	095b      	lsrs	r3, r3, #5
 8013b4a:	2e00      	cmp	r6, #0
 8013b4c:	bf08      	it	eq
 8013b4e:	2301      	moveq	r3, #1
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	f43f af0a 	beq.w	801396a <getLastKnownConfiguration+0x1a>
						gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485CONFIGNOTFOUND);
 8013b56:	4a4a      	ldr	r2, [pc, #296]	; (8013c80 <getLastKnownConfiguration+0x330>)
 8013b58:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 8013b5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013b60:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
					if((nwsof == NULL )|(nweof == NULL))
 8013b64:	4b45      	ldr	r3, [pc, #276]	; (8013c7c <getLastKnownConfiguration+0x32c>)
 8013b66:	f8d3 475c 	ldr.w	r4, [r3, #1884]	; 0x75c
 8013b6a:	f8d3 1760 	ldr.w	r1, [r3, #1888]	; 0x760
 8013b6e:	fab1 f381 	clz	r3, r1
 8013b72:	095b      	lsrs	r3, r3, #5
 8013b74:	2c00      	cmp	r4, #0
 8013b76:	bf08      	it	eq
 8013b78:	2301      	moveq	r3, #1
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	f43f af19 	beq.w	80139b2 <getLastKnownConfiguration+0x62>
						gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWCONFIGNOTFOUND);
 8013b80:	4a3f      	ldr	r2, [pc, #252]	; (8013c80 <getLastKnownConfiguration+0x330>)
 8013b82:	6853      	ldr	r3, [r2, #4]
 8013b84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013b88:	6053      	str	r3, [r2, #4]
					if((gu32ConfigNetworkErrorDatabase == 0 ) && (nwconfig != NULL))
 8013b8a:	4b3d      	ldr	r3, [pc, #244]	; (8013c80 <getLastKnownConfiguration+0x330>)
 8013b8c:	685b      	ldr	r3, [r3, #4]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d141      	bne.n	8013c16 <getLastKnownConfiguration+0x2c6>
 8013b92:	4b3a      	ldr	r3, [pc, #232]	; (8013c7c <getLastKnownConfiguration+0x32c>)
 8013b94:	f8d3 3fb8 	ldr.w	r3, [r3, #4024]	; 0xfb8
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d03c      	beq.n	8013c16 <getLastKnownConfiguration+0x2c6>
						memset(gau8GSM4G_apn,0x00,sizeof(char) * 100);
 8013b9c:	4d48      	ldr	r5, [pc, #288]	; (8013cc0 <getLastKnownConfiguration+0x370>)
 8013b9e:	2664      	movs	r6, #100	; 0x64
 8013ba0:	4632      	mov	r2, r6
 8013ba2:	2100      	movs	r1, #0
 8013ba4:	4628      	mov	r0, r5
 8013ba6:	f001 fcb3 	bl	8015510 <memset>
						memcpy(gau8GSM4G_apn,gau8ConfigNewtorkAPN, strlen(gau8ConfigNewtorkAPN));
 8013baa:	4c34      	ldr	r4, [pc, #208]	; (8013c7c <getLastKnownConfiguration+0x32c>)
 8013bac:	4620      	mov	r0, r4
 8013bae:	f7f0 fb1f 	bl	80041f0 <strlen>
 8013bb2:	4602      	mov	r2, r0
 8013bb4:	4621      	mov	r1, r4
 8013bb6:	4628      	mov	r0, r5
 8013bb8:	f001 fc9c 	bl	80154f4 <memcpy>
						memset(gau8GSM_url,0x00,sizeof(char) * 100);
 8013bbc:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8013cc8 <getLastKnownConfiguration+0x378>
 8013bc0:	4632      	mov	r2, r6
 8013bc2:	2100      	movs	r1, #0
 8013bc4:	4640      	mov	r0, r8
 8013bc6:	f001 fca3 	bl	8015510 <memset>
						memcpy( gau8GSM_url, gau8ConfigNewtorkServerURL, strlen(gau8ConfigNewtorkServerURL));
 8013bca:	4d2d      	ldr	r5, [pc, #180]	; (8013c80 <getLastKnownConfiguration+0x330>)
 8013bcc:	f105 0908 	add.w	r9, r5, #8
 8013bd0:	4648      	mov	r0, r9
 8013bd2:	f7f0 fb0d 	bl	80041f0 <strlen>
 8013bd6:	4602      	mov	r2, r0
 8013bd8:	4649      	mov	r1, r9
 8013bda:	4640      	mov	r0, r8
 8013bdc:	f001 fc8a 	bl	80154f4 <memcpy>
						memset(gau8RemoteConfigurationURL,0x00,sizeof(char) * 100);
 8013be0:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8013ccc <getLastKnownConfiguration+0x37c>
 8013be4:	4632      	mov	r2, r6
 8013be6:	2100      	movs	r1, #0
 8013be8:	4640      	mov	r0, r8
 8013bea:	f001 fc91 	bl	8015510 <memset>
						memcpy( gau8RemoteConfigurationURL, gau8ConfigNewtorkConfigURL, strlen(gau8ConfigNewtorkConfigURL));
 8013bee:	f105 06a0 	add.w	r6, r5, #160	; 0xa0
 8013bf2:	4630      	mov	r0, r6
 8013bf4:	f7f0 fafc 	bl	80041f0 <strlen>
 8013bf8:	4602      	mov	r2, r0
 8013bfa:	4631      	mov	r1, r6
 8013bfc:	4640      	mov	r0, r8
 8013bfe:	f001 fc79 	bl	80154f4 <memcpy>
						gu32UploadTimeSupply = atoi(gau8ConfigNewtorkUpFreqSupply);
 8013c02:	f505 709c 	add.w	r0, r5, #312	; 0x138
 8013c06:	f001 f9d3 	bl	8014fb0 <atoi>
 8013c0a:	6360      	str	r0, [r4, #52]	; 0x34
						gu32UploadTimeBatt = atoi(gau8ConfigNewtorkUpFreqBatt);
 8013c0c:	f505 70a2 	add.w	r0, r5, #324	; 0x144
 8013c10:	f001 f9ce 	bl	8014fb0 <atoi>
 8013c14:	63a0      	str	r0, [r4, #56]	; 0x38
					if((gu32ConfigModbus485ErrorDatabase == 0 ) && (mb485config != NULL))
 8013c16:	4b1a      	ldr	r3, [pc, #104]	; (8013c80 <getLastKnownConfiguration+0x330>)
 8013c18:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	f47f af43 	bne.w	8013aa8 <getLastKnownConfiguration+0x158>
 8013c22:	4b16      	ldr	r3, [pc, #88]	; (8013c7c <getLastKnownConfiguration+0x32c>)
 8013c24:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	f43f af3d 	beq.w	8013aa8 <getLastKnownConfiguration+0x158>
						gu32OperateModbus485 = atoi(gau8ConfigModbus485IsEnabled);
 8013c2e:	4c14      	ldr	r4, [pc, #80]	; (8013c80 <getLastKnownConfiguration+0x330>)
 8013c30:	f504 70b4 	add.w	r0, r4, #360	; 0x168
 8013c34:	f001 f9bc 	bl	8014fb0 <atoi>
 8013c38:	4d10      	ldr	r5, [pc, #64]	; (8013c7c <getLastKnownConfiguration+0x32c>)
 8013c3a:	f8c5 0fbc 	str.w	r0, [r5, #4028]	; 0xfbc
						gu32Modbus485SlaveID = atoi(gau8ConfigModbus485SlaveID);
 8013c3e:	f504 70b8 	add.w	r0, r4, #368	; 0x170
 8013c42:	f001 f9b5 	bl	8014fb0 <atoi>
 8013c46:	f8c5 0fc0 	str.w	r0, [r5, #4032]	; 0xfc0
						gu32Modbus485RegisterFetch = atoi(gau8ConfigModbus485DataPoints);
 8013c4a:	f504 70be 	add.w	r0, r4, #380	; 0x17c
 8013c4e:	f001 f9af 	bl	8014fb0 <atoi>
 8013c52:	f8c5 0fc4 	str.w	r0, [r5, #4036]	; 0xfc4
						gu32Modbus485PollingTime = atoi(gau8ConfigModbus485PollingTime);
 8013c56:	f504 70c4 	add.w	r0, r4, #392	; 0x188
 8013c5a:	f001 f9a9 	bl	8014fb0 <atoi>
 8013c5e:	6468      	str	r0, [r5, #68]	; 0x44
						gu32Modbus485ResponseTime = atoi(gau8ConfigModbus485ResponseTime);
 8013c60:	f504 70c8 	add.w	r0, r4, #400	; 0x190
 8013c64:	f001 f9a4 	bl	8014fb0 <atoi>
 8013c68:	f8c5 0fc8 	str.w	r0, [r5, #4040]	; 0xfc8
						gu32LoopCounter = 0;
 8013c6c:	2300      	movs	r3, #0
 8013c6e:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
						for(gu32LoopCounter = 0; gu32LoopCounter <gu32Modbus485RegisterFetch; gu32LoopCounter++)
 8013c72:	e6f4      	b.n	8013a5e <getLastKnownConfiguration+0x10e>
		for(loopCounter = 0 ; loopCounter < 2000; loopCounter++)
 8013c74:	2300      	movs	r3, #0
	uint32_t flashAddress = ADDR_FLASH_SECTOR_11;
 8013c76:	4a13      	ldr	r2, [pc, #76]	; (8013cc4 <getLastKnownConfiguration+0x374>)
 8013c78:	e71f      	b.n	8013aba <getLastKnownConfiguration+0x16a>
 8013c7a:	bf00      	nop
 8013c7c:	20002848 	.word	0x20002848
 8013c80:	20005d18 	.word	0x20005d18
 8013c84:	20000fb8 	.word	0x20000fb8
 8013c88:	20000e8c 	.word	0x20000e8c
 8013c8c:	200010e4 	.word	0x200010e4
 8013c90:	20001bd8 	.word	0x20001bd8
 8013c94:	20001aac 	.word	0x20001aac
 8013c98:	20001d04 	.word	0x20001d04
 8013c9c:	2000e5d0 	.word	0x2000e5d0
 8013ca0:	2000e5cc 	.word	0x2000e5cc
 8013ca4:	2000e594 	.word	0x2000e594
 8013ca8:	20003030 	.word	0x20003030
 8013cac:	2000fb60 	.word	0x2000fb60
 8013cb0:	0801e660 	.word	0x0801e660
 8013cb4:	0801e664 	.word	0x0801e664
 8013cb8:	0801e668 	.word	0x0801e668
 8013cbc:	0801e66c 	.word	0x0801e66c
 8013cc0:	200005b0 	.word	0x200005b0
 8013cc4:	080e0000 	.word	0x080e0000
 8013cc8:	20000320 	.word	0x20000320
 8013ccc:	2000046c 	.word	0x2000046c

08013cd0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8013cd0:	b500      	push	{lr}
 8013cd2:	b08b      	sub	sp, #44	; 0x2c

  /* USER CODE BEGIN RTC_Init 0 */
	readbackedupRTCCalender();
 8013cd4:	f000 ffe2 	bl	8014c9c <readbackedupRTCCalender>
  /* USER CODE END RTC_Init 0 */

//  RTC_TimeTypeDef sTime = {0};
//  RTC_DateTypeDef sDate = {0};
  RTC_AlarmTypeDef sAlarm = {0};
 8013cd8:	2228      	movs	r2, #40	; 0x28
 8013cda:	2100      	movs	r1, #0
 8013cdc:	4668      	mov	r0, sp
 8013cde:	f001 fc17 	bl	8015510 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8013ce2:	483b      	ldr	r0, [pc, #236]	; (8013dd0 <MX_RTC_Init+0x100>)
 8013ce4:	4b3b      	ldr	r3, [pc, #236]	; (8013dd4 <MX_RTC_Init+0x104>)
 8013ce6:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8013ce8:	2300      	movs	r3, #0
 8013cea:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 31;
 8013cec:	221f      	movs	r2, #31
 8013cee:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 1023;
 8013cf0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8013cf4:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8013cf6:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8013cf8:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8013cfa:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8013cfc:	f7f4 fd3f 	bl	800877e <HAL_RTC_Init>
 8013d00:	2800      	cmp	r0, #0
 8013d02:	d153      	bne.n	8013dac <MX_RTC_Init+0xdc>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  STime1.Hours = sTimeStampget_backup.Hours;
 8013d04:	4b34      	ldr	r3, [pc, #208]	; (8013dd8 <MX_RTC_Init+0x108>)
 8013d06:	781a      	ldrb	r2, [r3, #0]
 8013d08:	4934      	ldr	r1, [pc, #208]	; (8013ddc <MX_RTC_Init+0x10c>)
 8013d0a:	700a      	strb	r2, [r1, #0]
  STime1.Minutes = sTimeStampget_backup.Minutes;
 8013d0c:	785a      	ldrb	r2, [r3, #1]
 8013d0e:	704a      	strb	r2, [r1, #1]
  STime1.Seconds = sTimeStampget_backup.Seconds;
 8013d10:	789b      	ldrb	r3, [r3, #2]
 8013d12:	708b      	strb	r3, [r1, #2]
  STime1.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8013d14:	2300      	movs	r3, #0
 8013d16:	60cb      	str	r3, [r1, #12]
  STime1.StoreOperation = RTC_STOREOPERATION_RESET;
 8013d18:	610b      	str	r3, [r1, #16]
  if (HAL_RTC_SetTime(&hrtc, &STime1, RTC_FORMAT_BCD) != HAL_OK)
 8013d1a:	2201      	movs	r2, #1
 8013d1c:	482c      	ldr	r0, [pc, #176]	; (8013dd0 <MX_RTC_Init+0x100>)
 8013d1e:	f7f4 fd9b 	bl	8008858 <HAL_RTC_SetTime>
 8013d22:	2800      	cmp	r0, #0
 8013d24:	d145      	bne.n	8013db2 <MX_RTC_Init+0xe2>
  {
    Error_Handler();
  }
  SDate1.WeekDay = sTimeStampDateget_backup.WeekDay;
 8013d26:	4b2e      	ldr	r3, [pc, #184]	; (8013de0 <MX_RTC_Init+0x110>)
 8013d28:	781a      	ldrb	r2, [r3, #0]
 8013d2a:	492c      	ldr	r1, [pc, #176]	; (8013ddc <MX_RTC_Init+0x10c>)
 8013d2c:	750a      	strb	r2, [r1, #20]
  SDate1.Month = sTimeStampDateget_backup.Month;
 8013d2e:	785a      	ldrb	r2, [r3, #1]
 8013d30:	754a      	strb	r2, [r1, #21]
  SDate1.Date = sTimeStampDateget_backup.Date;
 8013d32:	789a      	ldrb	r2, [r3, #2]
 8013d34:	758a      	strb	r2, [r1, #22]
  SDate1.Year = sTimeStampDateget_backup.Year;
 8013d36:	78db      	ldrb	r3, [r3, #3]
 8013d38:	75cb      	strb	r3, [r1, #23]

  if (HAL_RTC_SetDate(&hrtc, &SDate1, RTC_FORMAT_BCD) != HAL_OK)
 8013d3a:	2201      	movs	r2, #1
 8013d3c:	3114      	adds	r1, #20
 8013d3e:	4824      	ldr	r0, [pc, #144]	; (8013dd0 <MX_RTC_Init+0x100>)
 8013d40:	f7f4 fe09 	bl	8008956 <HAL_RTC_SetDate>
 8013d44:	2800      	cmp	r0, #0
 8013d46:	d137      	bne.n	8013db8 <MX_RTC_Init+0xe8>
  {
    Error_Handler();
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8013d48:	2300      	movs	r3, #0
 8013d4a:	f88d 3000 	strb.w	r3, [sp]
  sAlarm.AlarmTime.Minutes = 0x0;
 8013d4e:	f88d 3001 	strb.w	r3, [sp, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8013d52:	f88d 3002 	strb.w	r3, [sp, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8013d56:	9301      	str	r3, [sp, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8013d58:	9303      	str	r3, [sp, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8013d5a:	9304      	str	r3, [sp, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8013d5c:	4a21      	ldr	r2, [pc, #132]	; (8013de4 <MX_RTC_Init+0x114>)
 8013d5e:	9205      	str	r2, [sp, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8013d60:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8013d62:	9307      	str	r3, [sp, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8013d64:	2201      	movs	r2, #1
 8013d66:	f88d 2020 	strb.w	r2, [sp, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8013d6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013d6e:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8013d70:	4669      	mov	r1, sp
 8013d72:	4817      	ldr	r0, [pc, #92]	; (8013dd0 <MX_RTC_Init+0x100>)
 8013d74:	f7f4 fe5c 	bl	8008a30 <HAL_RTC_SetAlarm_IT>
 8013d78:	bb08      	cbnz	r0, 8013dbe <MX_RTC_Init+0xee>
  {
    Error_Handler();
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8013d7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013d7e:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8013d80:	2201      	movs	r2, #1
 8013d82:	4669      	mov	r1, sp
 8013d84:	4812      	ldr	r0, [pc, #72]	; (8013dd0 <MX_RTC_Init+0x100>)
 8013d86:	f7f4 fe53 	bl	8008a30 <HAL_RTC_SetAlarm_IT>
 8013d8a:	b9d8      	cbnz	r0, 8013dc4 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
  }
  /** Enable the WakeUp
  */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8013d8c:	4810      	ldr	r0, [pc, #64]	; (8013dd0 <MX_RTC_Init+0x100>)
 8013d8e:	6802      	ldr	r2, [r0, #0]
 8013d90:	68d3      	ldr	r3, [r2, #12]
 8013d92:	b2db      	uxtb	r3, r3
 8013d94:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8013d98:	60d3      	str	r3, [r2, #12]
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2074, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK) // 2074 - 1 Sec
 8013d9a:	2200      	movs	r2, #0
 8013d9c:	f640 011a 	movw	r1, #2074	; 0x81a
 8013da0:	f7f4 ff66 	bl	8008c70 <HAL_RTCEx_SetWakeUpTimer_IT>
 8013da4:	b988      	cbnz	r0, 8013dca <MX_RTC_Init+0xfa>
  /* USER CODE BEGIN RTC_Init 2 */
  // 32768 - 15 Sec interrupt at 180 Mhz
//  __HAL_RCC_RTC_ENABLE();
  /* USER CODE END RTC_Init 2 */

}
 8013da6:	b00b      	add	sp, #44	; 0x2c
 8013da8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8013dac:	f7fd fd5e 	bl	801186c <Error_Handler>
 8013db0:	e7a8      	b.n	8013d04 <MX_RTC_Init+0x34>
    Error_Handler();
 8013db2:	f7fd fd5b 	bl	801186c <Error_Handler>
 8013db6:	e7b6      	b.n	8013d26 <MX_RTC_Init+0x56>
    Error_Handler();
 8013db8:	f7fd fd58 	bl	801186c <Error_Handler>
 8013dbc:	e7c4      	b.n	8013d48 <MX_RTC_Init+0x78>
    Error_Handler();
 8013dbe:	f7fd fd55 	bl	801186c <Error_Handler>
 8013dc2:	e7da      	b.n	8013d7a <MX_RTC_Init+0xaa>
    Error_Handler();
 8013dc4:	f7fd fd52 	bl	801186c <Error_Handler>
 8013dc8:	e7e0      	b.n	8013d8c <MX_RTC_Init+0xbc>
    Error_Handler();
 8013dca:	f7fd fd4f 	bl	801186c <Error_Handler>
}
 8013dce:	e7ea      	b.n	8013da6 <MX_RTC_Init+0xd6>
 8013dd0:	20010330 	.word	0x20010330
 8013dd4:	40002800 	.word	0x40002800
 8013dd8:	200098d0 	.word	0x200098d0
 8013ddc:	20005f4c 	.word	0x20005f4c
 8013de0:	20011090 	.word	0x20011090
 8013de4:	80800080 	.word	0x80800080

08013de8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8013de8:	b510      	push	{r4, lr}
 8013dea:	b08c      	sub	sp, #48	; 0x30
 8013dec:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8013dee:	2230      	movs	r2, #48	; 0x30
 8013df0:	2100      	movs	r1, #0
 8013df2:	4668      	mov	r0, sp
 8013df4:	f001 fb8c 	bl	8015510 <memset>
  if(rtcHandle->Instance==RTC)
 8013df8:	6822      	ldr	r2, [r4, #0]
 8013dfa:	4b12      	ldr	r3, [pc, #72]	; (8013e44 <HAL_RTC_MspInit+0x5c>)
 8013dfc:	429a      	cmp	r2, r3
 8013dfe:	d001      	beq.n	8013e04 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8013e00:	b00c      	add	sp, #48	; 0x30
 8013e02:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8013e04:	2320      	movs	r3, #32
 8013e06:	9300      	str	r3, [sp, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8013e08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013e0c:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8013e0e:	4668      	mov	r0, sp
 8013e10:	f7f4 fb1a 	bl	8008448 <HAL_RCCEx_PeriphCLKConfig>
 8013e14:	b998      	cbnz	r0, 8013e3e <HAL_RTC_MspInit+0x56>
    __HAL_RCC_RTC_ENABLE();
 8013e16:	4b0c      	ldr	r3, [pc, #48]	; (8013e48 <HAL_RTC_MspInit+0x60>)
 8013e18:	2201      	movs	r2, #1
 8013e1a:	601a      	str	r2, [r3, #0]
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8013e1c:	2200      	movs	r2, #0
 8013e1e:	4611      	mov	r1, r2
 8013e20:	2003      	movs	r0, #3
 8013e22:	f7f1 fd55 	bl	80058d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8013e26:	2003      	movs	r0, #3
 8013e28:	f7f1 fd86 	bl	8005938 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8013e2c:	2200      	movs	r2, #0
 8013e2e:	4611      	mov	r1, r2
 8013e30:	2029      	movs	r0, #41	; 0x29
 8013e32:	f7f1 fd4d 	bl	80058d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8013e36:	2029      	movs	r0, #41	; 0x29
 8013e38:	f7f1 fd7e 	bl	8005938 <HAL_NVIC_EnableIRQ>
}
 8013e3c:	e7e0      	b.n	8013e00 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8013e3e:	f7fd fd15 	bl	801186c <Error_Handler>
 8013e42:	e7e8      	b.n	8013e16 <HAL_RTC_MspInit+0x2e>
 8013e44:	40002800 	.word	0x40002800
 8013e48:	42470e3c 	.word	0x42470e3c

08013e4c <GSM_CharReception_Callback>:
extern uint32_t gu32GSMCharacterTimeout;
volatile uint32_t u8GSMCharRcv = 0;
uint8_t u8gsmResponse = 0;
extern strctGSM gsmInstance;
void GSM_CharReception_Callback(void)
{
 8013e4c:	b410      	push	{r4}
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8013e4e:	4b0c      	ldr	r3, [pc, #48]	; (8013e80 <GSM_CharReception_Callback+0x34>)
 8013e50:	685a      	ldr	r2, [r3, #4]
 8013e52:	b2d2      	uxtb	r2, r2
	u8gsmResponse = LL_USART_ReceiveData8(UART4);
 8013e54:	490b      	ldr	r1, [pc, #44]	; (8013e84 <GSM_CharReception_Callback+0x38>)
 8013e56:	700a      	strb	r2, [r1, #0]
	gsmInstance.as8GSM_Response_Buff[gsmInstance.u8GSM_Response_Character_Counter++] = u8gsmResponse;
 8013e58:	4b0b      	ldr	r3, [pc, #44]	; (8013e88 <GSM_CharReception_Callback+0x3c>)
 8013e5a:	f8d3 0e3c 	ldr.w	r0, [r3, #3644]	; 0xe3c
 8013e5e:	1c44      	adds	r4, r0, #1
 8013e60:	f8c3 4e3c 	str.w	r4, [r3, #3644]	; 0xe3c
 8013e64:	4403      	add	r3, r0
 8013e66:	f883 2452 	strb.w	r2, [r3, #1106]	; 0x452
	gu32GSMCharacterTimeout = FIVEHUNDRED_MS;
 8013e6a:	4b08      	ldr	r3, [pc, #32]	; (8013e8c <GSM_CharReception_Callback+0x40>)
 8013e6c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8013e70:	601a      	str	r2, [r3, #0]
	if(u8GSMCharRcv == 0)
 8013e72:	684b      	ldr	r3, [r1, #4]
 8013e74:	b90b      	cbnz	r3, 8013e7a <GSM_CharReception_Callback+0x2e>
		u8GSMCharRcv = 1;
 8013e76:	2201      	movs	r2, #1
 8013e78:	604a      	str	r2, [r1, #4]
}
 8013e7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013e7e:	4770      	bx	lr
 8013e80:	40004c00 	.word	0x40004c00
 8013e84:	20005f64 	.word	0x20005f64
 8013e88:	2000d390 	.word	0x2000d390
 8013e8c:	20006144 	.word	0x20006144

08013e90 <MODBUS_CharReception_Callback>:
 8013e90:	4b14      	ldr	r3, [pc, #80]	; (8013ee4 <MODBUS_CharReception_Callback+0x54>)
 8013e92:	685b      	ldr	r3, [r3, #4]
 8013e94:	b2db      	uxtb	r3, r3
uint8_t u8TestArrayCounter = 0;
volatile uint8_t gu8ModbusInterruptFlag = 0;
void MODBUS_CharReception_Callback(void)
{

	u8receivedChar =LL_USART_ReceiveData8(USART3);
 8013e96:	4a14      	ldr	r2, [pc, #80]	; (8013ee8 <MODBUS_CharReception_Callback+0x58>)
 8013e98:	7013      	strb	r3, [r2, #0]
//
//	 if(u8TestArrayCounter == 25)
//	 {
//		 u8TestArrayCounter = 0;
//	 }
	if(gu8MBResponseFlag == 0)
 8013e9a:	4b14      	ldr	r3, [pc, #80]	; (8013eec <MODBUS_CharReception_Callback+0x5c>)
 8013e9c:	781b      	ldrb	r3, [r3, #0]
 8013e9e:	b983      	cbnz	r3, 8013ec2 <MODBUS_CharReception_Callback+0x32>
	{
		if(master.u8MBSlave_Address == u8receivedChar)
 8013ea0:	4b13      	ldr	r3, [pc, #76]	; (8013ef0 <MODBUS_CharReception_Callback+0x60>)
 8013ea2:	781a      	ldrb	r2, [r3, #0]
 8013ea4:	4b10      	ldr	r3, [pc, #64]	; (8013ee8 <MODBUS_CharReception_Callback+0x58>)
 8013ea6:	781b      	ldrb	r3, [r3, #0]
 8013ea8:	b2db      	uxtb	r3, r3
 8013eaa:	429a      	cmp	r2, r3
 8013eac:	d119      	bne.n	8013ee2 <MODBUS_CharReception_Callback+0x52>
		{
			/* Response from slave is received */
			gu8MBResponseFlag = 1;
 8013eae:	2301      	movs	r3, #1
 8013eb0:	4a0e      	ldr	r2, [pc, #56]	; (8013eec <MODBUS_CharReception_Callback+0x5c>)
 8013eb2:	7013      	strb	r3, [r2, #0]
			gu32ModbusFrameEndTimer = gu32Modbus485ResponseTime;//ONE_SEC;//TWO_SEC;
 8013eb4:	4a0f      	ldr	r2, [pc, #60]	; (8013ef4 <MODBUS_CharReception_Callback+0x64>)
 8013eb6:	6811      	ldr	r1, [r2, #0]
 8013eb8:	4a0f      	ldr	r2, [pc, #60]	; (8013ef8 <MODBUS_CharReception_Callback+0x68>)
 8013eba:	6011      	str	r1, [r2, #0]
			gu32MBRTUClientConnectedFlag = 1;
 8013ebc:	4a0f      	ldr	r2, [pc, #60]	; (8013efc <MODBUS_CharReception_Callback+0x6c>)
 8013ebe:	6013      	str	r3, [r2, #0]
 8013ec0:	4770      	bx	lr
		}
	}
	else
	{
		master.u8SlaveResponseArray[master.u8MBResponseCharacterCounter++] = u8receivedChar;
 8013ec2:	4b09      	ldr	r3, [pc, #36]	; (8013ee8 <MODBUS_CharReception_Callback+0x58>)
 8013ec4:	7819      	ldrb	r1, [r3, #0]
 8013ec6:	4b0a      	ldr	r3, [pc, #40]	; (8013ef0 <MODBUS_CharReception_Callback+0x60>)
 8013ec8:	f893 2520 	ldrb.w	r2, [r3, #1312]	; 0x520
 8013ecc:	1c50      	adds	r0, r2, #1
 8013ece:	f883 0520 	strb.w	r0, [r3, #1312]	; 0x520
 8013ed2:	3202      	adds	r2, #2
 8013ed4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8013ed8:	6059      	str	r1, [r3, #4]
		gu32ModbusFrameEndTimer = gu32Modbus485ResponseTime;//ONE_SEC;//TWO_SEC;
 8013eda:	4b06      	ldr	r3, [pc, #24]	; (8013ef4 <MODBUS_CharReception_Callback+0x64>)
 8013edc:	681a      	ldr	r2, [r3, #0]
 8013ede:	4b06      	ldr	r3, [pc, #24]	; (8013ef8 <MODBUS_CharReception_Callback+0x68>)
 8013ee0:	601a      	str	r2, [r3, #0]
	}
}
 8013ee2:	4770      	bx	lr
 8013ee4:	40004800 	.word	0x40004800
 8013ee8:	2001036e 	.word	0x2001036e
 8013eec:	2000530a 	.word	0x2000530a
 8013ef0:	2000e5e0 	.word	0x2000e5e0
 8013ef4:	20003810 	.word	0x20003810
 8013ef8:	20005314 	.word	0x20005314
 8013efc:	2000531c 	.word	0x2000531c

08013f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8013f00:	b510      	push	{r4, lr}
 8013f02:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013f04:	2400      	movs	r4, #0
 8013f06:	9400      	str	r4, [sp, #0]
 8013f08:	4b12      	ldr	r3, [pc, #72]	; (8013f54 <HAL_MspInit+0x54>)
 8013f0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013f0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013f10:	645a      	str	r2, [r3, #68]	; 0x44
 8013f12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013f14:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8013f18:	9200      	str	r2, [sp, #0]
 8013f1a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8013f1c:	9401      	str	r4, [sp, #4]
 8013f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013f20:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8013f24:	641a      	str	r2, [r3, #64]	; 0x40
 8013f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013f2c:	9301      	str	r3, [sp, #4]
 8013f2e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 1, 0);
 8013f30:	4622      	mov	r2, r4
 8013f32:	2101      	movs	r1, #1
 8013f34:	2004      	movs	r0, #4
 8013f36:	f7f1 fccb 	bl	80058d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8013f3a:	2004      	movs	r0, #4
 8013f3c:	f7f1 fcfc 	bl	8005938 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 1, 0);
 8013f40:	4622      	mov	r2, r4
 8013f42:	2101      	movs	r1, #1
 8013f44:	2005      	movs	r0, #5
 8013f46:	f7f1 fcc3 	bl	80058d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8013f4a:	2005      	movs	r0, #5
 8013f4c:	f7f1 fcf4 	bl	8005938 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8013f50:	b002      	add	sp, #8
 8013f52:	bd10      	pop	{r4, pc}
 8013f54:	40023800 	.word	0x40023800

08013f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8013f58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8013f5a:	f7f4 fa63 	bl	8008424 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8013f5e:	bd08      	pop	{r3, pc}

08013f60 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8013f60:	e7fe      	b.n	8013f60 <HardFault_Handler>

08013f62 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8013f62:	e7fe      	b.n	8013f62 <MemManage_Handler>

08013f64 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8013f64:	e7fe      	b.n	8013f64 <BusFault_Handler>

08013f66 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8013f66:	e7fe      	b.n	8013f66 <UsageFault_Handler>

08013f68 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8013f68:	4770      	bx	lr

08013f6a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8013f6a:	4770      	bx	lr

08013f6c <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8013f6c:	4770      	bx	lr

08013f6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8013f6e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8013f70:	f7f1 f88a 	bl	8005088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8013f74:	bd08      	pop	{r3, pc}
	...

08013f78 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8013f78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8013f7a:	4802      	ldr	r0, [pc, #8]	; (8013f84 <RTC_WKUP_IRQHandler+0xc>)
 8013f7c:	f7f4 ff00 	bl	8008d80 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8013f80:	bd08      	pop	{r3, pc}
 8013f82:	bf00      	nop
 8013f84:	20010330 	.word	0x20010330

08013f88 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8013f88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8013f8a:	f7f2 fbd9 	bl	8006740 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8013f8e:	bd08      	pop	{r3, pc}

08013f90 <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8013f90:	4770      	bx	lr
	...

08013f94 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8013f94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8013f96:	4802      	ldr	r0, [pc, #8]	; (8013fa0 <ADC_IRQHandler+0xc>)
 8013f98:	f7f1 fac8 	bl	800552c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8013f9c:	bd08      	pop	{r3, pc}
 8013f9e:	bf00      	nop
 8013fa0:	2000972c 	.word	0x2000972c

08013fa4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8013fa4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8013fa6:	4802      	ldr	r0, [pc, #8]	; (8013fb0 <I2C1_EV_IRQHandler+0xc>)
 8013fa8:	f7f3 fd7c 	bl	8007aa4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8013fac:	bd08      	pop	{r3, pc}
 8013fae:	bf00      	nop
 8013fb0:	2000e534 	.word	0x2000e534

08013fb4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8013fb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8013fb6:	4802      	ldr	r0, [pc, #8]	; (8013fc0 <I2C1_ER_IRQHandler+0xc>)
 8013fb8:	f7f3 fe3a 	bl	8007c30 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8013fbc:	bd08      	pop	{r3, pc}
 8013fbe:	bf00      	nop
 8013fc0:	2000e534 	.word	0x2000e534

08013fc4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8013fc4:	b510      	push	{r4, lr}
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8013fc6:	4b24      	ldr	r3, [pc, #144]	; (8014058 <USART3_IRQHandler+0x94>)
 8013fc8:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN USART3_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART3)!=RESET)
 8013fca:	f013 0f20 	tst.w	r3, #32
 8013fce:	d114      	bne.n	8013ffa <USART3_IRQHandler+0x36>
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8013fd0:	4b21      	ldr	r3, [pc, #132]	; (8014058 <USART3_IRQHandler+0x94>)
 8013fd2:	681b      	ldr	r3, [r3, #0]
	{
	/* RXNE flag will be cleared by reading of RDR register (done in call) */
	/* Call function in charge of handling Character reception */
		MODBUS_CharReception_Callback();
	}
	else if(LL_USART_IsActiveFlag_TC(USART3)!=RESET)
 8013fd4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013fd8:	d011      	beq.n	8013ffe <USART3_IRQHandler+0x3a>
	{
		if(u8MBQueryCharacterCounter <= 7)
 8013fda:	4b20      	ldr	r3, [pc, #128]	; (801405c <USART3_IRQHandler+0x98>)
 8013fdc:	781b      	ldrb	r3, [r3, #0]
 8013fde:	b2db      	uxtb	r3, r3
 8013fe0:	2b07      	cmp	r3, #7
 8013fe2:	d80d      	bhi.n	8014000 <USART3_IRQHandler+0x3c>
		{
			LL_USART_TransmitData8(USART3,master.u8QueryFrame[u8MBQueryCharacterCounter++]);
 8013fe4:	4b1d      	ldr	r3, [pc, #116]	; (801405c <USART3_IRQHandler+0x98>)
 8013fe6:	7819      	ldrb	r1, [r3, #0]
 8013fe8:	1c4a      	adds	r2, r1, #1
 8013fea:	b2d2      	uxtb	r2, r2
 8013fec:	701a      	strb	r2, [r3, #0]
 8013fee:	4b1c      	ldr	r3, [pc, #112]	; (8014060 <USART3_IRQHandler+0x9c>)
 8013ff0:	440b      	add	r3, r1
 8013ff2:	785a      	ldrb	r2, [r3, #1]
  USARTx->DR = Value;
 8013ff4:	4b18      	ldr	r3, [pc, #96]	; (8014058 <USART3_IRQHandler+0x94>)
 8013ff6:	605a      	str	r2, [r3, #4]
}
 8013ff8:	e001      	b.n	8013ffe <USART3_IRQHandler+0x3a>
		MODBUS_CharReception_Callback();
 8013ffa:	f7ff ff49 	bl	8013e90 <MODBUS_CharReception_Callback>
	}
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8013ffe:	bd10      	pop	{r4, pc}
			HAL_GPIO_WritePin(MB_RE_GPIO_Port,MB_RE_Pin,GPIO_PIN_RESET);
 8014000:	4c18      	ldr	r4, [pc, #96]	; (8014064 <USART3_IRQHandler+0xa0>)
 8014002:	2200      	movs	r2, #0
 8014004:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014008:	4620      	mov	r0, r4
 801400a:	f7f2 fe67 	bl	8006cdc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MB_RE_GPIO_Port,MB_DE_Pin,GPIO_PIN_RESET);
 801400e:	2200      	movs	r2, #0
 8014010:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8014014:	4620      	mov	r0, r4
 8014016:	f7f2 fe61 	bl	8006cdc <HAL_GPIO_WritePin>
			u8MBQueryCharacterCounter = 0;
 801401a:	2200      	movs	r2, #0
 801401c:	4b0f      	ldr	r3, [pc, #60]	; (801405c <USART3_IRQHandler+0x98>)
 801401e:	701a      	strb	r2, [r3, #0]
			master.u8MBResponseCharacterCounter = 0;
 8014020:	4b0f      	ldr	r3, [pc, #60]	; (8014060 <USART3_IRQHandler+0x9c>)
 8014022:	f883 2520 	strb.w	r2, [r3, #1312]	; 0x520
			modbusState = enmMODBBUS_AWAIT_RESPONSE;
 8014026:	4a10      	ldr	r2, [pc, #64]	; (8014068 <USART3_IRQHandler+0xa4>)
 8014028:	2102      	movs	r1, #2
 801402a:	7011      	strb	r1, [r2, #0]
			gu32ModbusResponseTimeout = FOUR_SEC;
 801402c:	4a0f      	ldr	r2, [pc, #60]	; (801406c <USART3_IRQHandler+0xa8>)
 801402e:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8014032:	6011      	str	r1, [r2, #0]
			gu8MBFrameTransmittedFlag = 1;
 8014034:	4a0e      	ldr	r2, [pc, #56]	; (8014070 <USART3_IRQHandler+0xac>)
 8014036:	2101      	movs	r1, #1
 8014038:	7011      	strb	r1, [r2, #0]
			master.u32PollDelay = ONE_SEC;
 801403a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801403e:	f8c3 2e4c 	str.w	r2, [r3, #3660]	; 0xe4c
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 8014042:	4b05      	ldr	r3, [pc, #20]	; (8014058 <USART3_IRQHandler+0x94>)
 8014044:	68da      	ldr	r2, [r3, #12]
 8014046:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801404a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 801404c:	68da      	ldr	r2, [r3, #12]
 801404e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014052:	60da      	str	r2, [r3, #12]
}
 8014054:	e7d3      	b.n	8013ffe <USART3_IRQHandler+0x3a>
 8014056:	bf00      	nop
 8014058:	40004800 	.word	0x40004800
 801405c:	20005310 	.word	0x20005310
 8014060:	2000e5e0 	.word	0x2000e5e0
 8014064:	40021000 	.word	0x40021000
 8014068:	20005309 	.word	0x20005309
 801406c:	20005318 	.word	0x20005318
 8014070:	200057dc 	.word	0x200057dc

08014074 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8014074:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8014076:	4802      	ldr	r0, [pc, #8]	; (8014080 <RTC_Alarm_IRQHandler+0xc>)
 8014078:	f7f4 fb1a 	bl	80086b0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 801407c:	bd08      	pop	{r3, pc}
 801407e:	bf00      	nop
 8014080:	20010330 	.word	0x20010330

08014084 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8014084:	b508      	push	{r3, lr}
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8014086:	4b04      	ldr	r3, [pc, #16]	; (8014098 <UART4_IRQHandler+0x14>)
 8014088:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN UART4_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(UART4)!=RESET)
 801408a:	f013 0f20 	tst.w	r3, #32
 801408e:	d100      	bne.n	8014092 <UART4_IRQHandler+0xe>
	}
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8014090:	bd08      	pop	{r3, pc}
		GSM_CharReception_Callback();
 8014092:	f7ff fedb 	bl	8013e4c <GSM_CharReception_Callback>
}
 8014096:	e7fb      	b.n	8014090 <UART4_IRQHandler+0xc>
 8014098:	40004c00 	.word	0x40004c00

0801409c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 801409c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 801409e:	4802      	ldr	r0, [pc, #8]	; (80140a8 <TIM7_IRQHandler+0xc>)
 80140a0:	f7f4 fea7 	bl	8008df2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80140a4:	bd08      	pop	{r3, pc}
 80140a6:	bf00      	nop
 80140a8:	20010370 	.word	0x20010370

080140ac <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80140ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80140ae:	4802      	ldr	r0, [pc, #8]	; (80140b8 <DMA2_Stream4_IRQHandler+0xc>)
 80140b0:	f7f1 fd9a 	bl	8005be8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80140b4:	bd08      	pop	{r3, pc}
 80140b6:	bf00      	nop
 80140b8:	20009774 	.word	0x20009774

080140bc <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80140bc:	2001      	movs	r0, #1
 80140be:	4770      	bx	lr

080140c0 <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
 80140c0:	4b02      	ldr	r3, [pc, #8]	; (80140cc <_kill+0xc>)
 80140c2:	2216      	movs	r2, #22
 80140c4:	601a      	str	r2, [r3, #0]
	return -1;
}
 80140c6:	f04f 30ff 	mov.w	r0, #4294967295
 80140ca:	4770      	bx	lr
 80140cc:	200110a8 	.word	0x200110a8

080140d0 <_exit>:

void _exit (int status)
{
 80140d0:	b508      	push	{r3, lr}
	_kill(status, -1);
 80140d2:	f04f 31ff 	mov.w	r1, #4294967295
 80140d6:	f7ff fff3 	bl	80140c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80140da:	e7fe      	b.n	80140da <_exit+0xa>

080140dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80140dc:	b570      	push	{r4, r5, r6, lr}
 80140de:	460c      	mov	r4, r1
 80140e0:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80140e2:	2500      	movs	r5, #0
 80140e4:	42b5      	cmp	r5, r6
 80140e6:	da07      	bge.n	80140f8 <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 80140e8:	f3af 8000 	nop.w
 80140ec:	4621      	mov	r1, r4
 80140ee:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80140f2:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 80140f4:	460c      	mov	r4, r1
 80140f6:	e7f5      	b.n	80140e4 <_read+0x8>
	}

return len;
}
 80140f8:	4630      	mov	r0, r6
 80140fa:	bd70      	pop	{r4, r5, r6, pc}

080140fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80140fc:	b570      	push	{r4, r5, r6, lr}
 80140fe:	460c      	mov	r4, r1
 8014100:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014102:	2500      	movs	r5, #0
 8014104:	42b5      	cmp	r5, r6
 8014106:	da05      	bge.n	8014114 <_write+0x18>
	{
		__io_putchar(*ptr++);
 8014108:	f814 0b01 	ldrb.w	r0, [r4], #1
 801410c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014110:	3501      	adds	r5, #1
 8014112:	e7f7      	b.n	8014104 <_write+0x8>
	}
	return len;
}
 8014114:	4630      	mov	r0, r6
 8014116:	bd70      	pop	{r4, r5, r6, pc}

08014118 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8014118:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 801411a:	4a0b      	ldr	r2, [pc, #44]	; (8014148 <_sbrk+0x30>)
 801411c:	6812      	ldr	r2, [r2, #0]
 801411e:	b142      	cbz	r2, 8014132 <_sbrk+0x1a>
		heap_end = &end;

	prev_heap_end = heap_end;
 8014120:	4a09      	ldr	r2, [pc, #36]	; (8014148 <_sbrk+0x30>)
 8014122:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8014124:	4403      	add	r3, r0
 8014126:	466a      	mov	r2, sp
 8014128:	4293      	cmp	r3, r2
 801412a:	d806      	bhi.n	801413a <_sbrk+0x22>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 801412c:	4a06      	ldr	r2, [pc, #24]	; (8014148 <_sbrk+0x30>)
 801412e:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8014130:	4770      	bx	lr
		heap_end = &end;
 8014132:	4a05      	ldr	r2, [pc, #20]	; (8014148 <_sbrk+0x30>)
 8014134:	4905      	ldr	r1, [pc, #20]	; (801414c <_sbrk+0x34>)
 8014136:	6011      	str	r1, [r2, #0]
 8014138:	e7f2      	b.n	8014120 <_sbrk+0x8>
		errno = ENOMEM;
 801413a:	4b05      	ldr	r3, [pc, #20]	; (8014150 <_sbrk+0x38>)
 801413c:	220c      	movs	r2, #12
 801413e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8014140:	f04f 30ff 	mov.w	r0, #4294967295
 8014144:	4770      	bx	lr
 8014146:	bf00      	nop
 8014148:	20005f78 	.word	0x20005f78
 801414c:	200110b8 	.word	0x200110b8
 8014150:	200110a8 	.word	0x200110a8

08014154 <_close>:

int _close(int file)
{
	return -1;
}
 8014154:	f04f 30ff 	mov.w	r0, #4294967295
 8014158:	4770      	bx	lr

0801415a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 801415a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801415e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8014160:	2000      	movs	r0, #0
 8014162:	4770      	bx	lr

08014164 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8014164:	2001      	movs	r0, #1
 8014166:	4770      	bx	lr

08014168 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8014168:	2000      	movs	r0, #0
 801416a:	4770      	bx	lr

0801416c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801416c:	490e      	ldr	r1, [pc, #56]	; (80141a8 <SystemInit+0x3c>)
 801416e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8014172:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 801417a:	4b0c      	ldr	r3, [pc, #48]	; (80141ac <SystemInit+0x40>)
 801417c:	681a      	ldr	r2, [r3, #0]
 801417e:	f042 0201 	orr.w	r2, r2, #1
 8014182:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8014184:	2000      	movs	r0, #0
 8014186:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8014188:	681a      	ldr	r2, [r3, #0]
 801418a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 801418e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8014192:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8014194:	4a06      	ldr	r2, [pc, #24]	; (80141b0 <SystemInit+0x44>)
 8014196:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8014198:	681a      	ldr	r2, [r3, #0]
 801419a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801419e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80141a0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80141a2:	4b04      	ldr	r3, [pc, #16]	; (80141b4 <SystemInit+0x48>)
 80141a4:	608b      	str	r3, [r1, #8]
#endif
}
 80141a6:	4770      	bx	lr
 80141a8:	e000ed00 	.word	0xe000ed00
 80141ac:	40023800 	.word	0x40023800
 80141b0:	24003010 	.word	0x24003010
 80141b4:	08004000 	.word	0x08004000

080141b8 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80141b8:	b500      	push	{lr}
 80141ba:	b083      	sub	sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80141bc:	2300      	movs	r3, #0
 80141be:	9300      	str	r3, [sp, #0]
 80141c0:	9301      	str	r3, [sp, #4]

  htim7.Instance = TIM7;
 80141c2:	480f      	ldr	r0, [pc, #60]	; (8014200 <MX_TIM7_Init+0x48>)
 80141c4:	4a0f      	ldr	r2, [pc, #60]	; (8014204 <MX_TIM7_Init+0x4c>)
 80141c6:	6002      	str	r2, [r0, #0]
  htim7.Init.Prescaler = 1;
 80141c8:	2201      	movs	r2, #1
 80141ca:	6042      	str	r2, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80141cc:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 41999;
 80141ce:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80141d2:	60c2      	str	r2, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80141d4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80141d6:	f7f4 ff2d 	bl	8009034 <HAL_TIM_Base_Init>
 80141da:	b950      	cbnz	r0, 80141f2 <MX_TIM7_Init+0x3a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80141dc:	2300      	movs	r3, #0
 80141de:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80141e0:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80141e2:	4669      	mov	r1, sp
 80141e4:	4806      	ldr	r0, [pc, #24]	; (8014200 <MX_TIM7_Init+0x48>)
 80141e6:	f7f4 ff3f 	bl	8009068 <HAL_TIMEx_MasterConfigSynchronization>
 80141ea:	b928      	cbnz	r0, 80141f8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
  }

}
 80141ec:	b003      	add	sp, #12
 80141ee:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80141f2:	f7fd fb3b 	bl	801186c <Error_Handler>
 80141f6:	e7f1      	b.n	80141dc <MX_TIM7_Init+0x24>
    Error_Handler();
 80141f8:	f7fd fb38 	bl	801186c <Error_Handler>
}
 80141fc:	e7f6      	b.n	80141ec <MX_TIM7_Init+0x34>
 80141fe:	bf00      	nop
 8014200:	20010370 	.word	0x20010370
 8014204:	40001400 	.word	0x40001400

08014208 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM7)
 8014208:	6802      	ldr	r2, [r0, #0]
 801420a:	4b0e      	ldr	r3, [pc, #56]	; (8014244 <HAL_TIM_Base_MspInit+0x3c>)
 801420c:	429a      	cmp	r2, r3
 801420e:	d000      	beq.n	8014212 <HAL_TIM_Base_MspInit+0xa>
 8014210:	4770      	bx	lr
{
 8014212:	b500      	push	{lr}
 8014214:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8014216:	2200      	movs	r2, #0
 8014218:	9201      	str	r2, [sp, #4]
 801421a:	f503 3309 	add.w	r3, r3, #140288	; 0x22400
 801421e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8014220:	f041 0120 	orr.w	r1, r1, #32
 8014224:	6419      	str	r1, [r3, #64]	; 0x40
 8014226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014228:	f003 0320 	and.w	r3, r3, #32
 801422c:	9301      	str	r3, [sp, #4]
 801422e:	9b01      	ldr	r3, [sp, #4]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8014230:	2101      	movs	r1, #1
 8014232:	2037      	movs	r0, #55	; 0x37
 8014234:	f7f1 fb4c 	bl	80058d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8014238:	2037      	movs	r0, #55	; 0x37
 801423a:	f7f1 fb7d 	bl	8005938 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 801423e:	b003      	add	sp, #12
 8014240:	f85d fb04 	ldr.w	pc, [sp], #4
 8014244:	40001400 	.word	0x40001400

08014248 <MX_UART4_Init>:
#include "externs.h"
/* USER CODE END 0 */

/* UART4 init function */
void MX_UART4_Init(void)
{
 8014248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801424c:	b090      	sub	sp, #64	; 0x40
  LL_USART_InitTypeDef USART_InitStruct = {0};
 801424e:	2400      	movs	r4, #0
 8014250:	9409      	str	r4, [sp, #36]	; 0x24
 8014252:	940a      	str	r4, [sp, #40]	; 0x28
 8014254:	940b      	str	r4, [sp, #44]	; 0x2c
 8014256:	940c      	str	r4, [sp, #48]	; 0x30
 8014258:	940d      	str	r4, [sp, #52]	; 0x34
 801425a:	940e      	str	r4, [sp, #56]	; 0x38
 801425c:	940f      	str	r4, [sp, #60]	; 0x3c
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 801425e:	4b3b      	ldr	r3, [pc, #236]	; (801434c <MX_UART4_Init+0x104>)
 8014260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014262:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8014266:	641a      	str	r2, [r3, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8014268:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801426a:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 801426e:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8014270:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8014272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014274:	f042 0201 	orr.w	r2, r2, #1
 8014278:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 801427a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801427c:	f002 0201 	and.w	r2, r2, #1
 8014280:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8014282:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8014284:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014286:	f042 0204 	orr.w	r2, r2, #4
 801428a:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 801428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801428e:	f003 0304 	and.w	r3, r3, #4
 8014292:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8014294:	9b00      	ldr	r3, [sp, #0]
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
  /**UART4 GPIO Configuration
  PA0/WKUP   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8014296:	2501      	movs	r5, #1
 8014298:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 801429a:	f04f 0802 	mov.w	r8, #2
 801429e:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80142a2:	2703      	movs	r7, #3
 80142a4:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80142a6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80142a8:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80142aa:	2608      	movs	r6, #8
 80142ac:	9608      	str	r6, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80142ae:	a903      	add	r1, sp, #12
 80142b0:	4827      	ldr	r0, [pc, #156]	; (8014350 <MX_UART4_Init+0x108>)
 80142b2:	f7f4 fefe 	bl	80090b2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 80142b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80142ba:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80142bc:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80142c0:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80142c2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80142c4:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80142c6:	9608      	str	r6, [sp, #32]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80142c8:	a903      	add	r1, sp, #12
 80142ca:	4822      	ldr	r0, [pc, #136]	; (8014354 <MX_UART4_Init+0x10c>)
 80142cc:	f7f4 fef1 	bl	80090b2 <LL_GPIO_Init>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80142d0:	4b21      	ldr	r3, [pc, #132]	; (8014358 <MX_UART4_Init+0x110>)
 80142d2:	68da      	ldr	r2, [r3, #12]
 80142d4:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80142d8:	f1c2 0307 	rsb	r3, r2, #7
 80142dc:	2b04      	cmp	r3, #4
 80142de:	bf28      	it	cs
 80142e0:	2304      	movcs	r3, #4
 80142e2:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80142e4:	1d13      	adds	r3, r2, #4
 80142e6:	2b06      	cmp	r3, #6
 80142e8:	d92e      	bls.n	8014348 <MX_UART4_Init+0x100>
 80142ea:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80142ec:	f04f 33ff 	mov.w	r3, #4294967295
 80142f0:	408b      	lsls	r3, r1
 80142f2:	43db      	mvns	r3, r3
 80142f4:	f003 0303 	and.w	r3, r3, #3
 80142f8:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80142fa:	011b      	lsls	r3, r3, #4
 80142fc:	b2db      	uxtb	r3, r3
 80142fe:	4a17      	ldr	r2, [pc, #92]	; (801435c <MX_UART4_Init+0x114>)
 8014300:	f882 3334 	strb.w	r3, [r2, #820]	; 0x334
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014304:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8014308:	6053      	str	r3, [r2, #4]

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
  NVIC_EnableIRQ(UART4_IRQn);

  USART_InitStruct.BaudRate = 115200;
 801430a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 801430e:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8014310:	2300      	movs	r3, #0
 8014312:	930a      	str	r3, [sp, #40]	; 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8014314:	930b      	str	r3, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8014316:	930c      	str	r3, [sp, #48]	; 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8014318:	220c      	movs	r2, #12
 801431a:	920d      	str	r2, [sp, #52]	; 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 801431c:	930e      	str	r3, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 801431e:	930f      	str	r3, [sp, #60]	; 0x3c
  LL_USART_Init(UART4, &USART_InitStruct);
 8014320:	4c0f      	ldr	r4, [pc, #60]	; (8014360 <MX_UART4_Init+0x118>)
 8014322:	a909      	add	r1, sp, #36	; 0x24
 8014324:	4620      	mov	r0, r4
 8014326:	f7f4 ffcf 	bl	80092c8 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801432a:	6923      	ldr	r3, [r4, #16]
 801432c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8014330:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8014332:	6963      	ldr	r3, [r4, #20]
 8014334:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8014338:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 801433a:	68e3      	ldr	r3, [r4, #12]
 801433c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014340:	60e3      	str	r3, [r4, #12]
  LL_USART_ConfigAsyncMode(UART4);
  LL_USART_Enable(UART4);

}
 8014342:	b010      	add	sp, #64	; 0x40
 8014344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8014348:	2200      	movs	r2, #0
 801434a:	e7cf      	b.n	80142ec <MX_UART4_Init+0xa4>
 801434c:	40023800 	.word	0x40023800
 8014350:	40020000 	.word	0x40020000
 8014354:	40020800 	.word	0x40020800
 8014358:	e000ed00 	.word	0xe000ed00
 801435c:	e000e100 	.word	0xe000e100
 8014360:	40004c00 	.word	0x40004c00

08014364 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8014364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014368:	b090      	sub	sp, #64	; 0x40
  LL_USART_InitTypeDef USART_InitStruct = {0};
 801436a:	2400      	movs	r4, #0
 801436c:	9409      	str	r4, [sp, #36]	; 0x24
 801436e:	940a      	str	r4, [sp, #40]	; 0x28
 8014370:	940b      	str	r4, [sp, #44]	; 0x2c
 8014372:	940c      	str	r4, [sp, #48]	; 0x30
 8014374:	940d      	str	r4, [sp, #52]	; 0x34
 8014376:	940e      	str	r4, [sp, #56]	; 0x38
 8014378:	940f      	str	r4, [sp, #60]	; 0x3c
  SET_BIT(RCC->APB1ENR, Periphs);
 801437a:	4b3b      	ldr	r3, [pc, #236]	; (8014468 <MX_USART3_UART_Init+0x104>)
 801437c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801437e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8014382:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8014384:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014386:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 801438a:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 801438c:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 801438e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014390:	f042 0202 	orr.w	r2, r2, #2
 8014394:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8014396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014398:	f002 0202 	and.w	r2, r2, #2
 801439c:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 801439e:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80143a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80143a2:	f042 0208 	orr.w	r2, r2, #8
 80143a6:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80143a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143aa:	f003 0308 	and.w	r3, r3, #8
 80143ae:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80143b0:	9b00      	ldr	r3, [sp, #0]
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PD9   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80143b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80143b6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80143b8:	f04f 0802 	mov.w	r8, #2
 80143bc:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80143c0:	2703      	movs	r7, #3
 80143c2:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80143c4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80143c6:	2601      	movs	r6, #1
 80143c8:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80143ca:	2507      	movs	r5, #7
 80143cc:	9508      	str	r5, [sp, #32]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80143ce:	a903      	add	r1, sp, #12
 80143d0:	4826      	ldr	r0, [pc, #152]	; (801446c <MX_USART3_UART_Init+0x108>)
 80143d2:	f7f4 fe6e 	bl	80090b2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80143d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80143da:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80143dc:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80143e0:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80143e2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80143e4:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80143e6:	9508      	str	r5, [sp, #32]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80143e8:	a903      	add	r1, sp, #12
 80143ea:	4821      	ldr	r0, [pc, #132]	; (8014470 <MX_USART3_UART_Init+0x10c>)
 80143ec:	f7f4 fe61 	bl	80090b2 <LL_GPIO_Init>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80143f0:	4b20      	ldr	r3, [pc, #128]	; (8014474 <MX_USART3_UART_Init+0x110>)
 80143f2:	68da      	ldr	r2, [r3, #12]
 80143f4:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80143f8:	1aab      	subs	r3, r5, r2
 80143fa:	2b04      	cmp	r3, #4
 80143fc:	bf28      	it	cs
 80143fe:	2304      	movcs	r3, #4
 8014400:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8014402:	1d13      	adds	r3, r2, #4
 8014404:	2b06      	cmp	r3, #6
 8014406:	d92d      	bls.n	8014464 <MX_USART3_UART_Init+0x100>
 8014408:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801440a:	f04f 33ff 	mov.w	r3, #4294967295
 801440e:	408b      	lsls	r3, r1
 8014410:	43db      	mvns	r3, r3
 8014412:	f003 0304 	and.w	r3, r3, #4
 8014416:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014418:	011b      	lsls	r3, r3, #4
 801441a:	b2db      	uxtb	r3, r3
 801441c:	4a16      	ldr	r2, [pc, #88]	; (8014478 <MX_USART3_UART_Init+0x114>)
 801441e:	f882 3327 	strb.w	r3, [r2, #807]	; 0x327
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014422:	2380      	movs	r3, #128	; 0x80
 8014424:	6053      	str	r3, [r2, #4]

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 0));
  NVIC_EnableIRQ(USART3_IRQn);

  USART_InitStruct.BaudRate = 9600;
 8014426:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 801442a:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 801442c:	2300      	movs	r3, #0
 801442e:	930a      	str	r3, [sp, #40]	; 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8014430:	930b      	str	r3, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8014432:	930c      	str	r3, [sp, #48]	; 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8014434:	220c      	movs	r2, #12
 8014436:	920d      	str	r2, [sp, #52]	; 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8014438:	930e      	str	r3, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 801443a:	930f      	str	r3, [sp, #60]	; 0x3c
  LL_USART_Init(USART3, &USART_InitStruct);
 801443c:	4c0f      	ldr	r4, [pc, #60]	; (801447c <MX_USART3_UART_Init+0x118>)
 801443e:	a909      	add	r1, sp, #36	; 0x24
 8014440:	4620      	mov	r0, r4
 8014442:	f7f4 ff41 	bl	80092c8 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014446:	6923      	ldr	r3, [r4, #16]
 8014448:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 801444c:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 801444e:	6963      	ldr	r3, [r4, #20]
 8014450:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8014454:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8014456:	68e3      	ldr	r3, [r4, #12]
 8014458:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801445c:	60e3      	str	r3, [r4, #12]
  LL_USART_ConfigAsyncMode(USART3);
  LL_USART_Enable(USART3);

}
 801445e:	b010      	add	sp, #64	; 0x40
 8014460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8014464:	2200      	movs	r2, #0
 8014466:	e7d0      	b.n	801440a <MX_USART3_UART_Init+0xa6>
 8014468:	40023800 	.word	0x40023800
 801446c:	40020400 	.word	0x40020400
 8014470:	40020c00 	.word	0x40020c00
 8014474:	e000ed00 	.word	0xe000ed00
 8014478:	e000e100 	.word	0xe000e100
 801447c:	40004800 	.word	0x40004800

08014480 <calculateInputVoltage>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void calculateInputVoltage(void)
{
 8014480:	b510      	push	{r4, lr}
 8014482:	ed2d 8b02 	vpush	{d8}
	/* Calculate Input Votage from adc data */
	gfInputSupplyVoltage = (float) ((MAX_INPUT_VTG * gau32BatteryProcessedData[ADC_VIN + 1])/ADC_RESOLUTION);
 8014486:	4c2a      	ldr	r4, [pc, #168]	; (8014530 <calculateInputVoltage+0xb0>)
 8014488:	6863      	ldr	r3, [r4, #4]
 801448a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801448e:	00db      	lsls	r3, r3, #3
 8014490:	4a28      	ldr	r2, [pc, #160]	; (8014534 <calculateInputVoltage+0xb4>)
 8014492:	fba2 2303 	umull	r2, r3, r2, r3
 8014496:	0adb      	lsrs	r3, r3, #11
 8014498:	ee07 3a90 	vmov	s15, r3
 801449c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
	gfBatteryVoltage = ((((3.3 * ( 2 * gau32BatteryProcessedData[ADC_VIN])) / 4095) * 2 ) / 0.6 ) - 0.2;
 80144a0:	6820      	ldr	r0, [r4, #0]
 80144a2:	0040      	lsls	r0, r0, #1
 80144a4:	f7f0 f83e 	bl	8004524 <__aeabi_ui2d>
 80144a8:	a319      	add	r3, pc, #100	; (adr r3, 8014510 <calculateInputVoltage+0x90>)
 80144aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144ae:	f7f0 f8b3 	bl	8004618 <__aeabi_dmul>
 80144b2:	a319      	add	r3, pc, #100	; (adr r3, 8014518 <calculateInputVoltage+0x98>)
 80144b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144b8:	f7f0 f9d8 	bl	800486c <__aeabi_ddiv>
 80144bc:	4602      	mov	r2, r0
 80144be:	460b      	mov	r3, r1
 80144c0:	f7ef fef4 	bl	80042ac <__adddf3>
 80144c4:	a316      	add	r3, pc, #88	; (adr r3, 8014520 <calculateInputVoltage+0xa0>)
 80144c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144ca:	f7f0 f9cf 	bl	800486c <__aeabi_ddiv>
 80144ce:	a316      	add	r3, pc, #88	; (adr r3, 8014528 <calculateInputVoltage+0xa8>)
 80144d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144d4:	f7ef fee8 	bl	80042a8 <__aeabi_dsub>
 80144d8:	f7f0 fb96 	bl	8004c08 <__aeabi_d2f>
 80144dc:	60a0      	str	r0, [r4, #8]
	/* Add diode drop for actual voltage */
	gfInputSupplyVoltage += INPUT_DIODE_DROP;
 80144de:	eddf 7a16 	vldr	s15, [pc, #88]	; 8014538 <calculateInputVoltage+0xb8>
 80144e2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80144e6:	edc4 7a03 	vstr	s15, [r4, #12]
	/* Check if system is powered from 8.4 V dc battery pack */
	if(gfInputSupplyVoltage <= VIN_BATTERY_VTG)
 80144ea:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80144ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80144f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144f6:	d804      	bhi.n	8014502 <calculateInputVoltage+0x82>
	{
		gu32InputSupplySwitchedAlert = TRUE;
 80144f8:	2201      	movs	r2, #1
 80144fa:	6122      	str	r2, [r4, #16]
	}
	else
	{
		gu32InputSupplySwitchedAlert = FALSE;
	}
}
 80144fc:	ecbd 8b02 	vpop	{d8}
 8014500:	bd10      	pop	{r4, pc}
		gu32InputSupplySwitchedAlert = FALSE;
 8014502:	4b0b      	ldr	r3, [pc, #44]	; (8014530 <calculateInputVoltage+0xb0>)
 8014504:	2200      	movs	r2, #0
 8014506:	611a      	str	r2, [r3, #16]
}
 8014508:	e7f8      	b.n	80144fc <calculateInputVoltage+0x7c>
 801450a:	bf00      	nop
 801450c:	f3af 8000 	nop.w
 8014510:	66666666 	.word	0x66666666
 8014514:	400a6666 	.word	0x400a6666
 8014518:	00000000 	.word	0x00000000
 801451c:	40affe00 	.word	0x40affe00
 8014520:	33333333 	.word	0x33333333
 8014524:	3fe33333 	.word	0x3fe33333
 8014528:	9999999a 	.word	0x9999999a
 801452c:	3fc99999 	.word	0x3fc99999
 8014530:	20005f80 	.word	0x20005f80
 8014534:	affea003 	.word	0xaffea003
 8014538:	3fb33333 	.word	0x3fb33333

0801453c <operateadc>:
{
 801453c:	b508      	push	{r3, lr}
	if(gu32ADCPollTimer)
 801453e:	4b32      	ldr	r3, [pc, #200]	; (8014608 <operateadc+0xcc>)
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	2b00      	cmp	r3, #0
 8014544:	d14c      	bne.n	80145e0 <operateadc+0xa4>
	switch(enmAdcSMCurrentState)
 8014546:	4b31      	ldr	r3, [pc, #196]	; (801460c <operateadc+0xd0>)
 8014548:	7d1b      	ldrb	r3, [r3, #20]
 801454a:	2b03      	cmp	r3, #3
 801454c:	d853      	bhi.n	80145f6 <operateadc+0xba>
 801454e:	e8df f003 	tbb	[pc, r3]
 8014552:	1702      	.short	0x1702
 8014554:	4048      	.short	0x4048
			if((HAL_ADC_Start_DMA(&hadc1, (uint32_t*)gau32BatteryPeripheralData, 2) != HAL_OK))
 8014556:	2202      	movs	r2, #2
 8014558:	492d      	ldr	r1, [pc, #180]	; (8014610 <operateadc+0xd4>)
 801455a:	482e      	ldr	r0, [pc, #184]	; (8014614 <operateadc+0xd8>)
 801455c:	f7f0 ff20 	bl	80053a0 <HAL_ADC_Start_DMA>
 8014560:	b118      	cbz	r0, 801456a <operateadc+0x2e>
				enmAdcSMCurrentState = enmADC_ERROR;
 8014562:	4b2a      	ldr	r3, [pc, #168]	; (801460c <operateadc+0xd0>)
 8014564:	2203      	movs	r2, #3
 8014566:	751a      	strb	r2, [r3, #20]
 8014568:	e03a      	b.n	80145e0 <operateadc+0xa4>
				HAL_ADC_Start_IT(&hadc1);
 801456a:	482a      	ldr	r0, [pc, #168]	; (8014614 <operateadc+0xd8>)
 801456c:	f7f0 fe78 	bl	8005260 <HAL_ADC_Start_IT>
				enmAdcSMCurrentState = enmADC_GETDATA;
 8014570:	4b26      	ldr	r3, [pc, #152]	; (801460c <operateadc+0xd0>)
 8014572:	2201      	movs	r2, #1
 8014574:	751a      	strb	r2, [r3, #20]
				gu32ADCOperationTimer = ONE_MIN;
 8014576:	4b28      	ldr	r3, [pc, #160]	; (8014618 <operateadc+0xdc>)
 8014578:	f64e 2260 	movw	r2, #60000	; 0xea60
 801457c:	601a      	str	r2, [r3, #0]
 801457e:	e02f      	b.n	80145e0 <operateadc+0xa4>
			if((g32AdcConversionStatusBatt == TRUE) && (gu32ADCOperationTimer != 0))
 8014580:	4b22      	ldr	r3, [pc, #136]	; (801460c <operateadc+0xd0>)
 8014582:	6a1b      	ldr	r3, [r3, #32]
 8014584:	2b01      	cmp	r3, #1
 8014586:	d013      	beq.n	80145b0 <operateadc+0x74>
			else if((!g32AdcConversionStatus) | (!g32AdcConversionStatusBatt) | (gu32ADCOperationTimer == 0))
 8014588:	4a20      	ldr	r2, [pc, #128]	; (801460c <operateadc+0xd0>)
 801458a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 801458c:	6a13      	ldr	r3, [r2, #32]
 801458e:	fab3 f383 	clz	r3, r3
 8014592:	095b      	lsrs	r3, r3, #5
 8014594:	2900      	cmp	r1, #0
 8014596:	bf08      	it	eq
 8014598:	2301      	moveq	r3, #1
 801459a:	4a1f      	ldr	r2, [pc, #124]	; (8014618 <operateadc+0xdc>)
 801459c:	6812      	ldr	r2, [r2, #0]
 801459e:	fab2 f282 	clz	r2, r2
 80145a2:	0952      	lsrs	r2, r2, #5
 80145a4:	b903      	cbnz	r3, 80145a8 <operateadc+0x6c>
 80145a6:	b1da      	cbz	r2, 80145e0 <operateadc+0xa4>
				enmAdcSMCurrentState = enmADC_IDLE;
 80145a8:	4b18      	ldr	r3, [pc, #96]	; (801460c <operateadc+0xd0>)
 80145aa:	2200      	movs	r2, #0
 80145ac:	751a      	strb	r2, [r3, #20]
 80145ae:	e017      	b.n	80145e0 <operateadc+0xa4>
			if((g32AdcConversionStatusBatt == TRUE) && (gu32ADCOperationTimer != 0))
 80145b0:	4b19      	ldr	r3, [pc, #100]	; (8014618 <operateadc+0xdc>)
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d0e7      	beq.n	8014588 <operateadc+0x4c>
				gu32ADCOperationTimer = 0;
 80145b8:	2200      	movs	r2, #0
 80145ba:	4b17      	ldr	r3, [pc, #92]	; (8014618 <operateadc+0xdc>)
 80145bc:	601a      	str	r2, [r3, #0]
				gau32BatteryProcessedData[ADC_VIN + 1] = gau32BatteryPeripheralData[ADC_VIN +1];
 80145be:	4b13      	ldr	r3, [pc, #76]	; (801460c <operateadc+0xd0>)
 80145c0:	69d9      	ldr	r1, [r3, #28]
 80145c2:	6059      	str	r1, [r3, #4]
				gau32BatteryProcessedData[ADC_VIN] = gau32BatteryPeripheralData[ADC_VIN];
 80145c4:	6999      	ldr	r1, [r3, #24]
 80145c6:	6019      	str	r1, [r3, #0]
				enmAdcSMCurrentState = enmADC_PROCESSDATA;
 80145c8:	2102      	movs	r1, #2
 80145ca:	7519      	strb	r1, [r3, #20]
				g32AdcConversionStatusBatt = FALSE;
 80145cc:	621a      	str	r2, [r3, #32]
				g32AdcConversionStatus = FALSE;
 80145ce:	625a      	str	r2, [r3, #36]	; 0x24
 80145d0:	e006      	b.n	80145e0 <operateadc+0xa4>
			gu32ADCPollTimer = TEN_SEC;
 80145d2:	4b0d      	ldr	r3, [pc, #52]	; (8014608 <operateadc+0xcc>)
 80145d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80145d8:	601a      	str	r2, [r3, #0]
			enmAdcSMCurrentState = enmADC_IDLE;
 80145da:	4b0c      	ldr	r3, [pc, #48]	; (801460c <operateadc+0xd0>)
 80145dc:	2200      	movs	r2, #0
 80145de:	751a      	strb	r2, [r3, #20]
}
 80145e0:	bd08      	pop	{r3, pc}
			calculateInputVoltage();
 80145e2:	f7ff ff4d 	bl	8014480 <calculateInputVoltage>
			gu32ADCPollTimer = TEN_SEC;
 80145e6:	4b08      	ldr	r3, [pc, #32]	; (8014608 <operateadc+0xcc>)
 80145e8:	f242 7210 	movw	r2, #10000	; 0x2710
 80145ec:	601a      	str	r2, [r3, #0]
			enmAdcSMCurrentState = enmADC_IDLE;
 80145ee:	4b07      	ldr	r3, [pc, #28]	; (801460c <operateadc+0xd0>)
 80145f0:	2200      	movs	r2, #0
 80145f2:	751a      	strb	r2, [r3, #20]
			break;
 80145f4:	e7f4      	b.n	80145e0 <operateadc+0xa4>
			gu32ADCPollTimer = TEN_SEC;
 80145f6:	4b04      	ldr	r3, [pc, #16]	; (8014608 <operateadc+0xcc>)
 80145f8:	f242 7210 	movw	r2, #10000	; 0x2710
 80145fc:	601a      	str	r2, [r3, #0]
			enmAdcSMCurrentState = enmADC_IDLE;
 80145fe:	4b03      	ldr	r3, [pc, #12]	; (801460c <operateadc+0xd0>)
 8014600:	2200      	movs	r2, #0
 8014602:	751a      	strb	r2, [r3, #20]
			break;
 8014604:	e7ec      	b.n	80145e0 <operateadc+0xa4>
 8014606:	bf00      	nop
 8014608:	20006168 	.word	0x20006168
 801460c:	20005f80 	.word	0x20005f80
 8014610:	20005f98 	.word	0x20005f98
 8014614:	2000972c 	.word	0x2000972c
 8014618:	20006164 	.word	0x20006164

0801461c <HAL_ADC_ConvCpltCallback>:
 *
 * */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
	/*Sequence conversion complete . Read Processed Value */
	if(hadc->Instance == ADC1)
 801461c:	6803      	ldr	r3, [r0, #0]
 801461e:	4a0b      	ldr	r2, [pc, #44]	; (801464c <HAL_ADC_ConvCpltCallback+0x30>)
 8014620:	4293      	cmp	r3, r2
 8014622:	d003      	beq.n	801462c <HAL_ADC_ConvCpltCallback+0x10>
	{
		if(g32AdcConversionStatusBatt == FALSE)
			g32AdcConversionStatusBatt = TRUE;

	}
	else if(hadc->Instance == ADC3)
 8014624:	4a0a      	ldr	r2, [pc, #40]	; (8014650 <HAL_ADC_ConvCpltCallback+0x34>)
 8014626:	4293      	cmp	r3, r2
 8014628:	d008      	beq.n	801463c <HAL_ADC_ConvCpltCallback+0x20>
	}
	else
	{
		/* Unknown Interrupt */
	}
}
 801462a:	4770      	bx	lr
		if(g32AdcConversionStatusBatt == FALSE)
 801462c:	4b09      	ldr	r3, [pc, #36]	; (8014654 <HAL_ADC_ConvCpltCallback+0x38>)
 801462e:	6a1b      	ldr	r3, [r3, #32]
 8014630:	2b00      	cmp	r3, #0
 8014632:	d1fa      	bne.n	801462a <HAL_ADC_ConvCpltCallback+0xe>
			g32AdcConversionStatusBatt = TRUE;
 8014634:	4b07      	ldr	r3, [pc, #28]	; (8014654 <HAL_ADC_ConvCpltCallback+0x38>)
 8014636:	2201      	movs	r2, #1
 8014638:	621a      	str	r2, [r3, #32]
 801463a:	4770      	bx	lr
		if(g32AdcConversionStatus == FALSE)
 801463c:	4b05      	ldr	r3, [pc, #20]	; (8014654 <HAL_ADC_ConvCpltCallback+0x38>)
 801463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014640:	2b00      	cmp	r3, #0
 8014642:	d1f2      	bne.n	801462a <HAL_ADC_ConvCpltCallback+0xe>
			g32AdcConversionStatus = TRUE;
 8014644:	4b03      	ldr	r3, [pc, #12]	; (8014654 <HAL_ADC_ConvCpltCallback+0x38>)
 8014646:	2201      	movs	r2, #1
 8014648:	625a      	str	r2, [r3, #36]	; 0x24
}
 801464a:	e7ee      	b.n	801462a <HAL_ADC_ConvCpltCallback+0xe>
 801464c:	40012000 	.word	0x40012000
 8014650:	40012200 	.word	0x40012200
 8014654:	20005f80 	.word	0x20005f80

08014658 <HAL_I2C_ErrorCallback>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8014658:	b508      	push	{r3, lr}
	assertError(enmTORERRORS_MEM_I2C,enmERRORSTATE_ACTIVE);
 801465a:	2101      	movs	r1, #1
 801465c:	200e      	movs	r0, #14
 801465e:	f7fb f929 	bl	800f8b4 <assertError>
}
 8014662:	bd08      	pop	{r3, pc}

08014664 <initMemoryRead>:
* <hr>
*
*******************************************************************************/
void initMemoryRead(void)
{
	gau8MemoryOperationRead[0] = FALSE;
 8014664:	4b0b      	ldr	r3, [pc, #44]	; (8014694 <initMemoryRead+0x30>)
 8014666:	2100      	movs	r1, #0
 8014668:	7119      	strb	r1, [r3, #4]
	gau8MemoryOperationRead[1] = TRUE;
 801466a:	2201      	movs	r2, #1
 801466c:	715a      	strb	r2, [r3, #5]
	gau8MemoryOperationRead[2] = TRUE;
 801466e:	719a      	strb	r2, [r3, #6]
	gau8MemoryOperationRead[3] = TRUE;
 8014670:	71da      	strb	r2, [r3, #7]
	gau8MemoryOperationRead[4] = TRUE;
 8014672:	721a      	strb	r2, [r3, #8]
	gau8MemoryOperationRead[5] = TRUE;
 8014674:	725a      	strb	r2, [r3, #9]
	gau8MemoryOperationRead[6] = TRUE;
 8014676:	729a      	strb	r2, [r3, #10]
	gau8MemoryOperationRead[7] = TRUE;
 8014678:	72da      	strb	r2, [r3, #11]
	gau8MemoryOperationRead[8] = TRUE;
 801467a:	731a      	strb	r2, [r3, #12]
	gau8MemoryOperationRead[9] = TRUE;
 801467c:	735a      	strb	r2, [r3, #13]
	gau8MemoryOperationRead[10] = TRUE;
 801467e:	739a      	strb	r2, [r3, #14]
	gau8MemoryOperationRead[11] = TRUE;
 8014680:	73da      	strb	r2, [r3, #15]
	gau8MemoryOperationRead[12] = TRUE;
 8014682:	741a      	strb	r2, [r3, #16]
	gau8MemoryOperationRead[13] = TRUE;
 8014684:	745a      	strb	r2, [r3, #17]
	gau8MemoryOperationRead[14] = TRUE;
 8014686:	749a      	strb	r2, [r3, #18]
	gau8MemoryOperationRead[15] = TRUE;
 8014688:	74da      	strb	r2, [r3, #19]
	gau8MemoryOperationRead[16] = TRUE;
 801468a:	751a      	strb	r2, [r3, #20]
	gau8MemoryOperationRead[17] = TRUE;
 801468c:	755a      	strb	r2, [r3, #21]
	gu32MemoryOperation = EEPROM_OPR_READ;
 801468e:	4b02      	ldr	r3, [pc, #8]	; (8014698 <initMemoryRead+0x34>)
 8014690:	7019      	strb	r1, [r3, #0]
}
 8014692:	4770      	bx	lr
 8014694:	20005fc0 	.word	0x20005fc0
 8014698:	20003830 	.word	0x20003830

0801469c <initSystemDefaultsfromMemory>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void initSystemDefaultsfromMemory(void)
{
 801469c:	b538      	push	{r3, r4, r5, lr}
	/* */
	if(strlen(strI2cEeprom.pu8NetworkAPN) != 0)
 801469e:	4b26      	ldr	r3, [pc, #152]	; (8014738 <initSystemDefaultsfromMemory+0x9c>)
 80146a0:	f893 3c16 	ldrb.w	r3, [r3, #3094]	; 0xc16
 80146a4:	b9b3      	cbnz	r3, 80146d4 <initSystemDefaultsfromMemory+0x38>
	{
		memset(gau8GSM4G_apn,0x00,sizeof(char) * 100);
		memcpy(gau8GSM4G_apn,strI2cEeprom.pu8NetworkAPN, strlen(strI2cEeprom.pu8NetworkAPN));
	}
	if(strlen(strI2cEeprom.pu8RdServerURL) != 0)
 80146a6:	4b24      	ldr	r3, [pc, #144]	; (8014738 <initSystemDefaultsfromMemory+0x9c>)
 80146a8:	f893 3c2a 	ldrb.w	r3, [r3, #3114]	; 0xc2a
 80146ac:	bb13      	cbnz	r3, 80146f4 <initSystemDefaultsfromMemory+0x58>
	{
		memset(gau8GSM_url,0x00,sizeof(char) * 100);
		memcpy( gau8GSM_url, strI2cEeprom.pu8RdServerURL, strlen(strI2cEeprom.pu8RdServerURL));
	}
	if(strlen(strI2cEeprom.pu8MobileNumber) != 0)
 80146ae:	4b22      	ldr	r3, [pc, #136]	; (8014738 <initSystemDefaultsfromMemory+0x9c>)
 80146b0:	f893 3c07 	ldrb.w	r3, [r3, #3079]	; 0xc07
 80146b4:	bb73      	cbnz	r3, 8014714 <initSystemDefaultsfromMemory+0x78>
	{
		memset(gau8GSM_smsto,0x00,sizeof(char) * 15);
		memcpy(gau8GSM_smsto, strI2cEeprom.pu8MobileNumber,strlen(strI2cEeprom.pu8MobileNumber));
	}
	gsmInstance.u32OFFPayloadUploadFreq = atoi(strI2cEeprom.pu8RdUploadOffFreq);
 80146b6:	4d21      	ldr	r5, [pc, #132]	; (801473c <initSystemDefaultsfromMemory+0xa0>)
 80146b8:	4628      	mov	r0, r5
 80146ba:	f000 fc79 	bl	8014fb0 <atoi>
 80146be:	4c20      	ldr	r4, [pc, #128]	; (8014740 <initSystemDefaultsfromMemory+0xa4>)
 80146c0:	f8c4 0e2c 	str.w	r0, [r4, #3628]	; 0xe2c
	gsmInstance.u32ONPayloadUploadFreq = atoi(strI2cEeprom.pu8RdUploadOnFreq);
 80146c4:	1f68      	subs	r0, r5, #5
 80146c6:	f000 fc73 	bl	8014fb0 <atoi>
 80146ca:	f8c4 0e28 	str.w	r0, [r4, #3624]	; 0xe28
	initGSMSIM868();
 80146ce:	f7fb fb55 	bl	800fd7c <initGSMSIM868>
}
 80146d2:	bd38      	pop	{r3, r4, r5, pc}
		memset(gau8GSM4G_apn,0x00,sizeof(char) * 100);
 80146d4:	4c1b      	ldr	r4, [pc, #108]	; (8014744 <initSystemDefaultsfromMemory+0xa8>)
 80146d6:	2264      	movs	r2, #100	; 0x64
 80146d8:	2100      	movs	r1, #0
 80146da:	4620      	mov	r0, r4
 80146dc:	f000 ff18 	bl	8015510 <memset>
		memcpy(gau8GSM4G_apn,strI2cEeprom.pu8NetworkAPN, strlen(strI2cEeprom.pu8NetworkAPN));
 80146e0:	4d19      	ldr	r5, [pc, #100]	; (8014748 <initSystemDefaultsfromMemory+0xac>)
 80146e2:	4628      	mov	r0, r5
 80146e4:	f7ef fd84 	bl	80041f0 <strlen>
 80146e8:	4602      	mov	r2, r0
 80146ea:	4629      	mov	r1, r5
 80146ec:	4620      	mov	r0, r4
 80146ee:	f000 ff01 	bl	80154f4 <memcpy>
 80146f2:	e7d8      	b.n	80146a6 <initSystemDefaultsfromMemory+0xa>
		memset(gau8GSM_url,0x00,sizeof(char) * 100);
 80146f4:	4c15      	ldr	r4, [pc, #84]	; (801474c <initSystemDefaultsfromMemory+0xb0>)
 80146f6:	2264      	movs	r2, #100	; 0x64
 80146f8:	2100      	movs	r1, #0
 80146fa:	4620      	mov	r0, r4
 80146fc:	f000 ff08 	bl	8015510 <memset>
		memcpy( gau8GSM_url, strI2cEeprom.pu8RdServerURL, strlen(strI2cEeprom.pu8RdServerURL));
 8014700:	4d13      	ldr	r5, [pc, #76]	; (8014750 <initSystemDefaultsfromMemory+0xb4>)
 8014702:	4628      	mov	r0, r5
 8014704:	f7ef fd74 	bl	80041f0 <strlen>
 8014708:	4602      	mov	r2, r0
 801470a:	4629      	mov	r1, r5
 801470c:	4620      	mov	r0, r4
 801470e:	f000 fef1 	bl	80154f4 <memcpy>
 8014712:	e7cc      	b.n	80146ae <initSystemDefaultsfromMemory+0x12>
		memset(gau8GSM_smsto,0x00,sizeof(char) * 15);
 8014714:	4c0f      	ldr	r4, [pc, #60]	; (8014754 <initSystemDefaultsfromMemory+0xb8>)
 8014716:	2300      	movs	r3, #0
 8014718:	6023      	str	r3, [r4, #0]
 801471a:	6063      	str	r3, [r4, #4]
 801471c:	60a3      	str	r3, [r4, #8]
 801471e:	f8c4 300b 	str.w	r3, [r4, #11]
		memcpy(gau8GSM_smsto, strI2cEeprom.pu8MobileNumber,strlen(strI2cEeprom.pu8MobileNumber));
 8014722:	4d0d      	ldr	r5, [pc, #52]	; (8014758 <initSystemDefaultsfromMemory+0xbc>)
 8014724:	4628      	mov	r0, r5
 8014726:	f7ef fd63 	bl	80041f0 <strlen>
 801472a:	4602      	mov	r2, r0
 801472c:	4629      	mov	r1, r5
 801472e:	4620      	mov	r0, r4
 8014730:	f000 fee0 	bl	80154f4 <memcpy>
 8014734:	e7bf      	b.n	80146b6 <initSystemDefaultsfromMemory+0x1a>
 8014736:	bf00      	nop
 8014738:	200103b4 	.word	0x200103b4
 801473c:	20011079 	.word	0x20011079
 8014740:	2000d390 	.word	0x2000d390
 8014744:	200005b0 	.word	0x200005b0
 8014748:	20010fca 	.word	0x20010fca
 801474c:	20000320 	.word	0x20000320
 8014750:	20010fde 	.word	0x20010fde
 8014754:	20000248 	.word	0x20000248
 8014758:	20010fbb 	.word	0x20010fbb

0801475c <HAL_I2C_MemRxCpltCallback>:
{
 801475c:	b508      	push	{r3, lr}
	if((gu8MemoryOperationStatus == 1) && (gu32I2CMemoryOperationTimeout !=0)
 801475e:	4b20      	ldr	r3, [pc, #128]	; (80147e0 <HAL_I2C_MemRxCpltCallback+0x84>)
 8014760:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8014764:	2b01      	cmp	r3, #1
 8014766:	d006      	beq.n	8014776 <HAL_I2C_MemRxCpltCallback+0x1a>
		if(gu32EEPROMInitforSerialFlash == 0)
 8014768:	4b1d      	ldr	r3, [pc, #116]	; (80147e0 <HAL_I2C_MemRxCpltCallback+0x84>)
 801476a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801476c:	b913      	cbnz	r3, 8014774 <HAL_I2C_MemRxCpltCallback+0x18>
			gu8SignatureReadFlag = TRUE;
 801476e:	4b1c      	ldr	r3, [pc, #112]	; (80147e0 <HAL_I2C_MemRxCpltCallback+0x84>)
 8014770:	2201      	movs	r2, #1
 8014772:	701a      	strb	r2, [r3, #0]
}
 8014774:	bd08      	pop	{r3, pc}
	if((gu8MemoryOperationStatus == 1) && (gu32I2CMemoryOperationTimeout !=0)
 8014776:	4b1b      	ldr	r3, [pc, #108]	; (80147e4 <HAL_I2C_MemRxCpltCallback+0x88>)
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d0f4      	beq.n	8014768 <HAL_I2C_MemRxCpltCallback+0xc>
			&& (gu8OperateSystemStatus != FALSE))
 801477e:	4b1a      	ldr	r3, [pc, #104]	; (80147e8 <HAL_I2C_MemRxCpltCallback+0x8c>)
 8014780:	789b      	ldrb	r3, [r3, #2]
 8014782:	2b00      	cmp	r3, #0
 8014784:	d0f0      	beq.n	8014768 <HAL_I2C_MemRxCpltCallback+0xc>
		if(gau8MemoryOperationRead[u8RdMemLoopCounter] == TRUE)
 8014786:	4b16      	ldr	r3, [pc, #88]	; (80147e0 <HAL_I2C_MemRxCpltCallback+0x84>)
 8014788:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801478c:	4413      	add	r3, r2
 801478e:	791b      	ldrb	r3, [r3, #4]
 8014790:	2b01      	cmp	r3, #1
 8014792:	d006      	beq.n	80147a2 <HAL_I2C_MemRxCpltCallback+0x46>
		gu8MemoryOperationStatus = 0;
 8014794:	2300      	movs	r3, #0
 8014796:	4a12      	ldr	r2, [pc, #72]	; (80147e0 <HAL_I2C_MemRxCpltCallback+0x84>)
 8014798:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
		gu32I2CMemoryOperationTimeout = 0;
 801479c:	4a11      	ldr	r2, [pc, #68]	; (80147e4 <HAL_I2C_MemRxCpltCallback+0x88>)
 801479e:	6013      	str	r3, [r2, #0]
 80147a0:	e7e8      	b.n	8014774 <HAL_I2C_MemRxCpltCallback+0x18>
			gau8MemoryOperationRead[u8RdMemLoopCounter] = FALSE;
 80147a2:	4b0f      	ldr	r3, [pc, #60]	; (80147e0 <HAL_I2C_MemRxCpltCallback+0x84>)
 80147a4:	1899      	adds	r1, r3, r2
 80147a6:	2000      	movs	r0, #0
 80147a8:	7108      	strb	r0, [r1, #4]
			u8RdMemLoopCounter ++;
 80147aa:	3201      	adds	r2, #1
 80147ac:	b2d2      	uxtb	r2, r2
 80147ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			if(u8RdMemLoopCounter >= I2CMEM_MAX_OPRATIONS)
 80147b2:	2a0e      	cmp	r2, #14
 80147b4:	d9ee      	bls.n	8014794 <HAL_I2C_MemRxCpltCallback+0x38>
				gu32MemoryOperation = EEPROM_OPR_IDLE;
 80147b6:	4a0c      	ldr	r2, [pc, #48]	; (80147e8 <HAL_I2C_MemRxCpltCallback+0x8c>)
 80147b8:	2302      	movs	r3, #2
 80147ba:	7013      	strb	r3, [r2, #0]
				u8RdMemLoopCounter = 0;
 80147bc:	4b08      	ldr	r3, [pc, #32]	; (80147e0 <HAL_I2C_MemRxCpltCallback+0x84>)
 80147be:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
				gu8MemoryRdOperationFlag = TRUE;
 80147c2:	2101      	movs	r1, #1
 80147c4:	f883 1026 	strb.w	r1, [r3, #38]	; 0x26
				gu8MemoryCycleComplete = TRUE;
 80147c8:	7051      	strb	r1, [r2, #1]
				if(gu8RestoreSystemSettings == TRUE)
 80147ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80147ce:	428b      	cmp	r3, r1
 80147d0:	d1e0      	bne.n	8014794 <HAL_I2C_MemRxCpltCallback+0x38>
					initSystemDefaultsfromMemory();
 80147d2:	f7ff ff63 	bl	801469c <initSystemDefaultsfromMemory>
					gu8RestoreSystemSettings = FALSE;
 80147d6:	4b02      	ldr	r3, [pc, #8]	; (80147e0 <HAL_I2C_MemRxCpltCallback+0x84>)
 80147d8:	2200      	movs	r2, #0
 80147da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80147de:	e7d9      	b.n	8014794 <HAL_I2C_MemRxCpltCallback+0x38>
 80147e0:	20005fc0 	.word	0x20005fc0
 80147e4:	20006160 	.word	0x20006160
 80147e8:	20003830 	.word	0x20003830

080147ec <systemReset>:
}


void systemReset(void)
{
	while(1);
 80147ec:	e7fe      	b.n	80147ec <systemReset>
	...

080147f0 <HAL_I2C_MemTxCpltCallback>:
{
 80147f0:	b508      	push	{r3, lr}
	if((gu8MemoryOperationStatus == 1) && (gu32I2CMemoryOperationTimeout !=0))
 80147f2:	4b25      	ldr	r3, [pc, #148]	; (8014888 <HAL_I2C_MemTxCpltCallback+0x98>)
 80147f4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80147f8:	2b01      	cmp	r3, #1
 80147fa:	d000      	beq.n	80147fe <HAL_I2C_MemTxCpltCallback+0xe>
}
 80147fc:	bd08      	pop	{r3, pc}
	if((gu8MemoryOperationStatus == 1) && (gu32I2CMemoryOperationTimeout !=0))
 80147fe:	4b23      	ldr	r3, [pc, #140]	; (801488c <HAL_I2C_MemTxCpltCallback+0x9c>)
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d0fa      	beq.n	80147fc <HAL_I2C_MemTxCpltCallback+0xc>
		if(gau8MemoryOperationWrite[u8WrMemLoopCounter] == TRUE)
 8014806:	4b20      	ldr	r3, [pc, #128]	; (8014888 <HAL_I2C_MemTxCpltCallback+0x98>)
 8014808:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801480c:	4413      	add	r3, r2
 801480e:	7d1b      	ldrb	r3, [r3, #20]
 8014810:	2b01      	cmp	r3, #1
 8014812:	d006      	beq.n	8014822 <HAL_I2C_MemTxCpltCallback+0x32>
		gu8MemoryOperationStatus = 0;
 8014814:	2300      	movs	r3, #0
 8014816:	4a1c      	ldr	r2, [pc, #112]	; (8014888 <HAL_I2C_MemTxCpltCallback+0x98>)
 8014818:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
		gu32I2CMemoryOperationTimeout = 0;
 801481c:	4a1b      	ldr	r2, [pc, #108]	; (801488c <HAL_I2C_MemTxCpltCallback+0x9c>)
 801481e:	6013      	str	r3, [r2, #0]
}
 8014820:	e7ec      	b.n	80147fc <HAL_I2C_MemTxCpltCallback+0xc>
			if(gu8PageWriteCycle == TRUE)
 8014822:	4b19      	ldr	r3, [pc, #100]	; (8014888 <HAL_I2C_MemTxCpltCallback+0x98>)
 8014824:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014828:	2b01      	cmp	r3, #1
 801482a:	d019      	beq.n	8014860 <HAL_I2C_MemTxCpltCallback+0x70>
				gau8MemoryOperationWrite[u8WrMemLoopCounter] = FALSE;
 801482c:	4b16      	ldr	r3, [pc, #88]	; (8014888 <HAL_I2C_MemTxCpltCallback+0x98>)
 801482e:	1899      	adds	r1, r3, r2
 8014830:	2000      	movs	r0, #0
 8014832:	7508      	strb	r0, [r1, #20]
				u8WrMemLoopCounter ++;
 8014834:	3201      	adds	r2, #1
 8014836:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			if(u8WrMemLoopCounter >= I2CMEM_MAX_OPRATIONS)
 801483a:	4b13      	ldr	r3, [pc, #76]	; (8014888 <HAL_I2C_MemTxCpltCallback+0x98>)
 801483c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014840:	2b0e      	cmp	r3, #14
 8014842:	d9e7      	bls.n	8014814 <HAL_I2C_MemTxCpltCallback+0x24>
				gu32MemoryOperation = EEPROM_OPR_READ;
 8014844:	4b12      	ldr	r3, [pc, #72]	; (8014890 <HAL_I2C_MemTxCpltCallback+0xa0>)
 8014846:	2200      	movs	r2, #0
 8014848:	701a      	strb	r2, [r3, #0]
				if(u32DefautParamWriteStatus == TRUE)
 801484a:	4b0f      	ldr	r3, [pc, #60]	; (8014888 <HAL_I2C_MemTxCpltCallback+0x98>)
 801484c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801484e:	2b01      	cmp	r3, #1
 8014850:	d018      	beq.n	8014884 <HAL_I2C_MemTxCpltCallback+0x94>
					initMemoryRead();
 8014852:	f7ff ff07 	bl	8014664 <initMemoryRead>
				u8WrMemLoopCounter = 0;
 8014856:	4b0c      	ldr	r3, [pc, #48]	; (8014888 <HAL_I2C_MemTxCpltCallback+0x98>)
 8014858:	2200      	movs	r2, #0
 801485a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 801485e:	e7d9      	b.n	8014814 <HAL_I2C_MemTxCpltCallback+0x24>
				if(gu8PageWriteCounter > cycleRequired)
 8014860:	4909      	ldr	r1, [pc, #36]	; (8014888 <HAL_I2C_MemTxCpltCallback+0x98>)
 8014862:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8014864:	6c89      	ldr	r1, [r1, #72]	; 0x48
 8014866:	428b      	cmp	r3, r1
 8014868:	d908      	bls.n	801487c <HAL_I2C_MemTxCpltCallback+0x8c>
					gau8MemoryOperationWrite[u8WrMemLoopCounter] = FALSE;
 801486a:	4b07      	ldr	r3, [pc, #28]	; (8014888 <HAL_I2C_MemTxCpltCallback+0x98>)
 801486c:	1898      	adds	r0, r3, r2
 801486e:	2100      	movs	r1, #0
 8014870:	7501      	strb	r1, [r0, #20]
					u8WrMemLoopCounter ++;
 8014872:	3201      	adds	r2, #1
 8014874:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
					gu8PageWriteCounter  = 0;
 8014878:	6319      	str	r1, [r3, #48]	; 0x30
 801487a:	e7de      	b.n	801483a <HAL_I2C_MemTxCpltCallback+0x4a>
					gu8PageWriteCounter ++;
 801487c:	3301      	adds	r3, #1
 801487e:	4a02      	ldr	r2, [pc, #8]	; (8014888 <HAL_I2C_MemTxCpltCallback+0x98>)
 8014880:	6313      	str	r3, [r2, #48]	; 0x30
 8014882:	e7da      	b.n	801483a <HAL_I2C_MemTxCpltCallback+0x4a>
					systemReset();						/* IDWT will reset the system */
 8014884:	f7ff ffb2 	bl	80147ec <systemReset>
 8014888:	20005fc0 	.word	0x20005fc0
 801488c:	20006160 	.word	0x20006160
 8014890:	20003830 	.word	0x20003830

08014894 <updateEthLinkStatus>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void updateEthLinkStatus(void)
{
 8014894:	b510      	push	{r4, lr}
	HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &gu32EthLinkStatus);
 8014896:	4c09      	ldr	r4, [pc, #36]	; (80148bc <updateEthLinkStatus+0x28>)
 8014898:	4622      	mov	r2, r4
 801489a:	2101      	movs	r1, #1
 801489c:	4808      	ldr	r0, [pc, #32]	; (80148c0 <updateEthLinkStatus+0x2c>)
 801489e:	f7f1 fcea 	bl	8006276 <HAL_ETH_ReadPHYRegister>
	if((gu32EthLinkStatus & PHY_LINKED_STATUS) != PHY_LINKED_STATUS)
 80148a2:	6823      	ldr	r3, [r4, #0]
 80148a4:	f013 0f04 	tst.w	r3, #4
 80148a8:	d103      	bne.n	80148b2 <updateEthLinkStatus+0x1e>
		gu32EthLinkAlert = 1;
 80148aa:	4b06      	ldr	r3, [pc, #24]	; (80148c4 <updateEthLinkStatus+0x30>)
 80148ac:	2201      	movs	r2, #1
 80148ae:	601a      	str	r2, [r3, #0]
	else
		gu32EthLinkAlert = 0;
}
 80148b0:	bd10      	pop	{r4, pc}
		gu32EthLinkAlert = 0;
 80148b2:	4b04      	ldr	r3, [pc, #16]	; (80148c4 <updateEthLinkStatus+0x30>)
 80148b4:	2200      	movs	r2, #0
 80148b6:	601a      	str	r2, [r3, #0]
}
 80148b8:	e7fa      	b.n	80148b0 <updateEthLinkStatus+0x1c>
 80148ba:	bf00      	nop
 80148bc:	20006020 	.word	0x20006020
 80148c0:	2000b1b4 	.word	0x2000b1b4
 80148c4:	2000383c 	.word	0x2000383c

080148c8 <GetSector>:
  */
static uint32_t GetSector(uint32_t Address)
{
  uint32_t sector = 0;

  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 80148c8:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 80148cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80148d0:	f0c0 809a 	bcc.w	8014a08 <GetSector+0x140>
  {
    sector = FLASH_SECTOR_0;
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 80148d4:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80148d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80148dc:	f0c0 8096 	bcc.w	8014a0c <GetSector+0x144>
  {
    sector = FLASH_SECTOR_1;
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 80148e0:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 80148e4:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80148e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80148ec:	f0c0 8090 	bcc.w	8014a10 <GetSector+0x148>
  {
    sector = FLASH_SECTOR_2;
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 80148f0:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 80148f4:	f5a3 4340 	sub.w	r3, r3, #49152	; 0xc000
 80148f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80148fc:	f0c0 808a 	bcc.w	8014a14 <GetSector+0x14c>
  {
    sector = FLASH_SECTOR_3;
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8014900:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 8014904:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8014908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801490c:	f0c0 8084 	bcc.w	8014a18 <GetSector+0x150>
  {
    sector = FLASH_SECTOR_4;
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 8014910:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 8014914:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8014918:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801491c:	d37e      	bcc.n	8014a1c <GetSector+0x154>
  {
    sector = FLASH_SECTOR_5;
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 801491e:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 8014922:	f503 037c 	add.w	r3, r3, #16515072	; 0xfc0000
 8014926:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801492a:	d379      	bcc.n	8014a20 <GetSector+0x158>
  {
    sector = FLASH_SECTOR_6;
  }
  else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 801492c:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 8014930:	f503 037a 	add.w	r3, r3, #16384000	; 0xfa0000
 8014934:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014938:	d374      	bcc.n	8014a24 <GetSector+0x15c>
  {
    sector = FLASH_SECTOR_7;
  }
  else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 801493a:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 801493e:	f503 0378 	add.w	r3, r3, #16252928	; 0xf80000
 8014942:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014946:	d36f      	bcc.n	8014a28 <GetSector+0x160>
  {
    sector = FLASH_SECTOR_8;
  }
  else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 8014948:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 801494c:	f503 0376 	add.w	r3, r3, #16121856	; 0xf60000
 8014950:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014954:	d36a      	bcc.n	8014a2c <GetSector+0x164>
  {
    sector = FLASH_SECTOR_9;
  }
  else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 8014956:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 801495a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 801495e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014962:	d365      	bcc.n	8014a30 <GetSector+0x168>
  {
    sector = FLASH_SECTOR_10;
  }
  else if((Address < ADDR_FLASH_SECTOR_12) && (Address >= ADDR_FLASH_SECTOR_11))
 8014964:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 8014968:	f503 0372 	add.w	r3, r3, #15859712	; 0xf20000
 801496c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014970:	d360      	bcc.n	8014a34 <GetSector+0x16c>
  {
    sector = FLASH_SECTOR_11;
  }
  else if((Address < ADDR_FLASH_SECTOR_13) && (Address >= ADDR_FLASH_SECTOR_12))
 8014972:	f1a0 6301 	sub.w	r3, r0, #135266304	; 0x8100000
 8014976:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801497a:	d35d      	bcc.n	8014a38 <GetSector+0x170>
  {
    sector = FLASH_SECTOR_12;
  }
  else if((Address < ADDR_FLASH_SECTOR_14) && (Address >= ADDR_FLASH_SECTOR_13))
 801497c:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8014980:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014984:	d35a      	bcc.n	8014a3c <GetSector+0x174>
  {
    sector = FLASH_SECTOR_13;
  }
  else if((Address < ADDR_FLASH_SECTOR_15) && (Address >= ADDR_FLASH_SECTOR_14))
 8014986:	f1a0 6301 	sub.w	r3, r0, #135266304	; 0x8100000
 801498a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 801498e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014992:	d355      	bcc.n	8014a40 <GetSector+0x178>
  {
    sector = FLASH_SECTOR_14;
  }
  else if((Address < ADDR_FLASH_SECTOR_16) && (Address >= ADDR_FLASH_SECTOR_15))
 8014994:	f1a0 6301 	sub.w	r3, r0, #135266304	; 0x8100000
 8014998:	f5a3 4340 	sub.w	r3, r3, #49152	; 0xc000
 801499c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80149a0:	d350      	bcc.n	8014a44 <GetSector+0x17c>
  {
    sector = FLASH_SECTOR_15;
  }
  else if((Address < ADDR_FLASH_SECTOR_17) && (Address >= ADDR_FLASH_SECTOR_16))
 80149a2:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 80149a6:	f503 036f 	add.w	r3, r3, #15663104	; 0xef0000
 80149aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80149ae:	d34b      	bcc.n	8014a48 <GetSector+0x180>
  {
    sector = FLASH_SECTOR_16;
  }
  else if((Address < ADDR_FLASH_SECTOR_18) && (Address >= ADDR_FLASH_SECTOR_17))
 80149b0:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 80149b4:	f503 036e 	add.w	r3, r3, #15597568	; 0xee0000
 80149b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80149bc:	d346      	bcc.n	8014a4c <GetSector+0x184>
  {
    sector = FLASH_SECTOR_17;
  }
  else if((Address < ADDR_FLASH_SECTOR_19) && (Address >= ADDR_FLASH_SECTOR_18))
 80149be:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 80149c2:	f503 036c 	add.w	r3, r3, #15466496	; 0xec0000
 80149c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80149ca:	d341      	bcc.n	8014a50 <GetSector+0x188>
  {
    sector = FLASH_SECTOR_18;
  }
  else if((Address < ADDR_FLASH_SECTOR_20) && (Address >= ADDR_FLASH_SECTOR_19))
 80149cc:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 80149d0:	f503 036a 	add.w	r3, r3, #15335424	; 0xea0000
 80149d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80149d8:	d33c      	bcc.n	8014a54 <GetSector+0x18c>
  {
    sector = FLASH_SECTOR_19;
  }
  else if((Address < ADDR_FLASH_SECTOR_21) && (Address >= ADDR_FLASH_SECTOR_20))
 80149da:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 80149de:	f503 0368 	add.w	r3, r3, #15204352	; 0xe80000
 80149e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80149e6:	d337      	bcc.n	8014a58 <GetSector+0x190>
  {
    sector = FLASH_SECTOR_20;
  }
  else if((Address < ADDR_FLASH_SECTOR_22) && (Address >= ADDR_FLASH_SECTOR_21))
 80149e8:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 80149ec:	f503 0366 	add.w	r3, r3, #15073280	; 0xe60000
 80149f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80149f4:	d332      	bcc.n	8014a5c <GetSector+0x194>
  {
    sector = FLASH_SECTOR_21;
  }
  else if((Address < ADDR_FLASH_SECTOR_23) && (Address >= ADDR_FLASH_SECTOR_22))
 80149f6:	f100 4077 	add.w	r0, r0, #4143972352	; 0xf7000000
 80149fa:	f500 0064 	add.w	r0, r0, #14942208	; 0xe40000
 80149fe:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
 8014a02:	d22d      	bcs.n	8014a60 <GetSector+0x198>
  {
    sector = FLASH_SECTOR_22;
 8014a04:	2016      	movs	r0, #22
 8014a06:	4770      	bx	lr
    sector = FLASH_SECTOR_0;
 8014a08:	2000      	movs	r0, #0
 8014a0a:	4770      	bx	lr
    sector = FLASH_SECTOR_1;
 8014a0c:	2001      	movs	r0, #1
 8014a0e:	4770      	bx	lr
    sector = FLASH_SECTOR_2;
 8014a10:	2002      	movs	r0, #2
 8014a12:	4770      	bx	lr
    sector = FLASH_SECTOR_3;
 8014a14:	2003      	movs	r0, #3
 8014a16:	4770      	bx	lr
    sector = FLASH_SECTOR_4;
 8014a18:	2004      	movs	r0, #4
 8014a1a:	4770      	bx	lr
    sector = FLASH_SECTOR_5;
 8014a1c:	2005      	movs	r0, #5
 8014a1e:	4770      	bx	lr
    sector = FLASH_SECTOR_6;
 8014a20:	2006      	movs	r0, #6
 8014a22:	4770      	bx	lr
    sector = FLASH_SECTOR_7;
 8014a24:	2007      	movs	r0, #7
 8014a26:	4770      	bx	lr
    sector = FLASH_SECTOR_8;
 8014a28:	2008      	movs	r0, #8
 8014a2a:	4770      	bx	lr
    sector = FLASH_SECTOR_9;
 8014a2c:	2009      	movs	r0, #9
 8014a2e:	4770      	bx	lr
    sector = FLASH_SECTOR_10;
 8014a30:	200a      	movs	r0, #10
 8014a32:	4770      	bx	lr
    sector = FLASH_SECTOR_11;
 8014a34:	200b      	movs	r0, #11
 8014a36:	4770      	bx	lr
    sector = FLASH_SECTOR_12;
 8014a38:	200c      	movs	r0, #12
 8014a3a:	4770      	bx	lr
    sector = FLASH_SECTOR_13;
 8014a3c:	200d      	movs	r0, #13
 8014a3e:	4770      	bx	lr
    sector = FLASH_SECTOR_14;
 8014a40:	200e      	movs	r0, #14
 8014a42:	4770      	bx	lr
    sector = FLASH_SECTOR_15;
 8014a44:	200f      	movs	r0, #15
 8014a46:	4770      	bx	lr
    sector = FLASH_SECTOR_16;
 8014a48:	2010      	movs	r0, #16
 8014a4a:	4770      	bx	lr
    sector = FLASH_SECTOR_17;
 8014a4c:	2011      	movs	r0, #17
 8014a4e:	4770      	bx	lr
    sector = FLASH_SECTOR_18;
 8014a50:	2012      	movs	r0, #18
 8014a52:	4770      	bx	lr
    sector = FLASH_SECTOR_19;
 8014a54:	2013      	movs	r0, #19
 8014a56:	4770      	bx	lr
    sector = FLASH_SECTOR_20;
 8014a58:	2014      	movs	r0, #20
 8014a5a:	4770      	bx	lr
    sector = FLASH_SECTOR_21;
 8014a5c:	2015      	movs	r0, #21
 8014a5e:	4770      	bx	lr
  }
  else/*(Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_23))*/
  {
    sector = FLASH_SECTOR_23;
 8014a60:	2017      	movs	r0, #23
  }
  return sector;
}
 8014a62:	4770      	bx	lr

08014a64 <FLASH_If_Init>:
{
 8014a64:	b508      	push	{r3, lr}
  HAL_FLASH_Unlock();
 8014a66:	f7f1 fee7 	bl	8006838 <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8014a6a:	4b02      	ldr	r3, [pc, #8]	; (8014a74 <FLASH_If_Init+0x10>)
 8014a6c:	22f3      	movs	r2, #243	; 0xf3
 8014a6e:	60da      	str	r2, [r3, #12]
}
 8014a70:	bd08      	pop	{r3, pc}
 8014a72:	bf00      	nop
 8014a74:	40023c00 	.word	0x40023c00

08014a78 <FLASH_If_Erase>:
{
 8014a78:	b510      	push	{r4, lr}
 8014a7a:	b086      	sub	sp, #24
 8014a7c:	4604      	mov	r4, r0
  FLASH_If_Init();
 8014a7e:	f7ff fff1 	bl	8014a64 <FLASH_If_Init>
  UserStartSector = GetSector(StartSector);
 8014a82:	4620      	mov	r0, r4
 8014a84:	f7ff ff20 	bl	80148c8 <GetSector>
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8014a88:	2300      	movs	r3, #0
 8014a8a:	9300      	str	r3, [sp, #0]
  pEraseInit.Sector = UserStartSector;
 8014a8c:	9002      	str	r0, [sp, #8]
  pEraseInit.NbSectors = 1;
 8014a8e:	2301      	movs	r3, #1
 8014a90:	9303      	str	r3, [sp, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE_3;
 8014a92:	2302      	movs	r3, #2
 8014a94:	9304      	str	r3, [sp, #16]
  if (HAL_FLASHEx_Erase(&pEraseInit, &SectorError) != HAL_OK)
 8014a96:	a905      	add	r1, sp, #20
 8014a98:	4668      	mov	r0, sp
 8014a9a:	f7f1 ffe1 	bl	8006a60 <HAL_FLASHEx_Erase>
 8014a9e:	b908      	cbnz	r0, 8014aa4 <FLASH_If_Erase+0x2c>
}
 8014aa0:	b006      	add	sp, #24
 8014aa2:	bd10      	pop	{r4, pc}
     return (1);
 8014aa4:	2001      	movs	r0, #1
 8014aa6:	e7fb      	b.n	8014aa0 <FLASH_If_Erase+0x28>

08014aa8 <FLASH_If_Write>:
{
 8014aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014aaa:	4604      	mov	r4, r0
 8014aac:	460e      	mov	r6, r1
 8014aae:	4617      	mov	r7, r2
  FLASH_If_Init();
 8014ab0:	f7ff ffd8 	bl	8014a64 <FLASH_If_Init>
  for (i = 0; (i < (DataLength / 4)) && (FlashAddress <= (USER_FLASH_END_ADDRESS - 4)); i++)//USER_FLASH_END_ADDRESS
 8014ab4:	2500      	movs	r5, #0
 8014ab6:	e003      	b.n	8014ac0 <FLASH_If_Write+0x18>
      FlashAddress += 4;
 8014ab8:	3404      	adds	r4, #4
      u32LastMemoryWriteLocation = FlashAddress;
 8014aba:	4b13      	ldr	r3, [pc, #76]	; (8014b08 <FLASH_If_Write+0x60>)
 8014abc:	601c      	str	r4, [r3, #0]
  for (i = 0; (i < (DataLength / 4)) && (FlashAddress <= (USER_FLASH_END_ADDRESS - 4)); i++)//USER_FLASH_END_ADDRESS
 8014abe:	3501      	adds	r5, #1
 8014ac0:	ebb5 0f97 	cmp.w	r5, r7, lsr #2
 8014ac4:	d219      	bcs.n	8014afa <FLASH_If_Write+0x52>
 8014ac6:	4b11      	ldr	r3, [pc, #68]	; (8014b0c <FLASH_If_Write+0x64>)
 8014ac8:	429c      	cmp	r4, r3
 8014aca:	d816      	bhi.n	8014afa <FLASH_If_Write+0x52>
    if (HAL_FLASH_Program(TYPEPROGRAM_WORD, FlashAddress, *(uint32_t*)(Data+i)) == HAL_OK)
 8014acc:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
 8014ad0:	2300      	movs	r3, #0
 8014ad2:	4621      	mov	r1, r4
 8014ad4:	2002      	movs	r0, #2
 8014ad6:	f7f1 ff01 	bl	80068dc <HAL_FLASH_Program>
 8014ada:	b948      	cbnz	r0, 8014af0 <FLASH_If_Write+0x48>
      if (*(uint32_t*)FlashAddress != *(uint32_t*)(Data+i))
 8014adc:	6821      	ldr	r1, [r4, #0]
 8014ade:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014ae2:	4299      	cmp	r1, r3
 8014ae4:	d0e8      	beq.n	8014ab8 <FLASH_If_Write+0x10>
    	Diagnostic(enmDiagnostic_MEM_WR_CHK_SUM_ERROR);
 8014ae6:	200b      	movs	r0, #11
 8014ae8:	f7fb fd04 	bl	80104f4 <Diagnostic>
        return(FLASHIF_WRITINGCTRL_ERROR);
 8014aec:	2002      	movs	r0, #2
 8014aee:	e009      	b.n	8014b04 <FLASH_If_Write+0x5c>
    	Diagnostic(enmDiagnostic_MEM_WR_ERROR);
 8014af0:	200a      	movs	r0, #10
 8014af2:	f7fb fcff 	bl	80104f4 <Diagnostic>
    	return (FLASHIF_WRITING_ERROR);
 8014af6:	2003      	movs	r0, #3
 8014af8:	e004      	b.n	8014b04 <FLASH_If_Write+0x5c>
  u32LastMemoryWriteLocation = FlashAddress;
 8014afa:	4b03      	ldr	r3, [pc, #12]	; (8014b08 <FLASH_If_Write+0x60>)
 8014afc:	601c      	str	r4, [r3, #0]
  HAL_FLASH_Lock();
 8014afe:	f7f1 feb3 	bl	8006868 <HAL_FLASH_Lock>
  return (FLASHIF_OK);
 8014b02:	2000      	movs	r0, #0
}
 8014b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b06:	bf00      	nop
 8014b08:	20006024 	.word	0x20006024
 8014b0c:	081dfffc 	.word	0x081dfffc

08014b10 <WriteDatatoFlash>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      26-07-2021			Initial Definition
******************************************************************************/
uint32_t WriteDatatoFlash(uint32_t Sector,uint8_t *data,uint32_t configLen,uint32_t writeCycle)
{
 8014b10:	b508      	push	{r3, lr}
	if(FLASH_If_Write(Sector,(uint32_t*)data,configLen) == FLASHIF_OK)
 8014b12:	f7ff ffc9 	bl	8014aa8 <FLASH_If_Write>
 8014b16:	b100      	cbz	r0, 8014b1a <WriteDatatoFlash+0xa>
		return SUCCESS;
	else
		return ERROR;
 8014b18:	2001      	movs	r0, #1
}
 8014b1a:	bd08      	pop	{r3, pc}

08014b1c <FLASH_If_Erase_User>:
 Author            	Date                Remarks
 KloudQ Team        26/03/2020			initial Definitions
 Kloudq Team		28/04/2020			Memory Segment Logic Added
******************************************************************************/
uint32_t FLASH_If_Erase_User(uint32_t start,enmBootMemorySegment memorySegment)
{
 8014b1c:	b510      	push	{r4, lr}
 8014b1e:	b086      	sub	sp, #24
 8014b20:	460c      	mov	r4, r1
	uint32_t UserStartSector;
	uint32_t SectorError;
	FLASH_EraseInitTypeDef pEraseInit;

	/* Unlock the Flash to enable the flash control register access *************/
	FLASH_If_Init();
 8014b22:	f7ff ff9f 	bl	8014a64 <FLASH_If_Init>

  /* Get the sector where start the user flash area */
  if(memorySegment == enmBOOTSEGMENT_X_JUMP)
 8014b26:	2c58      	cmp	r4, #88	; 0x58
 8014b28:	d009      	beq.n	8014b3e <FLASH_If_Erase_User+0x22>
	  else
		  pEraseInit.NbSectors = 1;
	  pEraseInit.VoltageRange = VOLTAGE_RANGE_3;

  }
  else if(memorySegment == enmBOOTSEGMENT_Y_JUMP)
 8014b2a:	2c59      	cmp	r4, #89	; 0x59
 8014b2c:	d018      	beq.n	8014b60 <FLASH_If_Erase_User+0x44>
		  pEraseInit.NbSectors = 1;
	  pEraseInit.VoltageRange = VOLTAGE_RANGE_3;
  }
  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
	if (HAL_FLASHEx_Erase(&pEraseInit, &SectorError) != HAL_OK)
 8014b2e:	a905      	add	r1, sp, #20
 8014b30:	4668      	mov	r0, sp
 8014b32:	f7f1 ff95 	bl	8006a60 <HAL_FLASHEx_Erase>
 8014b36:	bb20      	cbnz	r0, 8014b82 <FLASH_If_Erase_User+0x66>
	{
		/* Error occurred while page erase */
		return (FLASHIF_WRITING_ERROR);
	}
	else
		return (FLASHIF_OK);
 8014b38:	2000      	movs	r0, #0
}
 8014b3a:	b006      	add	sp, #24
 8014b3c:	bd10      	pop	{r4, pc}
	  UserStartSector = GetSector(APPLICATION_ADD_X);
 8014b3e:	4812      	ldr	r0, [pc, #72]	; (8014b88 <FLASH_If_Erase_User+0x6c>)
 8014b40:	f7ff fec2 	bl	80148c8 <GetSector>
	  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8014b44:	2300      	movs	r3, #0
 8014b46:	9300      	str	r3, [sp, #0]
	  pEraseInit.Sector = UserStartSector;
 8014b48:	9002      	str	r0, [sp, #8]
	  if(u32ConfigFileReadComplete == 0)
 8014b4a:	4b10      	ldr	r3, [pc, #64]	; (8014b8c <FLASH_If_Erase_User+0x70>)
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	b923      	cbnz	r3, 8014b5a <FLASH_If_Erase_User+0x3e>
		  pEraseInit.NbSectors = 10;
 8014b50:	230a      	movs	r3, #10
 8014b52:	9303      	str	r3, [sp, #12]
	  pEraseInit.VoltageRange = VOLTAGE_RANGE_3;
 8014b54:	2302      	movs	r3, #2
 8014b56:	9304      	str	r3, [sp, #16]
 8014b58:	e7e9      	b.n	8014b2e <FLASH_If_Erase_User+0x12>
		  pEraseInit.NbSectors = 1;
 8014b5a:	2301      	movs	r3, #1
 8014b5c:	9303      	str	r3, [sp, #12]
 8014b5e:	e7f9      	b.n	8014b54 <FLASH_If_Erase_User+0x38>
	  UserStartSector = GetSector(APPLICATION_ADD_Y);
 8014b60:	480b      	ldr	r0, [pc, #44]	; (8014b90 <FLASH_If_Erase_User+0x74>)
 8014b62:	f7ff feb1 	bl	80148c8 <GetSector>
	  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8014b66:	2300      	movs	r3, #0
 8014b68:	9300      	str	r3, [sp, #0]
	  pEraseInit.Sector = UserStartSector;
 8014b6a:	9002      	str	r0, [sp, #8]
	  if(u32ConfigFileReadComplete == 0)
 8014b6c:	4b07      	ldr	r3, [pc, #28]	; (8014b8c <FLASH_If_Erase_User+0x70>)
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	b923      	cbnz	r3, 8014b7c <FLASH_If_Erase_User+0x60>
		  pEraseInit.NbSectors = 10;
 8014b72:	230a      	movs	r3, #10
 8014b74:	9303      	str	r3, [sp, #12]
	  pEraseInit.VoltageRange = VOLTAGE_RANGE_3;
 8014b76:	2302      	movs	r3, #2
 8014b78:	9304      	str	r3, [sp, #16]
 8014b7a:	e7d8      	b.n	8014b2e <FLASH_If_Erase_User+0x12>
		  pEraseInit.NbSectors = 1;
 8014b7c:	2301      	movs	r3, #1
 8014b7e:	9303      	str	r3, [sp, #12]
 8014b80:	e7f9      	b.n	8014b76 <FLASH_If_Erase_User+0x5a>
		return (FLASHIF_WRITING_ERROR);
 8014b82:	2003      	movs	r0, #3
 8014b84:	e7d9      	b.n	8014b3a <FLASH_If_Erase_User+0x1e>
 8014b86:	bf00      	nop
 8014b88:	08004000 	.word	0x08004000
 8014b8c:	200044bc 	.word	0x200044bc
 8014b90:	08104000 	.word	0x08104000

08014b94 <getNewFirmwareStorageLocation>:
 KloudQ Team        30/03/2020			initial Definitions
******************************************************************************/
/* TODO:  Need to take care for empty memory  */
enmBootMemorySegment getNewFirmwareStorageLocation(void)
{
	if(BOOTMEMORYINFO == enmBOOTSEGMENT_X_JUMP)
 8014b94:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	2b58      	cmp	r3, #88	; 0x58
 8014b9c:	d009      	beq.n	8014bb2 <getNewFirmwareStorageLocation+0x1e>
			u32LastMemoryWriteLocation = APPLICATION_ADD_X;

		return enmBOOTSEGMENT_X_JUMP;

	}
	else if(BOOTMEMORYINFO == enmBOOTSEGMENT_Y_JUMP)
 8014b9e:	2b59      	cmp	r3, #89	; 0x59
 8014ba0:	d00f      	beq.n	8014bc2 <getNewFirmwareStorageLocation+0x2e>
		return enmBOOTSEGMENT_Y_JUMP;
	}
	else
	{
		/* Illegal Firmware Information . Abort FOTA Jumping */
		if(u32ConfigFileReadComplete == 0)
 8014ba2:	4b0c      	ldr	r3, [pc, #48]	; (8014bd4 <getNewFirmwareStorageLocation+0x40>)
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	b913      	cbnz	r3, 8014bae <getNewFirmwareStorageLocation+0x1a>
			u32LastMemoryWriteLocation = APPLICATION_ADD_Y;
 8014ba8:	4b0b      	ldr	r3, [pc, #44]	; (8014bd8 <getNewFirmwareStorageLocation+0x44>)
 8014baa:	4a0c      	ldr	r2, [pc, #48]	; (8014bdc <getNewFirmwareStorageLocation+0x48>)
 8014bac:	601a      	str	r2, [r3, #0]

		return enmBOOTSEGMENT_Y_JUMP;//enmBOOTSEGMENT_UNKNOWN;
 8014bae:	2059      	movs	r0, #89	; 0x59
	}
}
 8014bb0:	4770      	bx	lr
		if(u32ConfigFileReadComplete == 0)
 8014bb2:	4b08      	ldr	r3, [pc, #32]	; (8014bd4 <getNewFirmwareStorageLocation+0x40>)
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	b913      	cbnz	r3, 8014bbe <getNewFirmwareStorageLocation+0x2a>
			u32LastMemoryWriteLocation = APPLICATION_ADD_X;
 8014bb8:	4b07      	ldr	r3, [pc, #28]	; (8014bd8 <getNewFirmwareStorageLocation+0x44>)
 8014bba:	4a09      	ldr	r2, [pc, #36]	; (8014be0 <getNewFirmwareStorageLocation+0x4c>)
 8014bbc:	601a      	str	r2, [r3, #0]
		return enmBOOTSEGMENT_X_JUMP;
 8014bbe:	2058      	movs	r0, #88	; 0x58
 8014bc0:	4770      	bx	lr
		if(u32ConfigFileReadComplete == 0)
 8014bc2:	4b04      	ldr	r3, [pc, #16]	; (8014bd4 <getNewFirmwareStorageLocation+0x40>)
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	b913      	cbnz	r3, 8014bce <getNewFirmwareStorageLocation+0x3a>
			u32LastMemoryWriteLocation = APPLICATION_ADD_Y;
 8014bc8:	4b03      	ldr	r3, [pc, #12]	; (8014bd8 <getNewFirmwareStorageLocation+0x44>)
 8014bca:	4a04      	ldr	r2, [pc, #16]	; (8014bdc <getNewFirmwareStorageLocation+0x48>)
 8014bcc:	601a      	str	r2, [r3, #0]
		return enmBOOTSEGMENT_Y_JUMP;
 8014bce:	2059      	movs	r0, #89	; 0x59
 8014bd0:	4770      	bx	lr
 8014bd2:	bf00      	nop
 8014bd4:	200044bc 	.word	0x200044bc
 8014bd8:	20006024 	.word	0x20006024
 8014bdc:	08104000 	.word	0x08104000
 8014be0:	08004000 	.word	0x08004000

08014be4 <flashWriteBootSection>:
 KloudQ Team        26/03/2020			initial Definitions
 Kloudq Team		27/03/2020			Wr/Rd Tested , Timeout added
******************************************************************************/
uint32_t gu32DataFromMemory = 0;
uint32_t flashWriteBootSection(enmBootMemorySegment memorySegment)
{
 8014be4:	b538      	push	{r3, r4, r5, lr}
 8014be6:	4604      	mov	r4, r0
	uint32_t status = 0;
	if(FLASH_If_Erase(ADDR_FLASH_SECTOR_12) != FLASHIF_OK)
 8014be8:	f04f 6001 	mov.w	r0, #135266304	; 0x8100000
 8014bec:	f7ff ff44 	bl	8014a78 <FLASH_If_Erase>
 8014bf0:	b9d0      	cbnz	r0, 8014c28 <flashWriteBootSection+0x44>
 8014bf2:	4605      	mov	r5, r0
		status = 1;
	}
	else
	{
		/* FOTA Storage location update  */
		switch(memorySegment)
 8014bf4:	2c58      	cmp	r4, #88	; 0x58
 8014bf6:	d003      	beq.n	8014c00 <flashWriteBootSection+0x1c>
 8014bf8:	2c59      	cmp	r4, #89	; 0x59
 8014bfa:	d00b      	beq.n	8014c14 <flashWriteBootSection+0x30>
 8014bfc:	2501      	movs	r5, #1
 8014bfe:	e014      	b.n	8014c2a <flashWriteBootSection+0x46>
		{

			case enmBOOTSEGMENT_X_JUMP:
				u32LastMemoryWriteLocation = ADDR_FLASH_SECTOR_12;
 8014c00:	f04f 6101 	mov.w	r1, #135266304	; 0x8100000
 8014c04:	4b0a      	ldr	r3, [pc, #40]	; (8014c30 <flashWriteBootSection+0x4c>)
 8014c06:	6019      	str	r1, [r3, #0]
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, u32LastMemoryWriteLocation,(uint32_t)0x58) == HAL_OK)
 8014c08:	2258      	movs	r2, #88	; 0x58
 8014c0a:	2300      	movs	r3, #0
 8014c0c:	2002      	movs	r0, #2
 8014c0e:	f7f1 fe65 	bl	80068dc <HAL_FLASH_Program>
 8014c12:	e00a      	b.n	8014c2a <flashWriteBootSection+0x46>
					status = 0;
				}
				break;

			case enmBOOTSEGMENT_Y_JUMP:
				u32LastMemoryWriteLocation = ADDR_FLASH_SECTOR_12;
 8014c14:	f04f 6101 	mov.w	r1, #135266304	; 0x8100000
 8014c18:	4b05      	ldr	r3, [pc, #20]	; (8014c30 <flashWriteBootSection+0x4c>)
 8014c1a:	6019      	str	r1, [r3, #0]
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, u32LastMemoryWriteLocation,(uint32_t)0x59) == HAL_OK)
 8014c1c:	2259      	movs	r2, #89	; 0x59
 8014c1e:	2300      	movs	r3, #0
 8014c20:	2002      	movs	r0, #2
 8014c22:	f7f1 fe5b 	bl	80068dc <HAL_FLASH_Program>
 8014c26:	e000      	b.n	8014c2a <flashWriteBootSection+0x46>
		status = 1;
 8014c28:	2501      	movs	r5, #1
				status = 1;
				break;
		}
	}
	return status;
}
 8014c2a:	4628      	mov	r0, r5
 8014c2c:	bd38      	pop	{r3, r4, r5, pc}
 8014c2e:	bf00      	nop
 8014c30:	20006024 	.word	0x20006024

08014c34 <HAL_RTCEx_WakeUpTimerEventCallback>:
*******************************************************************************/

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
	//HAL_GPIO_TogglePin(LED_1_GPIO_Port,LED_1_Pin);
}
 8014c34:	4770      	bx	lr

08014c36 <HAL_RTC_AlarmAEventCallback>:
*
*******************************************************************************/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{

}
 8014c36:	4770      	bx	lr

08014c38 <getRTCCalender>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void getRTCCalender(void)
{
 8014c38:	b570      	push	{r4, r5, r6, lr}
 8014c3a:	b082      	sub	sp, #8

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 8014c3c:	4d11      	ldr	r5, [pc, #68]	; (8014c84 <getRTCCalender+0x4c>)
 8014c3e:	4e12      	ldr	r6, [pc, #72]	; (8014c88 <getRTCCalender+0x50>)
 8014c40:	2200      	movs	r2, #0
 8014c42:	4629      	mov	r1, r5
 8014c44:	4630      	mov	r0, r6
 8014c46:	f7f3 ffcc 	bl	8008be2 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 8014c4a:	4c10      	ldr	r4, [pc, #64]	; (8014c8c <getRTCCalender+0x54>)
 8014c4c:	2200      	movs	r2, #0
 8014c4e:	4621      	mov	r1, r4
 8014c50:	4630      	mov	r0, r6
 8014c52:	f7f3 ffee 	bl	8008c32 <HAL_RTC_GetDate>

  /* Display time Format : hh:mm:ss */
  sprintf((char*)aShowTimeStamp,"%.2d:%.2d:%.2d", stimestructureget.Hours, stimestructureget.Minutes, stimestructureget.Seconds);
 8014c56:	78ab      	ldrb	r3, [r5, #2]
 8014c58:	4e0d      	ldr	r6, [pc, #52]	; (8014c90 <getRTCCalender+0x58>)
 8014c5a:	9300      	str	r3, [sp, #0]
 8014c5c:	786b      	ldrb	r3, [r5, #1]
 8014c5e:	782a      	ldrb	r2, [r5, #0]
 8014c60:	490c      	ldr	r1, [pc, #48]	; (8014c94 <getRTCCalender+0x5c>)
 8014c62:	4630      	mov	r0, r6
 8014c64:	f000 fc8a 	bl	801557c <sprintf>
  /* Display date Format : mm-dd-yy */
  sprintf((char*)aShowDateStamp,"%.2d/%.2d/%.2d",sdatestructureget.Date, sdatestructureget.Month, 2000 + sdatestructureget.Year);
 8014c68:	78e3      	ldrb	r3, [r4, #3]
 8014c6a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8014c6e:	9300      	str	r3, [sp, #0]
 8014c70:	7863      	ldrb	r3, [r4, #1]
 8014c72:	78a2      	ldrb	r2, [r4, #2]
 8014c74:	4908      	ldr	r1, [pc, #32]	; (8014c98 <getRTCCalender+0x60>)
 8014c76:	f106 0034 	add.w	r0, r6, #52	; 0x34
 8014c7a:	f000 fc7f 	bl	801557c <sprintf>
}
 8014c7e:	b002      	add	sp, #8
 8014c80:	bd70      	pop	{r4, r5, r6, pc}
 8014c82:	bf00      	nop
 8014c84:	20011094 	.word	0x20011094
 8014c88:	20010330 	.word	0x20010330
 8014c8c:	2001108c 	.word	0x2001108c
 8014c90:	2000603c 	.word	0x2000603c
 8014c94:	0801e670 	.word	0x0801e670
 8014c98:	0801e680 	.word	0x0801e680

08014c9c <readbackedupRTCCalender>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void readbackedupRTCCalender(void)
{
 8014c9c:	b538      	push	{r3, r4, r5, lr}
   /* Read Data */
   sTimeStampget_backup.Hours = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1);
 8014c9e:	4c11      	ldr	r4, [pc, #68]	; (8014ce4 <readbackedupRTCCalender+0x48>)
 8014ca0:	2101      	movs	r1, #1
 8014ca2:	4620      	mov	r0, r4
 8014ca4:	f7f4 f88a 	bl	8008dbc <HAL_RTCEx_BKUPRead>
 8014ca8:	4d0f      	ldr	r5, [pc, #60]	; (8014ce8 <readbackedupRTCCalender+0x4c>)
 8014caa:	7028      	strb	r0, [r5, #0]
   sTimeStampget_backup.Minutes = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2);
 8014cac:	2102      	movs	r1, #2
 8014cae:	4620      	mov	r0, r4
 8014cb0:	f7f4 f884 	bl	8008dbc <HAL_RTCEx_BKUPRead>
 8014cb4:	7068      	strb	r0, [r5, #1]
   sTimeStampget_backup.Seconds = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR3);
 8014cb6:	2103      	movs	r1, #3
 8014cb8:	4620      	mov	r0, r4
 8014cba:	f7f4 f87f 	bl	8008dbc <HAL_RTCEx_BKUPRead>
 8014cbe:	70a8      	strb	r0, [r5, #2]
   sTimeStampDateget_backup.Date =  HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR4);
 8014cc0:	2104      	movs	r1, #4
 8014cc2:	4620      	mov	r0, r4
 8014cc4:	f7f4 f87a 	bl	8008dbc <HAL_RTCEx_BKUPRead>
 8014cc8:	4d08      	ldr	r5, [pc, #32]	; (8014cec <readbackedupRTCCalender+0x50>)
 8014cca:	70a8      	strb	r0, [r5, #2]
   sTimeStampDateget_backup.Month =  HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR5);
 8014ccc:	2105      	movs	r1, #5
 8014cce:	4620      	mov	r0, r4
 8014cd0:	f7f4 f874 	bl	8008dbc <HAL_RTCEx_BKUPRead>
 8014cd4:	7068      	strb	r0, [r5, #1]
   sTimeStampDateget_backup.Year =  HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR6);
 8014cd6:	2106      	movs	r1, #6
 8014cd8:	4620      	mov	r0, r4
 8014cda:	f7f4 f86f 	bl	8008dbc <HAL_RTCEx_BKUPRead>
 8014cde:	70e8      	strb	r0, [r5, #3]
}
 8014ce0:	bd38      	pop	{r3, r4, r5, pc}
 8014ce2:	bf00      	nop
 8014ce4:	20010330 	.word	0x20010330
 8014ce8:	200098d0 	.word	0x200098d0
 8014cec:	20011090 	.word	0x20011090

08014cf0 <DecimalToBCD>:
* <hr>
*
*******************************************************************************/
uint32_t DecimalToBCD (uint32_t Decimal)
{
   return (((Decimal/10) << 4) | (Decimal % 10));
 8014cf0:	4b05      	ldr	r3, [pc, #20]	; (8014d08 <DecimalToBCD+0x18>)
 8014cf2:	fba3 2300 	umull	r2, r3, r3, r0
 8014cf6:	08db      	lsrs	r3, r3, #3
 8014cf8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8014cfc:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
}
 8014d00:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 8014d04:	4770      	bx	lr
 8014d06:	bf00      	nop
 8014d08:	cccccccd 	.word	0xcccccccd

08014d0c <BCDToDecimal>:
* <hr>
*
*******************************************************************************/
uint32_t BCDToDecimal(uint32_t BCD)
{
   return (((BCD >> 4) * 10) + (BCD & 0xF));
 8014d0c:	0903      	lsrs	r3, r0, #4
 8014d0e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014d12:	f000 000f 	and.w	r0, r0, #15
}
 8014d16:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8014d1a:	4770      	bx	lr

08014d1c <getrtcStamp>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void getrtcStamp(void)
{
 8014d1c:	b570      	push	{r4, r5, r6, lr}
	HAL_RTC_GetTime(&hrtc,&STime1,RTC_FORMAT_BCD);
 8014d1e:	4d1f      	ldr	r5, [pc, #124]	; (8014d9c <getrtcStamp+0x80>)
 8014d20:	4c1f      	ldr	r4, [pc, #124]	; (8014da0 <getrtcStamp+0x84>)
 8014d22:	2201      	movs	r2, #1
 8014d24:	4629      	mov	r1, r5
 8014d26:	4620      	mov	r0, r4
 8014d28:	f7f3 ff5b 	bl	8008be2 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc,&SDate1,RTC_FORMAT_BCD);
 8014d2c:	4e1d      	ldr	r6, [pc, #116]	; (8014da4 <getrtcStamp+0x88>)
 8014d2e:	2201      	movs	r2, #1
 8014d30:	4631      	mov	r1, r6
 8014d32:	4620      	mov	r0, r4
 8014d34:	f7f3 ff7d 	bl	8008c32 <HAL_RTC_GetDate>

	itoa(BCDToDecimal(SDate1.Year),gau8Year,PAYLOAD_DATA_STRING_RADIX);
 8014d38:	78f0      	ldrb	r0, [r6, #3]
 8014d3a:	f7ff ffe7 	bl	8014d0c <BCDToDecimal>
 8014d3e:	4c1a      	ldr	r4, [pc, #104]	; (8014da8 <getrtcStamp+0x8c>)
 8014d40:	220a      	movs	r2, #10
 8014d42:	4621      	mov	r1, r4
 8014d44:	f000 f974 	bl	8015030 <itoa>
	itoa(BCDToDecimal(SDate1.Month),gau8Month,PAYLOAD_DATA_STRING_RADIX);
 8014d48:	7870      	ldrb	r0, [r6, #1]
 8014d4a:	f7ff ffdf 	bl	8014d0c <BCDToDecimal>
 8014d4e:	220a      	movs	r2, #10
 8014d50:	f104 0108 	add.w	r1, r4, #8
 8014d54:	f000 f96c 	bl	8015030 <itoa>
	itoa(BCDToDecimal(SDate1.Date),gau8Date,PAYLOAD_DATA_STRING_RADIX);
 8014d58:	78b0      	ldrb	r0, [r6, #2]
 8014d5a:	f7ff ffd7 	bl	8014d0c <BCDToDecimal>
 8014d5e:	220a      	movs	r2, #10
 8014d60:	f104 0110 	add.w	r1, r4, #16
 8014d64:	f000 f964 	bl	8015030 <itoa>

	itoa(BCDToDecimal(STime1.Hours),gau8Hour,PAYLOAD_DATA_STRING_RADIX);
 8014d68:	7828      	ldrb	r0, [r5, #0]
 8014d6a:	f7ff ffcf 	bl	8014d0c <BCDToDecimal>
 8014d6e:	220a      	movs	r2, #10
 8014d70:	f104 0118 	add.w	r1, r4, #24
 8014d74:	f000 f95c 	bl	8015030 <itoa>
	itoa(BCDToDecimal(STime1.Minutes),gau8Minutes,PAYLOAD_DATA_STRING_RADIX);
 8014d78:	7868      	ldrb	r0, [r5, #1]
 8014d7a:	f7ff ffc7 	bl	8014d0c <BCDToDecimal>
 8014d7e:	220a      	movs	r2, #10
 8014d80:	f104 0120 	add.w	r1, r4, #32
 8014d84:	f000 f954 	bl	8015030 <itoa>
	itoa(BCDToDecimal(STime1.Seconds),gau8Seconds,PAYLOAD_DATA_STRING_RADIX);
 8014d88:	78a8      	ldrb	r0, [r5, #2]
 8014d8a:	f7ff ffbf 	bl	8014d0c <BCDToDecimal>
 8014d8e:	220a      	movs	r2, #10
 8014d90:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8014d94:	f000 f94c 	bl	8015030 <itoa>
}
 8014d98:	bd70      	pop	{r4, r5, r6, pc}
 8014d9a:	bf00      	nop
 8014d9c:	20005f4c 	.word	0x20005f4c
 8014da0:	20010330 	.word	0x20010330
 8014da4:	20005f60 	.word	0x20005f60
 8014da8:	20003840 	.word	0x20003840

08014dac <HAL_TIM_PeriodElapsedCallback>:
volatile uint32_t gu32UploadFailTimer = TEN_MIN;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	/* Timer 7 . 1 ms Interrupt */
	if(htim->Instance == TIM7)
 8014dac:	6802      	ldr	r2, [r0, #0]
 8014dae:	4b5f      	ldr	r3, [pc, #380]	; (8014f2c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8014db0:	429a      	cmp	r2, r3
 8014db2:	d000      	beq.n	8014db6 <HAL_TIM_PeriodElapsedCallback+0xa>
		if(gu32FotaRquestFlag == FALSE)
		{
			if(gu32SystemResetTimer)gu32SystemResetTimer--;
		}
	}
	}
 8014db4:	4770      	bx	lr
		if(gu32MBTCPTimer)gu32MBTCPTimer--;
 8014db6:	4b5e      	ldr	r3, [pc, #376]	; (8014f30 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	b113      	cbz	r3, 8014dc2 <HAL_TIM_PeriodElapsedCallback+0x16>
 8014dbc:	3b01      	subs	r3, #1
 8014dbe:	4a5c      	ldr	r2, [pc, #368]	; (8014f30 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8014dc0:	6013      	str	r3, [r2, #0]
		if(gu32MBPOLLTimer)gu32MBPOLLTimer--;
 8014dc2:	4b5c      	ldr	r3, [pc, #368]	; (8014f34 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	b113      	cbz	r3, 8014dce <HAL_TIM_PeriodElapsedCallback+0x22>
 8014dc8:	3b01      	subs	r3, #1
 8014dca:	4a5a      	ldr	r2, [pc, #360]	; (8014f34 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8014dcc:	6013      	str	r3, [r2, #0]
		if(master.u32PollDelay)master.u32PollDelay--;
 8014dce:	4b5a      	ldr	r3, [pc, #360]	; (8014f38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8014dd0:	f8d3 3e4c 	ldr.w	r3, [r3, #3660]	; 0xe4c
 8014dd4:	b11b      	cbz	r3, 8014dde <HAL_TIM_PeriodElapsedCallback+0x32>
 8014dd6:	3b01      	subs	r3, #1
 8014dd8:	4a57      	ldr	r2, [pc, #348]	; (8014f38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8014dda:	f8c2 3e4c 	str.w	r3, [r2, #3660]	; 0xe4c
		if(gu32MBCharacterDelay)gu32MBCharacterDelay--;
 8014dde:	4b57      	ldr	r3, [pc, #348]	; (8014f3c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	b113      	cbz	r3, 8014dea <HAL_TIM_PeriodElapsedCallback+0x3e>
 8014de4:	3b01      	subs	r3, #1
 8014de6:	4a55      	ldr	r2, [pc, #340]	; (8014f3c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8014de8:	6013      	str	r3, [r2, #0]
		if(gu32ModbusFrameEndTimer)gu32ModbusFrameEndTimer--;
 8014dea:	4b55      	ldr	r3, [pc, #340]	; (8014f40 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	b113      	cbz	r3, 8014df6 <HAL_TIM_PeriodElapsedCallback+0x4a>
 8014df0:	3b01      	subs	r3, #1
 8014df2:	4a53      	ldr	r2, [pc, #332]	; (8014f40 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8014df4:	6013      	str	r3, [r2, #0]
		if(gu32ModbusResponseTimeout)gu32ModbusResponseTimeout--;
 8014df6:	4b53      	ldr	r3, [pc, #332]	; (8014f44 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	b113      	cbz	r3, 8014e02 <HAL_TIM_PeriodElapsedCallback+0x56>
 8014dfc:	3b01      	subs	r3, #1
 8014dfe:	4a51      	ldr	r2, [pc, #324]	; (8014f44 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8014e00:	6013      	str	r3, [r2, #0]
		if(gu32LinkDisconnectTimer)gu32LinkDisconnectTimer--;
 8014e02:	4b51      	ldr	r3, [pc, #324]	; (8014f48 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	b11b      	cbz	r3, 8014e10 <HAL_TIM_PeriodElapsedCallback+0x64>
 8014e08:	4a4f      	ldr	r2, [pc, #316]	; (8014f48 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8014e0a:	6813      	ldr	r3, [r2, #0]
 8014e0c:	3b01      	subs	r3, #1
 8014e0e:	6013      	str	r3, [r2, #0]
		if(gu32GSMCharacterTimeout)gu32GSMCharacterTimeout--;
 8014e10:	4b4e      	ldr	r3, [pc, #312]	; (8014f4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	b113      	cbz	r3, 8014e1c <HAL_TIM_PeriodElapsedCallback+0x70>
 8014e16:	3b01      	subs	r3, #1
 8014e18:	4a4c      	ldr	r2, [pc, #304]	; (8014f4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8014e1a:	6013      	str	r3, [r2, #0]
		if(gsmInstance.u32GSMTimer)gsmInstance.u32GSMTimer--;
 8014e1c:	4b4c      	ldr	r3, [pc, #304]	; (8014f50 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8014e1e:	f8d3 3e24 	ldr.w	r3, [r3, #3620]	; 0xe24
 8014e22:	b12b      	cbz	r3, 8014e30 <HAL_TIM_PeriodElapsedCallback+0x84>
 8014e24:	4a4a      	ldr	r2, [pc, #296]	; (8014f50 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8014e26:	f8d2 3e24 	ldr.w	r3, [r2, #3620]	; 0xe24
 8014e2a:	3b01      	subs	r3, #1
 8014e2c:	f8c2 3e24 	str.w	r3, [r2, #3620]	; 0xe24
		if(gsmInstance.u32GSMResponseTimer)gsmInstance.u32GSMResponseTimer--;
 8014e30:	4b47      	ldr	r3, [pc, #284]	; (8014f50 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8014e32:	f8d3 3e38 	ldr.w	r3, [r3, #3640]	; 0xe38
 8014e36:	b12b      	cbz	r3, 8014e44 <HAL_TIM_PeriodElapsedCallback+0x98>
 8014e38:	4a45      	ldr	r2, [pc, #276]	; (8014f50 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8014e3a:	f8d2 3e38 	ldr.w	r3, [r2, #3640]	; 0xe38
 8014e3e:	3b01      	subs	r3, #1
 8014e40:	f8c2 3e38 	str.w	r3, [r2, #3640]	; 0xe38
		if(gsmInstance.u32GSMHeartbeatTimer)gsmInstance.u32GSMHeartbeatTimer--;
 8014e44:	4b42      	ldr	r3, [pc, #264]	; (8014f50 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8014e46:	f8d3 3e30 	ldr.w	r3, [r3, #3632]	; 0xe30
 8014e4a:	b11b      	cbz	r3, 8014e54 <HAL_TIM_PeriodElapsedCallback+0xa8>
 8014e4c:	3b01      	subs	r3, #1
 8014e4e:	4a40      	ldr	r2, [pc, #256]	; (8014f50 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8014e50:	f8c2 3e30 	str.w	r3, [r2, #3632]	; 0xe30
		if(gu32GSMHangTimer)gu32GSMHangTimer--;
 8014e54:	4b3d      	ldr	r3, [pc, #244]	; (8014f4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8014e56:	685b      	ldr	r3, [r3, #4]
 8014e58:	b11b      	cbz	r3, 8014e62 <HAL_TIM_PeriodElapsedCallback+0xb6>
 8014e5a:	4a3c      	ldr	r2, [pc, #240]	; (8014f4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8014e5c:	6853      	ldr	r3, [r2, #4]
 8014e5e:	3b01      	subs	r3, #1
 8014e60:	6053      	str	r3, [r2, #4]
		if(gu32GPSCharacterTimeout)gu32GPSCharacterTimeout--;
 8014e62:	4b3a      	ldr	r3, [pc, #232]	; (8014f4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8014e64:	689b      	ldr	r3, [r3, #8]
 8014e66:	b113      	cbz	r3, 8014e6e <HAL_TIM_PeriodElapsedCallback+0xc2>
 8014e68:	3b01      	subs	r3, #1
 8014e6a:	4a38      	ldr	r2, [pc, #224]	; (8014f4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8014e6c:	6093      	str	r3, [r2, #8]
		if(gu32PayloadQueueEnqueue)gu32PayloadQueueEnqueue--;
 8014e6e:	4b37      	ldr	r3, [pc, #220]	; (8014f4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8014e70:	68db      	ldr	r3, [r3, #12]
 8014e72:	b11b      	cbz	r3, 8014e7c <HAL_TIM_PeriodElapsedCallback+0xd0>
 8014e74:	4a35      	ldr	r2, [pc, #212]	; (8014f4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8014e76:	68d3      	ldr	r3, [r2, #12]
 8014e78:	3b01      	subs	r3, #1
 8014e7a:	60d3      	str	r3, [r2, #12]
		if(gu32TempPayloadQueueEnqueue)gu32TempPayloadQueueEnqueue--;
 8014e7c:	4b33      	ldr	r3, [pc, #204]	; (8014f4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8014e7e:	691b      	ldr	r3, [r3, #16]
 8014e80:	b11b      	cbz	r3, 8014e8a <HAL_TIM_PeriodElapsedCallback+0xde>
 8014e82:	4a32      	ldr	r2, [pc, #200]	; (8014f4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8014e84:	6913      	ldr	r3, [r2, #16]
 8014e86:	3b01      	subs	r3, #1
 8014e88:	6113      	str	r3, [r2, #16]
		if(gu32FotaFileReadTimer)gu32FotaFileReadTimer--;
 8014e8a:	4b30      	ldr	r3, [pc, #192]	; (8014f4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8014e8c:	695b      	ldr	r3, [r3, #20]
 8014e8e:	b11b      	cbz	r3, 8014e98 <HAL_TIM_PeriodElapsedCallback+0xec>
 8014e90:	4a2e      	ldr	r2, [pc, #184]	; (8014f4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8014e92:	6953      	ldr	r3, [r2, #20]
 8014e94:	3b01      	subs	r3, #1
 8014e96:	6153      	str	r3, [r2, #20]
		if(gu32GSMRestartTimer)gu32GSMRestartTimer--; /* Added on 6/2/22 . Was Missing :P */
 8014e98:	4b2b      	ldr	r3, [pc, #172]	; (8014f48 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8014e9a:	685b      	ldr	r3, [r3, #4]
 8014e9c:	b11b      	cbz	r3, 8014ea6 <HAL_TIM_PeriodElapsedCallback+0xfa>
 8014e9e:	4a2a      	ldr	r2, [pc, #168]	; (8014f48 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8014ea0:	6853      	ldr	r3, [r2, #4]
 8014ea2:	3b01      	subs	r3, #1
 8014ea4:	6053      	str	r3, [r2, #4]
		if(gu32RTCUpdateTimer)gu32RTCUpdateTimer--;
 8014ea6:	4b29      	ldr	r3, [pc, #164]	; (8014f4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8014ea8:	699b      	ldr	r3, [r3, #24]
 8014eaa:	b113      	cbz	r3, 8014eb2 <HAL_TIM_PeriodElapsedCallback+0x106>
 8014eac:	3b01      	subs	r3, #1
 8014eae:	4a27      	ldr	r2, [pc, #156]	; (8014f4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8014eb0:	6193      	str	r3, [r2, #24]
		if(gu32I2CMemoryOperationTimeout)gu32I2CMemoryOperationTimeout--;
 8014eb2:	4b26      	ldr	r3, [pc, #152]	; (8014f4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8014eb4:	69db      	ldr	r3, [r3, #28]
 8014eb6:	b113      	cbz	r3, 8014ebe <HAL_TIM_PeriodElapsedCallback+0x112>
 8014eb8:	3b01      	subs	r3, #1
 8014eba:	4a24      	ldr	r2, [pc, #144]	; (8014f4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8014ebc:	61d3      	str	r3, [r2, #28]
		if(gu32ADCOperationTimer)gu32ADCOperationTimer--;
 8014ebe:	4b23      	ldr	r3, [pc, #140]	; (8014f4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8014ec0:	6a1b      	ldr	r3, [r3, #32]
 8014ec2:	b113      	cbz	r3, 8014eca <HAL_TIM_PeriodElapsedCallback+0x11e>
 8014ec4:	3b01      	subs	r3, #1
 8014ec6:	4a21      	ldr	r2, [pc, #132]	; (8014f4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8014ec8:	6213      	str	r3, [r2, #32]
		if(gu32ADCPollTimer)gu32ADCPollTimer--;
 8014eca:	4b20      	ldr	r3, [pc, #128]	; (8014f4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8014ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ece:	b113      	cbz	r3, 8014ed6 <HAL_TIM_PeriodElapsedCallback+0x12a>
 8014ed0:	3b01      	subs	r3, #1
 8014ed2:	4a1e      	ldr	r2, [pc, #120]	; (8014f4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8014ed4:	6253      	str	r3, [r2, #36]	; 0x24
		if(gu32LedTimer)gu32LedTimer--;
 8014ed6:	4b1d      	ldr	r3, [pc, #116]	; (8014f4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8014ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014eda:	b11b      	cbz	r3, 8014ee4 <HAL_TIM_PeriodElapsedCallback+0x138>
 8014edc:	4a1b      	ldr	r2, [pc, #108]	; (8014f4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8014ede:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8014ee0:	3b01      	subs	r3, #1
 8014ee2:	6293      	str	r3, [r2, #40]	; 0x28
		if(gu32GSMConfigCheckTimer)gu32GSMConfigCheckTimer--;
 8014ee4:	4b19      	ldr	r3, [pc, #100]	; (8014f4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8014ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ee8:	b11b      	cbz	r3, 8014ef2 <HAL_TIM_PeriodElapsedCallback+0x146>
 8014eea:	4a18      	ldr	r2, [pc, #96]	; (8014f4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8014eec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8014eee:	3b01      	subs	r3, #1
 8014ef0:	62d3      	str	r3, [r2, #44]	; 0x2c
		if(gu32LinkDownTimer)gu32LinkDownTimer--;
 8014ef2:	4b15      	ldr	r3, [pc, #84]	; (8014f48 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8014ef4:	689b      	ldr	r3, [r3, #8]
 8014ef6:	b11b      	cbz	r3, 8014f00 <HAL_TIM_PeriodElapsedCallback+0x154>
 8014ef8:	4a13      	ldr	r2, [pc, #76]	; (8014f48 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8014efa:	6893      	ldr	r3, [r2, #8]
 8014efc:	3b01      	subs	r3, #1
 8014efe:	6093      	str	r3, [r2, #8]
		if(gu32UploadFailTimer)gu32UploadFailTimer--;
 8014f00:	4b11      	ldr	r3, [pc, #68]	; (8014f48 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8014f02:	68db      	ldr	r3, [r3, #12]
 8014f04:	b11b      	cbz	r3, 8014f0e <HAL_TIM_PeriodElapsedCallback+0x162>
 8014f06:	4a10      	ldr	r2, [pc, #64]	; (8014f48 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8014f08:	68d3      	ldr	r3, [r2, #12]
 8014f0a:	3b01      	subs	r3, #1
 8014f0c:	60d3      	str	r3, [r2, #12]
		if(gu32FotaRquestFlag == FALSE)
 8014f0e:	4b11      	ldr	r3, [pc, #68]	; (8014f54 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	f47f af4e 	bne.w	8014db4 <HAL_TIM_PeriodElapsedCallback+0x8>
			if(gu32SystemResetTimer)gu32SystemResetTimer--;
 8014f18:	4b0c      	ldr	r3, [pc, #48]	; (8014f4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8014f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	f43f af49 	beq.w	8014db4 <HAL_TIM_PeriodElapsedCallback+0x8>
 8014f22:	3b01      	subs	r3, #1
 8014f24:	4a09      	ldr	r2, [pc, #36]	; (8014f4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8014f26:	6313      	str	r3, [r2, #48]	; 0x30
	}
 8014f28:	e744      	b.n	8014db4 <HAL_TIM_PeriodElapsedCallback+0x8>
 8014f2a:	bf00      	nop
 8014f2c:	40001400 	.word	0x40001400
 8014f30:	20005804 	.word	0x20005804
 8014f34:	20005cd8 	.word	0x20005cd8
 8014f38:	2000e5e0 	.word	0x2000e5e0
 8014f3c:	200057e0 	.word	0x200057e0
 8014f40:	20005314 	.word	0x20005314
 8014f44:	20005318 	.word	0x20005318
 8014f48:	20003870 	.word	0x20003870
 8014f4c:	20006144 	.word	0x20006144
 8014f50:	2000d390 	.word	0x2000d390
 8014f54:	200043c8 	.word	0x200043c8

08014f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8014f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8014f90 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8014f5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8014f5e:	e003      	b.n	8014f68 <LoopCopyDataInit>

08014f60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8014f60:	4b0c      	ldr	r3, [pc, #48]	; (8014f94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8014f62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8014f64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8014f66:	3104      	adds	r1, #4

08014f68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8014f68:	480b      	ldr	r0, [pc, #44]	; (8014f98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8014f6a:	4b0c      	ldr	r3, [pc, #48]	; (8014f9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8014f6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8014f6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8014f70:	d3f6      	bcc.n	8014f60 <CopyDataInit>
  ldr  r2, =_sbss
 8014f72:	4a0b      	ldr	r2, [pc, #44]	; (8014fa0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8014f74:	e002      	b.n	8014f7c <LoopFillZerobss>

08014f76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8014f76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8014f78:	f842 3b04 	str.w	r3, [r2], #4

08014f7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8014f7c:	4b09      	ldr	r3, [pc, #36]	; (8014fa4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8014f7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8014f80:	d3f9      	bcc.n	8014f76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8014f82:	f7ff f8f3 	bl	801416c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8014f86:	f000 f817 	bl	8014fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8014f8a:	f7fc fab5 	bl	80114f8 <main>
  bx  lr    
 8014f8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8014f90:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8014f94:	0801eb4c 	.word	0x0801eb4c
  ldr  r0, =_sdata
 8014f98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8014f9c:	20004234 	.word	0x20004234
  ldr  r2, =_sbss
 8014fa0:	20004234 	.word	0x20004234
  ldr  r3, = _ebss
 8014fa4:	200110b8 	.word	0x200110b8

08014fa8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8014fa8:	e7fe      	b.n	8014fa8 <CAN1_RX0_IRQHandler>

08014faa <atof>:
 8014faa:	2100      	movs	r1, #0
 8014fac:	f001 b98e 	b.w	80162cc <strtod>

08014fb0 <atoi>:
 8014fb0:	220a      	movs	r2, #10
 8014fb2:	2100      	movs	r1, #0
 8014fb4:	f001 ba4a 	b.w	801644c <strtol>

08014fb8 <__libc_init_array>:
 8014fb8:	b570      	push	{r4, r5, r6, lr}
 8014fba:	4d0d      	ldr	r5, [pc, #52]	; (8014ff0 <__libc_init_array+0x38>)
 8014fbc:	4c0d      	ldr	r4, [pc, #52]	; (8014ff4 <__libc_init_array+0x3c>)
 8014fbe:	1b64      	subs	r4, r4, r5
 8014fc0:	10a4      	asrs	r4, r4, #2
 8014fc2:	2600      	movs	r6, #0
 8014fc4:	42a6      	cmp	r6, r4
 8014fc6:	d109      	bne.n	8014fdc <__libc_init_array+0x24>
 8014fc8:	4d0b      	ldr	r5, [pc, #44]	; (8014ff8 <__libc_init_array+0x40>)
 8014fca:	4c0c      	ldr	r4, [pc, #48]	; (8014ffc <__libc_init_array+0x44>)
 8014fcc:	f007 fc16 	bl	801c7fc <_init>
 8014fd0:	1b64      	subs	r4, r4, r5
 8014fd2:	10a4      	asrs	r4, r4, #2
 8014fd4:	2600      	movs	r6, #0
 8014fd6:	42a6      	cmp	r6, r4
 8014fd8:	d105      	bne.n	8014fe6 <__libc_init_array+0x2e>
 8014fda:	bd70      	pop	{r4, r5, r6, pc}
 8014fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8014fe0:	4798      	blx	r3
 8014fe2:	3601      	adds	r6, #1
 8014fe4:	e7ee      	b.n	8014fc4 <__libc_init_array+0xc>
 8014fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8014fea:	4798      	blx	r3
 8014fec:	3601      	adds	r6, #1
 8014fee:	e7f2      	b.n	8014fd6 <__libc_init_array+0x1e>
 8014ff0:	0801eb40 	.word	0x0801eb40
 8014ff4:	0801eb40 	.word	0x0801eb40
 8014ff8:	0801eb40 	.word	0x0801eb40
 8014ffc:	0801eb48 	.word	0x0801eb48

08015000 <__itoa>:
 8015000:	1e93      	subs	r3, r2, #2
 8015002:	2b22      	cmp	r3, #34	; 0x22
 8015004:	b510      	push	{r4, lr}
 8015006:	460c      	mov	r4, r1
 8015008:	d904      	bls.n	8015014 <__itoa+0x14>
 801500a:	2300      	movs	r3, #0
 801500c:	700b      	strb	r3, [r1, #0]
 801500e:	461c      	mov	r4, r3
 8015010:	4620      	mov	r0, r4
 8015012:	bd10      	pop	{r4, pc}
 8015014:	2a0a      	cmp	r2, #10
 8015016:	d109      	bne.n	801502c <__itoa+0x2c>
 8015018:	2800      	cmp	r0, #0
 801501a:	da07      	bge.n	801502c <__itoa+0x2c>
 801501c:	232d      	movs	r3, #45	; 0x2d
 801501e:	700b      	strb	r3, [r1, #0]
 8015020:	4240      	negs	r0, r0
 8015022:	2101      	movs	r1, #1
 8015024:	4421      	add	r1, r4
 8015026:	f002 fc09 	bl	801783c <__utoa>
 801502a:	e7f1      	b.n	8015010 <__itoa+0x10>
 801502c:	2100      	movs	r1, #0
 801502e:	e7f9      	b.n	8015024 <__itoa+0x24>

08015030 <itoa>:
 8015030:	f7ff bfe6 	b.w	8015000 <__itoa>

08015034 <malloc>:
 8015034:	4b02      	ldr	r3, [pc, #8]	; (8015040 <malloc+0xc>)
 8015036:	4601      	mov	r1, r0
 8015038:	6818      	ldr	r0, [r3, #0]
 801503a:	f000 b80b 	b.w	8015054 <_malloc_r>
 801503e:	bf00      	nop
 8015040:	20003880 	.word	0x20003880

08015044 <free>:
 8015044:	4b02      	ldr	r3, [pc, #8]	; (8015050 <free+0xc>)
 8015046:	4601      	mov	r1, r0
 8015048:	6818      	ldr	r0, [r3, #0]
 801504a:	f004 bf09 	b.w	8019e60 <_free_r>
 801504e:	bf00      	nop
 8015050:	20003880 	.word	0x20003880

08015054 <_malloc_r>:
 8015054:	f101 030b 	add.w	r3, r1, #11
 8015058:	2b16      	cmp	r3, #22
 801505a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801505e:	4605      	mov	r5, r0
 8015060:	d906      	bls.n	8015070 <_malloc_r+0x1c>
 8015062:	f033 0707 	bics.w	r7, r3, #7
 8015066:	d504      	bpl.n	8015072 <_malloc_r+0x1e>
 8015068:	230c      	movs	r3, #12
 801506a:	602b      	str	r3, [r5, #0]
 801506c:	2400      	movs	r4, #0
 801506e:	e1ae      	b.n	80153ce <_malloc_r+0x37a>
 8015070:	2710      	movs	r7, #16
 8015072:	42b9      	cmp	r1, r7
 8015074:	d8f8      	bhi.n	8015068 <_malloc_r+0x14>
 8015076:	4628      	mov	r0, r5
 8015078:	f000 fa52 	bl	8015520 <__malloc_lock>
 801507c:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8015080:	4ec3      	ldr	r6, [pc, #780]	; (8015390 <_malloc_r+0x33c>)
 8015082:	d238      	bcs.n	80150f6 <_malloc_r+0xa2>
 8015084:	f107 0208 	add.w	r2, r7, #8
 8015088:	4432      	add	r2, r6
 801508a:	f1a2 0108 	sub.w	r1, r2, #8
 801508e:	6854      	ldr	r4, [r2, #4]
 8015090:	428c      	cmp	r4, r1
 8015092:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8015096:	d102      	bne.n	801509e <_malloc_r+0x4a>
 8015098:	68d4      	ldr	r4, [r2, #12]
 801509a:	42a2      	cmp	r2, r4
 801509c:	d010      	beq.n	80150c0 <_malloc_r+0x6c>
 801509e:	6863      	ldr	r3, [r4, #4]
 80150a0:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80150a4:	f023 0303 	bic.w	r3, r3, #3
 80150a8:	60ca      	str	r2, [r1, #12]
 80150aa:	4423      	add	r3, r4
 80150ac:	6091      	str	r1, [r2, #8]
 80150ae:	685a      	ldr	r2, [r3, #4]
 80150b0:	f042 0201 	orr.w	r2, r2, #1
 80150b4:	605a      	str	r2, [r3, #4]
 80150b6:	4628      	mov	r0, r5
 80150b8:	f000 fa38 	bl	801552c <__malloc_unlock>
 80150bc:	3408      	adds	r4, #8
 80150be:	e186      	b.n	80153ce <_malloc_r+0x37a>
 80150c0:	3302      	adds	r3, #2
 80150c2:	4ab4      	ldr	r2, [pc, #720]	; (8015394 <_malloc_r+0x340>)
 80150c4:	6934      	ldr	r4, [r6, #16]
 80150c6:	4294      	cmp	r4, r2
 80150c8:	4611      	mov	r1, r2
 80150ca:	d077      	beq.n	80151bc <_malloc_r+0x168>
 80150cc:	6860      	ldr	r0, [r4, #4]
 80150ce:	f020 0c03 	bic.w	ip, r0, #3
 80150d2:	ebac 0007 	sub.w	r0, ip, r7
 80150d6:	280f      	cmp	r0, #15
 80150d8:	dd48      	ble.n	801516c <_malloc_r+0x118>
 80150da:	19e1      	adds	r1, r4, r7
 80150dc:	f040 0301 	orr.w	r3, r0, #1
 80150e0:	f047 0701 	orr.w	r7, r7, #1
 80150e4:	6067      	str	r7, [r4, #4]
 80150e6:	e9c6 1104 	strd	r1, r1, [r6, #16]
 80150ea:	e9c1 2202 	strd	r2, r2, [r1, #8]
 80150ee:	604b      	str	r3, [r1, #4]
 80150f0:	f844 000c 	str.w	r0, [r4, ip]
 80150f4:	e7df      	b.n	80150b6 <_malloc_r+0x62>
 80150f6:	0a7b      	lsrs	r3, r7, #9
 80150f8:	d02a      	beq.n	8015150 <_malloc_r+0xfc>
 80150fa:	2b04      	cmp	r3, #4
 80150fc:	d812      	bhi.n	8015124 <_malloc_r+0xd0>
 80150fe:	09bb      	lsrs	r3, r7, #6
 8015100:	3338      	adds	r3, #56	; 0x38
 8015102:	1c5a      	adds	r2, r3, #1
 8015104:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8015108:	f1a2 0c08 	sub.w	ip, r2, #8
 801510c:	6854      	ldr	r4, [r2, #4]
 801510e:	4564      	cmp	r4, ip
 8015110:	d006      	beq.n	8015120 <_malloc_r+0xcc>
 8015112:	6862      	ldr	r2, [r4, #4]
 8015114:	f022 0203 	bic.w	r2, r2, #3
 8015118:	1bd0      	subs	r0, r2, r7
 801511a:	280f      	cmp	r0, #15
 801511c:	dd1c      	ble.n	8015158 <_malloc_r+0x104>
 801511e:	3b01      	subs	r3, #1
 8015120:	3301      	adds	r3, #1
 8015122:	e7ce      	b.n	80150c2 <_malloc_r+0x6e>
 8015124:	2b14      	cmp	r3, #20
 8015126:	d801      	bhi.n	801512c <_malloc_r+0xd8>
 8015128:	335b      	adds	r3, #91	; 0x5b
 801512a:	e7ea      	b.n	8015102 <_malloc_r+0xae>
 801512c:	2b54      	cmp	r3, #84	; 0x54
 801512e:	d802      	bhi.n	8015136 <_malloc_r+0xe2>
 8015130:	0b3b      	lsrs	r3, r7, #12
 8015132:	336e      	adds	r3, #110	; 0x6e
 8015134:	e7e5      	b.n	8015102 <_malloc_r+0xae>
 8015136:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 801513a:	d802      	bhi.n	8015142 <_malloc_r+0xee>
 801513c:	0bfb      	lsrs	r3, r7, #15
 801513e:	3377      	adds	r3, #119	; 0x77
 8015140:	e7df      	b.n	8015102 <_malloc_r+0xae>
 8015142:	f240 5254 	movw	r2, #1364	; 0x554
 8015146:	4293      	cmp	r3, r2
 8015148:	d804      	bhi.n	8015154 <_malloc_r+0x100>
 801514a:	0cbb      	lsrs	r3, r7, #18
 801514c:	337c      	adds	r3, #124	; 0x7c
 801514e:	e7d8      	b.n	8015102 <_malloc_r+0xae>
 8015150:	233f      	movs	r3, #63	; 0x3f
 8015152:	e7d6      	b.n	8015102 <_malloc_r+0xae>
 8015154:	237e      	movs	r3, #126	; 0x7e
 8015156:	e7d4      	b.n	8015102 <_malloc_r+0xae>
 8015158:	2800      	cmp	r0, #0
 801515a:	68e1      	ldr	r1, [r4, #12]
 801515c:	db04      	blt.n	8015168 <_malloc_r+0x114>
 801515e:	68a3      	ldr	r3, [r4, #8]
 8015160:	60d9      	str	r1, [r3, #12]
 8015162:	608b      	str	r3, [r1, #8]
 8015164:	18a3      	adds	r3, r4, r2
 8015166:	e7a2      	b.n	80150ae <_malloc_r+0x5a>
 8015168:	460c      	mov	r4, r1
 801516a:	e7d0      	b.n	801510e <_malloc_r+0xba>
 801516c:	2800      	cmp	r0, #0
 801516e:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8015172:	db07      	blt.n	8015184 <_malloc_r+0x130>
 8015174:	44a4      	add	ip, r4
 8015176:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801517a:	f043 0301 	orr.w	r3, r3, #1
 801517e:	f8cc 3004 	str.w	r3, [ip, #4]
 8015182:	e798      	b.n	80150b6 <_malloc_r+0x62>
 8015184:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8015188:	6870      	ldr	r0, [r6, #4]
 801518a:	f080 809e 	bcs.w	80152ca <_malloc_r+0x276>
 801518e:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8015192:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8015196:	f04f 0c01 	mov.w	ip, #1
 801519a:	3201      	adds	r2, #1
 801519c:	fa0c fc0e 	lsl.w	ip, ip, lr
 80151a0:	ea4c 0000 	orr.w	r0, ip, r0
 80151a4:	6070      	str	r0, [r6, #4]
 80151a6:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 80151aa:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 80151ae:	3808      	subs	r0, #8
 80151b0:	e9c4 c002 	strd	ip, r0, [r4, #8]
 80151b4:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 80151b8:	f8cc 400c 	str.w	r4, [ip, #12]
 80151bc:	2001      	movs	r0, #1
 80151be:	109a      	asrs	r2, r3, #2
 80151c0:	fa00 f202 	lsl.w	r2, r0, r2
 80151c4:	6870      	ldr	r0, [r6, #4]
 80151c6:	4290      	cmp	r0, r2
 80151c8:	d326      	bcc.n	8015218 <_malloc_r+0x1c4>
 80151ca:	4210      	tst	r0, r2
 80151cc:	d106      	bne.n	80151dc <_malloc_r+0x188>
 80151ce:	f023 0303 	bic.w	r3, r3, #3
 80151d2:	0052      	lsls	r2, r2, #1
 80151d4:	4210      	tst	r0, r2
 80151d6:	f103 0304 	add.w	r3, r3, #4
 80151da:	d0fa      	beq.n	80151d2 <_malloc_r+0x17e>
 80151dc:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 80151e0:	46c1      	mov	r9, r8
 80151e2:	469e      	mov	lr, r3
 80151e4:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80151e8:	454c      	cmp	r4, r9
 80151ea:	f040 80b3 	bne.w	8015354 <_malloc_r+0x300>
 80151ee:	f10e 0e01 	add.w	lr, lr, #1
 80151f2:	f01e 0f03 	tst.w	lr, #3
 80151f6:	f109 0908 	add.w	r9, r9, #8
 80151fa:	d1f3      	bne.n	80151e4 <_malloc_r+0x190>
 80151fc:	0798      	lsls	r0, r3, #30
 80151fe:	f040 80ec 	bne.w	80153da <_malloc_r+0x386>
 8015202:	6873      	ldr	r3, [r6, #4]
 8015204:	ea23 0302 	bic.w	r3, r3, r2
 8015208:	6073      	str	r3, [r6, #4]
 801520a:	6870      	ldr	r0, [r6, #4]
 801520c:	0052      	lsls	r2, r2, #1
 801520e:	4290      	cmp	r0, r2
 8015210:	d302      	bcc.n	8015218 <_malloc_r+0x1c4>
 8015212:	2a00      	cmp	r2, #0
 8015214:	f040 80ee 	bne.w	80153f4 <_malloc_r+0x3a0>
 8015218:	f8d6 b008 	ldr.w	fp, [r6, #8]
 801521c:	f8db 1004 	ldr.w	r1, [fp, #4]
 8015220:	f021 0903 	bic.w	r9, r1, #3
 8015224:	45b9      	cmp	r9, r7
 8015226:	d304      	bcc.n	8015232 <_malloc_r+0x1de>
 8015228:	eba9 0207 	sub.w	r2, r9, r7
 801522c:	2a0f      	cmp	r2, #15
 801522e:	f300 8149 	bgt.w	80154c4 <_malloc_r+0x470>
 8015232:	4a59      	ldr	r2, [pc, #356]	; (8015398 <_malloc_r+0x344>)
 8015234:	6811      	ldr	r1, [r2, #0]
 8015236:	3110      	adds	r1, #16
 8015238:	eb0b 0309 	add.w	r3, fp, r9
 801523c:	4439      	add	r1, r7
 801523e:	2008      	movs	r0, #8
 8015240:	9301      	str	r3, [sp, #4]
 8015242:	9100      	str	r1, [sp, #0]
 8015244:	f002 faec 	bl	8017820 <sysconf>
 8015248:	4a54      	ldr	r2, [pc, #336]	; (801539c <_malloc_r+0x348>)
 801524a:	e9dd 1300 	ldrd	r1, r3, [sp]
 801524e:	4680      	mov	r8, r0
 8015250:	6810      	ldr	r0, [r2, #0]
 8015252:	3001      	adds	r0, #1
 8015254:	bf1f      	itttt	ne
 8015256:	f101 31ff 	addne.w	r1, r1, #4294967295
 801525a:	4441      	addne	r1, r8
 801525c:	f1c8 0000 	rsbne	r0, r8, #0
 8015260:	4001      	andne	r1, r0
 8015262:	4628      	mov	r0, r5
 8015264:	e9cd 1300 	strd	r1, r3, [sp]
 8015268:	f000 f978 	bl	801555c <_sbrk_r>
 801526c:	1c42      	adds	r2, r0, #1
 801526e:	4604      	mov	r4, r0
 8015270:	f000 80fc 	beq.w	801546c <_malloc_r+0x418>
 8015274:	9b01      	ldr	r3, [sp, #4]
 8015276:	9900      	ldr	r1, [sp, #0]
 8015278:	4a48      	ldr	r2, [pc, #288]	; (801539c <_malloc_r+0x348>)
 801527a:	4283      	cmp	r3, r0
 801527c:	d902      	bls.n	8015284 <_malloc_r+0x230>
 801527e:	45b3      	cmp	fp, r6
 8015280:	f040 80f4 	bne.w	801546c <_malloc_r+0x418>
 8015284:	f8df a120 	ldr.w	sl, [pc, #288]	; 80153a8 <_malloc_r+0x354>
 8015288:	f8da 0000 	ldr.w	r0, [sl]
 801528c:	42a3      	cmp	r3, r4
 801528e:	eb00 0e01 	add.w	lr, r0, r1
 8015292:	f8ca e000 	str.w	lr, [sl]
 8015296:	f108 3cff 	add.w	ip, r8, #4294967295
 801529a:	f040 80ad 	bne.w	80153f8 <_malloc_r+0x3a4>
 801529e:	ea13 0f0c 	tst.w	r3, ip
 80152a2:	f040 80a9 	bne.w	80153f8 <_malloc_r+0x3a4>
 80152a6:	68b3      	ldr	r3, [r6, #8]
 80152a8:	4449      	add	r1, r9
 80152aa:	f041 0101 	orr.w	r1, r1, #1
 80152ae:	6059      	str	r1, [r3, #4]
 80152b0:	4a3b      	ldr	r2, [pc, #236]	; (80153a0 <_malloc_r+0x34c>)
 80152b2:	f8da 3000 	ldr.w	r3, [sl]
 80152b6:	6811      	ldr	r1, [r2, #0]
 80152b8:	428b      	cmp	r3, r1
 80152ba:	bf88      	it	hi
 80152bc:	6013      	strhi	r3, [r2, #0]
 80152be:	4a39      	ldr	r2, [pc, #228]	; (80153a4 <_malloc_r+0x350>)
 80152c0:	6811      	ldr	r1, [r2, #0]
 80152c2:	428b      	cmp	r3, r1
 80152c4:	bf88      	it	hi
 80152c6:	6013      	strhi	r3, [r2, #0]
 80152c8:	e0d0      	b.n	801546c <_malloc_r+0x418>
 80152ca:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 80152ce:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80152d2:	d218      	bcs.n	8015306 <_malloc_r+0x2b2>
 80152d4:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80152d8:	3238      	adds	r2, #56	; 0x38
 80152da:	f102 0e01 	add.w	lr, r2, #1
 80152de:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 80152e2:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80152e6:	45f0      	cmp	r8, lr
 80152e8:	d12b      	bne.n	8015342 <_malloc_r+0x2ee>
 80152ea:	1092      	asrs	r2, r2, #2
 80152ec:	f04f 0c01 	mov.w	ip, #1
 80152f0:	fa0c f202 	lsl.w	r2, ip, r2
 80152f4:	4310      	orrs	r0, r2
 80152f6:	6070      	str	r0, [r6, #4]
 80152f8:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80152fc:	f8c8 4008 	str.w	r4, [r8, #8]
 8015300:	f8ce 400c 	str.w	r4, [lr, #12]
 8015304:	e75a      	b.n	80151bc <_malloc_r+0x168>
 8015306:	2a14      	cmp	r2, #20
 8015308:	d801      	bhi.n	801530e <_malloc_r+0x2ba>
 801530a:	325b      	adds	r2, #91	; 0x5b
 801530c:	e7e5      	b.n	80152da <_malloc_r+0x286>
 801530e:	2a54      	cmp	r2, #84	; 0x54
 8015310:	d803      	bhi.n	801531a <_malloc_r+0x2c6>
 8015312:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8015316:	326e      	adds	r2, #110	; 0x6e
 8015318:	e7df      	b.n	80152da <_malloc_r+0x286>
 801531a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801531e:	d803      	bhi.n	8015328 <_malloc_r+0x2d4>
 8015320:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8015324:	3277      	adds	r2, #119	; 0x77
 8015326:	e7d8      	b.n	80152da <_malloc_r+0x286>
 8015328:	f240 5e54 	movw	lr, #1364	; 0x554
 801532c:	4572      	cmp	r2, lr
 801532e:	bf9a      	itte	ls
 8015330:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8015334:	327c      	addls	r2, #124	; 0x7c
 8015336:	227e      	movhi	r2, #126	; 0x7e
 8015338:	e7cf      	b.n	80152da <_malloc_r+0x286>
 801533a:	f8de e008 	ldr.w	lr, [lr, #8]
 801533e:	45f0      	cmp	r8, lr
 8015340:	d005      	beq.n	801534e <_malloc_r+0x2fa>
 8015342:	f8de 2004 	ldr.w	r2, [lr, #4]
 8015346:	f022 0203 	bic.w	r2, r2, #3
 801534a:	4562      	cmp	r2, ip
 801534c:	d8f5      	bhi.n	801533a <_malloc_r+0x2e6>
 801534e:	f8de 800c 	ldr.w	r8, [lr, #12]
 8015352:	e7d1      	b.n	80152f8 <_malloc_r+0x2a4>
 8015354:	6860      	ldr	r0, [r4, #4]
 8015356:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801535a:	f020 0003 	bic.w	r0, r0, #3
 801535e:	eba0 0a07 	sub.w	sl, r0, r7
 8015362:	f1ba 0f0f 	cmp.w	sl, #15
 8015366:	dd21      	ble.n	80153ac <_malloc_r+0x358>
 8015368:	68a3      	ldr	r3, [r4, #8]
 801536a:	19e2      	adds	r2, r4, r7
 801536c:	f047 0701 	orr.w	r7, r7, #1
 8015370:	6067      	str	r7, [r4, #4]
 8015372:	f8c3 c00c 	str.w	ip, [r3, #12]
 8015376:	f8cc 3008 	str.w	r3, [ip, #8]
 801537a:	f04a 0301 	orr.w	r3, sl, #1
 801537e:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8015382:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8015386:	6053      	str	r3, [r2, #4]
 8015388:	f844 a000 	str.w	sl, [r4, r0]
 801538c:	e693      	b.n	80150b6 <_malloc_r+0x62>
 801538e:	bf00      	nop
 8015390:	20003cb0 	.word	0x20003cb0
 8015394:	20003cb8 	.word	0x20003cb8
 8015398:	200061b8 	.word	0x200061b8
 801539c:	200040b8 	.word	0x200040b8
 80153a0:	200061b0 	.word	0x200061b0
 80153a4:	200061b4 	.word	0x200061b4
 80153a8:	20006188 	.word	0x20006188
 80153ac:	f1ba 0f00 	cmp.w	sl, #0
 80153b0:	db11      	blt.n	80153d6 <_malloc_r+0x382>
 80153b2:	4420      	add	r0, r4
 80153b4:	6843      	ldr	r3, [r0, #4]
 80153b6:	f043 0301 	orr.w	r3, r3, #1
 80153ba:	6043      	str	r3, [r0, #4]
 80153bc:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80153c0:	4628      	mov	r0, r5
 80153c2:	f8c3 c00c 	str.w	ip, [r3, #12]
 80153c6:	f8cc 3008 	str.w	r3, [ip, #8]
 80153ca:	f000 f8af 	bl	801552c <__malloc_unlock>
 80153ce:	4620      	mov	r0, r4
 80153d0:	b003      	add	sp, #12
 80153d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153d6:	4664      	mov	r4, ip
 80153d8:	e706      	b.n	80151e8 <_malloc_r+0x194>
 80153da:	f858 0908 	ldr.w	r0, [r8], #-8
 80153de:	4540      	cmp	r0, r8
 80153e0:	f103 33ff 	add.w	r3, r3, #4294967295
 80153e4:	f43f af0a 	beq.w	80151fc <_malloc_r+0x1a8>
 80153e8:	e70f      	b.n	801520a <_malloc_r+0x1b6>
 80153ea:	3304      	adds	r3, #4
 80153ec:	0052      	lsls	r2, r2, #1
 80153ee:	4210      	tst	r0, r2
 80153f0:	d0fb      	beq.n	80153ea <_malloc_r+0x396>
 80153f2:	e6f3      	b.n	80151dc <_malloc_r+0x188>
 80153f4:	4673      	mov	r3, lr
 80153f6:	e7fa      	b.n	80153ee <_malloc_r+0x39a>
 80153f8:	6810      	ldr	r0, [r2, #0]
 80153fa:	3001      	adds	r0, #1
 80153fc:	bf1b      	ittet	ne
 80153fe:	1ae3      	subne	r3, r4, r3
 8015400:	4473      	addne	r3, lr
 8015402:	6014      	streq	r4, [r2, #0]
 8015404:	f8ca 3000 	strne.w	r3, [sl]
 8015408:	f014 0307 	ands.w	r3, r4, #7
 801540c:	bf1a      	itte	ne
 801540e:	f1c3 0008 	rsbne	r0, r3, #8
 8015412:	1824      	addne	r4, r4, r0
 8015414:	4618      	moveq	r0, r3
 8015416:	1862      	adds	r2, r4, r1
 8015418:	ea02 010c 	and.w	r1, r2, ip
 801541c:	4480      	add	r8, r0
 801541e:	eba8 0801 	sub.w	r8, r8, r1
 8015422:	ea08 080c 	and.w	r8, r8, ip
 8015426:	4641      	mov	r1, r8
 8015428:	4628      	mov	r0, r5
 801542a:	9301      	str	r3, [sp, #4]
 801542c:	9200      	str	r2, [sp, #0]
 801542e:	f000 f895 	bl	801555c <_sbrk_r>
 8015432:	1c43      	adds	r3, r0, #1
 8015434:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015438:	d105      	bne.n	8015446 <_malloc_r+0x3f2>
 801543a:	b32b      	cbz	r3, 8015488 <_malloc_r+0x434>
 801543c:	f1a3 0008 	sub.w	r0, r3, #8
 8015440:	4410      	add	r0, r2
 8015442:	f04f 0800 	mov.w	r8, #0
 8015446:	f8da 2000 	ldr.w	r2, [sl]
 801544a:	60b4      	str	r4, [r6, #8]
 801544c:	1b00      	subs	r0, r0, r4
 801544e:	4440      	add	r0, r8
 8015450:	4442      	add	r2, r8
 8015452:	f040 0001 	orr.w	r0, r0, #1
 8015456:	45b3      	cmp	fp, r6
 8015458:	f8ca 2000 	str.w	r2, [sl]
 801545c:	6060      	str	r0, [r4, #4]
 801545e:	f43f af27 	beq.w	80152b0 <_malloc_r+0x25c>
 8015462:	f1b9 0f0f 	cmp.w	r9, #15
 8015466:	d812      	bhi.n	801548e <_malloc_r+0x43a>
 8015468:	2301      	movs	r3, #1
 801546a:	6063      	str	r3, [r4, #4]
 801546c:	68b3      	ldr	r3, [r6, #8]
 801546e:	685b      	ldr	r3, [r3, #4]
 8015470:	f023 0303 	bic.w	r3, r3, #3
 8015474:	42bb      	cmp	r3, r7
 8015476:	eba3 0207 	sub.w	r2, r3, r7
 801547a:	d301      	bcc.n	8015480 <_malloc_r+0x42c>
 801547c:	2a0f      	cmp	r2, #15
 801547e:	dc21      	bgt.n	80154c4 <_malloc_r+0x470>
 8015480:	4628      	mov	r0, r5
 8015482:	f000 f853 	bl	801552c <__malloc_unlock>
 8015486:	e5f1      	b.n	801506c <_malloc_r+0x18>
 8015488:	4610      	mov	r0, r2
 801548a:	4698      	mov	r8, r3
 801548c:	e7db      	b.n	8015446 <_malloc_r+0x3f2>
 801548e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8015492:	f1a9 090c 	sub.w	r9, r9, #12
 8015496:	f029 0907 	bic.w	r9, r9, #7
 801549a:	f003 0301 	and.w	r3, r3, #1
 801549e:	ea43 0309 	orr.w	r3, r3, r9
 80154a2:	f8cb 3004 	str.w	r3, [fp, #4]
 80154a6:	2205      	movs	r2, #5
 80154a8:	eb0b 0309 	add.w	r3, fp, r9
 80154ac:	f1b9 0f0f 	cmp.w	r9, #15
 80154b0:	e9c3 2201 	strd	r2, r2, [r3, #4]
 80154b4:	f67f aefc 	bls.w	80152b0 <_malloc_r+0x25c>
 80154b8:	f10b 0108 	add.w	r1, fp, #8
 80154bc:	4628      	mov	r0, r5
 80154be:	f004 fccf 	bl	8019e60 <_free_r>
 80154c2:	e6f5      	b.n	80152b0 <_malloc_r+0x25c>
 80154c4:	68b4      	ldr	r4, [r6, #8]
 80154c6:	f047 0301 	orr.w	r3, r7, #1
 80154ca:	4427      	add	r7, r4
 80154cc:	f042 0201 	orr.w	r2, r2, #1
 80154d0:	6063      	str	r3, [r4, #4]
 80154d2:	60b7      	str	r7, [r6, #8]
 80154d4:	607a      	str	r2, [r7, #4]
 80154d6:	e5ee      	b.n	80150b6 <_malloc_r+0x62>

080154d8 <memcmp>:
 80154d8:	b530      	push	{r4, r5, lr}
 80154da:	3901      	subs	r1, #1
 80154dc:	2400      	movs	r4, #0
 80154de:	42a2      	cmp	r2, r4
 80154e0:	d101      	bne.n	80154e6 <memcmp+0xe>
 80154e2:	2000      	movs	r0, #0
 80154e4:	e005      	b.n	80154f2 <memcmp+0x1a>
 80154e6:	5d03      	ldrb	r3, [r0, r4]
 80154e8:	3401      	adds	r4, #1
 80154ea:	5d0d      	ldrb	r5, [r1, r4]
 80154ec:	42ab      	cmp	r3, r5
 80154ee:	d0f6      	beq.n	80154de <memcmp+0x6>
 80154f0:	1b58      	subs	r0, r3, r5
 80154f2:	bd30      	pop	{r4, r5, pc}

080154f4 <memcpy>:
 80154f4:	440a      	add	r2, r1
 80154f6:	4291      	cmp	r1, r2
 80154f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80154fc:	d100      	bne.n	8015500 <memcpy+0xc>
 80154fe:	4770      	bx	lr
 8015500:	b510      	push	{r4, lr}
 8015502:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015506:	f803 4f01 	strb.w	r4, [r3, #1]!
 801550a:	4291      	cmp	r1, r2
 801550c:	d1f9      	bne.n	8015502 <memcpy+0xe>
 801550e:	bd10      	pop	{r4, pc}

08015510 <memset>:
 8015510:	4402      	add	r2, r0
 8015512:	4603      	mov	r3, r0
 8015514:	4293      	cmp	r3, r2
 8015516:	d100      	bne.n	801551a <memset+0xa>
 8015518:	4770      	bx	lr
 801551a:	f803 1b01 	strb.w	r1, [r3], #1
 801551e:	e7f9      	b.n	8015514 <memset+0x4>

08015520 <__malloc_lock>:
 8015520:	4801      	ldr	r0, [pc, #4]	; (8015528 <__malloc_lock+0x8>)
 8015522:	f005 b8f7 	b.w	801a714 <__retarget_lock_acquire_recursive>
 8015526:	bf00      	nop
 8015528:	200110b0 	.word	0x200110b0

0801552c <__malloc_unlock>:
 801552c:	4801      	ldr	r0, [pc, #4]	; (8015534 <__malloc_unlock+0x8>)
 801552e:	f005 b8f2 	b.w	801a716 <__retarget_lock_release_recursive>
 8015532:	bf00      	nop
 8015534:	200110b0 	.word	0x200110b0

08015538 <printf>:
 8015538:	b40f      	push	{r0, r1, r2, r3}
 801553a:	b507      	push	{r0, r1, r2, lr}
 801553c:	4906      	ldr	r1, [pc, #24]	; (8015558 <printf+0x20>)
 801553e:	ab04      	add	r3, sp, #16
 8015540:	6808      	ldr	r0, [r1, #0]
 8015542:	f853 2b04 	ldr.w	r2, [r3], #4
 8015546:	6881      	ldr	r1, [r0, #8]
 8015548:	9301      	str	r3, [sp, #4]
 801554a:	f002 f9b9 	bl	80178c0 <_vfprintf_r>
 801554e:	b003      	add	sp, #12
 8015550:	f85d eb04 	ldr.w	lr, [sp], #4
 8015554:	b004      	add	sp, #16
 8015556:	4770      	bx	lr
 8015558:	20003880 	.word	0x20003880

0801555c <_sbrk_r>:
 801555c:	b538      	push	{r3, r4, r5, lr}
 801555e:	4d06      	ldr	r5, [pc, #24]	; (8015578 <_sbrk_r+0x1c>)
 8015560:	2300      	movs	r3, #0
 8015562:	4604      	mov	r4, r0
 8015564:	4608      	mov	r0, r1
 8015566:	602b      	str	r3, [r5, #0]
 8015568:	f7fe fdd6 	bl	8014118 <_sbrk>
 801556c:	1c43      	adds	r3, r0, #1
 801556e:	d102      	bne.n	8015576 <_sbrk_r+0x1a>
 8015570:	682b      	ldr	r3, [r5, #0]
 8015572:	b103      	cbz	r3, 8015576 <_sbrk_r+0x1a>
 8015574:	6023      	str	r3, [r4, #0]
 8015576:	bd38      	pop	{r3, r4, r5, pc}
 8015578:	200110a8 	.word	0x200110a8

0801557c <sprintf>:
 801557c:	b40e      	push	{r1, r2, r3}
 801557e:	b500      	push	{lr}
 8015580:	b09c      	sub	sp, #112	; 0x70
 8015582:	ab1d      	add	r3, sp, #116	; 0x74
 8015584:	9002      	str	r0, [sp, #8]
 8015586:	9006      	str	r0, [sp, #24]
 8015588:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801558c:	4809      	ldr	r0, [pc, #36]	; (80155b4 <sprintf+0x38>)
 801558e:	9107      	str	r1, [sp, #28]
 8015590:	9104      	str	r1, [sp, #16]
 8015592:	4909      	ldr	r1, [pc, #36]	; (80155b8 <sprintf+0x3c>)
 8015594:	f853 2b04 	ldr.w	r2, [r3], #4
 8015598:	9105      	str	r1, [sp, #20]
 801559a:	6800      	ldr	r0, [r0, #0]
 801559c:	9301      	str	r3, [sp, #4]
 801559e:	a902      	add	r1, sp, #8
 80155a0:	f000 ff5e 	bl	8016460 <_svfprintf_r>
 80155a4:	9b02      	ldr	r3, [sp, #8]
 80155a6:	2200      	movs	r2, #0
 80155a8:	701a      	strb	r2, [r3, #0]
 80155aa:	b01c      	add	sp, #112	; 0x70
 80155ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80155b0:	b003      	add	sp, #12
 80155b2:	4770      	bx	lr
 80155b4:	20003880 	.word	0x20003880
 80155b8:	ffff0208 	.word	0xffff0208

080155bc <strcat>:
 80155bc:	b510      	push	{r4, lr}
 80155be:	4602      	mov	r2, r0
 80155c0:	7814      	ldrb	r4, [r2, #0]
 80155c2:	4613      	mov	r3, r2
 80155c4:	3201      	adds	r2, #1
 80155c6:	2c00      	cmp	r4, #0
 80155c8:	d1fa      	bne.n	80155c0 <strcat+0x4>
 80155ca:	3b01      	subs	r3, #1
 80155cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80155d0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80155d4:	2a00      	cmp	r2, #0
 80155d6:	d1f9      	bne.n	80155cc <strcat+0x10>
 80155d8:	bd10      	pop	{r4, pc}

080155da <strchr>:
 80155da:	b2c9      	uxtb	r1, r1
 80155dc:	4603      	mov	r3, r0
 80155de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80155e2:	b11a      	cbz	r2, 80155ec <strchr+0x12>
 80155e4:	428a      	cmp	r2, r1
 80155e6:	d1f9      	bne.n	80155dc <strchr+0x2>
 80155e8:	4618      	mov	r0, r3
 80155ea:	4770      	bx	lr
 80155ec:	2900      	cmp	r1, #0
 80155ee:	bf18      	it	ne
 80155f0:	2300      	movne	r3, #0
 80155f2:	e7f9      	b.n	80155e8 <strchr+0xe>

080155f4 <strcpy>:
 80155f4:	4603      	mov	r3, r0
 80155f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80155fa:	f803 2b01 	strb.w	r2, [r3], #1
 80155fe:	2a00      	cmp	r2, #0
 8015600:	d1f9      	bne.n	80155f6 <strcpy+0x2>
 8015602:	4770      	bx	lr

08015604 <strncmp>:
 8015604:	b510      	push	{r4, lr}
 8015606:	b16a      	cbz	r2, 8015624 <strncmp+0x20>
 8015608:	3901      	subs	r1, #1
 801560a:	1884      	adds	r4, r0, r2
 801560c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015610:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015614:	4293      	cmp	r3, r2
 8015616:	d103      	bne.n	8015620 <strncmp+0x1c>
 8015618:	42a0      	cmp	r0, r4
 801561a:	d001      	beq.n	8015620 <strncmp+0x1c>
 801561c:	2b00      	cmp	r3, #0
 801561e:	d1f5      	bne.n	801560c <strncmp+0x8>
 8015620:	1a98      	subs	r0, r3, r2
 8015622:	bd10      	pop	{r4, pc}
 8015624:	4610      	mov	r0, r2
 8015626:	e7fc      	b.n	8015622 <strncmp+0x1e>

08015628 <strncpy>:
 8015628:	b510      	push	{r4, lr}
 801562a:	3901      	subs	r1, #1
 801562c:	4603      	mov	r3, r0
 801562e:	b132      	cbz	r2, 801563e <strncpy+0x16>
 8015630:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015634:	f803 4b01 	strb.w	r4, [r3], #1
 8015638:	3a01      	subs	r2, #1
 801563a:	2c00      	cmp	r4, #0
 801563c:	d1f7      	bne.n	801562e <strncpy+0x6>
 801563e:	441a      	add	r2, r3
 8015640:	2100      	movs	r1, #0
 8015642:	4293      	cmp	r3, r2
 8015644:	d100      	bne.n	8015648 <strncpy+0x20>
 8015646:	bd10      	pop	{r4, pc}
 8015648:	f803 1b01 	strb.w	r1, [r3], #1
 801564c:	e7f9      	b.n	8015642 <strncpy+0x1a>

0801564e <strstr>:
 801564e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015650:	780c      	ldrb	r4, [r1, #0]
 8015652:	b164      	cbz	r4, 801566e <strstr+0x20>
 8015654:	4603      	mov	r3, r0
 8015656:	781a      	ldrb	r2, [r3, #0]
 8015658:	4618      	mov	r0, r3
 801565a:	1c5e      	adds	r6, r3, #1
 801565c:	b90a      	cbnz	r2, 8015662 <strstr+0x14>
 801565e:	4610      	mov	r0, r2
 8015660:	e005      	b.n	801566e <strstr+0x20>
 8015662:	4294      	cmp	r4, r2
 8015664:	d108      	bne.n	8015678 <strstr+0x2a>
 8015666:	460d      	mov	r5, r1
 8015668:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801566c:	b902      	cbnz	r2, 8015670 <strstr+0x22>
 801566e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015670:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8015674:	4297      	cmp	r7, r2
 8015676:	d0f7      	beq.n	8015668 <strstr+0x1a>
 8015678:	4633      	mov	r3, r6
 801567a:	e7ec      	b.n	8015656 <strstr+0x8>

0801567c <sulp>:
 801567c:	b570      	push	{r4, r5, r6, lr}
 801567e:	4604      	mov	r4, r0
 8015680:	460d      	mov	r5, r1
 8015682:	ec45 4b10 	vmov	d0, r4, r5
 8015686:	4616      	mov	r6, r2
 8015688:	f005 fbe2 	bl	801ae50 <__ulp>
 801568c:	ec51 0b10 	vmov	r0, r1, d0
 8015690:	b17e      	cbz	r6, 80156b2 <sulp+0x36>
 8015692:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015696:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801569a:	2b00      	cmp	r3, #0
 801569c:	dd09      	ble.n	80156b2 <sulp+0x36>
 801569e:	051b      	lsls	r3, r3, #20
 80156a0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80156a4:	2400      	movs	r4, #0
 80156a6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80156aa:	4622      	mov	r2, r4
 80156ac:	462b      	mov	r3, r5
 80156ae:	f7ee ffb3 	bl	8004618 <__aeabi_dmul>
 80156b2:	bd70      	pop	{r4, r5, r6, pc}
 80156b4:	0000      	movs	r0, r0
	...

080156b8 <_strtod_l>:
 80156b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156bc:	b0a3      	sub	sp, #140	; 0x8c
 80156be:	461f      	mov	r7, r3
 80156c0:	2300      	movs	r3, #0
 80156c2:	931e      	str	r3, [sp, #120]	; 0x78
 80156c4:	4ba4      	ldr	r3, [pc, #656]	; (8015958 <_strtod_l+0x2a0>)
 80156c6:	9219      	str	r2, [sp, #100]	; 0x64
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	9307      	str	r3, [sp, #28]
 80156cc:	4604      	mov	r4, r0
 80156ce:	4618      	mov	r0, r3
 80156d0:	4688      	mov	r8, r1
 80156d2:	f7ee fd8d 	bl	80041f0 <strlen>
 80156d6:	f04f 0a00 	mov.w	sl, #0
 80156da:	4605      	mov	r5, r0
 80156dc:	f04f 0b00 	mov.w	fp, #0
 80156e0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80156e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80156e6:	781a      	ldrb	r2, [r3, #0]
 80156e8:	2a2b      	cmp	r2, #43	; 0x2b
 80156ea:	d04c      	beq.n	8015786 <_strtod_l+0xce>
 80156ec:	d839      	bhi.n	8015762 <_strtod_l+0xaa>
 80156ee:	2a0d      	cmp	r2, #13
 80156f0:	d832      	bhi.n	8015758 <_strtod_l+0xa0>
 80156f2:	2a08      	cmp	r2, #8
 80156f4:	d832      	bhi.n	801575c <_strtod_l+0xa4>
 80156f6:	2a00      	cmp	r2, #0
 80156f8:	d03c      	beq.n	8015774 <_strtod_l+0xbc>
 80156fa:	2300      	movs	r3, #0
 80156fc:	930e      	str	r3, [sp, #56]	; 0x38
 80156fe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8015700:	7833      	ldrb	r3, [r6, #0]
 8015702:	2b30      	cmp	r3, #48	; 0x30
 8015704:	f040 80b4 	bne.w	8015870 <_strtod_l+0x1b8>
 8015708:	7873      	ldrb	r3, [r6, #1]
 801570a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801570e:	2b58      	cmp	r3, #88	; 0x58
 8015710:	d16c      	bne.n	80157ec <_strtod_l+0x134>
 8015712:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015714:	9301      	str	r3, [sp, #4]
 8015716:	ab1e      	add	r3, sp, #120	; 0x78
 8015718:	9702      	str	r7, [sp, #8]
 801571a:	9300      	str	r3, [sp, #0]
 801571c:	4a8f      	ldr	r2, [pc, #572]	; (801595c <_strtod_l+0x2a4>)
 801571e:	ab1f      	add	r3, sp, #124	; 0x7c
 8015720:	a91d      	add	r1, sp, #116	; 0x74
 8015722:	4620      	mov	r0, r4
 8015724:	f004 fce2 	bl	801a0ec <__gethex>
 8015728:	f010 0707 	ands.w	r7, r0, #7
 801572c:	4605      	mov	r5, r0
 801572e:	d005      	beq.n	801573c <_strtod_l+0x84>
 8015730:	2f06      	cmp	r7, #6
 8015732:	d12a      	bne.n	801578a <_strtod_l+0xd2>
 8015734:	3601      	adds	r6, #1
 8015736:	2300      	movs	r3, #0
 8015738:	961d      	str	r6, [sp, #116]	; 0x74
 801573a:	930e      	str	r3, [sp, #56]	; 0x38
 801573c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801573e:	2b00      	cmp	r3, #0
 8015740:	f040 8596 	bne.w	8016270 <_strtod_l+0xbb8>
 8015744:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015746:	b1db      	cbz	r3, 8015780 <_strtod_l+0xc8>
 8015748:	4652      	mov	r2, sl
 801574a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801574e:	ec43 2b10 	vmov	d0, r2, r3
 8015752:	b023      	add	sp, #140	; 0x8c
 8015754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015758:	2a20      	cmp	r2, #32
 801575a:	d1ce      	bne.n	80156fa <_strtod_l+0x42>
 801575c:	3301      	adds	r3, #1
 801575e:	931d      	str	r3, [sp, #116]	; 0x74
 8015760:	e7c0      	b.n	80156e4 <_strtod_l+0x2c>
 8015762:	2a2d      	cmp	r2, #45	; 0x2d
 8015764:	d1c9      	bne.n	80156fa <_strtod_l+0x42>
 8015766:	2201      	movs	r2, #1
 8015768:	920e      	str	r2, [sp, #56]	; 0x38
 801576a:	1c5a      	adds	r2, r3, #1
 801576c:	921d      	str	r2, [sp, #116]	; 0x74
 801576e:	785b      	ldrb	r3, [r3, #1]
 8015770:	2b00      	cmp	r3, #0
 8015772:	d1c4      	bne.n	80156fe <_strtod_l+0x46>
 8015774:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015776:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801577a:	2b00      	cmp	r3, #0
 801577c:	f040 8576 	bne.w	801626c <_strtod_l+0xbb4>
 8015780:	4652      	mov	r2, sl
 8015782:	465b      	mov	r3, fp
 8015784:	e7e3      	b.n	801574e <_strtod_l+0x96>
 8015786:	2200      	movs	r2, #0
 8015788:	e7ee      	b.n	8015768 <_strtod_l+0xb0>
 801578a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801578c:	b13a      	cbz	r2, 801579e <_strtod_l+0xe6>
 801578e:	2135      	movs	r1, #53	; 0x35
 8015790:	a820      	add	r0, sp, #128	; 0x80
 8015792:	f005 fc68 	bl	801b066 <__copybits>
 8015796:	991e      	ldr	r1, [sp, #120]	; 0x78
 8015798:	4620      	mov	r0, r4
 801579a:	f005 f860 	bl	801a85e <_Bfree>
 801579e:	3f01      	subs	r7, #1
 80157a0:	2f05      	cmp	r7, #5
 80157a2:	d807      	bhi.n	80157b4 <_strtod_l+0xfc>
 80157a4:	e8df f007 	tbb	[pc, r7]
 80157a8:	1d180b0e 	.word	0x1d180b0e
 80157ac:	030e      	.short	0x030e
 80157ae:	f04f 0b00 	mov.w	fp, #0
 80157b2:	46da      	mov	sl, fp
 80157b4:	0728      	lsls	r0, r5, #28
 80157b6:	d5c1      	bpl.n	801573c <_strtod_l+0x84>
 80157b8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80157bc:	e7be      	b.n	801573c <_strtod_l+0x84>
 80157be:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80157c2:	e7f7      	b.n	80157b4 <_strtod_l+0xfc>
 80157c4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80157c8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80157ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80157ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80157d2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80157d6:	e7ed      	b.n	80157b4 <_strtod_l+0xfc>
 80157d8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8015960 <_strtod_l+0x2a8>
 80157dc:	f04f 0a00 	mov.w	sl, #0
 80157e0:	e7e8      	b.n	80157b4 <_strtod_l+0xfc>
 80157e2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80157e6:	f04f 3aff 	mov.w	sl, #4294967295
 80157ea:	e7e3      	b.n	80157b4 <_strtod_l+0xfc>
 80157ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80157ee:	1c5a      	adds	r2, r3, #1
 80157f0:	921d      	str	r2, [sp, #116]	; 0x74
 80157f2:	785b      	ldrb	r3, [r3, #1]
 80157f4:	2b30      	cmp	r3, #48	; 0x30
 80157f6:	d0f9      	beq.n	80157ec <_strtod_l+0x134>
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d09f      	beq.n	801573c <_strtod_l+0x84>
 80157fc:	2301      	movs	r3, #1
 80157fe:	f04f 0900 	mov.w	r9, #0
 8015802:	9304      	str	r3, [sp, #16]
 8015804:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015806:	930a      	str	r3, [sp, #40]	; 0x28
 8015808:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801580c:	464f      	mov	r7, r9
 801580e:	220a      	movs	r2, #10
 8015810:	981d      	ldr	r0, [sp, #116]	; 0x74
 8015812:	7806      	ldrb	r6, [r0, #0]
 8015814:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8015818:	b2d9      	uxtb	r1, r3
 801581a:	2909      	cmp	r1, #9
 801581c:	d92a      	bls.n	8015874 <_strtod_l+0x1bc>
 801581e:	9907      	ldr	r1, [sp, #28]
 8015820:	462a      	mov	r2, r5
 8015822:	f7ff feef 	bl	8015604 <strncmp>
 8015826:	b398      	cbz	r0, 8015890 <_strtod_l+0x1d8>
 8015828:	2000      	movs	r0, #0
 801582a:	4633      	mov	r3, r6
 801582c:	463d      	mov	r5, r7
 801582e:	9007      	str	r0, [sp, #28]
 8015830:	4602      	mov	r2, r0
 8015832:	2b65      	cmp	r3, #101	; 0x65
 8015834:	d001      	beq.n	801583a <_strtod_l+0x182>
 8015836:	2b45      	cmp	r3, #69	; 0x45
 8015838:	d118      	bne.n	801586c <_strtod_l+0x1b4>
 801583a:	b91d      	cbnz	r5, 8015844 <_strtod_l+0x18c>
 801583c:	9b04      	ldr	r3, [sp, #16]
 801583e:	4303      	orrs	r3, r0
 8015840:	d098      	beq.n	8015774 <_strtod_l+0xbc>
 8015842:	2500      	movs	r5, #0
 8015844:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8015848:	f108 0301 	add.w	r3, r8, #1
 801584c:	931d      	str	r3, [sp, #116]	; 0x74
 801584e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8015852:	2b2b      	cmp	r3, #43	; 0x2b
 8015854:	d075      	beq.n	8015942 <_strtod_l+0x28a>
 8015856:	2b2d      	cmp	r3, #45	; 0x2d
 8015858:	d07b      	beq.n	8015952 <_strtod_l+0x29a>
 801585a:	f04f 0c00 	mov.w	ip, #0
 801585e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8015862:	2909      	cmp	r1, #9
 8015864:	f240 8082 	bls.w	801596c <_strtod_l+0x2b4>
 8015868:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801586c:	2600      	movs	r6, #0
 801586e:	e09d      	b.n	80159ac <_strtod_l+0x2f4>
 8015870:	2300      	movs	r3, #0
 8015872:	e7c4      	b.n	80157fe <_strtod_l+0x146>
 8015874:	2f08      	cmp	r7, #8
 8015876:	bfd8      	it	le
 8015878:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801587a:	f100 0001 	add.w	r0, r0, #1
 801587e:	bfda      	itte	le
 8015880:	fb02 3301 	mlale	r3, r2, r1, r3
 8015884:	9309      	strle	r3, [sp, #36]	; 0x24
 8015886:	fb02 3909 	mlagt	r9, r2, r9, r3
 801588a:	3701      	adds	r7, #1
 801588c:	901d      	str	r0, [sp, #116]	; 0x74
 801588e:	e7bf      	b.n	8015810 <_strtod_l+0x158>
 8015890:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015892:	195a      	adds	r2, r3, r5
 8015894:	921d      	str	r2, [sp, #116]	; 0x74
 8015896:	5d5b      	ldrb	r3, [r3, r5]
 8015898:	2f00      	cmp	r7, #0
 801589a:	d037      	beq.n	801590c <_strtod_l+0x254>
 801589c:	9007      	str	r0, [sp, #28]
 801589e:	463d      	mov	r5, r7
 80158a0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80158a4:	2a09      	cmp	r2, #9
 80158a6:	d912      	bls.n	80158ce <_strtod_l+0x216>
 80158a8:	2201      	movs	r2, #1
 80158aa:	e7c2      	b.n	8015832 <_strtod_l+0x17a>
 80158ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80158ae:	1c5a      	adds	r2, r3, #1
 80158b0:	921d      	str	r2, [sp, #116]	; 0x74
 80158b2:	785b      	ldrb	r3, [r3, #1]
 80158b4:	3001      	adds	r0, #1
 80158b6:	2b30      	cmp	r3, #48	; 0x30
 80158b8:	d0f8      	beq.n	80158ac <_strtod_l+0x1f4>
 80158ba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80158be:	2a08      	cmp	r2, #8
 80158c0:	f200 84db 	bhi.w	801627a <_strtod_l+0xbc2>
 80158c4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80158c6:	9007      	str	r0, [sp, #28]
 80158c8:	2000      	movs	r0, #0
 80158ca:	920a      	str	r2, [sp, #40]	; 0x28
 80158cc:	4605      	mov	r5, r0
 80158ce:	3b30      	subs	r3, #48	; 0x30
 80158d0:	f100 0201 	add.w	r2, r0, #1
 80158d4:	d014      	beq.n	8015900 <_strtod_l+0x248>
 80158d6:	9907      	ldr	r1, [sp, #28]
 80158d8:	4411      	add	r1, r2
 80158da:	9107      	str	r1, [sp, #28]
 80158dc:	462a      	mov	r2, r5
 80158de:	eb00 0e05 	add.w	lr, r0, r5
 80158e2:	210a      	movs	r1, #10
 80158e4:	4572      	cmp	r2, lr
 80158e6:	d113      	bne.n	8015910 <_strtod_l+0x258>
 80158e8:	182a      	adds	r2, r5, r0
 80158ea:	2a08      	cmp	r2, #8
 80158ec:	f105 0501 	add.w	r5, r5, #1
 80158f0:	4405      	add	r5, r0
 80158f2:	dc1c      	bgt.n	801592e <_strtod_l+0x276>
 80158f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80158f6:	220a      	movs	r2, #10
 80158f8:	fb02 3301 	mla	r3, r2, r1, r3
 80158fc:	9309      	str	r3, [sp, #36]	; 0x24
 80158fe:	2200      	movs	r2, #0
 8015900:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015902:	1c59      	adds	r1, r3, #1
 8015904:	911d      	str	r1, [sp, #116]	; 0x74
 8015906:	785b      	ldrb	r3, [r3, #1]
 8015908:	4610      	mov	r0, r2
 801590a:	e7c9      	b.n	80158a0 <_strtod_l+0x1e8>
 801590c:	4638      	mov	r0, r7
 801590e:	e7d2      	b.n	80158b6 <_strtod_l+0x1fe>
 8015910:	2a08      	cmp	r2, #8
 8015912:	dc04      	bgt.n	801591e <_strtod_l+0x266>
 8015914:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8015916:	434e      	muls	r6, r1
 8015918:	9609      	str	r6, [sp, #36]	; 0x24
 801591a:	3201      	adds	r2, #1
 801591c:	e7e2      	b.n	80158e4 <_strtod_l+0x22c>
 801591e:	f102 0c01 	add.w	ip, r2, #1
 8015922:	f1bc 0f10 	cmp.w	ip, #16
 8015926:	bfd8      	it	le
 8015928:	fb01 f909 	mulle.w	r9, r1, r9
 801592c:	e7f5      	b.n	801591a <_strtod_l+0x262>
 801592e:	2d10      	cmp	r5, #16
 8015930:	bfdc      	itt	le
 8015932:	220a      	movle	r2, #10
 8015934:	fb02 3909 	mlale	r9, r2, r9, r3
 8015938:	e7e1      	b.n	80158fe <_strtod_l+0x246>
 801593a:	2300      	movs	r3, #0
 801593c:	9307      	str	r3, [sp, #28]
 801593e:	2201      	movs	r2, #1
 8015940:	e77c      	b.n	801583c <_strtod_l+0x184>
 8015942:	f04f 0c00 	mov.w	ip, #0
 8015946:	f108 0302 	add.w	r3, r8, #2
 801594a:	931d      	str	r3, [sp, #116]	; 0x74
 801594c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8015950:	e785      	b.n	801585e <_strtod_l+0x1a6>
 8015952:	f04f 0c01 	mov.w	ip, #1
 8015956:	e7f6      	b.n	8015946 <_strtod_l+0x28e>
 8015958:	0801e968 	.word	0x0801e968
 801595c:	0801e694 	.word	0x0801e694
 8015960:	7ff00000 	.word	0x7ff00000
 8015964:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015966:	1c59      	adds	r1, r3, #1
 8015968:	911d      	str	r1, [sp, #116]	; 0x74
 801596a:	785b      	ldrb	r3, [r3, #1]
 801596c:	2b30      	cmp	r3, #48	; 0x30
 801596e:	d0f9      	beq.n	8015964 <_strtod_l+0x2ac>
 8015970:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8015974:	2908      	cmp	r1, #8
 8015976:	f63f af79 	bhi.w	801586c <_strtod_l+0x1b4>
 801597a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801597e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015980:	9308      	str	r3, [sp, #32]
 8015982:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015984:	1c59      	adds	r1, r3, #1
 8015986:	911d      	str	r1, [sp, #116]	; 0x74
 8015988:	785b      	ldrb	r3, [r3, #1]
 801598a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801598e:	2e09      	cmp	r6, #9
 8015990:	d937      	bls.n	8015a02 <_strtod_l+0x34a>
 8015992:	9e08      	ldr	r6, [sp, #32]
 8015994:	1b89      	subs	r1, r1, r6
 8015996:	2908      	cmp	r1, #8
 8015998:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801599c:	dc02      	bgt.n	80159a4 <_strtod_l+0x2ec>
 801599e:	4576      	cmp	r6, lr
 80159a0:	bfa8      	it	ge
 80159a2:	4676      	movge	r6, lr
 80159a4:	f1bc 0f00 	cmp.w	ip, #0
 80159a8:	d000      	beq.n	80159ac <_strtod_l+0x2f4>
 80159aa:	4276      	negs	r6, r6
 80159ac:	2d00      	cmp	r5, #0
 80159ae:	d14f      	bne.n	8015a50 <_strtod_l+0x398>
 80159b0:	9904      	ldr	r1, [sp, #16]
 80159b2:	4301      	orrs	r1, r0
 80159b4:	f47f aec2 	bne.w	801573c <_strtod_l+0x84>
 80159b8:	2a00      	cmp	r2, #0
 80159ba:	f47f aedb 	bne.w	8015774 <_strtod_l+0xbc>
 80159be:	2b69      	cmp	r3, #105	; 0x69
 80159c0:	d027      	beq.n	8015a12 <_strtod_l+0x35a>
 80159c2:	dc24      	bgt.n	8015a0e <_strtod_l+0x356>
 80159c4:	2b49      	cmp	r3, #73	; 0x49
 80159c6:	d024      	beq.n	8015a12 <_strtod_l+0x35a>
 80159c8:	2b4e      	cmp	r3, #78	; 0x4e
 80159ca:	f47f aed3 	bne.w	8015774 <_strtod_l+0xbc>
 80159ce:	499e      	ldr	r1, [pc, #632]	; (8015c48 <_strtod_l+0x590>)
 80159d0:	a81d      	add	r0, sp, #116	; 0x74
 80159d2:	f004 fde3 	bl	801a59c <__match>
 80159d6:	2800      	cmp	r0, #0
 80159d8:	f43f aecc 	beq.w	8015774 <_strtod_l+0xbc>
 80159dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80159de:	781b      	ldrb	r3, [r3, #0]
 80159e0:	2b28      	cmp	r3, #40	; 0x28
 80159e2:	d12d      	bne.n	8015a40 <_strtod_l+0x388>
 80159e4:	4999      	ldr	r1, [pc, #612]	; (8015c4c <_strtod_l+0x594>)
 80159e6:	aa20      	add	r2, sp, #128	; 0x80
 80159e8:	a81d      	add	r0, sp, #116	; 0x74
 80159ea:	f004 fdeb 	bl	801a5c4 <__hexnan>
 80159ee:	2805      	cmp	r0, #5
 80159f0:	d126      	bne.n	8015a40 <_strtod_l+0x388>
 80159f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80159f4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80159f8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80159fc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8015a00:	e69c      	b.n	801573c <_strtod_l+0x84>
 8015a02:	210a      	movs	r1, #10
 8015a04:	fb01 3e0e 	mla	lr, r1, lr, r3
 8015a08:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8015a0c:	e7b9      	b.n	8015982 <_strtod_l+0x2ca>
 8015a0e:	2b6e      	cmp	r3, #110	; 0x6e
 8015a10:	e7db      	b.n	80159ca <_strtod_l+0x312>
 8015a12:	498f      	ldr	r1, [pc, #572]	; (8015c50 <_strtod_l+0x598>)
 8015a14:	a81d      	add	r0, sp, #116	; 0x74
 8015a16:	f004 fdc1 	bl	801a59c <__match>
 8015a1a:	2800      	cmp	r0, #0
 8015a1c:	f43f aeaa 	beq.w	8015774 <_strtod_l+0xbc>
 8015a20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015a22:	498c      	ldr	r1, [pc, #560]	; (8015c54 <_strtod_l+0x59c>)
 8015a24:	3b01      	subs	r3, #1
 8015a26:	a81d      	add	r0, sp, #116	; 0x74
 8015a28:	931d      	str	r3, [sp, #116]	; 0x74
 8015a2a:	f004 fdb7 	bl	801a59c <__match>
 8015a2e:	b910      	cbnz	r0, 8015a36 <_strtod_l+0x37e>
 8015a30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015a32:	3301      	adds	r3, #1
 8015a34:	931d      	str	r3, [sp, #116]	; 0x74
 8015a36:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8015c64 <_strtod_l+0x5ac>
 8015a3a:	f04f 0a00 	mov.w	sl, #0
 8015a3e:	e67d      	b.n	801573c <_strtod_l+0x84>
 8015a40:	4885      	ldr	r0, [pc, #532]	; (8015c58 <_strtod_l+0x5a0>)
 8015a42:	f005 fb8d 	bl	801b160 <nan>
 8015a46:	ed8d 0b04 	vstr	d0, [sp, #16]
 8015a4a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8015a4e:	e675      	b.n	801573c <_strtod_l+0x84>
 8015a50:	9b07      	ldr	r3, [sp, #28]
 8015a52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015a54:	1af3      	subs	r3, r6, r3
 8015a56:	2f00      	cmp	r7, #0
 8015a58:	bf08      	it	eq
 8015a5a:	462f      	moveq	r7, r5
 8015a5c:	2d10      	cmp	r5, #16
 8015a5e:	9308      	str	r3, [sp, #32]
 8015a60:	46a8      	mov	r8, r5
 8015a62:	bfa8      	it	ge
 8015a64:	f04f 0810 	movge.w	r8, #16
 8015a68:	f7ee fd5c 	bl	8004524 <__aeabi_ui2d>
 8015a6c:	2d09      	cmp	r5, #9
 8015a6e:	4682      	mov	sl, r0
 8015a70:	468b      	mov	fp, r1
 8015a72:	dd13      	ble.n	8015a9c <_strtod_l+0x3e4>
 8015a74:	4b79      	ldr	r3, [pc, #484]	; (8015c5c <_strtod_l+0x5a4>)
 8015a76:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015a7a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015a7e:	f7ee fdcb 	bl	8004618 <__aeabi_dmul>
 8015a82:	4682      	mov	sl, r0
 8015a84:	4648      	mov	r0, r9
 8015a86:	468b      	mov	fp, r1
 8015a88:	f7ee fd4c 	bl	8004524 <__aeabi_ui2d>
 8015a8c:	4602      	mov	r2, r0
 8015a8e:	460b      	mov	r3, r1
 8015a90:	4650      	mov	r0, sl
 8015a92:	4659      	mov	r1, fp
 8015a94:	f7ee fc0a 	bl	80042ac <__adddf3>
 8015a98:	4682      	mov	sl, r0
 8015a9a:	468b      	mov	fp, r1
 8015a9c:	2d0f      	cmp	r5, #15
 8015a9e:	dc38      	bgt.n	8015b12 <_strtod_l+0x45a>
 8015aa0:	9b08      	ldr	r3, [sp, #32]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	f43f ae4a 	beq.w	801573c <_strtod_l+0x84>
 8015aa8:	dd24      	ble.n	8015af4 <_strtod_l+0x43c>
 8015aaa:	2b16      	cmp	r3, #22
 8015aac:	dc0b      	bgt.n	8015ac6 <_strtod_l+0x40e>
 8015aae:	4d6b      	ldr	r5, [pc, #428]	; (8015c5c <_strtod_l+0x5a4>)
 8015ab0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8015ab4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015ab8:	4652      	mov	r2, sl
 8015aba:	465b      	mov	r3, fp
 8015abc:	f7ee fdac 	bl	8004618 <__aeabi_dmul>
 8015ac0:	4682      	mov	sl, r0
 8015ac2:	468b      	mov	fp, r1
 8015ac4:	e63a      	b.n	801573c <_strtod_l+0x84>
 8015ac6:	9a08      	ldr	r2, [sp, #32]
 8015ac8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8015acc:	4293      	cmp	r3, r2
 8015ace:	db20      	blt.n	8015b12 <_strtod_l+0x45a>
 8015ad0:	4c62      	ldr	r4, [pc, #392]	; (8015c5c <_strtod_l+0x5a4>)
 8015ad2:	f1c5 050f 	rsb	r5, r5, #15
 8015ad6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8015ada:	4652      	mov	r2, sl
 8015adc:	465b      	mov	r3, fp
 8015ade:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ae2:	f7ee fd99 	bl	8004618 <__aeabi_dmul>
 8015ae6:	9b08      	ldr	r3, [sp, #32]
 8015ae8:	1b5d      	subs	r5, r3, r5
 8015aea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8015aee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015af2:	e7e3      	b.n	8015abc <_strtod_l+0x404>
 8015af4:	9b08      	ldr	r3, [sp, #32]
 8015af6:	3316      	adds	r3, #22
 8015af8:	db0b      	blt.n	8015b12 <_strtod_l+0x45a>
 8015afa:	9b07      	ldr	r3, [sp, #28]
 8015afc:	4a57      	ldr	r2, [pc, #348]	; (8015c5c <_strtod_l+0x5a4>)
 8015afe:	1b9e      	subs	r6, r3, r6
 8015b00:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8015b04:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015b08:	4650      	mov	r0, sl
 8015b0a:	4659      	mov	r1, fp
 8015b0c:	f7ee feae 	bl	800486c <__aeabi_ddiv>
 8015b10:	e7d6      	b.n	8015ac0 <_strtod_l+0x408>
 8015b12:	9b08      	ldr	r3, [sp, #32]
 8015b14:	eba5 0808 	sub.w	r8, r5, r8
 8015b18:	4498      	add	r8, r3
 8015b1a:	f1b8 0f00 	cmp.w	r8, #0
 8015b1e:	dd71      	ble.n	8015c04 <_strtod_l+0x54c>
 8015b20:	f018 030f 	ands.w	r3, r8, #15
 8015b24:	d00a      	beq.n	8015b3c <_strtod_l+0x484>
 8015b26:	494d      	ldr	r1, [pc, #308]	; (8015c5c <_strtod_l+0x5a4>)
 8015b28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015b2c:	4652      	mov	r2, sl
 8015b2e:	465b      	mov	r3, fp
 8015b30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b34:	f7ee fd70 	bl	8004618 <__aeabi_dmul>
 8015b38:	4682      	mov	sl, r0
 8015b3a:	468b      	mov	fp, r1
 8015b3c:	f038 080f 	bics.w	r8, r8, #15
 8015b40:	d04d      	beq.n	8015bde <_strtod_l+0x526>
 8015b42:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8015b46:	dd22      	ble.n	8015b8e <_strtod_l+0x4d6>
 8015b48:	2500      	movs	r5, #0
 8015b4a:	462e      	mov	r6, r5
 8015b4c:	9509      	str	r5, [sp, #36]	; 0x24
 8015b4e:	9507      	str	r5, [sp, #28]
 8015b50:	2322      	movs	r3, #34	; 0x22
 8015b52:	f8df b110 	ldr.w	fp, [pc, #272]	; 8015c64 <_strtod_l+0x5ac>
 8015b56:	6023      	str	r3, [r4, #0]
 8015b58:	f04f 0a00 	mov.w	sl, #0
 8015b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	f43f adec 	beq.w	801573c <_strtod_l+0x84>
 8015b64:	991e      	ldr	r1, [sp, #120]	; 0x78
 8015b66:	4620      	mov	r0, r4
 8015b68:	f004 fe79 	bl	801a85e <_Bfree>
 8015b6c:	9907      	ldr	r1, [sp, #28]
 8015b6e:	4620      	mov	r0, r4
 8015b70:	f004 fe75 	bl	801a85e <_Bfree>
 8015b74:	4631      	mov	r1, r6
 8015b76:	4620      	mov	r0, r4
 8015b78:	f004 fe71 	bl	801a85e <_Bfree>
 8015b7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015b7e:	4620      	mov	r0, r4
 8015b80:	f004 fe6d 	bl	801a85e <_Bfree>
 8015b84:	4629      	mov	r1, r5
 8015b86:	4620      	mov	r0, r4
 8015b88:	f004 fe69 	bl	801a85e <_Bfree>
 8015b8c:	e5d6      	b.n	801573c <_strtod_l+0x84>
 8015b8e:	2300      	movs	r3, #0
 8015b90:	ea4f 1828 	mov.w	r8, r8, asr #4
 8015b94:	4650      	mov	r0, sl
 8015b96:	4659      	mov	r1, fp
 8015b98:	4699      	mov	r9, r3
 8015b9a:	f1b8 0f01 	cmp.w	r8, #1
 8015b9e:	dc21      	bgt.n	8015be4 <_strtod_l+0x52c>
 8015ba0:	b10b      	cbz	r3, 8015ba6 <_strtod_l+0x4ee>
 8015ba2:	4682      	mov	sl, r0
 8015ba4:	468b      	mov	fp, r1
 8015ba6:	4b2e      	ldr	r3, [pc, #184]	; (8015c60 <_strtod_l+0x5a8>)
 8015ba8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8015bac:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8015bb0:	4652      	mov	r2, sl
 8015bb2:	465b      	mov	r3, fp
 8015bb4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8015bb8:	f7ee fd2e 	bl	8004618 <__aeabi_dmul>
 8015bbc:	4b29      	ldr	r3, [pc, #164]	; (8015c64 <_strtod_l+0x5ac>)
 8015bbe:	460a      	mov	r2, r1
 8015bc0:	400b      	ands	r3, r1
 8015bc2:	4929      	ldr	r1, [pc, #164]	; (8015c68 <_strtod_l+0x5b0>)
 8015bc4:	428b      	cmp	r3, r1
 8015bc6:	4682      	mov	sl, r0
 8015bc8:	d8be      	bhi.n	8015b48 <_strtod_l+0x490>
 8015bca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8015bce:	428b      	cmp	r3, r1
 8015bd0:	bf86      	itte	hi
 8015bd2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8015c6c <_strtod_l+0x5b4>
 8015bd6:	f04f 3aff 	movhi.w	sl, #4294967295
 8015bda:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8015bde:	2300      	movs	r3, #0
 8015be0:	9304      	str	r3, [sp, #16]
 8015be2:	e081      	b.n	8015ce8 <_strtod_l+0x630>
 8015be4:	f018 0f01 	tst.w	r8, #1
 8015be8:	d007      	beq.n	8015bfa <_strtod_l+0x542>
 8015bea:	4b1d      	ldr	r3, [pc, #116]	; (8015c60 <_strtod_l+0x5a8>)
 8015bec:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8015bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bf4:	f7ee fd10 	bl	8004618 <__aeabi_dmul>
 8015bf8:	2301      	movs	r3, #1
 8015bfa:	f109 0901 	add.w	r9, r9, #1
 8015bfe:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015c02:	e7ca      	b.n	8015b9a <_strtod_l+0x4e2>
 8015c04:	d0eb      	beq.n	8015bde <_strtod_l+0x526>
 8015c06:	f1c8 0800 	rsb	r8, r8, #0
 8015c0a:	f018 020f 	ands.w	r2, r8, #15
 8015c0e:	d00a      	beq.n	8015c26 <_strtod_l+0x56e>
 8015c10:	4b12      	ldr	r3, [pc, #72]	; (8015c5c <_strtod_l+0x5a4>)
 8015c12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015c16:	4650      	mov	r0, sl
 8015c18:	4659      	mov	r1, fp
 8015c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c1e:	f7ee fe25 	bl	800486c <__aeabi_ddiv>
 8015c22:	4682      	mov	sl, r0
 8015c24:	468b      	mov	fp, r1
 8015c26:	ea5f 1828 	movs.w	r8, r8, asr #4
 8015c2a:	d0d8      	beq.n	8015bde <_strtod_l+0x526>
 8015c2c:	f1b8 0f1f 	cmp.w	r8, #31
 8015c30:	dd1e      	ble.n	8015c70 <_strtod_l+0x5b8>
 8015c32:	2500      	movs	r5, #0
 8015c34:	462e      	mov	r6, r5
 8015c36:	9509      	str	r5, [sp, #36]	; 0x24
 8015c38:	9507      	str	r5, [sp, #28]
 8015c3a:	2322      	movs	r3, #34	; 0x22
 8015c3c:	f04f 0a00 	mov.w	sl, #0
 8015c40:	f04f 0b00 	mov.w	fp, #0
 8015c44:	6023      	str	r3, [r4, #0]
 8015c46:	e789      	b.n	8015b5c <_strtod_l+0x4a4>
 8015c48:	0801e6f5 	.word	0x0801e6f5
 8015c4c:	0801e6a8 	.word	0x0801e6a8
 8015c50:	0801e6ed 	.word	0x0801e6ed
 8015c54:	0801e889 	.word	0x0801e889
 8015c58:	0801eb37 	.word	0x0801eb37
 8015c5c:	0801ea08 	.word	0x0801ea08
 8015c60:	0801e9e0 	.word	0x0801e9e0
 8015c64:	7ff00000 	.word	0x7ff00000
 8015c68:	7ca00000 	.word	0x7ca00000
 8015c6c:	7fefffff 	.word	0x7fefffff
 8015c70:	f018 0310 	ands.w	r3, r8, #16
 8015c74:	bf18      	it	ne
 8015c76:	236a      	movne	r3, #106	; 0x6a
 8015c78:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8016030 <_strtod_l+0x978>
 8015c7c:	9304      	str	r3, [sp, #16]
 8015c7e:	4650      	mov	r0, sl
 8015c80:	4659      	mov	r1, fp
 8015c82:	2300      	movs	r3, #0
 8015c84:	f018 0f01 	tst.w	r8, #1
 8015c88:	d004      	beq.n	8015c94 <_strtod_l+0x5dc>
 8015c8a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8015c8e:	f7ee fcc3 	bl	8004618 <__aeabi_dmul>
 8015c92:	2301      	movs	r3, #1
 8015c94:	ea5f 0868 	movs.w	r8, r8, asr #1
 8015c98:	f109 0908 	add.w	r9, r9, #8
 8015c9c:	d1f2      	bne.n	8015c84 <_strtod_l+0x5cc>
 8015c9e:	b10b      	cbz	r3, 8015ca4 <_strtod_l+0x5ec>
 8015ca0:	4682      	mov	sl, r0
 8015ca2:	468b      	mov	fp, r1
 8015ca4:	9b04      	ldr	r3, [sp, #16]
 8015ca6:	b1bb      	cbz	r3, 8015cd8 <_strtod_l+0x620>
 8015ca8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8015cac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	4659      	mov	r1, fp
 8015cb4:	dd10      	ble.n	8015cd8 <_strtod_l+0x620>
 8015cb6:	2b1f      	cmp	r3, #31
 8015cb8:	f340 8128 	ble.w	8015f0c <_strtod_l+0x854>
 8015cbc:	2b34      	cmp	r3, #52	; 0x34
 8015cbe:	bfde      	ittt	le
 8015cc0:	3b20      	suble	r3, #32
 8015cc2:	f04f 32ff 	movle.w	r2, #4294967295
 8015cc6:	fa02 f303 	lslle.w	r3, r2, r3
 8015cca:	f04f 0a00 	mov.w	sl, #0
 8015cce:	bfcc      	ite	gt
 8015cd0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8015cd4:	ea03 0b01 	andle.w	fp, r3, r1
 8015cd8:	2200      	movs	r2, #0
 8015cda:	2300      	movs	r3, #0
 8015cdc:	4650      	mov	r0, sl
 8015cde:	4659      	mov	r1, fp
 8015ce0:	f7ee ff02 	bl	8004ae8 <__aeabi_dcmpeq>
 8015ce4:	2800      	cmp	r0, #0
 8015ce6:	d1a4      	bne.n	8015c32 <_strtod_l+0x57a>
 8015ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cea:	9300      	str	r3, [sp, #0]
 8015cec:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015cee:	462b      	mov	r3, r5
 8015cf0:	463a      	mov	r2, r7
 8015cf2:	4620      	mov	r0, r4
 8015cf4:	f004 fe06 	bl	801a904 <__s2b>
 8015cf8:	9009      	str	r0, [sp, #36]	; 0x24
 8015cfa:	2800      	cmp	r0, #0
 8015cfc:	f43f af24 	beq.w	8015b48 <_strtod_l+0x490>
 8015d00:	9b07      	ldr	r3, [sp, #28]
 8015d02:	1b9e      	subs	r6, r3, r6
 8015d04:	9b08      	ldr	r3, [sp, #32]
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	bfb4      	ite	lt
 8015d0a:	4633      	movlt	r3, r6
 8015d0c:	2300      	movge	r3, #0
 8015d0e:	9310      	str	r3, [sp, #64]	; 0x40
 8015d10:	9b08      	ldr	r3, [sp, #32]
 8015d12:	2500      	movs	r5, #0
 8015d14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015d18:	9318      	str	r3, [sp, #96]	; 0x60
 8015d1a:	462e      	mov	r6, r5
 8015d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d1e:	4620      	mov	r0, r4
 8015d20:	6859      	ldr	r1, [r3, #4]
 8015d22:	f004 fd77 	bl	801a814 <_Balloc>
 8015d26:	9007      	str	r0, [sp, #28]
 8015d28:	2800      	cmp	r0, #0
 8015d2a:	f43f af11 	beq.w	8015b50 <_strtod_l+0x498>
 8015d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d30:	691a      	ldr	r2, [r3, #16]
 8015d32:	3202      	adds	r2, #2
 8015d34:	f103 010c 	add.w	r1, r3, #12
 8015d38:	0092      	lsls	r2, r2, #2
 8015d3a:	300c      	adds	r0, #12
 8015d3c:	f7ff fbda 	bl	80154f4 <memcpy>
 8015d40:	ec4b ab10 	vmov	d0, sl, fp
 8015d44:	aa20      	add	r2, sp, #128	; 0x80
 8015d46:	a91f      	add	r1, sp, #124	; 0x7c
 8015d48:	4620      	mov	r0, r4
 8015d4a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8015d4e:	f005 f8fb 	bl	801af48 <__d2b>
 8015d52:	901e      	str	r0, [sp, #120]	; 0x78
 8015d54:	2800      	cmp	r0, #0
 8015d56:	f43f aefb 	beq.w	8015b50 <_strtod_l+0x498>
 8015d5a:	2101      	movs	r1, #1
 8015d5c:	4620      	mov	r0, r4
 8015d5e:	f004 fe6b 	bl	801aa38 <__i2b>
 8015d62:	4606      	mov	r6, r0
 8015d64:	2800      	cmp	r0, #0
 8015d66:	f43f aef3 	beq.w	8015b50 <_strtod_l+0x498>
 8015d6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015d6c:	9904      	ldr	r1, [sp, #16]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	bfab      	itete	ge
 8015d72:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8015d74:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8015d76:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8015d78:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8015d7c:	bfac      	ite	ge
 8015d7e:	eb03 0902 	addge.w	r9, r3, r2
 8015d82:	1ad7      	sublt	r7, r2, r3
 8015d84:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015d86:	eba3 0801 	sub.w	r8, r3, r1
 8015d8a:	4490      	add	r8, r2
 8015d8c:	4ba3      	ldr	r3, [pc, #652]	; (801601c <_strtod_l+0x964>)
 8015d8e:	f108 38ff 	add.w	r8, r8, #4294967295
 8015d92:	4598      	cmp	r8, r3
 8015d94:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015d98:	f280 80cc 	bge.w	8015f34 <_strtod_l+0x87c>
 8015d9c:	eba3 0308 	sub.w	r3, r3, r8
 8015da0:	2b1f      	cmp	r3, #31
 8015da2:	eba2 0203 	sub.w	r2, r2, r3
 8015da6:	f04f 0101 	mov.w	r1, #1
 8015daa:	f300 80b6 	bgt.w	8015f1a <_strtod_l+0x862>
 8015dae:	fa01 f303 	lsl.w	r3, r1, r3
 8015db2:	9311      	str	r3, [sp, #68]	; 0x44
 8015db4:	2300      	movs	r3, #0
 8015db6:	930c      	str	r3, [sp, #48]	; 0x30
 8015db8:	eb09 0802 	add.w	r8, r9, r2
 8015dbc:	9b04      	ldr	r3, [sp, #16]
 8015dbe:	45c1      	cmp	r9, r8
 8015dc0:	4417      	add	r7, r2
 8015dc2:	441f      	add	r7, r3
 8015dc4:	464b      	mov	r3, r9
 8015dc6:	bfa8      	it	ge
 8015dc8:	4643      	movge	r3, r8
 8015dca:	42bb      	cmp	r3, r7
 8015dcc:	bfa8      	it	ge
 8015dce:	463b      	movge	r3, r7
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	bfc2      	ittt	gt
 8015dd4:	eba8 0803 	subgt.w	r8, r8, r3
 8015dd8:	1aff      	subgt	r7, r7, r3
 8015dda:	eba9 0903 	subgt.w	r9, r9, r3
 8015dde:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	dd17      	ble.n	8015e14 <_strtod_l+0x75c>
 8015de4:	4631      	mov	r1, r6
 8015de6:	461a      	mov	r2, r3
 8015de8:	4620      	mov	r0, r4
 8015dea:	f004 fee1 	bl	801abb0 <__pow5mult>
 8015dee:	4606      	mov	r6, r0
 8015df0:	2800      	cmp	r0, #0
 8015df2:	f43f aead 	beq.w	8015b50 <_strtod_l+0x498>
 8015df6:	4601      	mov	r1, r0
 8015df8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015dfa:	4620      	mov	r0, r4
 8015dfc:	f004 fe32 	bl	801aa64 <__multiply>
 8015e00:	900f      	str	r0, [sp, #60]	; 0x3c
 8015e02:	2800      	cmp	r0, #0
 8015e04:	f43f aea4 	beq.w	8015b50 <_strtod_l+0x498>
 8015e08:	991e      	ldr	r1, [sp, #120]	; 0x78
 8015e0a:	4620      	mov	r0, r4
 8015e0c:	f004 fd27 	bl	801a85e <_Bfree>
 8015e10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e12:	931e      	str	r3, [sp, #120]	; 0x78
 8015e14:	f1b8 0f00 	cmp.w	r8, #0
 8015e18:	f300 8091 	bgt.w	8015f3e <_strtod_l+0x886>
 8015e1c:	9b08      	ldr	r3, [sp, #32]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	dd08      	ble.n	8015e34 <_strtod_l+0x77c>
 8015e22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015e24:	9907      	ldr	r1, [sp, #28]
 8015e26:	4620      	mov	r0, r4
 8015e28:	f004 fec2 	bl	801abb0 <__pow5mult>
 8015e2c:	9007      	str	r0, [sp, #28]
 8015e2e:	2800      	cmp	r0, #0
 8015e30:	f43f ae8e 	beq.w	8015b50 <_strtod_l+0x498>
 8015e34:	2f00      	cmp	r7, #0
 8015e36:	dd08      	ble.n	8015e4a <_strtod_l+0x792>
 8015e38:	9907      	ldr	r1, [sp, #28]
 8015e3a:	463a      	mov	r2, r7
 8015e3c:	4620      	mov	r0, r4
 8015e3e:	f004 fef7 	bl	801ac30 <__lshift>
 8015e42:	9007      	str	r0, [sp, #28]
 8015e44:	2800      	cmp	r0, #0
 8015e46:	f43f ae83 	beq.w	8015b50 <_strtod_l+0x498>
 8015e4a:	f1b9 0f00 	cmp.w	r9, #0
 8015e4e:	dd08      	ble.n	8015e62 <_strtod_l+0x7aa>
 8015e50:	4631      	mov	r1, r6
 8015e52:	464a      	mov	r2, r9
 8015e54:	4620      	mov	r0, r4
 8015e56:	f004 feeb 	bl	801ac30 <__lshift>
 8015e5a:	4606      	mov	r6, r0
 8015e5c:	2800      	cmp	r0, #0
 8015e5e:	f43f ae77 	beq.w	8015b50 <_strtod_l+0x498>
 8015e62:	9a07      	ldr	r2, [sp, #28]
 8015e64:	991e      	ldr	r1, [sp, #120]	; 0x78
 8015e66:	4620      	mov	r0, r4
 8015e68:	f004 ff6a 	bl	801ad40 <__mdiff>
 8015e6c:	4605      	mov	r5, r0
 8015e6e:	2800      	cmp	r0, #0
 8015e70:	f43f ae6e 	beq.w	8015b50 <_strtod_l+0x498>
 8015e74:	68c3      	ldr	r3, [r0, #12]
 8015e76:	930f      	str	r3, [sp, #60]	; 0x3c
 8015e78:	2300      	movs	r3, #0
 8015e7a:	60c3      	str	r3, [r0, #12]
 8015e7c:	4631      	mov	r1, r6
 8015e7e:	f004 ff43 	bl	801ad08 <__mcmp>
 8015e82:	2800      	cmp	r0, #0
 8015e84:	da65      	bge.n	8015f52 <_strtod_l+0x89a>
 8015e86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e88:	ea53 030a 	orrs.w	r3, r3, sl
 8015e8c:	f040 8087 	bne.w	8015f9e <_strtod_l+0x8e6>
 8015e90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	f040 8082 	bne.w	8015f9e <_strtod_l+0x8e6>
 8015e9a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015e9e:	0d1b      	lsrs	r3, r3, #20
 8015ea0:	051b      	lsls	r3, r3, #20
 8015ea2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015ea6:	d97a      	bls.n	8015f9e <_strtod_l+0x8e6>
 8015ea8:	696b      	ldr	r3, [r5, #20]
 8015eaa:	b913      	cbnz	r3, 8015eb2 <_strtod_l+0x7fa>
 8015eac:	692b      	ldr	r3, [r5, #16]
 8015eae:	2b01      	cmp	r3, #1
 8015eb0:	dd75      	ble.n	8015f9e <_strtod_l+0x8e6>
 8015eb2:	4629      	mov	r1, r5
 8015eb4:	2201      	movs	r2, #1
 8015eb6:	4620      	mov	r0, r4
 8015eb8:	f004 feba 	bl	801ac30 <__lshift>
 8015ebc:	4631      	mov	r1, r6
 8015ebe:	4605      	mov	r5, r0
 8015ec0:	f004 ff22 	bl	801ad08 <__mcmp>
 8015ec4:	2800      	cmp	r0, #0
 8015ec6:	dd6a      	ble.n	8015f9e <_strtod_l+0x8e6>
 8015ec8:	9904      	ldr	r1, [sp, #16]
 8015eca:	4a55      	ldr	r2, [pc, #340]	; (8016020 <_strtod_l+0x968>)
 8015ecc:	465b      	mov	r3, fp
 8015ece:	2900      	cmp	r1, #0
 8015ed0:	f000 8085 	beq.w	8015fde <_strtod_l+0x926>
 8015ed4:	ea02 010b 	and.w	r1, r2, fp
 8015ed8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015edc:	dc7f      	bgt.n	8015fde <_strtod_l+0x926>
 8015ede:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015ee2:	f77f aeaa 	ble.w	8015c3a <_strtod_l+0x582>
 8015ee6:	4a4f      	ldr	r2, [pc, #316]	; (8016024 <_strtod_l+0x96c>)
 8015ee8:	2300      	movs	r3, #0
 8015eea:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8015eee:	4650      	mov	r0, sl
 8015ef0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8015ef4:	4659      	mov	r1, fp
 8015ef6:	f7ee fb8f 	bl	8004618 <__aeabi_dmul>
 8015efa:	460b      	mov	r3, r1
 8015efc:	4303      	orrs	r3, r0
 8015efe:	bf08      	it	eq
 8015f00:	2322      	moveq	r3, #34	; 0x22
 8015f02:	4682      	mov	sl, r0
 8015f04:	468b      	mov	fp, r1
 8015f06:	bf08      	it	eq
 8015f08:	6023      	streq	r3, [r4, #0]
 8015f0a:	e62b      	b.n	8015b64 <_strtod_l+0x4ac>
 8015f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8015f10:	fa02 f303 	lsl.w	r3, r2, r3
 8015f14:	ea03 0a0a 	and.w	sl, r3, sl
 8015f18:	e6de      	b.n	8015cd8 <_strtod_l+0x620>
 8015f1a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8015f1e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8015f22:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8015f26:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8015f2a:	fa01 f308 	lsl.w	r3, r1, r8
 8015f2e:	930c      	str	r3, [sp, #48]	; 0x30
 8015f30:	9111      	str	r1, [sp, #68]	; 0x44
 8015f32:	e741      	b.n	8015db8 <_strtod_l+0x700>
 8015f34:	2300      	movs	r3, #0
 8015f36:	930c      	str	r3, [sp, #48]	; 0x30
 8015f38:	2301      	movs	r3, #1
 8015f3a:	9311      	str	r3, [sp, #68]	; 0x44
 8015f3c:	e73c      	b.n	8015db8 <_strtod_l+0x700>
 8015f3e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8015f40:	4642      	mov	r2, r8
 8015f42:	4620      	mov	r0, r4
 8015f44:	f004 fe74 	bl	801ac30 <__lshift>
 8015f48:	901e      	str	r0, [sp, #120]	; 0x78
 8015f4a:	2800      	cmp	r0, #0
 8015f4c:	f47f af66 	bne.w	8015e1c <_strtod_l+0x764>
 8015f50:	e5fe      	b.n	8015b50 <_strtod_l+0x498>
 8015f52:	465f      	mov	r7, fp
 8015f54:	d16e      	bne.n	8016034 <_strtod_l+0x97c>
 8015f56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015f58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015f5c:	b342      	cbz	r2, 8015fb0 <_strtod_l+0x8f8>
 8015f5e:	4a32      	ldr	r2, [pc, #200]	; (8016028 <_strtod_l+0x970>)
 8015f60:	4293      	cmp	r3, r2
 8015f62:	d128      	bne.n	8015fb6 <_strtod_l+0x8fe>
 8015f64:	9b04      	ldr	r3, [sp, #16]
 8015f66:	4650      	mov	r0, sl
 8015f68:	b1eb      	cbz	r3, 8015fa6 <_strtod_l+0x8ee>
 8015f6a:	4a2d      	ldr	r2, [pc, #180]	; (8016020 <_strtod_l+0x968>)
 8015f6c:	403a      	ands	r2, r7
 8015f6e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8015f72:	f04f 31ff 	mov.w	r1, #4294967295
 8015f76:	d819      	bhi.n	8015fac <_strtod_l+0x8f4>
 8015f78:	0d12      	lsrs	r2, r2, #20
 8015f7a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8015f82:	4298      	cmp	r0, r3
 8015f84:	d117      	bne.n	8015fb6 <_strtod_l+0x8fe>
 8015f86:	4b29      	ldr	r3, [pc, #164]	; (801602c <_strtod_l+0x974>)
 8015f88:	429f      	cmp	r7, r3
 8015f8a:	d102      	bne.n	8015f92 <_strtod_l+0x8da>
 8015f8c:	3001      	adds	r0, #1
 8015f8e:	f43f addf 	beq.w	8015b50 <_strtod_l+0x498>
 8015f92:	4b23      	ldr	r3, [pc, #140]	; (8016020 <_strtod_l+0x968>)
 8015f94:	403b      	ands	r3, r7
 8015f96:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8015f9a:	f04f 0a00 	mov.w	sl, #0
 8015f9e:	9b04      	ldr	r3, [sp, #16]
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d1a0      	bne.n	8015ee6 <_strtod_l+0x82e>
 8015fa4:	e5de      	b.n	8015b64 <_strtod_l+0x4ac>
 8015fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8015faa:	e7ea      	b.n	8015f82 <_strtod_l+0x8ca>
 8015fac:	460b      	mov	r3, r1
 8015fae:	e7e8      	b.n	8015f82 <_strtod_l+0x8ca>
 8015fb0:	ea53 030a 	orrs.w	r3, r3, sl
 8015fb4:	d088      	beq.n	8015ec8 <_strtod_l+0x810>
 8015fb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015fb8:	b1db      	cbz	r3, 8015ff2 <_strtod_l+0x93a>
 8015fba:	423b      	tst	r3, r7
 8015fbc:	d0ef      	beq.n	8015f9e <_strtod_l+0x8e6>
 8015fbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015fc0:	9a04      	ldr	r2, [sp, #16]
 8015fc2:	4650      	mov	r0, sl
 8015fc4:	4659      	mov	r1, fp
 8015fc6:	b1c3      	cbz	r3, 8015ffa <_strtod_l+0x942>
 8015fc8:	f7ff fb58 	bl	801567c <sulp>
 8015fcc:	4602      	mov	r2, r0
 8015fce:	460b      	mov	r3, r1
 8015fd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015fd4:	f7ee f96a 	bl	80042ac <__adddf3>
 8015fd8:	4682      	mov	sl, r0
 8015fda:	468b      	mov	fp, r1
 8015fdc:	e7df      	b.n	8015f9e <_strtod_l+0x8e6>
 8015fde:	4013      	ands	r3, r2
 8015fe0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015fe4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015fe8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8015fec:	f04f 3aff 	mov.w	sl, #4294967295
 8015ff0:	e7d5      	b.n	8015f9e <_strtod_l+0x8e6>
 8015ff2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015ff4:	ea13 0f0a 	tst.w	r3, sl
 8015ff8:	e7e0      	b.n	8015fbc <_strtod_l+0x904>
 8015ffa:	f7ff fb3f 	bl	801567c <sulp>
 8015ffe:	4602      	mov	r2, r0
 8016000:	460b      	mov	r3, r1
 8016002:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016006:	f7ee f94f 	bl	80042a8 <__aeabi_dsub>
 801600a:	2200      	movs	r2, #0
 801600c:	2300      	movs	r3, #0
 801600e:	4682      	mov	sl, r0
 8016010:	468b      	mov	fp, r1
 8016012:	f7ee fd69 	bl	8004ae8 <__aeabi_dcmpeq>
 8016016:	2800      	cmp	r0, #0
 8016018:	d0c1      	beq.n	8015f9e <_strtod_l+0x8e6>
 801601a:	e60e      	b.n	8015c3a <_strtod_l+0x582>
 801601c:	fffffc02 	.word	0xfffffc02
 8016020:	7ff00000 	.word	0x7ff00000
 8016024:	39500000 	.word	0x39500000
 8016028:	000fffff 	.word	0x000fffff
 801602c:	7fefffff 	.word	0x7fefffff
 8016030:	0801e6c0 	.word	0x0801e6c0
 8016034:	4631      	mov	r1, r6
 8016036:	4628      	mov	r0, r5
 8016038:	f004 ffe2 	bl	801b000 <__ratio>
 801603c:	ec59 8b10 	vmov	r8, r9, d0
 8016040:	ee10 0a10 	vmov	r0, s0
 8016044:	2200      	movs	r2, #0
 8016046:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801604a:	4649      	mov	r1, r9
 801604c:	f7ee fd60 	bl	8004b10 <__aeabi_dcmple>
 8016050:	2800      	cmp	r0, #0
 8016052:	d07c      	beq.n	801614e <_strtod_l+0xa96>
 8016054:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016056:	2b00      	cmp	r3, #0
 8016058:	d04c      	beq.n	80160f4 <_strtod_l+0xa3c>
 801605a:	4b95      	ldr	r3, [pc, #596]	; (80162b0 <_strtod_l+0xbf8>)
 801605c:	2200      	movs	r2, #0
 801605e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016062:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80162b0 <_strtod_l+0xbf8>
 8016066:	f04f 0800 	mov.w	r8, #0
 801606a:	4b92      	ldr	r3, [pc, #584]	; (80162b4 <_strtod_l+0xbfc>)
 801606c:	403b      	ands	r3, r7
 801606e:	9311      	str	r3, [sp, #68]	; 0x44
 8016070:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016072:	4b91      	ldr	r3, [pc, #580]	; (80162b8 <_strtod_l+0xc00>)
 8016074:	429a      	cmp	r2, r3
 8016076:	f040 80b2 	bne.w	80161de <_strtod_l+0xb26>
 801607a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801607e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016082:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8016086:	ec4b ab10 	vmov	d0, sl, fp
 801608a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801608e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016092:	f004 fedd 	bl	801ae50 <__ulp>
 8016096:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801609a:	ec53 2b10 	vmov	r2, r3, d0
 801609e:	f7ee fabb 	bl	8004618 <__aeabi_dmul>
 80160a2:	4652      	mov	r2, sl
 80160a4:	465b      	mov	r3, fp
 80160a6:	f7ee f901 	bl	80042ac <__adddf3>
 80160aa:	460b      	mov	r3, r1
 80160ac:	4981      	ldr	r1, [pc, #516]	; (80162b4 <_strtod_l+0xbfc>)
 80160ae:	4a83      	ldr	r2, [pc, #524]	; (80162bc <_strtod_l+0xc04>)
 80160b0:	4019      	ands	r1, r3
 80160b2:	4291      	cmp	r1, r2
 80160b4:	4682      	mov	sl, r0
 80160b6:	d95e      	bls.n	8016176 <_strtod_l+0xabe>
 80160b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80160ba:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80160be:	4293      	cmp	r3, r2
 80160c0:	d103      	bne.n	80160ca <_strtod_l+0xa12>
 80160c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160c4:	3301      	adds	r3, #1
 80160c6:	f43f ad43 	beq.w	8015b50 <_strtod_l+0x498>
 80160ca:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80162c8 <_strtod_l+0xc10>
 80160ce:	f04f 3aff 	mov.w	sl, #4294967295
 80160d2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80160d4:	4620      	mov	r0, r4
 80160d6:	f004 fbc2 	bl	801a85e <_Bfree>
 80160da:	9907      	ldr	r1, [sp, #28]
 80160dc:	4620      	mov	r0, r4
 80160de:	f004 fbbe 	bl	801a85e <_Bfree>
 80160e2:	4631      	mov	r1, r6
 80160e4:	4620      	mov	r0, r4
 80160e6:	f004 fbba 	bl	801a85e <_Bfree>
 80160ea:	4629      	mov	r1, r5
 80160ec:	4620      	mov	r0, r4
 80160ee:	f004 fbb6 	bl	801a85e <_Bfree>
 80160f2:	e613      	b.n	8015d1c <_strtod_l+0x664>
 80160f4:	f1ba 0f00 	cmp.w	sl, #0
 80160f8:	d11b      	bne.n	8016132 <_strtod_l+0xa7a>
 80160fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80160fe:	b9f3      	cbnz	r3, 801613e <_strtod_l+0xa86>
 8016100:	4b6b      	ldr	r3, [pc, #428]	; (80162b0 <_strtod_l+0xbf8>)
 8016102:	2200      	movs	r2, #0
 8016104:	4640      	mov	r0, r8
 8016106:	4649      	mov	r1, r9
 8016108:	f7ee fcf8 	bl	8004afc <__aeabi_dcmplt>
 801610c:	b9d0      	cbnz	r0, 8016144 <_strtod_l+0xa8c>
 801610e:	4640      	mov	r0, r8
 8016110:	4649      	mov	r1, r9
 8016112:	4b6b      	ldr	r3, [pc, #428]	; (80162c0 <_strtod_l+0xc08>)
 8016114:	2200      	movs	r2, #0
 8016116:	f7ee fa7f 	bl	8004618 <__aeabi_dmul>
 801611a:	4680      	mov	r8, r0
 801611c:	4689      	mov	r9, r1
 801611e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8016122:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8016126:	931b      	str	r3, [sp, #108]	; 0x6c
 8016128:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801612c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016130:	e79b      	b.n	801606a <_strtod_l+0x9b2>
 8016132:	f1ba 0f01 	cmp.w	sl, #1
 8016136:	d102      	bne.n	801613e <_strtod_l+0xa86>
 8016138:	2f00      	cmp	r7, #0
 801613a:	f43f ad7e 	beq.w	8015c3a <_strtod_l+0x582>
 801613e:	4b61      	ldr	r3, [pc, #388]	; (80162c4 <_strtod_l+0xc0c>)
 8016140:	2200      	movs	r2, #0
 8016142:	e78c      	b.n	801605e <_strtod_l+0x9a6>
 8016144:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80162c0 <_strtod_l+0xc08>
 8016148:	f04f 0800 	mov.w	r8, #0
 801614c:	e7e7      	b.n	801611e <_strtod_l+0xa66>
 801614e:	4b5c      	ldr	r3, [pc, #368]	; (80162c0 <_strtod_l+0xc08>)
 8016150:	4640      	mov	r0, r8
 8016152:	4649      	mov	r1, r9
 8016154:	2200      	movs	r2, #0
 8016156:	f7ee fa5f 	bl	8004618 <__aeabi_dmul>
 801615a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801615c:	4680      	mov	r8, r0
 801615e:	4689      	mov	r9, r1
 8016160:	b933      	cbnz	r3, 8016170 <_strtod_l+0xab8>
 8016162:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016166:	9012      	str	r0, [sp, #72]	; 0x48
 8016168:	9313      	str	r3, [sp, #76]	; 0x4c
 801616a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801616e:	e7dd      	b.n	801612c <_strtod_l+0xa74>
 8016170:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8016174:	e7f9      	b.n	801616a <_strtod_l+0xab2>
 8016176:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801617a:	9b04      	ldr	r3, [sp, #16]
 801617c:	2b00      	cmp	r3, #0
 801617e:	d1a8      	bne.n	80160d2 <_strtod_l+0xa1a>
 8016180:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016184:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016186:	0d1b      	lsrs	r3, r3, #20
 8016188:	051b      	lsls	r3, r3, #20
 801618a:	429a      	cmp	r2, r3
 801618c:	d1a1      	bne.n	80160d2 <_strtod_l+0xa1a>
 801618e:	4640      	mov	r0, r8
 8016190:	4649      	mov	r1, r9
 8016192:	f7ee fda1 	bl	8004cd8 <__aeabi_d2lz>
 8016196:	f7ee fa11 	bl	80045bc <__aeabi_l2d>
 801619a:	4602      	mov	r2, r0
 801619c:	460b      	mov	r3, r1
 801619e:	4640      	mov	r0, r8
 80161a0:	4649      	mov	r1, r9
 80161a2:	f7ee f881 	bl	80042a8 <__aeabi_dsub>
 80161a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80161a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80161ac:	ea43 030a 	orr.w	r3, r3, sl
 80161b0:	4313      	orrs	r3, r2
 80161b2:	4680      	mov	r8, r0
 80161b4:	4689      	mov	r9, r1
 80161b6:	d053      	beq.n	8016260 <_strtod_l+0xba8>
 80161b8:	a335      	add	r3, pc, #212	; (adr r3, 8016290 <_strtod_l+0xbd8>)
 80161ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161be:	f7ee fc9d 	bl	8004afc <__aeabi_dcmplt>
 80161c2:	2800      	cmp	r0, #0
 80161c4:	f47f acce 	bne.w	8015b64 <_strtod_l+0x4ac>
 80161c8:	a333      	add	r3, pc, #204	; (adr r3, 8016298 <_strtod_l+0xbe0>)
 80161ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161ce:	4640      	mov	r0, r8
 80161d0:	4649      	mov	r1, r9
 80161d2:	f7ee fcb1 	bl	8004b38 <__aeabi_dcmpgt>
 80161d6:	2800      	cmp	r0, #0
 80161d8:	f43f af7b 	beq.w	80160d2 <_strtod_l+0xa1a>
 80161dc:	e4c2      	b.n	8015b64 <_strtod_l+0x4ac>
 80161de:	9b04      	ldr	r3, [sp, #16]
 80161e0:	b333      	cbz	r3, 8016230 <_strtod_l+0xb78>
 80161e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80161e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80161e8:	d822      	bhi.n	8016230 <_strtod_l+0xb78>
 80161ea:	a32d      	add	r3, pc, #180	; (adr r3, 80162a0 <_strtod_l+0xbe8>)
 80161ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161f0:	4640      	mov	r0, r8
 80161f2:	4649      	mov	r1, r9
 80161f4:	f7ee fc8c 	bl	8004b10 <__aeabi_dcmple>
 80161f8:	b1a0      	cbz	r0, 8016224 <_strtod_l+0xb6c>
 80161fa:	4649      	mov	r1, r9
 80161fc:	4640      	mov	r0, r8
 80161fe:	f7ee fce3 	bl	8004bc8 <__aeabi_d2uiz>
 8016202:	2801      	cmp	r0, #1
 8016204:	bf38      	it	cc
 8016206:	2001      	movcc	r0, #1
 8016208:	f7ee f98c 	bl	8004524 <__aeabi_ui2d>
 801620c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801620e:	4680      	mov	r8, r0
 8016210:	4689      	mov	r9, r1
 8016212:	bb13      	cbnz	r3, 801625a <_strtod_l+0xba2>
 8016214:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016218:	9014      	str	r0, [sp, #80]	; 0x50
 801621a:	9315      	str	r3, [sp, #84]	; 0x54
 801621c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016220:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016226:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016228:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801622c:	1a9b      	subs	r3, r3, r2
 801622e:	930d      	str	r3, [sp, #52]	; 0x34
 8016230:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016234:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8016238:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801623c:	f004 fe08 	bl	801ae50 <__ulp>
 8016240:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016244:	ec53 2b10 	vmov	r2, r3, d0
 8016248:	f7ee f9e6 	bl	8004618 <__aeabi_dmul>
 801624c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016250:	f7ee f82c 	bl	80042ac <__adddf3>
 8016254:	4682      	mov	sl, r0
 8016256:	468b      	mov	fp, r1
 8016258:	e78f      	b.n	801617a <_strtod_l+0xac2>
 801625a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801625e:	e7dd      	b.n	801621c <_strtod_l+0xb64>
 8016260:	a311      	add	r3, pc, #68	; (adr r3, 80162a8 <_strtod_l+0xbf0>)
 8016262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016266:	f7ee fc49 	bl	8004afc <__aeabi_dcmplt>
 801626a:	e7b4      	b.n	80161d6 <_strtod_l+0xb1e>
 801626c:	2300      	movs	r3, #0
 801626e:	930e      	str	r3, [sp, #56]	; 0x38
 8016270:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016272:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016274:	6013      	str	r3, [r2, #0]
 8016276:	f7ff ba65 	b.w	8015744 <_strtod_l+0x8c>
 801627a:	2b65      	cmp	r3, #101	; 0x65
 801627c:	f43f ab5d 	beq.w	801593a <_strtod_l+0x282>
 8016280:	2b45      	cmp	r3, #69	; 0x45
 8016282:	f43f ab5a 	beq.w	801593a <_strtod_l+0x282>
 8016286:	2201      	movs	r2, #1
 8016288:	f7ff bb92 	b.w	80159b0 <_strtod_l+0x2f8>
 801628c:	f3af 8000 	nop.w
 8016290:	94a03595 	.word	0x94a03595
 8016294:	3fdfffff 	.word	0x3fdfffff
 8016298:	35afe535 	.word	0x35afe535
 801629c:	3fe00000 	.word	0x3fe00000
 80162a0:	ffc00000 	.word	0xffc00000
 80162a4:	41dfffff 	.word	0x41dfffff
 80162a8:	94a03595 	.word	0x94a03595
 80162ac:	3fcfffff 	.word	0x3fcfffff
 80162b0:	3ff00000 	.word	0x3ff00000
 80162b4:	7ff00000 	.word	0x7ff00000
 80162b8:	7fe00000 	.word	0x7fe00000
 80162bc:	7c9fffff 	.word	0x7c9fffff
 80162c0:	3fe00000 	.word	0x3fe00000
 80162c4:	bff00000 	.word	0xbff00000
 80162c8:	7fefffff 	.word	0x7fefffff

080162cc <strtod>:
 80162cc:	460a      	mov	r2, r1
 80162ce:	4601      	mov	r1, r0
 80162d0:	4802      	ldr	r0, [pc, #8]	; (80162dc <strtod+0x10>)
 80162d2:	4b03      	ldr	r3, [pc, #12]	; (80162e0 <strtod+0x14>)
 80162d4:	6800      	ldr	r0, [r0, #0]
 80162d6:	f7ff b9ef 	b.w	80156b8 <_strtod_l>
 80162da:	bf00      	nop
 80162dc:	20003880 	.word	0x20003880
 80162e0:	200040c8 	.word	0x200040c8

080162e4 <strtok>:
 80162e4:	4b02      	ldr	r3, [pc, #8]	; (80162f0 <strtok+0xc>)
 80162e6:	681a      	ldr	r2, [r3, #0]
 80162e8:	2301      	movs	r3, #1
 80162ea:	325c      	adds	r2, #92	; 0x5c
 80162ec:	f000 b802 	b.w	80162f4 <__strtok_r>
 80162f0:	20003880 	.word	0x20003880

080162f4 <__strtok_r>:
 80162f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162f6:	b908      	cbnz	r0, 80162fc <__strtok_r+0x8>
 80162f8:	6810      	ldr	r0, [r2, #0]
 80162fa:	b188      	cbz	r0, 8016320 <__strtok_r+0x2c>
 80162fc:	4604      	mov	r4, r0
 80162fe:	4620      	mov	r0, r4
 8016300:	f814 5b01 	ldrb.w	r5, [r4], #1
 8016304:	460f      	mov	r7, r1
 8016306:	f817 6b01 	ldrb.w	r6, [r7], #1
 801630a:	b91e      	cbnz	r6, 8016314 <__strtok_r+0x20>
 801630c:	b965      	cbnz	r5, 8016328 <__strtok_r+0x34>
 801630e:	6015      	str	r5, [r2, #0]
 8016310:	4628      	mov	r0, r5
 8016312:	e005      	b.n	8016320 <__strtok_r+0x2c>
 8016314:	42b5      	cmp	r5, r6
 8016316:	d1f6      	bne.n	8016306 <__strtok_r+0x12>
 8016318:	2b00      	cmp	r3, #0
 801631a:	d1f0      	bne.n	80162fe <__strtok_r+0xa>
 801631c:	6014      	str	r4, [r2, #0]
 801631e:	7003      	strb	r3, [r0, #0]
 8016320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016322:	461c      	mov	r4, r3
 8016324:	e00c      	b.n	8016340 <__strtok_r+0x4c>
 8016326:	b915      	cbnz	r5, 801632e <__strtok_r+0x3a>
 8016328:	f814 3b01 	ldrb.w	r3, [r4], #1
 801632c:	460e      	mov	r6, r1
 801632e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8016332:	42ab      	cmp	r3, r5
 8016334:	d1f7      	bne.n	8016326 <__strtok_r+0x32>
 8016336:	2b00      	cmp	r3, #0
 8016338:	d0f3      	beq.n	8016322 <__strtok_r+0x2e>
 801633a:	2300      	movs	r3, #0
 801633c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8016340:	6014      	str	r4, [r2, #0]
 8016342:	e7ed      	b.n	8016320 <__strtok_r+0x2c>

08016344 <_strtol_l.isra.0>:
 8016344:	2b01      	cmp	r3, #1
 8016346:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801634a:	d001      	beq.n	8016350 <_strtol_l.isra.0+0xc>
 801634c:	2b24      	cmp	r3, #36	; 0x24
 801634e:	d906      	bls.n	801635e <_strtol_l.isra.0+0x1a>
 8016350:	f003 fbf6 	bl	8019b40 <__errno>
 8016354:	2316      	movs	r3, #22
 8016356:	6003      	str	r3, [r0, #0]
 8016358:	2000      	movs	r0, #0
 801635a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801635e:	4f3a      	ldr	r7, [pc, #232]	; (8016448 <_strtol_l.isra.0+0x104>)
 8016360:	468e      	mov	lr, r1
 8016362:	4676      	mov	r6, lr
 8016364:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8016368:	5de5      	ldrb	r5, [r4, r7]
 801636a:	f015 0508 	ands.w	r5, r5, #8
 801636e:	d1f8      	bne.n	8016362 <_strtol_l.isra.0+0x1e>
 8016370:	2c2d      	cmp	r4, #45	; 0x2d
 8016372:	d134      	bne.n	80163de <_strtol_l.isra.0+0x9a>
 8016374:	f89e 4000 	ldrb.w	r4, [lr]
 8016378:	f04f 0801 	mov.w	r8, #1
 801637c:	f106 0e02 	add.w	lr, r6, #2
 8016380:	2b00      	cmp	r3, #0
 8016382:	d05c      	beq.n	801643e <_strtol_l.isra.0+0xfa>
 8016384:	2b10      	cmp	r3, #16
 8016386:	d10c      	bne.n	80163a2 <_strtol_l.isra.0+0x5e>
 8016388:	2c30      	cmp	r4, #48	; 0x30
 801638a:	d10a      	bne.n	80163a2 <_strtol_l.isra.0+0x5e>
 801638c:	f89e 4000 	ldrb.w	r4, [lr]
 8016390:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016394:	2c58      	cmp	r4, #88	; 0x58
 8016396:	d14d      	bne.n	8016434 <_strtol_l.isra.0+0xf0>
 8016398:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801639c:	2310      	movs	r3, #16
 801639e:	f10e 0e02 	add.w	lr, lr, #2
 80163a2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80163a6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80163aa:	2600      	movs	r6, #0
 80163ac:	fbbc f9f3 	udiv	r9, ip, r3
 80163b0:	4635      	mov	r5, r6
 80163b2:	fb03 ca19 	mls	sl, r3, r9, ip
 80163b6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80163ba:	2f09      	cmp	r7, #9
 80163bc:	d818      	bhi.n	80163f0 <_strtol_l.isra.0+0xac>
 80163be:	463c      	mov	r4, r7
 80163c0:	42a3      	cmp	r3, r4
 80163c2:	dd24      	ble.n	801640e <_strtol_l.isra.0+0xca>
 80163c4:	2e00      	cmp	r6, #0
 80163c6:	db1f      	blt.n	8016408 <_strtol_l.isra.0+0xc4>
 80163c8:	45a9      	cmp	r9, r5
 80163ca:	d31d      	bcc.n	8016408 <_strtol_l.isra.0+0xc4>
 80163cc:	d101      	bne.n	80163d2 <_strtol_l.isra.0+0x8e>
 80163ce:	45a2      	cmp	sl, r4
 80163d0:	db1a      	blt.n	8016408 <_strtol_l.isra.0+0xc4>
 80163d2:	fb05 4503 	mla	r5, r5, r3, r4
 80163d6:	2601      	movs	r6, #1
 80163d8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80163dc:	e7eb      	b.n	80163b6 <_strtol_l.isra.0+0x72>
 80163de:	2c2b      	cmp	r4, #43	; 0x2b
 80163e0:	bf08      	it	eq
 80163e2:	f89e 4000 	ldrbeq.w	r4, [lr]
 80163e6:	46a8      	mov	r8, r5
 80163e8:	bf08      	it	eq
 80163ea:	f106 0e02 	addeq.w	lr, r6, #2
 80163ee:	e7c7      	b.n	8016380 <_strtol_l.isra.0+0x3c>
 80163f0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80163f4:	2f19      	cmp	r7, #25
 80163f6:	d801      	bhi.n	80163fc <_strtol_l.isra.0+0xb8>
 80163f8:	3c37      	subs	r4, #55	; 0x37
 80163fa:	e7e1      	b.n	80163c0 <_strtol_l.isra.0+0x7c>
 80163fc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8016400:	2f19      	cmp	r7, #25
 8016402:	d804      	bhi.n	801640e <_strtol_l.isra.0+0xca>
 8016404:	3c57      	subs	r4, #87	; 0x57
 8016406:	e7db      	b.n	80163c0 <_strtol_l.isra.0+0x7c>
 8016408:	f04f 36ff 	mov.w	r6, #4294967295
 801640c:	e7e4      	b.n	80163d8 <_strtol_l.isra.0+0x94>
 801640e:	2e00      	cmp	r6, #0
 8016410:	da05      	bge.n	801641e <_strtol_l.isra.0+0xda>
 8016412:	2322      	movs	r3, #34	; 0x22
 8016414:	6003      	str	r3, [r0, #0]
 8016416:	4665      	mov	r5, ip
 8016418:	b942      	cbnz	r2, 801642c <_strtol_l.isra.0+0xe8>
 801641a:	4628      	mov	r0, r5
 801641c:	e79d      	b.n	801635a <_strtol_l.isra.0+0x16>
 801641e:	f1b8 0f00 	cmp.w	r8, #0
 8016422:	d000      	beq.n	8016426 <_strtol_l.isra.0+0xe2>
 8016424:	426d      	negs	r5, r5
 8016426:	2a00      	cmp	r2, #0
 8016428:	d0f7      	beq.n	801641a <_strtol_l.isra.0+0xd6>
 801642a:	b10e      	cbz	r6, 8016430 <_strtol_l.isra.0+0xec>
 801642c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8016430:	6011      	str	r1, [r2, #0]
 8016432:	e7f2      	b.n	801641a <_strtol_l.isra.0+0xd6>
 8016434:	2430      	movs	r4, #48	; 0x30
 8016436:	2b00      	cmp	r3, #0
 8016438:	d1b3      	bne.n	80163a2 <_strtol_l.isra.0+0x5e>
 801643a:	2308      	movs	r3, #8
 801643c:	e7b1      	b.n	80163a2 <_strtol_l.isra.0+0x5e>
 801643e:	2c30      	cmp	r4, #48	; 0x30
 8016440:	d0a4      	beq.n	801638c <_strtol_l.isra.0+0x48>
 8016442:	230a      	movs	r3, #10
 8016444:	e7ad      	b.n	80163a2 <_strtol_l.isra.0+0x5e>
 8016446:	bf00      	nop
 8016448:	0801e782 	.word	0x0801e782

0801644c <strtol>:
 801644c:	4613      	mov	r3, r2
 801644e:	460a      	mov	r2, r1
 8016450:	4601      	mov	r1, r0
 8016452:	4802      	ldr	r0, [pc, #8]	; (801645c <strtol+0x10>)
 8016454:	6800      	ldr	r0, [r0, #0]
 8016456:	f7ff bf75 	b.w	8016344 <_strtol_l.isra.0>
 801645a:	bf00      	nop
 801645c:	20003880 	.word	0x20003880

08016460 <_svfprintf_r>:
 8016460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016464:	ed2d 8b04 	vpush	{d8-d9}
 8016468:	b0cf      	sub	sp, #316	; 0x13c
 801646a:	4689      	mov	r9, r1
 801646c:	4693      	mov	fp, r2
 801646e:	461e      	mov	r6, r3
 8016470:	4682      	mov	sl, r0
 8016472:	f004 f949 	bl	801a708 <_localeconv_r>
 8016476:	6803      	ldr	r3, [r0, #0]
 8016478:	9313      	str	r3, [sp, #76]	; 0x4c
 801647a:	4618      	mov	r0, r3
 801647c:	f7ed feb8 	bl	80041f0 <strlen>
 8016480:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8016484:	900e      	str	r0, [sp, #56]	; 0x38
 8016486:	0618      	lsls	r0, r3, #24
 8016488:	d51a      	bpl.n	80164c0 <_svfprintf_r+0x60>
 801648a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801648e:	b9bb      	cbnz	r3, 80164c0 <_svfprintf_r+0x60>
 8016490:	2140      	movs	r1, #64	; 0x40
 8016492:	4650      	mov	r0, sl
 8016494:	f7fe fdde 	bl	8015054 <_malloc_r>
 8016498:	f8c9 0000 	str.w	r0, [r9]
 801649c:	f8c9 0010 	str.w	r0, [r9, #16]
 80164a0:	b958      	cbnz	r0, 80164ba <_svfprintf_r+0x5a>
 80164a2:	230c      	movs	r3, #12
 80164a4:	f8ca 3000 	str.w	r3, [sl]
 80164a8:	f04f 33ff 	mov.w	r3, #4294967295
 80164ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80164ae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80164b0:	b04f      	add	sp, #316	; 0x13c
 80164b2:	ecbd 8b04 	vpop	{d8-d9}
 80164b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164ba:	2340      	movs	r3, #64	; 0x40
 80164bc:	f8c9 3014 	str.w	r3, [r9, #20]
 80164c0:	ed9f 7b93 	vldr	d7, [pc, #588]	; 8016710 <_svfprintf_r+0x2b0>
 80164c4:	2500      	movs	r5, #0
 80164c6:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 80164ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80164ce:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 80164d2:	ac25      	add	r4, sp, #148	; 0x94
 80164d4:	9422      	str	r4, [sp, #136]	; 0x88
 80164d6:	9505      	str	r5, [sp, #20]
 80164d8:	950a      	str	r5, [sp, #40]	; 0x28
 80164da:	9512      	str	r5, [sp, #72]	; 0x48
 80164dc:	9514      	str	r5, [sp, #80]	; 0x50
 80164de:	950f      	str	r5, [sp, #60]	; 0x3c
 80164e0:	465b      	mov	r3, fp
 80164e2:	461d      	mov	r5, r3
 80164e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80164e8:	b10a      	cbz	r2, 80164ee <_svfprintf_r+0x8e>
 80164ea:	2a25      	cmp	r2, #37	; 0x25
 80164ec:	d1f9      	bne.n	80164e2 <_svfprintf_r+0x82>
 80164ee:	ebb5 070b 	subs.w	r7, r5, fp
 80164f2:	d00d      	beq.n	8016510 <_svfprintf_r+0xb0>
 80164f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80164f6:	443b      	add	r3, r7
 80164f8:	9324      	str	r3, [sp, #144]	; 0x90
 80164fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80164fc:	3301      	adds	r3, #1
 80164fe:	2b07      	cmp	r3, #7
 8016500:	e9c4 b700 	strd	fp, r7, [r4]
 8016504:	9323      	str	r3, [sp, #140]	; 0x8c
 8016506:	dc79      	bgt.n	80165fc <_svfprintf_r+0x19c>
 8016508:	3408      	adds	r4, #8
 801650a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801650c:	443b      	add	r3, r7
 801650e:	930f      	str	r3, [sp, #60]	; 0x3c
 8016510:	782b      	ldrb	r3, [r5, #0]
 8016512:	2b00      	cmp	r3, #0
 8016514:	f001 8140 	beq.w	8017798 <_svfprintf_r+0x1338>
 8016518:	2300      	movs	r3, #0
 801651a:	f04f 32ff 	mov.w	r2, #4294967295
 801651e:	3501      	adds	r5, #1
 8016520:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8016524:	9204      	str	r2, [sp, #16]
 8016526:	9310      	str	r3, [sp, #64]	; 0x40
 8016528:	4698      	mov	r8, r3
 801652a:	270a      	movs	r7, #10
 801652c:	212b      	movs	r1, #43	; 0x2b
 801652e:	462a      	mov	r2, r5
 8016530:	f812 3b01 	ldrb.w	r3, [r2], #1
 8016534:	9307      	str	r3, [sp, #28]
 8016536:	920b      	str	r2, [sp, #44]	; 0x2c
 8016538:	9b07      	ldr	r3, [sp, #28]
 801653a:	3b20      	subs	r3, #32
 801653c:	2b5a      	cmp	r3, #90	; 0x5a
 801653e:	f200 85b4 	bhi.w	80170aa <_svfprintf_r+0xc4a>
 8016542:	e8df f013 	tbh	[pc, r3, lsl #1]
 8016546:	007e      	.short	0x007e
 8016548:	05b205b2 	.word	0x05b205b2
 801654c:	05b20086 	.word	0x05b20086
 8016550:	05b205b2 	.word	0x05b205b2
 8016554:	05b20065 	.word	0x05b20065
 8016558:	008905b2 	.word	0x008905b2
 801655c:	05b20093 	.word	0x05b20093
 8016560:	00960090 	.word	0x00960090
 8016564:	00b305b2 	.word	0x00b305b2
 8016568:	00b600b6 	.word	0x00b600b6
 801656c:	00b600b6 	.word	0x00b600b6
 8016570:	00b600b6 	.word	0x00b600b6
 8016574:	00b600b6 	.word	0x00b600b6
 8016578:	05b200b6 	.word	0x05b200b6
 801657c:	05b205b2 	.word	0x05b205b2
 8016580:	05b205b2 	.word	0x05b205b2
 8016584:	05b205b2 	.word	0x05b205b2
 8016588:	05b20127 	.word	0x05b20127
 801658c:	00fc00e9 	.word	0x00fc00e9
 8016590:	01270127 	.word	0x01270127
 8016594:	05b20127 	.word	0x05b20127
 8016598:	05b205b2 	.word	0x05b205b2
 801659c:	00c605b2 	.word	0x00c605b2
 80165a0:	05b205b2 	.word	0x05b205b2
 80165a4:	05b20492 	.word	0x05b20492
 80165a8:	05b205b2 	.word	0x05b205b2
 80165ac:	05b204d9 	.word	0x05b204d9
 80165b0:	05b204fa 	.word	0x05b204fa
 80165b4:	051905b2 	.word	0x051905b2
 80165b8:	05b205b2 	.word	0x05b205b2
 80165bc:	05b205b2 	.word	0x05b205b2
 80165c0:	05b205b2 	.word	0x05b205b2
 80165c4:	05b205b2 	.word	0x05b205b2
 80165c8:	05b20127 	.word	0x05b20127
 80165cc:	00fe00e9 	.word	0x00fe00e9
 80165d0:	01270127 	.word	0x01270127
 80165d4:	00c90127 	.word	0x00c90127
 80165d8:	00dd00fe 	.word	0x00dd00fe
 80165dc:	00d605b2 	.word	0x00d605b2
 80165e0:	046f05b2 	.word	0x046f05b2
 80165e4:	04c80494 	.word	0x04c80494
 80165e8:	05b200dd 	.word	0x05b200dd
 80165ec:	007c04d9 	.word	0x007c04d9
 80165f0:	05b204fc 	.word	0x05b204fc
 80165f4:	053605b2 	.word	0x053605b2
 80165f8:	007c05b2 	.word	0x007c05b2
 80165fc:	aa22      	add	r2, sp, #136	; 0x88
 80165fe:	4649      	mov	r1, r9
 8016600:	4650      	mov	r0, sl
 8016602:	f004 fdf8 	bl	801b1f6 <__ssprint_r>
 8016606:	2800      	cmp	r0, #0
 8016608:	f040 8132 	bne.w	8016870 <_svfprintf_r+0x410>
 801660c:	ac25      	add	r4, sp, #148	; 0x94
 801660e:	e77c      	b.n	801650a <_svfprintf_r+0xaa>
 8016610:	4650      	mov	r0, sl
 8016612:	f004 f879 	bl	801a708 <_localeconv_r>
 8016616:	6843      	ldr	r3, [r0, #4]
 8016618:	9314      	str	r3, [sp, #80]	; 0x50
 801661a:	4618      	mov	r0, r3
 801661c:	f7ed fde8 	bl	80041f0 <strlen>
 8016620:	9012      	str	r0, [sp, #72]	; 0x48
 8016622:	4650      	mov	r0, sl
 8016624:	f004 f870 	bl	801a708 <_localeconv_r>
 8016628:	6883      	ldr	r3, [r0, #8]
 801662a:	930a      	str	r3, [sp, #40]	; 0x28
 801662c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801662e:	212b      	movs	r1, #43	; 0x2b
 8016630:	b12b      	cbz	r3, 801663e <_svfprintf_r+0x1de>
 8016632:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016634:	b11b      	cbz	r3, 801663e <_svfprintf_r+0x1de>
 8016636:	781b      	ldrb	r3, [r3, #0]
 8016638:	b10b      	cbz	r3, 801663e <_svfprintf_r+0x1de>
 801663a:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 801663e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8016640:	e775      	b.n	801652e <_svfprintf_r+0xce>
 8016642:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8016646:	2b00      	cmp	r3, #0
 8016648:	d1f9      	bne.n	801663e <_svfprintf_r+0x1de>
 801664a:	2320      	movs	r3, #32
 801664c:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8016650:	e7f5      	b.n	801663e <_svfprintf_r+0x1de>
 8016652:	f048 0801 	orr.w	r8, r8, #1
 8016656:	e7f2      	b.n	801663e <_svfprintf_r+0x1de>
 8016658:	f856 3b04 	ldr.w	r3, [r6], #4
 801665c:	9310      	str	r3, [sp, #64]	; 0x40
 801665e:	2b00      	cmp	r3, #0
 8016660:	daed      	bge.n	801663e <_svfprintf_r+0x1de>
 8016662:	425b      	negs	r3, r3
 8016664:	9310      	str	r3, [sp, #64]	; 0x40
 8016666:	f048 0804 	orr.w	r8, r8, #4
 801666a:	e7e8      	b.n	801663e <_svfprintf_r+0x1de>
 801666c:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 8016670:	e7e5      	b.n	801663e <_svfprintf_r+0x1de>
 8016672:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016674:	f812 3b01 	ldrb.w	r3, [r2], #1
 8016678:	9307      	str	r3, [sp, #28]
 801667a:	2b2a      	cmp	r3, #42	; 0x2a
 801667c:	d113      	bne.n	80166a6 <_svfprintf_r+0x246>
 801667e:	f856 0b04 	ldr.w	r0, [r6], #4
 8016682:	920b      	str	r2, [sp, #44]	; 0x2c
 8016684:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8016688:	9304      	str	r3, [sp, #16]
 801668a:	e7d8      	b.n	801663e <_svfprintf_r+0x1de>
 801668c:	9804      	ldr	r0, [sp, #16]
 801668e:	fb07 3300 	mla	r3, r7, r0, r3
 8016692:	9304      	str	r3, [sp, #16]
 8016694:	f812 3b01 	ldrb.w	r3, [r2], #1
 8016698:	9307      	str	r3, [sp, #28]
 801669a:	9b07      	ldr	r3, [sp, #28]
 801669c:	3b30      	subs	r3, #48	; 0x30
 801669e:	2b09      	cmp	r3, #9
 80166a0:	d9f4      	bls.n	801668c <_svfprintf_r+0x22c>
 80166a2:	920b      	str	r2, [sp, #44]	; 0x2c
 80166a4:	e748      	b.n	8016538 <_svfprintf_r+0xd8>
 80166a6:	2300      	movs	r3, #0
 80166a8:	9304      	str	r3, [sp, #16]
 80166aa:	e7f6      	b.n	801669a <_svfprintf_r+0x23a>
 80166ac:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 80166b0:	e7c5      	b.n	801663e <_svfprintf_r+0x1de>
 80166b2:	2300      	movs	r3, #0
 80166b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80166b6:	9310      	str	r3, [sp, #64]	; 0x40
 80166b8:	9b07      	ldr	r3, [sp, #28]
 80166ba:	9810      	ldr	r0, [sp, #64]	; 0x40
 80166bc:	3b30      	subs	r3, #48	; 0x30
 80166be:	fb07 3300 	mla	r3, r7, r0, r3
 80166c2:	9310      	str	r3, [sp, #64]	; 0x40
 80166c4:	f812 3b01 	ldrb.w	r3, [r2], #1
 80166c8:	9307      	str	r3, [sp, #28]
 80166ca:	3b30      	subs	r3, #48	; 0x30
 80166cc:	2b09      	cmp	r3, #9
 80166ce:	d9f3      	bls.n	80166b8 <_svfprintf_r+0x258>
 80166d0:	e7e7      	b.n	80166a2 <_svfprintf_r+0x242>
 80166d2:	f048 0808 	orr.w	r8, r8, #8
 80166d6:	e7b2      	b.n	801663e <_svfprintf_r+0x1de>
 80166d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80166da:	781b      	ldrb	r3, [r3, #0]
 80166dc:	2b68      	cmp	r3, #104	; 0x68
 80166de:	bf01      	itttt	eq
 80166e0:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 80166e2:	3301      	addeq	r3, #1
 80166e4:	930b      	streq	r3, [sp, #44]	; 0x2c
 80166e6:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 80166ea:	bf18      	it	ne
 80166ec:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 80166f0:	e7a5      	b.n	801663e <_svfprintf_r+0x1de>
 80166f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80166f4:	781b      	ldrb	r3, [r3, #0]
 80166f6:	2b6c      	cmp	r3, #108	; 0x6c
 80166f8:	d105      	bne.n	8016706 <_svfprintf_r+0x2a6>
 80166fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80166fc:	3301      	adds	r3, #1
 80166fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8016700:	f048 0820 	orr.w	r8, r8, #32
 8016704:	e79b      	b.n	801663e <_svfprintf_r+0x1de>
 8016706:	f048 0810 	orr.w	r8, r8, #16
 801670a:	e798      	b.n	801663e <_svfprintf_r+0x1de>
 801670c:	f3af 8000 	nop.w
	...
 8016718:	4632      	mov	r2, r6
 801671a:	2000      	movs	r0, #0
 801671c:	f852 3b04 	ldr.w	r3, [r2], #4
 8016720:	9206      	str	r2, [sp, #24]
 8016722:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8016726:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 801672a:	2301      	movs	r3, #1
 801672c:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8016730:	9003      	str	r0, [sp, #12]
 8016732:	9304      	str	r3, [sp, #16]
 8016734:	4606      	mov	r6, r0
 8016736:	4605      	mov	r5, r0
 8016738:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 801673c:	e1b8      	b.n	8016ab0 <_svfprintf_r+0x650>
 801673e:	f048 0810 	orr.w	r8, r8, #16
 8016742:	f018 0f20 	tst.w	r8, #32
 8016746:	d012      	beq.n	801676e <_svfprintf_r+0x30e>
 8016748:	3607      	adds	r6, #7
 801674a:	f026 0307 	bic.w	r3, r6, #7
 801674e:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8016752:	9306      	str	r3, [sp, #24]
 8016754:	2e00      	cmp	r6, #0
 8016756:	f177 0300 	sbcs.w	r3, r7, #0
 801675a:	da06      	bge.n	801676a <_svfprintf_r+0x30a>
 801675c:	4276      	negs	r6, r6
 801675e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8016762:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8016766:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801676a:	2301      	movs	r3, #1
 801676c:	e38e      	b.n	8016e8c <_svfprintf_r+0xa2c>
 801676e:	1d33      	adds	r3, r6, #4
 8016770:	f018 0f10 	tst.w	r8, #16
 8016774:	9306      	str	r3, [sp, #24]
 8016776:	d002      	beq.n	801677e <_svfprintf_r+0x31e>
 8016778:	6836      	ldr	r6, [r6, #0]
 801677a:	17f7      	asrs	r7, r6, #31
 801677c:	e7ea      	b.n	8016754 <_svfprintf_r+0x2f4>
 801677e:	f018 0f40 	tst.w	r8, #64	; 0x40
 8016782:	6836      	ldr	r6, [r6, #0]
 8016784:	d001      	beq.n	801678a <_svfprintf_r+0x32a>
 8016786:	b236      	sxth	r6, r6
 8016788:	e7f7      	b.n	801677a <_svfprintf_r+0x31a>
 801678a:	f418 7f00 	tst.w	r8, #512	; 0x200
 801678e:	bf18      	it	ne
 8016790:	b276      	sxtbne	r6, r6
 8016792:	e7f2      	b.n	801677a <_svfprintf_r+0x31a>
 8016794:	3607      	adds	r6, #7
 8016796:	f026 0307 	bic.w	r3, r6, #7
 801679a:	ecb3 7b02 	vldmia	r3!, {d7}
 801679e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80167a2:	9306      	str	r3, [sp, #24]
 80167a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80167a6:	ee09 3a10 	vmov	s18, r3
 80167aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80167ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80167b0:	ee09 3a90 	vmov	s19, r3
 80167b4:	f04f 32ff 	mov.w	r2, #4294967295
 80167b8:	4b3a      	ldr	r3, [pc, #232]	; (80168a4 <_svfprintf_r+0x444>)
 80167ba:	ec51 0b19 	vmov	r0, r1, d9
 80167be:	f7ee f9c5 	bl	8004b4c <__aeabi_dcmpun>
 80167c2:	bb10      	cbnz	r0, 801680a <_svfprintf_r+0x3aa>
 80167c4:	4b37      	ldr	r3, [pc, #220]	; (80168a4 <_svfprintf_r+0x444>)
 80167c6:	ec51 0b19 	vmov	r0, r1, d9
 80167ca:	f04f 32ff 	mov.w	r2, #4294967295
 80167ce:	f7ee f99f 	bl	8004b10 <__aeabi_dcmple>
 80167d2:	b9d0      	cbnz	r0, 801680a <_svfprintf_r+0x3aa>
 80167d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80167d8:	2200      	movs	r2, #0
 80167da:	2300      	movs	r3, #0
 80167dc:	f7ee f98e 	bl	8004afc <__aeabi_dcmplt>
 80167e0:	b110      	cbz	r0, 80167e8 <_svfprintf_r+0x388>
 80167e2:	232d      	movs	r3, #45	; 0x2d
 80167e4:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80167e8:	4a2f      	ldr	r2, [pc, #188]	; (80168a8 <_svfprintf_r+0x448>)
 80167ea:	4830      	ldr	r0, [pc, #192]	; (80168ac <_svfprintf_r+0x44c>)
 80167ec:	9b07      	ldr	r3, [sp, #28]
 80167ee:	2100      	movs	r1, #0
 80167f0:	2b47      	cmp	r3, #71	; 0x47
 80167f2:	bfd4      	ite	le
 80167f4:	4693      	movle	fp, r2
 80167f6:	4683      	movgt	fp, r0
 80167f8:	2303      	movs	r3, #3
 80167fa:	e9cd 1303 	strd	r1, r3, [sp, #12]
 80167fe:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 8016802:	2600      	movs	r6, #0
 8016804:	4633      	mov	r3, r6
 8016806:	f001 b802 	b.w	801780e <_svfprintf_r+0x13ae>
 801680a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801680e:	4610      	mov	r0, r2
 8016810:	4619      	mov	r1, r3
 8016812:	f7ee f99b 	bl	8004b4c <__aeabi_dcmpun>
 8016816:	b140      	cbz	r0, 801682a <_svfprintf_r+0x3ca>
 8016818:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801681a:	4a25      	ldr	r2, [pc, #148]	; (80168b0 <_svfprintf_r+0x450>)
 801681c:	4825      	ldr	r0, [pc, #148]	; (80168b4 <_svfprintf_r+0x454>)
 801681e:	2b00      	cmp	r3, #0
 8016820:	bfbc      	itt	lt
 8016822:	232d      	movlt	r3, #45	; 0x2d
 8016824:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 8016828:	e7e0      	b.n	80167ec <_svfprintf_r+0x38c>
 801682a:	9b07      	ldr	r3, [sp, #28]
 801682c:	f023 0320 	bic.w	r3, r3, #32
 8016830:	2b41      	cmp	r3, #65	; 0x41
 8016832:	9308      	str	r3, [sp, #32]
 8016834:	d125      	bne.n	8016882 <_svfprintf_r+0x422>
 8016836:	2330      	movs	r3, #48	; 0x30
 8016838:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801683c:	9b07      	ldr	r3, [sp, #28]
 801683e:	2b61      	cmp	r3, #97	; 0x61
 8016840:	bf0c      	ite	eq
 8016842:	2378      	moveq	r3, #120	; 0x78
 8016844:	2358      	movne	r3, #88	; 0x58
 8016846:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801684a:	9b04      	ldr	r3, [sp, #16]
 801684c:	2b63      	cmp	r3, #99	; 0x63
 801684e:	f048 0802 	orr.w	r8, r8, #2
 8016852:	dd31      	ble.n	80168b8 <_svfprintf_r+0x458>
 8016854:	1c59      	adds	r1, r3, #1
 8016856:	4650      	mov	r0, sl
 8016858:	f7fe fbfc 	bl	8015054 <_malloc_r>
 801685c:	4683      	mov	fp, r0
 801685e:	2800      	cmp	r0, #0
 8016860:	f040 81fe 	bne.w	8016c60 <_svfprintf_r+0x800>
 8016864:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8016868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801686c:	f8a9 300c 	strh.w	r3, [r9, #12]
 8016870:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8016874:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016878:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801687a:	bf18      	it	ne
 801687c:	f04f 33ff 	movne.w	r3, #4294967295
 8016880:	e614      	b.n	80164ac <_svfprintf_r+0x4c>
 8016882:	9b04      	ldr	r3, [sp, #16]
 8016884:	3301      	adds	r3, #1
 8016886:	f000 81ed 	beq.w	8016c64 <_svfprintf_r+0x804>
 801688a:	9b08      	ldr	r3, [sp, #32]
 801688c:	2b47      	cmp	r3, #71	; 0x47
 801688e:	f040 81ec 	bne.w	8016c6a <_svfprintf_r+0x80a>
 8016892:	9b04      	ldr	r3, [sp, #16]
 8016894:	2b00      	cmp	r3, #0
 8016896:	f040 81e8 	bne.w	8016c6a <_svfprintf_r+0x80a>
 801689a:	9303      	str	r3, [sp, #12]
 801689c:	2301      	movs	r3, #1
 801689e:	9304      	str	r3, [sp, #16]
 80168a0:	e00d      	b.n	80168be <_svfprintf_r+0x45e>
 80168a2:	bf00      	nop
 80168a4:	7fefffff 	.word	0x7fefffff
 80168a8:	0801e6e8 	.word	0x0801e6e8
 80168ac:	0801e6ec 	.word	0x0801e6ec
 80168b0:	0801e6f0 	.word	0x0801e6f0
 80168b4:	0801e6f4 	.word	0x0801e6f4
 80168b8:	9003      	str	r0, [sp, #12]
 80168ba:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 80168be:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 80168c2:	9311      	str	r3, [sp, #68]	; 0x44
 80168c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	f280 81d1 	bge.w	8016c6e <_svfprintf_r+0x80e>
 80168cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80168ce:	ee08 3a10 	vmov	s16, r3
 80168d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80168d4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80168d8:	ee08 3a90 	vmov	s17, r3
 80168dc:	232d      	movs	r3, #45	; 0x2d
 80168de:	9318      	str	r3, [sp, #96]	; 0x60
 80168e0:	9b08      	ldr	r3, [sp, #32]
 80168e2:	2b41      	cmp	r3, #65	; 0x41
 80168e4:	f040 81e1 	bne.w	8016caa <_svfprintf_r+0x84a>
 80168e8:	eeb0 0a48 	vmov.f32	s0, s16
 80168ec:	eef0 0a68 	vmov.f32	s1, s17
 80168f0:	a81c      	add	r0, sp, #112	; 0x70
 80168f2:	f004 fbfd 	bl	801b0f0 <frexp>
 80168f6:	2200      	movs	r2, #0
 80168f8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80168fc:	ec51 0b10 	vmov	r0, r1, d0
 8016900:	f7ed fe8a 	bl	8004618 <__aeabi_dmul>
 8016904:	2200      	movs	r2, #0
 8016906:	2300      	movs	r3, #0
 8016908:	4606      	mov	r6, r0
 801690a:	460f      	mov	r7, r1
 801690c:	f7ee f8ec 	bl	8004ae8 <__aeabi_dcmpeq>
 8016910:	b108      	cbz	r0, 8016916 <_svfprintf_r+0x4b6>
 8016912:	2301      	movs	r3, #1
 8016914:	931c      	str	r3, [sp, #112]	; 0x70
 8016916:	4bb4      	ldr	r3, [pc, #720]	; (8016be8 <_svfprintf_r+0x788>)
 8016918:	4ab4      	ldr	r2, [pc, #720]	; (8016bec <_svfprintf_r+0x78c>)
 801691a:	9907      	ldr	r1, [sp, #28]
 801691c:	2961      	cmp	r1, #97	; 0x61
 801691e:	bf18      	it	ne
 8016920:	461a      	movne	r2, r3
 8016922:	9b04      	ldr	r3, [sp, #16]
 8016924:	9217      	str	r2, [sp, #92]	; 0x5c
 8016926:	3b01      	subs	r3, #1
 8016928:	9305      	str	r3, [sp, #20]
 801692a:	465d      	mov	r5, fp
 801692c:	4bb0      	ldr	r3, [pc, #704]	; (8016bf0 <_svfprintf_r+0x790>)
 801692e:	2200      	movs	r2, #0
 8016930:	4630      	mov	r0, r6
 8016932:	4639      	mov	r1, r7
 8016934:	f7ed fe70 	bl	8004618 <__aeabi_dmul>
 8016938:	460f      	mov	r7, r1
 801693a:	4606      	mov	r6, r0
 801693c:	f7ee f91c 	bl	8004b78 <__aeabi_d2iz>
 8016940:	9019      	str	r0, [sp, #100]	; 0x64
 8016942:	f7ed fdff 	bl	8004544 <__aeabi_i2d>
 8016946:	4602      	mov	r2, r0
 8016948:	460b      	mov	r3, r1
 801694a:	4630      	mov	r0, r6
 801694c:	4639      	mov	r1, r7
 801694e:	f7ed fcab 	bl	80042a8 <__aeabi_dsub>
 8016952:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016954:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016956:	5c9b      	ldrb	r3, [r3, r2]
 8016958:	f805 3b01 	strb.w	r3, [r5], #1
 801695c:	9b05      	ldr	r3, [sp, #20]
 801695e:	9309      	str	r3, [sp, #36]	; 0x24
 8016960:	1c5a      	adds	r2, r3, #1
 8016962:	4606      	mov	r6, r0
 8016964:	460f      	mov	r7, r1
 8016966:	d007      	beq.n	8016978 <_svfprintf_r+0x518>
 8016968:	3b01      	subs	r3, #1
 801696a:	9305      	str	r3, [sp, #20]
 801696c:	2200      	movs	r2, #0
 801696e:	2300      	movs	r3, #0
 8016970:	f7ee f8ba 	bl	8004ae8 <__aeabi_dcmpeq>
 8016974:	2800      	cmp	r0, #0
 8016976:	d0d9      	beq.n	801692c <_svfprintf_r+0x4cc>
 8016978:	4b9e      	ldr	r3, [pc, #632]	; (8016bf4 <_svfprintf_r+0x794>)
 801697a:	2200      	movs	r2, #0
 801697c:	4630      	mov	r0, r6
 801697e:	4639      	mov	r1, r7
 8016980:	f7ee f8da 	bl	8004b38 <__aeabi_dcmpgt>
 8016984:	b960      	cbnz	r0, 80169a0 <_svfprintf_r+0x540>
 8016986:	4b9b      	ldr	r3, [pc, #620]	; (8016bf4 <_svfprintf_r+0x794>)
 8016988:	2200      	movs	r2, #0
 801698a:	4630      	mov	r0, r6
 801698c:	4639      	mov	r1, r7
 801698e:	f7ee f8ab 	bl	8004ae8 <__aeabi_dcmpeq>
 8016992:	2800      	cmp	r0, #0
 8016994:	f000 8184 	beq.w	8016ca0 <_svfprintf_r+0x840>
 8016998:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801699a:	07df      	lsls	r7, r3, #31
 801699c:	f140 8180 	bpl.w	8016ca0 <_svfprintf_r+0x840>
 80169a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80169a2:	9520      	str	r5, [sp, #128]	; 0x80
 80169a4:	7bd9      	ldrb	r1, [r3, #15]
 80169a6:	2030      	movs	r0, #48	; 0x30
 80169a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80169aa:	1e53      	subs	r3, r2, #1
 80169ac:	9320      	str	r3, [sp, #128]	; 0x80
 80169ae:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80169b2:	428b      	cmp	r3, r1
 80169b4:	f000 8163 	beq.w	8016c7e <_svfprintf_r+0x81e>
 80169b8:	2b39      	cmp	r3, #57	; 0x39
 80169ba:	bf0b      	itete	eq
 80169bc:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 80169be:	3301      	addne	r3, #1
 80169c0:	7a9b      	ldrbeq	r3, [r3, #10]
 80169c2:	b2db      	uxtbne	r3, r3
 80169c4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80169c8:	eba5 030b 	sub.w	r3, r5, fp
 80169cc:	9305      	str	r3, [sp, #20]
 80169ce:	9b08      	ldr	r3, [sp, #32]
 80169d0:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80169d2:	2b47      	cmp	r3, #71	; 0x47
 80169d4:	f040 81b1 	bne.w	8016d3a <_svfprintf_r+0x8da>
 80169d8:	1cee      	adds	r6, r5, #3
 80169da:	db03      	blt.n	80169e4 <_svfprintf_r+0x584>
 80169dc:	9b04      	ldr	r3, [sp, #16]
 80169de:	42ab      	cmp	r3, r5
 80169e0:	f280 81d6 	bge.w	8016d90 <_svfprintf_r+0x930>
 80169e4:	9b07      	ldr	r3, [sp, #28]
 80169e6:	3b02      	subs	r3, #2
 80169e8:	9307      	str	r3, [sp, #28]
 80169ea:	9907      	ldr	r1, [sp, #28]
 80169ec:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80169f0:	f021 0120 	bic.w	r1, r1, #32
 80169f4:	2941      	cmp	r1, #65	; 0x41
 80169f6:	bf08      	it	eq
 80169f8:	320f      	addeq	r2, #15
 80169fa:	f105 33ff 	add.w	r3, r5, #4294967295
 80169fe:	bf06      	itte	eq
 8016a00:	b2d2      	uxtbeq	r2, r2
 8016a02:	2101      	moveq	r1, #1
 8016a04:	2100      	movne	r1, #0
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	931c      	str	r3, [sp, #112]	; 0x70
 8016a0a:	bfb8      	it	lt
 8016a0c:	f1c5 0301 	rsblt	r3, r5, #1
 8016a10:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8016a14:	bfb4      	ite	lt
 8016a16:	222d      	movlt	r2, #45	; 0x2d
 8016a18:	222b      	movge	r2, #43	; 0x2b
 8016a1a:	2b09      	cmp	r3, #9
 8016a1c:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8016a20:	f340 81a4 	ble.w	8016d6c <_svfprintf_r+0x90c>
 8016a24:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 8016a28:	260a      	movs	r6, #10
 8016a2a:	4611      	mov	r1, r2
 8016a2c:	fb93 f5f6 	sdiv	r5, r3, r6
 8016a30:	fb06 3015 	mls	r0, r6, r5, r3
 8016a34:	3030      	adds	r0, #48	; 0x30
 8016a36:	f801 0c01 	strb.w	r0, [r1, #-1]
 8016a3a:	4618      	mov	r0, r3
 8016a3c:	2863      	cmp	r0, #99	; 0x63
 8016a3e:	f102 32ff 	add.w	r2, r2, #4294967295
 8016a42:	462b      	mov	r3, r5
 8016a44:	dcf1      	bgt.n	8016a2a <_svfprintf_r+0x5ca>
 8016a46:	3330      	adds	r3, #48	; 0x30
 8016a48:	1e88      	subs	r0, r1, #2
 8016a4a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8016a4e:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 8016a52:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8016a56:	4603      	mov	r3, r0
 8016a58:	42ab      	cmp	r3, r5
 8016a5a:	f0c0 8182 	bcc.w	8016d62 <_svfprintf_r+0x902>
 8016a5e:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 8016a62:	1a52      	subs	r2, r2, r1
 8016a64:	42a8      	cmp	r0, r5
 8016a66:	bf88      	it	hi
 8016a68:	2200      	movhi	r2, #0
 8016a6a:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 8016a6e:	441a      	add	r2, r3
 8016a70:	ab1e      	add	r3, sp, #120	; 0x78
 8016a72:	1ad3      	subs	r3, r2, r3
 8016a74:	9a05      	ldr	r2, [sp, #20]
 8016a76:	9315      	str	r3, [sp, #84]	; 0x54
 8016a78:	2a01      	cmp	r2, #1
 8016a7a:	4413      	add	r3, r2
 8016a7c:	9304      	str	r3, [sp, #16]
 8016a7e:	dc02      	bgt.n	8016a86 <_svfprintf_r+0x626>
 8016a80:	f018 0f01 	tst.w	r8, #1
 8016a84:	d003      	beq.n	8016a8e <_svfprintf_r+0x62e>
 8016a86:	9b04      	ldr	r3, [sp, #16]
 8016a88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016a8a:	4413      	add	r3, r2
 8016a8c:	9304      	str	r3, [sp, #16]
 8016a8e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 8016a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016a96:	9311      	str	r3, [sp, #68]	; 0x44
 8016a98:	2300      	movs	r3, #0
 8016a9a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8016a9e:	461d      	mov	r5, r3
 8016aa0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016aa2:	b113      	cbz	r3, 8016aaa <_svfprintf_r+0x64a>
 8016aa4:	232d      	movs	r3, #45	; 0x2d
 8016aa6:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8016aaa:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 8016aae:	2600      	movs	r6, #0
 8016ab0:	9b04      	ldr	r3, [sp, #16]
 8016ab2:	42b3      	cmp	r3, r6
 8016ab4:	bfb8      	it	lt
 8016ab6:	4633      	movlt	r3, r6
 8016ab8:	9311      	str	r3, [sp, #68]	; 0x44
 8016aba:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8016abe:	b113      	cbz	r3, 8016ac6 <_svfprintf_r+0x666>
 8016ac0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016ac2:	3301      	adds	r3, #1
 8016ac4:	9311      	str	r3, [sp, #68]	; 0x44
 8016ac6:	f018 0302 	ands.w	r3, r8, #2
 8016aca:	9317      	str	r3, [sp, #92]	; 0x5c
 8016acc:	bf1e      	ittt	ne
 8016ace:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8016ad0:	3302      	addne	r3, #2
 8016ad2:	9311      	strne	r3, [sp, #68]	; 0x44
 8016ad4:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 8016ad8:	9318      	str	r3, [sp, #96]	; 0x60
 8016ada:	d11f      	bne.n	8016b1c <_svfprintf_r+0x6bc>
 8016adc:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8016ae0:	1a9f      	subs	r7, r3, r2
 8016ae2:	2f00      	cmp	r7, #0
 8016ae4:	dd1a      	ble.n	8016b1c <_svfprintf_r+0x6bc>
 8016ae6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8016aea:	4843      	ldr	r0, [pc, #268]	; (8016bf8 <_svfprintf_r+0x798>)
 8016aec:	6020      	str	r0, [r4, #0]
 8016aee:	2f10      	cmp	r7, #16
 8016af0:	f103 0301 	add.w	r3, r3, #1
 8016af4:	f104 0108 	add.w	r1, r4, #8
 8016af8:	f300 82e6 	bgt.w	80170c8 <_svfprintf_r+0xc68>
 8016afc:	6067      	str	r7, [r4, #4]
 8016afe:	2b07      	cmp	r3, #7
 8016b00:	4417      	add	r7, r2
 8016b02:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8016b06:	f340 82f2 	ble.w	80170ee <_svfprintf_r+0xc8e>
 8016b0a:	aa22      	add	r2, sp, #136	; 0x88
 8016b0c:	4649      	mov	r1, r9
 8016b0e:	4650      	mov	r0, sl
 8016b10:	f004 fb71 	bl	801b1f6 <__ssprint_r>
 8016b14:	2800      	cmp	r0, #0
 8016b16:	f040 861d 	bne.w	8017754 <_svfprintf_r+0x12f4>
 8016b1a:	ac25      	add	r4, sp, #148	; 0x94
 8016b1c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8016b20:	b173      	cbz	r3, 8016b40 <_svfprintf_r+0x6e0>
 8016b22:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 8016b26:	6023      	str	r3, [r4, #0]
 8016b28:	2301      	movs	r3, #1
 8016b2a:	6063      	str	r3, [r4, #4]
 8016b2c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016b2e:	3301      	adds	r3, #1
 8016b30:	9324      	str	r3, [sp, #144]	; 0x90
 8016b32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016b34:	3301      	adds	r3, #1
 8016b36:	2b07      	cmp	r3, #7
 8016b38:	9323      	str	r3, [sp, #140]	; 0x8c
 8016b3a:	f300 82da 	bgt.w	80170f2 <_svfprintf_r+0xc92>
 8016b3e:	3408      	adds	r4, #8
 8016b40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016b42:	b16b      	cbz	r3, 8016b60 <_svfprintf_r+0x700>
 8016b44:	ab1b      	add	r3, sp, #108	; 0x6c
 8016b46:	6023      	str	r3, [r4, #0]
 8016b48:	2302      	movs	r3, #2
 8016b4a:	6063      	str	r3, [r4, #4]
 8016b4c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016b4e:	3302      	adds	r3, #2
 8016b50:	9324      	str	r3, [sp, #144]	; 0x90
 8016b52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016b54:	3301      	adds	r3, #1
 8016b56:	2b07      	cmp	r3, #7
 8016b58:	9323      	str	r3, [sp, #140]	; 0x8c
 8016b5a:	f300 82d4 	bgt.w	8017106 <_svfprintf_r+0xca6>
 8016b5e:	3408      	adds	r4, #8
 8016b60:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016b62:	2b80      	cmp	r3, #128	; 0x80
 8016b64:	d11f      	bne.n	8016ba6 <_svfprintf_r+0x746>
 8016b66:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8016b6a:	1a9f      	subs	r7, r3, r2
 8016b6c:	2f00      	cmp	r7, #0
 8016b6e:	dd1a      	ble.n	8016ba6 <_svfprintf_r+0x746>
 8016b70:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8016b74:	4821      	ldr	r0, [pc, #132]	; (8016bfc <_svfprintf_r+0x79c>)
 8016b76:	6020      	str	r0, [r4, #0]
 8016b78:	2f10      	cmp	r7, #16
 8016b7a:	f103 0301 	add.w	r3, r3, #1
 8016b7e:	f104 0108 	add.w	r1, r4, #8
 8016b82:	f300 82ca 	bgt.w	801711a <_svfprintf_r+0xcba>
 8016b86:	6067      	str	r7, [r4, #4]
 8016b88:	2b07      	cmp	r3, #7
 8016b8a:	4417      	add	r7, r2
 8016b8c:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8016b90:	f340 82d6 	ble.w	8017140 <_svfprintf_r+0xce0>
 8016b94:	aa22      	add	r2, sp, #136	; 0x88
 8016b96:	4649      	mov	r1, r9
 8016b98:	4650      	mov	r0, sl
 8016b9a:	f004 fb2c 	bl	801b1f6 <__ssprint_r>
 8016b9e:	2800      	cmp	r0, #0
 8016ba0:	f040 85d8 	bne.w	8017754 <_svfprintf_r+0x12f4>
 8016ba4:	ac25      	add	r4, sp, #148	; 0x94
 8016ba6:	9b04      	ldr	r3, [sp, #16]
 8016ba8:	1af6      	subs	r6, r6, r3
 8016baa:	2e00      	cmp	r6, #0
 8016bac:	dd28      	ble.n	8016c00 <_svfprintf_r+0x7a0>
 8016bae:	4f13      	ldr	r7, [pc, #76]	; (8016bfc <_svfprintf_r+0x79c>)
 8016bb0:	6027      	str	r7, [r4, #0]
 8016bb2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8016bb6:	2e10      	cmp	r6, #16
 8016bb8:	f103 0301 	add.w	r3, r3, #1
 8016bbc:	f104 0108 	add.w	r1, r4, #8
 8016bc0:	f300 82c0 	bgt.w	8017144 <_svfprintf_r+0xce4>
 8016bc4:	6066      	str	r6, [r4, #4]
 8016bc6:	2b07      	cmp	r3, #7
 8016bc8:	4416      	add	r6, r2
 8016bca:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8016bce:	f340 82cc 	ble.w	801716a <_svfprintf_r+0xd0a>
 8016bd2:	aa22      	add	r2, sp, #136	; 0x88
 8016bd4:	4649      	mov	r1, r9
 8016bd6:	4650      	mov	r0, sl
 8016bd8:	f004 fb0d 	bl	801b1f6 <__ssprint_r>
 8016bdc:	2800      	cmp	r0, #0
 8016bde:	f040 85b9 	bne.w	8017754 <_svfprintf_r+0x12f4>
 8016be2:	ac25      	add	r4, sp, #148	; 0x94
 8016be4:	e00c      	b.n	8016c00 <_svfprintf_r+0x7a0>
 8016be6:	bf00      	nop
 8016be8:	0801e709 	.word	0x0801e709
 8016bec:	0801e6f8 	.word	0x0801e6f8
 8016bf0:	40300000 	.word	0x40300000
 8016bf4:	3fe00000 	.word	0x3fe00000
 8016bf8:	0801e71c 	.word	0x0801e71c
 8016bfc:	0801e72c 	.word	0x0801e72c
 8016c00:	f418 7f80 	tst.w	r8, #256	; 0x100
 8016c04:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8016c06:	f040 82b7 	bne.w	8017178 <_svfprintf_r+0xd18>
 8016c0a:	9b04      	ldr	r3, [sp, #16]
 8016c0c:	f8c4 b000 	str.w	fp, [r4]
 8016c10:	441e      	add	r6, r3
 8016c12:	6063      	str	r3, [r4, #4]
 8016c14:	9624      	str	r6, [sp, #144]	; 0x90
 8016c16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016c18:	3301      	adds	r3, #1
 8016c1a:	2b07      	cmp	r3, #7
 8016c1c:	9323      	str	r3, [sp, #140]	; 0x8c
 8016c1e:	f300 82f0 	bgt.w	8017202 <_svfprintf_r+0xda2>
 8016c22:	3408      	adds	r4, #8
 8016c24:	f018 0f04 	tst.w	r8, #4
 8016c28:	f040 8576 	bne.w	8017718 <_svfprintf_r+0x12b8>
 8016c2c:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8016c30:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016c32:	428a      	cmp	r2, r1
 8016c34:	bfac      	ite	ge
 8016c36:	189b      	addge	r3, r3, r2
 8016c38:	185b      	addlt	r3, r3, r1
 8016c3a:	930f      	str	r3, [sp, #60]	; 0x3c
 8016c3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016c3e:	b13b      	cbz	r3, 8016c50 <_svfprintf_r+0x7f0>
 8016c40:	aa22      	add	r2, sp, #136	; 0x88
 8016c42:	4649      	mov	r1, r9
 8016c44:	4650      	mov	r0, sl
 8016c46:	f004 fad6 	bl	801b1f6 <__ssprint_r>
 8016c4a:	2800      	cmp	r0, #0
 8016c4c:	f040 8582 	bne.w	8017754 <_svfprintf_r+0x12f4>
 8016c50:	2300      	movs	r3, #0
 8016c52:	9323      	str	r3, [sp, #140]	; 0x8c
 8016c54:	9b03      	ldr	r3, [sp, #12]
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	f040 8598 	bne.w	801778c <_svfprintf_r+0x132c>
 8016c5c:	ac25      	add	r4, sp, #148	; 0x94
 8016c5e:	e0ed      	b.n	8016e3c <_svfprintf_r+0x9dc>
 8016c60:	9003      	str	r0, [sp, #12]
 8016c62:	e62c      	b.n	80168be <_svfprintf_r+0x45e>
 8016c64:	9003      	str	r0, [sp, #12]
 8016c66:	2306      	movs	r3, #6
 8016c68:	e619      	b.n	801689e <_svfprintf_r+0x43e>
 8016c6a:	9003      	str	r0, [sp, #12]
 8016c6c:	e627      	b.n	80168be <_svfprintf_r+0x45e>
 8016c6e:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 8016c72:	2300      	movs	r3, #0
 8016c74:	eeb0 8a47 	vmov.f32	s16, s14
 8016c78:	eef0 8a67 	vmov.f32	s17, s15
 8016c7c:	e62f      	b.n	80168de <_svfprintf_r+0x47e>
 8016c7e:	f802 0c01 	strb.w	r0, [r2, #-1]
 8016c82:	e691      	b.n	80169a8 <_svfprintf_r+0x548>
 8016c84:	f803 0b01 	strb.w	r0, [r3], #1
 8016c88:	1aca      	subs	r2, r1, r3
 8016c8a:	2a00      	cmp	r2, #0
 8016c8c:	dafa      	bge.n	8016c84 <_svfprintf_r+0x824>
 8016c8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c92:	3201      	adds	r2, #1
 8016c94:	f103 0301 	add.w	r3, r3, #1
 8016c98:	bfb8      	it	lt
 8016c9a:	2300      	movlt	r3, #0
 8016c9c:	441d      	add	r5, r3
 8016c9e:	e693      	b.n	80169c8 <_svfprintf_r+0x568>
 8016ca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016ca2:	462b      	mov	r3, r5
 8016ca4:	18a9      	adds	r1, r5, r2
 8016ca6:	2030      	movs	r0, #48	; 0x30
 8016ca8:	e7ee      	b.n	8016c88 <_svfprintf_r+0x828>
 8016caa:	9b08      	ldr	r3, [sp, #32]
 8016cac:	2b46      	cmp	r3, #70	; 0x46
 8016cae:	d005      	beq.n	8016cbc <_svfprintf_r+0x85c>
 8016cb0:	2b45      	cmp	r3, #69	; 0x45
 8016cb2:	d11b      	bne.n	8016cec <_svfprintf_r+0x88c>
 8016cb4:	9b04      	ldr	r3, [sp, #16]
 8016cb6:	1c5d      	adds	r5, r3, #1
 8016cb8:	2102      	movs	r1, #2
 8016cba:	e001      	b.n	8016cc0 <_svfprintf_r+0x860>
 8016cbc:	9d04      	ldr	r5, [sp, #16]
 8016cbe:	2103      	movs	r1, #3
 8016cc0:	ab20      	add	r3, sp, #128	; 0x80
 8016cc2:	9301      	str	r3, [sp, #4]
 8016cc4:	ab1d      	add	r3, sp, #116	; 0x74
 8016cc6:	9300      	str	r3, [sp, #0]
 8016cc8:	462a      	mov	r2, r5
 8016cca:	ab1c      	add	r3, sp, #112	; 0x70
 8016ccc:	4650      	mov	r0, sl
 8016cce:	eeb0 0a48 	vmov.f32	s0, s16
 8016cd2:	eef0 0a68 	vmov.f32	s1, s17
 8016cd6:	f002 f95f 	bl	8018f98 <_dtoa_r>
 8016cda:	9b08      	ldr	r3, [sp, #32]
 8016cdc:	2b47      	cmp	r3, #71	; 0x47
 8016cde:	4683      	mov	fp, r0
 8016ce0:	d106      	bne.n	8016cf0 <_svfprintf_r+0x890>
 8016ce2:	f018 0f01 	tst.w	r8, #1
 8016ce6:	d103      	bne.n	8016cf0 <_svfprintf_r+0x890>
 8016ce8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8016cea:	e66d      	b.n	80169c8 <_svfprintf_r+0x568>
 8016cec:	9d04      	ldr	r5, [sp, #16]
 8016cee:	e7e3      	b.n	8016cb8 <_svfprintf_r+0x858>
 8016cf0:	9b08      	ldr	r3, [sp, #32]
 8016cf2:	2b46      	cmp	r3, #70	; 0x46
 8016cf4:	eb0b 0605 	add.w	r6, fp, r5
 8016cf8:	d10f      	bne.n	8016d1a <_svfprintf_r+0x8ba>
 8016cfa:	f89b 3000 	ldrb.w	r3, [fp]
 8016cfe:	2b30      	cmp	r3, #48	; 0x30
 8016d00:	d109      	bne.n	8016d16 <_svfprintf_r+0x8b6>
 8016d02:	ec51 0b18 	vmov	r0, r1, d8
 8016d06:	2200      	movs	r2, #0
 8016d08:	2300      	movs	r3, #0
 8016d0a:	f7ed feed 	bl	8004ae8 <__aeabi_dcmpeq>
 8016d0e:	b910      	cbnz	r0, 8016d16 <_svfprintf_r+0x8b6>
 8016d10:	f1c5 0501 	rsb	r5, r5, #1
 8016d14:	951c      	str	r5, [sp, #112]	; 0x70
 8016d16:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016d18:	441e      	add	r6, r3
 8016d1a:	ec51 0b18 	vmov	r0, r1, d8
 8016d1e:	2200      	movs	r2, #0
 8016d20:	2300      	movs	r3, #0
 8016d22:	f7ed fee1 	bl	8004ae8 <__aeabi_dcmpeq>
 8016d26:	b100      	cbz	r0, 8016d2a <_svfprintf_r+0x8ca>
 8016d28:	9620      	str	r6, [sp, #128]	; 0x80
 8016d2a:	2230      	movs	r2, #48	; 0x30
 8016d2c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016d2e:	429e      	cmp	r6, r3
 8016d30:	d9da      	bls.n	8016ce8 <_svfprintf_r+0x888>
 8016d32:	1c59      	adds	r1, r3, #1
 8016d34:	9120      	str	r1, [sp, #128]	; 0x80
 8016d36:	701a      	strb	r2, [r3, #0]
 8016d38:	e7f8      	b.n	8016d2c <_svfprintf_r+0x8cc>
 8016d3a:	9b08      	ldr	r3, [sp, #32]
 8016d3c:	2b46      	cmp	r3, #70	; 0x46
 8016d3e:	f47f ae54 	bne.w	80169ea <_svfprintf_r+0x58a>
 8016d42:	9a04      	ldr	r2, [sp, #16]
 8016d44:	f008 0301 	and.w	r3, r8, #1
 8016d48:	2d00      	cmp	r5, #0
 8016d4a:	ea43 0302 	orr.w	r3, r3, r2
 8016d4e:	dd1a      	ble.n	8016d86 <_svfprintf_r+0x926>
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d034      	beq.n	8016dbe <_svfprintf_r+0x95e>
 8016d54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d56:	18eb      	adds	r3, r5, r3
 8016d58:	441a      	add	r2, r3
 8016d5a:	9204      	str	r2, [sp, #16]
 8016d5c:	2366      	movs	r3, #102	; 0x66
 8016d5e:	9307      	str	r3, [sp, #28]
 8016d60:	e033      	b.n	8016dca <_svfprintf_r+0x96a>
 8016d62:	f813 6b01 	ldrb.w	r6, [r3], #1
 8016d66:	f802 6b01 	strb.w	r6, [r2], #1
 8016d6a:	e675      	b.n	8016a58 <_svfprintf_r+0x5f8>
 8016d6c:	b941      	cbnz	r1, 8016d80 <_svfprintf_r+0x920>
 8016d6e:	2230      	movs	r2, #48	; 0x30
 8016d70:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 8016d74:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8016d78:	3330      	adds	r3, #48	; 0x30
 8016d7a:	f802 3b01 	strb.w	r3, [r2], #1
 8016d7e:	e677      	b.n	8016a70 <_svfprintf_r+0x610>
 8016d80:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8016d84:	e7f8      	b.n	8016d78 <_svfprintf_r+0x918>
 8016d86:	b1e3      	cbz	r3, 8016dc2 <_svfprintf_r+0x962>
 8016d88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d8a:	9a04      	ldr	r2, [sp, #16]
 8016d8c:	3301      	adds	r3, #1
 8016d8e:	e7e3      	b.n	8016d58 <_svfprintf_r+0x8f8>
 8016d90:	9b05      	ldr	r3, [sp, #20]
 8016d92:	429d      	cmp	r5, r3
 8016d94:	db07      	blt.n	8016da6 <_svfprintf_r+0x946>
 8016d96:	f018 0f01 	tst.w	r8, #1
 8016d9a:	d02d      	beq.n	8016df8 <_svfprintf_r+0x998>
 8016d9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d9e:	18eb      	adds	r3, r5, r3
 8016da0:	9304      	str	r3, [sp, #16]
 8016da2:	2367      	movs	r3, #103	; 0x67
 8016da4:	e7db      	b.n	8016d5e <_svfprintf_r+0x8fe>
 8016da6:	9b05      	ldr	r3, [sp, #20]
 8016da8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016daa:	2d00      	cmp	r5, #0
 8016dac:	4413      	add	r3, r2
 8016dae:	9304      	str	r3, [sp, #16]
 8016db0:	dcf7      	bgt.n	8016da2 <_svfprintf_r+0x942>
 8016db2:	9a04      	ldr	r2, [sp, #16]
 8016db4:	f1c5 0301 	rsb	r3, r5, #1
 8016db8:	441a      	add	r2, r3
 8016dba:	4613      	mov	r3, r2
 8016dbc:	e7f0      	b.n	8016da0 <_svfprintf_r+0x940>
 8016dbe:	9504      	str	r5, [sp, #16]
 8016dc0:	e7cc      	b.n	8016d5c <_svfprintf_r+0x8fc>
 8016dc2:	2366      	movs	r3, #102	; 0x66
 8016dc4:	9307      	str	r3, [sp, #28]
 8016dc6:	2301      	movs	r3, #1
 8016dc8:	9304      	str	r3, [sp, #16]
 8016dca:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 8016dce:	9309      	str	r3, [sp, #36]	; 0x24
 8016dd0:	d025      	beq.n	8016e1e <_svfprintf_r+0x9be>
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	2d00      	cmp	r5, #0
 8016dd6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8016dda:	f77f ae61 	ble.w	8016aa0 <_svfprintf_r+0x640>
 8016dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016de0:	781b      	ldrb	r3, [r3, #0]
 8016de2:	2bff      	cmp	r3, #255	; 0xff
 8016de4:	d10a      	bne.n	8016dfc <_svfprintf_r+0x99c>
 8016de6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016dea:	9904      	ldr	r1, [sp, #16]
 8016dec:	4413      	add	r3, r2
 8016dee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016df0:	fb02 1303 	mla	r3, r2, r3, r1
 8016df4:	9304      	str	r3, [sp, #16]
 8016df6:	e653      	b.n	8016aa0 <_svfprintf_r+0x640>
 8016df8:	9504      	str	r5, [sp, #16]
 8016dfa:	e7d2      	b.n	8016da2 <_svfprintf_r+0x942>
 8016dfc:	42ab      	cmp	r3, r5
 8016dfe:	daf2      	bge.n	8016de6 <_svfprintf_r+0x986>
 8016e00:	1aed      	subs	r5, r5, r3
 8016e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e04:	785b      	ldrb	r3, [r3, #1]
 8016e06:	b133      	cbz	r3, 8016e16 <_svfprintf_r+0x9b6>
 8016e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e0a:	3301      	adds	r3, #1
 8016e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8016e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e10:	3301      	adds	r3, #1
 8016e12:	930a      	str	r3, [sp, #40]	; 0x28
 8016e14:	e7e3      	b.n	8016dde <_svfprintf_r+0x97e>
 8016e16:	9b08      	ldr	r3, [sp, #32]
 8016e18:	3301      	adds	r3, #1
 8016e1a:	9308      	str	r3, [sp, #32]
 8016e1c:	e7df      	b.n	8016dde <_svfprintf_r+0x97e>
 8016e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e20:	9308      	str	r3, [sp, #32]
 8016e22:	e63d      	b.n	8016aa0 <_svfprintf_r+0x640>
 8016e24:	4632      	mov	r2, r6
 8016e26:	f018 0f20 	tst.w	r8, #32
 8016e2a:	f852 3b04 	ldr.w	r3, [r2], #4
 8016e2e:	9206      	str	r2, [sp, #24]
 8016e30:	d009      	beq.n	8016e46 <_svfprintf_r+0x9e6>
 8016e32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016e34:	4610      	mov	r0, r2
 8016e36:	17d1      	asrs	r1, r2, #31
 8016e38:	e9c3 0100 	strd	r0, r1, [r3]
 8016e3c:	9e06      	ldr	r6, [sp, #24]
 8016e3e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8016e42:	f7ff bb4d 	b.w	80164e0 <_svfprintf_r+0x80>
 8016e46:	f018 0f10 	tst.w	r8, #16
 8016e4a:	d002      	beq.n	8016e52 <_svfprintf_r+0x9f2>
 8016e4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016e4e:	601a      	str	r2, [r3, #0]
 8016e50:	e7f4      	b.n	8016e3c <_svfprintf_r+0x9dc>
 8016e52:	f018 0f40 	tst.w	r8, #64	; 0x40
 8016e56:	d002      	beq.n	8016e5e <_svfprintf_r+0x9fe>
 8016e58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016e5a:	801a      	strh	r2, [r3, #0]
 8016e5c:	e7ee      	b.n	8016e3c <_svfprintf_r+0x9dc>
 8016e5e:	f418 7f00 	tst.w	r8, #512	; 0x200
 8016e62:	d0f3      	beq.n	8016e4c <_svfprintf_r+0x9ec>
 8016e64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016e66:	701a      	strb	r2, [r3, #0]
 8016e68:	e7e8      	b.n	8016e3c <_svfprintf_r+0x9dc>
 8016e6a:	f048 0810 	orr.w	r8, r8, #16
 8016e6e:	f018 0f20 	tst.w	r8, #32
 8016e72:	d01e      	beq.n	8016eb2 <_svfprintf_r+0xa52>
 8016e74:	3607      	adds	r6, #7
 8016e76:	f026 0307 	bic.w	r3, r6, #7
 8016e7a:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8016e7e:	9306      	str	r3, [sp, #24]
 8016e80:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 8016e84:	2300      	movs	r3, #0
 8016e86:	2200      	movs	r2, #0
 8016e88:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8016e8c:	9a04      	ldr	r2, [sp, #16]
 8016e8e:	3201      	adds	r2, #1
 8016e90:	f000 848d 	beq.w	80177ae <_svfprintf_r+0x134e>
 8016e94:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 8016e98:	9203      	str	r2, [sp, #12]
 8016e9a:	ea56 0207 	orrs.w	r2, r6, r7
 8016e9e:	f040 848c 	bne.w	80177ba <_svfprintf_r+0x135a>
 8016ea2:	9a04      	ldr	r2, [sp, #16]
 8016ea4:	2a00      	cmp	r2, #0
 8016ea6:	f000 80f5 	beq.w	8017094 <_svfprintf_r+0xc34>
 8016eaa:	2b01      	cmp	r3, #1
 8016eac:	f040 8488 	bne.w	80177c0 <_svfprintf_r+0x1360>
 8016eb0:	e097      	b.n	8016fe2 <_svfprintf_r+0xb82>
 8016eb2:	1d33      	adds	r3, r6, #4
 8016eb4:	f018 0f10 	tst.w	r8, #16
 8016eb8:	9306      	str	r3, [sp, #24]
 8016eba:	d001      	beq.n	8016ec0 <_svfprintf_r+0xa60>
 8016ebc:	6836      	ldr	r6, [r6, #0]
 8016ebe:	e003      	b.n	8016ec8 <_svfprintf_r+0xa68>
 8016ec0:	f018 0f40 	tst.w	r8, #64	; 0x40
 8016ec4:	d002      	beq.n	8016ecc <_svfprintf_r+0xa6c>
 8016ec6:	8836      	ldrh	r6, [r6, #0]
 8016ec8:	2700      	movs	r7, #0
 8016eca:	e7d9      	b.n	8016e80 <_svfprintf_r+0xa20>
 8016ecc:	f418 7f00 	tst.w	r8, #512	; 0x200
 8016ed0:	d0f4      	beq.n	8016ebc <_svfprintf_r+0xa5c>
 8016ed2:	7836      	ldrb	r6, [r6, #0]
 8016ed4:	e7f8      	b.n	8016ec8 <_svfprintf_r+0xa68>
 8016ed6:	4633      	mov	r3, r6
 8016ed8:	2278      	movs	r2, #120	; 0x78
 8016eda:	f853 6b04 	ldr.w	r6, [r3], #4
 8016ede:	9306      	str	r3, [sp, #24]
 8016ee0:	f647 0330 	movw	r3, #30768	; 0x7830
 8016ee4:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 8016ee8:	4ba1      	ldr	r3, [pc, #644]	; (8017170 <_svfprintf_r+0xd10>)
 8016eea:	9316      	str	r3, [sp, #88]	; 0x58
 8016eec:	2700      	movs	r7, #0
 8016eee:	f048 0802 	orr.w	r8, r8, #2
 8016ef2:	2302      	movs	r3, #2
 8016ef4:	9207      	str	r2, [sp, #28]
 8016ef6:	e7c6      	b.n	8016e86 <_svfprintf_r+0xa26>
 8016ef8:	4633      	mov	r3, r6
 8016efa:	2500      	movs	r5, #0
 8016efc:	f853 bb04 	ldr.w	fp, [r3], #4
 8016f00:	9306      	str	r3, [sp, #24]
 8016f02:	9b04      	ldr	r3, [sp, #16]
 8016f04:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8016f08:	1c59      	adds	r1, r3, #1
 8016f0a:	d010      	beq.n	8016f2e <_svfprintf_r+0xace>
 8016f0c:	461a      	mov	r2, r3
 8016f0e:	4629      	mov	r1, r5
 8016f10:	4658      	mov	r0, fp
 8016f12:	f7ed f975 	bl	8004200 <memchr>
 8016f16:	9003      	str	r0, [sp, #12]
 8016f18:	2800      	cmp	r0, #0
 8016f1a:	f000 80d2 	beq.w	80170c2 <_svfprintf_r+0xc62>
 8016f1e:	eba0 030b 	sub.w	r3, r0, fp
 8016f22:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8016f26:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8016f2a:	462e      	mov	r6, r5
 8016f2c:	e5c0      	b.n	8016ab0 <_svfprintf_r+0x650>
 8016f2e:	4658      	mov	r0, fp
 8016f30:	f7ed f95e 	bl	80041f0 <strlen>
 8016f34:	e9cd 5003 	strd	r5, r0, [sp, #12]
 8016f38:	e463      	b.n	8016802 <_svfprintf_r+0x3a2>
 8016f3a:	f048 0810 	orr.w	r8, r8, #16
 8016f3e:	f018 0f20 	tst.w	r8, #32
 8016f42:	d007      	beq.n	8016f54 <_svfprintf_r+0xaf4>
 8016f44:	3607      	adds	r6, #7
 8016f46:	f026 0307 	bic.w	r3, r6, #7
 8016f4a:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8016f4e:	9306      	str	r3, [sp, #24]
 8016f50:	2301      	movs	r3, #1
 8016f52:	e798      	b.n	8016e86 <_svfprintf_r+0xa26>
 8016f54:	1d33      	adds	r3, r6, #4
 8016f56:	f018 0f10 	tst.w	r8, #16
 8016f5a:	9306      	str	r3, [sp, #24]
 8016f5c:	d001      	beq.n	8016f62 <_svfprintf_r+0xb02>
 8016f5e:	6836      	ldr	r6, [r6, #0]
 8016f60:	e003      	b.n	8016f6a <_svfprintf_r+0xb0a>
 8016f62:	f018 0f40 	tst.w	r8, #64	; 0x40
 8016f66:	d002      	beq.n	8016f6e <_svfprintf_r+0xb0e>
 8016f68:	8836      	ldrh	r6, [r6, #0]
 8016f6a:	2700      	movs	r7, #0
 8016f6c:	e7f0      	b.n	8016f50 <_svfprintf_r+0xaf0>
 8016f6e:	f418 7f00 	tst.w	r8, #512	; 0x200
 8016f72:	d0f4      	beq.n	8016f5e <_svfprintf_r+0xafe>
 8016f74:	7836      	ldrb	r6, [r6, #0]
 8016f76:	e7f8      	b.n	8016f6a <_svfprintf_r+0xb0a>
 8016f78:	4b7e      	ldr	r3, [pc, #504]	; (8017174 <_svfprintf_r+0xd14>)
 8016f7a:	9316      	str	r3, [sp, #88]	; 0x58
 8016f7c:	f018 0f20 	tst.w	r8, #32
 8016f80:	d019      	beq.n	8016fb6 <_svfprintf_r+0xb56>
 8016f82:	3607      	adds	r6, #7
 8016f84:	f026 0307 	bic.w	r3, r6, #7
 8016f88:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8016f8c:	9306      	str	r3, [sp, #24]
 8016f8e:	f018 0f01 	tst.w	r8, #1
 8016f92:	d00a      	beq.n	8016faa <_svfprintf_r+0xb4a>
 8016f94:	ea56 0307 	orrs.w	r3, r6, r7
 8016f98:	d007      	beq.n	8016faa <_svfprintf_r+0xb4a>
 8016f9a:	2330      	movs	r3, #48	; 0x30
 8016f9c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8016fa0:	9b07      	ldr	r3, [sp, #28]
 8016fa2:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8016fa6:	f048 0802 	orr.w	r8, r8, #2
 8016faa:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 8016fae:	2302      	movs	r3, #2
 8016fb0:	e769      	b.n	8016e86 <_svfprintf_r+0xa26>
 8016fb2:	4b6f      	ldr	r3, [pc, #444]	; (8017170 <_svfprintf_r+0xd10>)
 8016fb4:	e7e1      	b.n	8016f7a <_svfprintf_r+0xb1a>
 8016fb6:	1d33      	adds	r3, r6, #4
 8016fb8:	f018 0f10 	tst.w	r8, #16
 8016fbc:	9306      	str	r3, [sp, #24]
 8016fbe:	d001      	beq.n	8016fc4 <_svfprintf_r+0xb64>
 8016fc0:	6836      	ldr	r6, [r6, #0]
 8016fc2:	e003      	b.n	8016fcc <_svfprintf_r+0xb6c>
 8016fc4:	f018 0f40 	tst.w	r8, #64	; 0x40
 8016fc8:	d002      	beq.n	8016fd0 <_svfprintf_r+0xb70>
 8016fca:	8836      	ldrh	r6, [r6, #0]
 8016fcc:	2700      	movs	r7, #0
 8016fce:	e7de      	b.n	8016f8e <_svfprintf_r+0xb2e>
 8016fd0:	f418 7f00 	tst.w	r8, #512	; 0x200
 8016fd4:	d0f4      	beq.n	8016fc0 <_svfprintf_r+0xb60>
 8016fd6:	7836      	ldrb	r6, [r6, #0]
 8016fd8:	e7f8      	b.n	8016fcc <_svfprintf_r+0xb6c>
 8016fda:	2f00      	cmp	r7, #0
 8016fdc:	bf08      	it	eq
 8016fde:	2e0a      	cmpeq	r6, #10
 8016fe0:	d206      	bcs.n	8016ff0 <_svfprintf_r+0xb90>
 8016fe2:	3630      	adds	r6, #48	; 0x30
 8016fe4:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 8016fe8:	f20d 1b37 	addw	fp, sp, #311	; 0x137
 8016fec:	f000 bc06 	b.w	80177fc <_svfprintf_r+0x139c>
 8016ff0:	2300      	movs	r3, #0
 8016ff2:	9305      	str	r3, [sp, #20]
 8016ff4:	9b03      	ldr	r3, [sp, #12]
 8016ff6:	ad4e      	add	r5, sp, #312	; 0x138
 8016ff8:	f403 6880 	and.w	r8, r3, #1024	; 0x400
 8016ffc:	220a      	movs	r2, #10
 8016ffe:	2300      	movs	r3, #0
 8017000:	4630      	mov	r0, r6
 8017002:	4639      	mov	r1, r7
 8017004:	f7ed fe50 	bl	8004ca8 <__aeabi_uldivmod>
 8017008:	9b05      	ldr	r3, [sp, #20]
 801700a:	3230      	adds	r2, #48	; 0x30
 801700c:	3301      	adds	r3, #1
 801700e:	f105 3bff 	add.w	fp, r5, #4294967295
 8017012:	f805 2c01 	strb.w	r2, [r5, #-1]
 8017016:	9305      	str	r3, [sp, #20]
 8017018:	f1b8 0f00 	cmp.w	r8, #0
 801701c:	d019      	beq.n	8017052 <_svfprintf_r+0xbf2>
 801701e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017020:	9a05      	ldr	r2, [sp, #20]
 8017022:	781b      	ldrb	r3, [r3, #0]
 8017024:	429a      	cmp	r2, r3
 8017026:	d114      	bne.n	8017052 <_svfprintf_r+0xbf2>
 8017028:	2aff      	cmp	r2, #255	; 0xff
 801702a:	d012      	beq.n	8017052 <_svfprintf_r+0xbf2>
 801702c:	2f00      	cmp	r7, #0
 801702e:	bf08      	it	eq
 8017030:	2e0a      	cmpeq	r6, #10
 8017032:	d30e      	bcc.n	8017052 <_svfprintf_r+0xbf2>
 8017034:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017036:	9914      	ldr	r1, [sp, #80]	; 0x50
 8017038:	ebab 0b03 	sub.w	fp, fp, r3
 801703c:	461a      	mov	r2, r3
 801703e:	4658      	mov	r0, fp
 8017040:	f7fe faf2 	bl	8015628 <strncpy>
 8017044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017046:	785d      	ldrb	r5, [r3, #1]
 8017048:	b195      	cbz	r5, 8017070 <_svfprintf_r+0xc10>
 801704a:	3301      	adds	r3, #1
 801704c:	930a      	str	r3, [sp, #40]	; 0x28
 801704e:	2300      	movs	r3, #0
 8017050:	9305      	str	r3, [sp, #20]
 8017052:	220a      	movs	r2, #10
 8017054:	2300      	movs	r3, #0
 8017056:	4630      	mov	r0, r6
 8017058:	4639      	mov	r1, r7
 801705a:	f7ed fe25 	bl	8004ca8 <__aeabi_uldivmod>
 801705e:	2f00      	cmp	r7, #0
 8017060:	bf08      	it	eq
 8017062:	2e0a      	cmpeq	r6, #10
 8017064:	f0c0 83ca 	bcc.w	80177fc <_svfprintf_r+0x139c>
 8017068:	4606      	mov	r6, r0
 801706a:	460f      	mov	r7, r1
 801706c:	465d      	mov	r5, fp
 801706e:	e7c5      	b.n	8016ffc <_svfprintf_r+0xb9c>
 8017070:	9505      	str	r5, [sp, #20]
 8017072:	e7ee      	b.n	8017052 <_svfprintf_r+0xbf2>
 8017074:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017076:	f006 030f 	and.w	r3, r6, #15
 801707a:	5cd3      	ldrb	r3, [r2, r3]
 801707c:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8017080:	0933      	lsrs	r3, r6, #4
 8017082:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8017086:	093a      	lsrs	r2, r7, #4
 8017088:	461e      	mov	r6, r3
 801708a:	4617      	mov	r7, r2
 801708c:	ea56 0307 	orrs.w	r3, r6, r7
 8017090:	d1f0      	bne.n	8017074 <_svfprintf_r+0xc14>
 8017092:	e3b3      	b.n	80177fc <_svfprintf_r+0x139c>
 8017094:	b933      	cbnz	r3, 80170a4 <_svfprintf_r+0xc44>
 8017096:	f018 0f01 	tst.w	r8, #1
 801709a:	d003      	beq.n	80170a4 <_svfprintf_r+0xc44>
 801709c:	2330      	movs	r3, #48	; 0x30
 801709e:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 80170a2:	e7a1      	b.n	8016fe8 <_svfprintf_r+0xb88>
 80170a4:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 80170a8:	e3a8      	b.n	80177fc <_svfprintf_r+0x139c>
 80170aa:	9b07      	ldr	r3, [sp, #28]
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	f000 8373 	beq.w	8017798 <_svfprintf_r+0x1338>
 80170b2:	2000      	movs	r0, #0
 80170b4:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 80170b8:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 80170bc:	9606      	str	r6, [sp, #24]
 80170be:	f7ff bb34 	b.w	801672a <_svfprintf_r+0x2ca>
 80170c2:	9e03      	ldr	r6, [sp, #12]
 80170c4:	f7ff bb9e 	b.w	8016804 <_svfprintf_r+0x3a4>
 80170c8:	2010      	movs	r0, #16
 80170ca:	4402      	add	r2, r0
 80170cc:	2b07      	cmp	r3, #7
 80170ce:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80170d2:	6060      	str	r0, [r4, #4]
 80170d4:	dd08      	ble.n	80170e8 <_svfprintf_r+0xc88>
 80170d6:	aa22      	add	r2, sp, #136	; 0x88
 80170d8:	4649      	mov	r1, r9
 80170da:	4650      	mov	r0, sl
 80170dc:	f004 f88b 	bl	801b1f6 <__ssprint_r>
 80170e0:	2800      	cmp	r0, #0
 80170e2:	f040 8337 	bne.w	8017754 <_svfprintf_r+0x12f4>
 80170e6:	a925      	add	r1, sp, #148	; 0x94
 80170e8:	3f10      	subs	r7, #16
 80170ea:	460c      	mov	r4, r1
 80170ec:	e4fb      	b.n	8016ae6 <_svfprintf_r+0x686>
 80170ee:	460c      	mov	r4, r1
 80170f0:	e514      	b.n	8016b1c <_svfprintf_r+0x6bc>
 80170f2:	aa22      	add	r2, sp, #136	; 0x88
 80170f4:	4649      	mov	r1, r9
 80170f6:	4650      	mov	r0, sl
 80170f8:	f004 f87d 	bl	801b1f6 <__ssprint_r>
 80170fc:	2800      	cmp	r0, #0
 80170fe:	f040 8329 	bne.w	8017754 <_svfprintf_r+0x12f4>
 8017102:	ac25      	add	r4, sp, #148	; 0x94
 8017104:	e51c      	b.n	8016b40 <_svfprintf_r+0x6e0>
 8017106:	aa22      	add	r2, sp, #136	; 0x88
 8017108:	4649      	mov	r1, r9
 801710a:	4650      	mov	r0, sl
 801710c:	f004 f873 	bl	801b1f6 <__ssprint_r>
 8017110:	2800      	cmp	r0, #0
 8017112:	f040 831f 	bne.w	8017754 <_svfprintf_r+0x12f4>
 8017116:	ac25      	add	r4, sp, #148	; 0x94
 8017118:	e522      	b.n	8016b60 <_svfprintf_r+0x700>
 801711a:	2010      	movs	r0, #16
 801711c:	4402      	add	r2, r0
 801711e:	2b07      	cmp	r3, #7
 8017120:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8017124:	6060      	str	r0, [r4, #4]
 8017126:	dd08      	ble.n	801713a <_svfprintf_r+0xcda>
 8017128:	aa22      	add	r2, sp, #136	; 0x88
 801712a:	4649      	mov	r1, r9
 801712c:	4650      	mov	r0, sl
 801712e:	f004 f862 	bl	801b1f6 <__ssprint_r>
 8017132:	2800      	cmp	r0, #0
 8017134:	f040 830e 	bne.w	8017754 <_svfprintf_r+0x12f4>
 8017138:	a925      	add	r1, sp, #148	; 0x94
 801713a:	3f10      	subs	r7, #16
 801713c:	460c      	mov	r4, r1
 801713e:	e517      	b.n	8016b70 <_svfprintf_r+0x710>
 8017140:	460c      	mov	r4, r1
 8017142:	e530      	b.n	8016ba6 <_svfprintf_r+0x746>
 8017144:	2010      	movs	r0, #16
 8017146:	4402      	add	r2, r0
 8017148:	2b07      	cmp	r3, #7
 801714a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801714e:	6060      	str	r0, [r4, #4]
 8017150:	dd08      	ble.n	8017164 <_svfprintf_r+0xd04>
 8017152:	aa22      	add	r2, sp, #136	; 0x88
 8017154:	4649      	mov	r1, r9
 8017156:	4650      	mov	r0, sl
 8017158:	f004 f84d 	bl	801b1f6 <__ssprint_r>
 801715c:	2800      	cmp	r0, #0
 801715e:	f040 82f9 	bne.w	8017754 <_svfprintf_r+0x12f4>
 8017162:	a925      	add	r1, sp, #148	; 0x94
 8017164:	3e10      	subs	r6, #16
 8017166:	460c      	mov	r4, r1
 8017168:	e522      	b.n	8016bb0 <_svfprintf_r+0x750>
 801716a:	460c      	mov	r4, r1
 801716c:	e548      	b.n	8016c00 <_svfprintf_r+0x7a0>
 801716e:	bf00      	nop
 8017170:	0801e6f8 	.word	0x0801e6f8
 8017174:	0801e709 	.word	0x0801e709
 8017178:	9b07      	ldr	r3, [sp, #28]
 801717a:	2b65      	cmp	r3, #101	; 0x65
 801717c:	f340 8232 	ble.w	80175e4 <_svfprintf_r+0x1184>
 8017180:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017184:	2200      	movs	r2, #0
 8017186:	2300      	movs	r3, #0
 8017188:	f7ed fcae 	bl	8004ae8 <__aeabi_dcmpeq>
 801718c:	2800      	cmp	r0, #0
 801718e:	d068      	beq.n	8017262 <_svfprintf_r+0xe02>
 8017190:	4b6d      	ldr	r3, [pc, #436]	; (8017348 <_svfprintf_r+0xee8>)
 8017192:	6023      	str	r3, [r4, #0]
 8017194:	2301      	movs	r3, #1
 8017196:	441e      	add	r6, r3
 8017198:	6063      	str	r3, [r4, #4]
 801719a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801719c:	9624      	str	r6, [sp, #144]	; 0x90
 801719e:	3301      	adds	r3, #1
 80171a0:	2b07      	cmp	r3, #7
 80171a2:	9323      	str	r3, [sp, #140]	; 0x8c
 80171a4:	dc37      	bgt.n	8017216 <_svfprintf_r+0xdb6>
 80171a6:	3408      	adds	r4, #8
 80171a8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80171aa:	9a05      	ldr	r2, [sp, #20]
 80171ac:	4293      	cmp	r3, r2
 80171ae:	db03      	blt.n	80171b8 <_svfprintf_r+0xd58>
 80171b0:	f018 0f01 	tst.w	r8, #1
 80171b4:	f43f ad36 	beq.w	8016c24 <_svfprintf_r+0x7c4>
 80171b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80171ba:	6023      	str	r3, [r4, #0]
 80171bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80171be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80171c0:	6063      	str	r3, [r4, #4]
 80171c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80171c4:	4413      	add	r3, r2
 80171c6:	9324      	str	r3, [sp, #144]	; 0x90
 80171c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80171ca:	3301      	adds	r3, #1
 80171cc:	2b07      	cmp	r3, #7
 80171ce:	9323      	str	r3, [sp, #140]	; 0x8c
 80171d0:	dc2b      	bgt.n	801722a <_svfprintf_r+0xdca>
 80171d2:	3408      	adds	r4, #8
 80171d4:	9b05      	ldr	r3, [sp, #20]
 80171d6:	1e5d      	subs	r5, r3, #1
 80171d8:	2d00      	cmp	r5, #0
 80171da:	f77f ad23 	ble.w	8016c24 <_svfprintf_r+0x7c4>
 80171de:	4e5b      	ldr	r6, [pc, #364]	; (801734c <_svfprintf_r+0xeec>)
 80171e0:	2710      	movs	r7, #16
 80171e2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80171e6:	2d10      	cmp	r5, #16
 80171e8:	f103 0301 	add.w	r3, r3, #1
 80171ec:	f104 0108 	add.w	r1, r4, #8
 80171f0:	6026      	str	r6, [r4, #0]
 80171f2:	dc24      	bgt.n	801723e <_svfprintf_r+0xdde>
 80171f4:	6065      	str	r5, [r4, #4]
 80171f6:	2b07      	cmp	r3, #7
 80171f8:	4415      	add	r5, r2
 80171fa:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 80171fe:	f340 8288 	ble.w	8017712 <_svfprintf_r+0x12b2>
 8017202:	aa22      	add	r2, sp, #136	; 0x88
 8017204:	4649      	mov	r1, r9
 8017206:	4650      	mov	r0, sl
 8017208:	f003 fff5 	bl	801b1f6 <__ssprint_r>
 801720c:	2800      	cmp	r0, #0
 801720e:	f040 82a1 	bne.w	8017754 <_svfprintf_r+0x12f4>
 8017212:	ac25      	add	r4, sp, #148	; 0x94
 8017214:	e506      	b.n	8016c24 <_svfprintf_r+0x7c4>
 8017216:	aa22      	add	r2, sp, #136	; 0x88
 8017218:	4649      	mov	r1, r9
 801721a:	4650      	mov	r0, sl
 801721c:	f003 ffeb 	bl	801b1f6 <__ssprint_r>
 8017220:	2800      	cmp	r0, #0
 8017222:	f040 8297 	bne.w	8017754 <_svfprintf_r+0x12f4>
 8017226:	ac25      	add	r4, sp, #148	; 0x94
 8017228:	e7be      	b.n	80171a8 <_svfprintf_r+0xd48>
 801722a:	aa22      	add	r2, sp, #136	; 0x88
 801722c:	4649      	mov	r1, r9
 801722e:	4650      	mov	r0, sl
 8017230:	f003 ffe1 	bl	801b1f6 <__ssprint_r>
 8017234:	2800      	cmp	r0, #0
 8017236:	f040 828d 	bne.w	8017754 <_svfprintf_r+0x12f4>
 801723a:	ac25      	add	r4, sp, #148	; 0x94
 801723c:	e7ca      	b.n	80171d4 <_svfprintf_r+0xd74>
 801723e:	3210      	adds	r2, #16
 8017240:	2b07      	cmp	r3, #7
 8017242:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8017246:	6067      	str	r7, [r4, #4]
 8017248:	dd08      	ble.n	801725c <_svfprintf_r+0xdfc>
 801724a:	aa22      	add	r2, sp, #136	; 0x88
 801724c:	4649      	mov	r1, r9
 801724e:	4650      	mov	r0, sl
 8017250:	f003 ffd1 	bl	801b1f6 <__ssprint_r>
 8017254:	2800      	cmp	r0, #0
 8017256:	f040 827d 	bne.w	8017754 <_svfprintf_r+0x12f4>
 801725a:	a925      	add	r1, sp, #148	; 0x94
 801725c:	3d10      	subs	r5, #16
 801725e:	460c      	mov	r4, r1
 8017260:	e7bf      	b.n	80171e2 <_svfprintf_r+0xd82>
 8017262:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017264:	2b00      	cmp	r3, #0
 8017266:	dc73      	bgt.n	8017350 <_svfprintf_r+0xef0>
 8017268:	4b37      	ldr	r3, [pc, #220]	; (8017348 <_svfprintf_r+0xee8>)
 801726a:	6023      	str	r3, [r4, #0]
 801726c:	2301      	movs	r3, #1
 801726e:	441e      	add	r6, r3
 8017270:	6063      	str	r3, [r4, #4]
 8017272:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017274:	9624      	str	r6, [sp, #144]	; 0x90
 8017276:	3301      	adds	r3, #1
 8017278:	2b07      	cmp	r3, #7
 801727a:	9323      	str	r3, [sp, #140]	; 0x8c
 801727c:	dc3d      	bgt.n	80172fa <_svfprintf_r+0xe9a>
 801727e:	3408      	adds	r4, #8
 8017280:	9905      	ldr	r1, [sp, #20]
 8017282:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017284:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017286:	430a      	orrs	r2, r1
 8017288:	f008 0101 	and.w	r1, r8, #1
 801728c:	430a      	orrs	r2, r1
 801728e:	f43f acc9 	beq.w	8016c24 <_svfprintf_r+0x7c4>
 8017292:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017294:	6022      	str	r2, [r4, #0]
 8017296:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017298:	6062      	str	r2, [r4, #4]
 801729a:	4413      	add	r3, r2
 801729c:	9324      	str	r3, [sp, #144]	; 0x90
 801729e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80172a0:	3301      	adds	r3, #1
 80172a2:	2b07      	cmp	r3, #7
 80172a4:	9323      	str	r3, [sp, #140]	; 0x8c
 80172a6:	dc32      	bgt.n	801730e <_svfprintf_r+0xeae>
 80172a8:	3408      	adds	r4, #8
 80172aa:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80172ac:	2d00      	cmp	r5, #0
 80172ae:	da1b      	bge.n	80172e8 <_svfprintf_r+0xe88>
 80172b0:	4e26      	ldr	r6, [pc, #152]	; (801734c <_svfprintf_r+0xeec>)
 80172b2:	426d      	negs	r5, r5
 80172b4:	4623      	mov	r3, r4
 80172b6:	2710      	movs	r7, #16
 80172b8:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 80172bc:	2d10      	cmp	r5, #16
 80172be:	f102 0201 	add.w	r2, r2, #1
 80172c2:	f104 0408 	add.w	r4, r4, #8
 80172c6:	601e      	str	r6, [r3, #0]
 80172c8:	dc2b      	bgt.n	8017322 <_svfprintf_r+0xec2>
 80172ca:	605d      	str	r5, [r3, #4]
 80172cc:	2a07      	cmp	r2, #7
 80172ce:	440d      	add	r5, r1
 80172d0:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 80172d4:	dd08      	ble.n	80172e8 <_svfprintf_r+0xe88>
 80172d6:	aa22      	add	r2, sp, #136	; 0x88
 80172d8:	4649      	mov	r1, r9
 80172da:	4650      	mov	r0, sl
 80172dc:	f003 ff8b 	bl	801b1f6 <__ssprint_r>
 80172e0:	2800      	cmp	r0, #0
 80172e2:	f040 8237 	bne.w	8017754 <_svfprintf_r+0x12f4>
 80172e6:	ac25      	add	r4, sp, #148	; 0x94
 80172e8:	9b05      	ldr	r3, [sp, #20]
 80172ea:	9a05      	ldr	r2, [sp, #20]
 80172ec:	6063      	str	r3, [r4, #4]
 80172ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80172f0:	f8c4 b000 	str.w	fp, [r4]
 80172f4:	4413      	add	r3, r2
 80172f6:	9324      	str	r3, [sp, #144]	; 0x90
 80172f8:	e48d      	b.n	8016c16 <_svfprintf_r+0x7b6>
 80172fa:	aa22      	add	r2, sp, #136	; 0x88
 80172fc:	4649      	mov	r1, r9
 80172fe:	4650      	mov	r0, sl
 8017300:	f003 ff79 	bl	801b1f6 <__ssprint_r>
 8017304:	2800      	cmp	r0, #0
 8017306:	f040 8225 	bne.w	8017754 <_svfprintf_r+0x12f4>
 801730a:	ac25      	add	r4, sp, #148	; 0x94
 801730c:	e7b8      	b.n	8017280 <_svfprintf_r+0xe20>
 801730e:	aa22      	add	r2, sp, #136	; 0x88
 8017310:	4649      	mov	r1, r9
 8017312:	4650      	mov	r0, sl
 8017314:	f003 ff6f 	bl	801b1f6 <__ssprint_r>
 8017318:	2800      	cmp	r0, #0
 801731a:	f040 821b 	bne.w	8017754 <_svfprintf_r+0x12f4>
 801731e:	ac25      	add	r4, sp, #148	; 0x94
 8017320:	e7c3      	b.n	80172aa <_svfprintf_r+0xe4a>
 8017322:	3110      	adds	r1, #16
 8017324:	2a07      	cmp	r2, #7
 8017326:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 801732a:	605f      	str	r7, [r3, #4]
 801732c:	dd08      	ble.n	8017340 <_svfprintf_r+0xee0>
 801732e:	aa22      	add	r2, sp, #136	; 0x88
 8017330:	4649      	mov	r1, r9
 8017332:	4650      	mov	r0, sl
 8017334:	f003 ff5f 	bl	801b1f6 <__ssprint_r>
 8017338:	2800      	cmp	r0, #0
 801733a:	f040 820b 	bne.w	8017754 <_svfprintf_r+0x12f4>
 801733e:	ac25      	add	r4, sp, #148	; 0x94
 8017340:	3d10      	subs	r5, #16
 8017342:	4623      	mov	r3, r4
 8017344:	e7b8      	b.n	80172b8 <_svfprintf_r+0xe58>
 8017346:	bf00      	nop
 8017348:	0801e71a 	.word	0x0801e71a
 801734c:	0801e72c 	.word	0x0801e72c
 8017350:	9b05      	ldr	r3, [sp, #20]
 8017352:	42ab      	cmp	r3, r5
 8017354:	bfa8      	it	ge
 8017356:	462b      	movge	r3, r5
 8017358:	2b00      	cmp	r3, #0
 801735a:	461f      	mov	r7, r3
 801735c:	dd0a      	ble.n	8017374 <_svfprintf_r+0xf14>
 801735e:	441e      	add	r6, r3
 8017360:	e9c4 b300 	strd	fp, r3, [r4]
 8017364:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017366:	9624      	str	r6, [sp, #144]	; 0x90
 8017368:	3301      	adds	r3, #1
 801736a:	2b07      	cmp	r3, #7
 801736c:	9323      	str	r3, [sp, #140]	; 0x8c
 801736e:	f300 8086 	bgt.w	801747e <_svfprintf_r+0x101e>
 8017372:	3408      	adds	r4, #8
 8017374:	2f00      	cmp	r7, #0
 8017376:	bfac      	ite	ge
 8017378:	1bee      	subge	r6, r5, r7
 801737a:	462e      	movlt	r6, r5
 801737c:	2e00      	cmp	r6, #0
 801737e:	dd19      	ble.n	80173b4 <_svfprintf_r+0xf54>
 8017380:	4f97      	ldr	r7, [pc, #604]	; (80175e0 <_svfprintf_r+0x1180>)
 8017382:	6027      	str	r7, [r4, #0]
 8017384:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8017388:	2e10      	cmp	r6, #16
 801738a:	f103 0301 	add.w	r3, r3, #1
 801738e:	f104 0108 	add.w	r1, r4, #8
 8017392:	dc7e      	bgt.n	8017492 <_svfprintf_r+0x1032>
 8017394:	6066      	str	r6, [r4, #4]
 8017396:	2b07      	cmp	r3, #7
 8017398:	4416      	add	r6, r2
 801739a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801739e:	f340 808b 	ble.w	80174b8 <_svfprintf_r+0x1058>
 80173a2:	aa22      	add	r2, sp, #136	; 0x88
 80173a4:	4649      	mov	r1, r9
 80173a6:	4650      	mov	r0, sl
 80173a8:	f003 ff25 	bl	801b1f6 <__ssprint_r>
 80173ac:	2800      	cmp	r0, #0
 80173ae:	f040 81d1 	bne.w	8017754 <_svfprintf_r+0x12f4>
 80173b2:	ac25      	add	r4, sp, #148	; 0x94
 80173b4:	f418 6f80 	tst.w	r8, #1024	; 0x400
 80173b8:	445d      	add	r5, fp
 80173ba:	d00b      	beq.n	80173d4 <_svfprintf_r+0xf74>
 80173bc:	4e88      	ldr	r6, [pc, #544]	; (80175e0 <_svfprintf_r+0x1180>)
 80173be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d17b      	bne.n	80174bc <_svfprintf_r+0x105c>
 80173c4:	9b08      	ldr	r3, [sp, #32]
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	d17b      	bne.n	80174c2 <_svfprintf_r+0x1062>
 80173ca:	9b05      	ldr	r3, [sp, #20]
 80173cc:	445b      	add	r3, fp
 80173ce:	429d      	cmp	r5, r3
 80173d0:	bf28      	it	cs
 80173d2:	461d      	movcs	r5, r3
 80173d4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80173d6:	9a05      	ldr	r2, [sp, #20]
 80173d8:	4293      	cmp	r3, r2
 80173da:	db02      	blt.n	80173e2 <_svfprintf_r+0xf82>
 80173dc:	f018 0f01 	tst.w	r8, #1
 80173e0:	d00e      	beq.n	8017400 <_svfprintf_r+0xfa0>
 80173e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80173e4:	6023      	str	r3, [r4, #0]
 80173e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80173e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80173ea:	6063      	str	r3, [r4, #4]
 80173ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80173ee:	4413      	add	r3, r2
 80173f0:	9324      	str	r3, [sp, #144]	; 0x90
 80173f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80173f4:	3301      	adds	r3, #1
 80173f6:	2b07      	cmp	r3, #7
 80173f8:	9323      	str	r3, [sp, #140]	; 0x8c
 80173fa:	f300 80dd 	bgt.w	80175b8 <_svfprintf_r+0x1158>
 80173fe:	3408      	adds	r4, #8
 8017400:	9b05      	ldr	r3, [sp, #20]
 8017402:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8017404:	eb0b 0203 	add.w	r2, fp, r3
 8017408:	1b9e      	subs	r6, r3, r6
 801740a:	1b52      	subs	r2, r2, r5
 801740c:	4296      	cmp	r6, r2
 801740e:	bfa8      	it	ge
 8017410:	4616      	movge	r6, r2
 8017412:	2e00      	cmp	r6, #0
 8017414:	dd0b      	ble.n	801742e <_svfprintf_r+0xfce>
 8017416:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017418:	4433      	add	r3, r6
 801741a:	9324      	str	r3, [sp, #144]	; 0x90
 801741c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801741e:	3301      	adds	r3, #1
 8017420:	2b07      	cmp	r3, #7
 8017422:	e9c4 5600 	strd	r5, r6, [r4]
 8017426:	9323      	str	r3, [sp, #140]	; 0x8c
 8017428:	f300 80d0 	bgt.w	80175cc <_svfprintf_r+0x116c>
 801742c:	3408      	adds	r4, #8
 801742e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8017430:	9b05      	ldr	r3, [sp, #20]
 8017432:	2e00      	cmp	r6, #0
 8017434:	eba3 0505 	sub.w	r5, r3, r5
 8017438:	bfa8      	it	ge
 801743a:	1bad      	subge	r5, r5, r6
 801743c:	2d00      	cmp	r5, #0
 801743e:	f77f abf1 	ble.w	8016c24 <_svfprintf_r+0x7c4>
 8017442:	4e67      	ldr	r6, [pc, #412]	; (80175e0 <_svfprintf_r+0x1180>)
 8017444:	2710      	movs	r7, #16
 8017446:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801744a:	2d10      	cmp	r5, #16
 801744c:	f103 0301 	add.w	r3, r3, #1
 8017450:	f104 0108 	add.w	r1, r4, #8
 8017454:	6026      	str	r6, [r4, #0]
 8017456:	f77f aecd 	ble.w	80171f4 <_svfprintf_r+0xd94>
 801745a:	3210      	adds	r2, #16
 801745c:	2b07      	cmp	r3, #7
 801745e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8017462:	6067      	str	r7, [r4, #4]
 8017464:	dd08      	ble.n	8017478 <_svfprintf_r+0x1018>
 8017466:	aa22      	add	r2, sp, #136	; 0x88
 8017468:	4649      	mov	r1, r9
 801746a:	4650      	mov	r0, sl
 801746c:	f003 fec3 	bl	801b1f6 <__ssprint_r>
 8017470:	2800      	cmp	r0, #0
 8017472:	f040 816f 	bne.w	8017754 <_svfprintf_r+0x12f4>
 8017476:	a925      	add	r1, sp, #148	; 0x94
 8017478:	3d10      	subs	r5, #16
 801747a:	460c      	mov	r4, r1
 801747c:	e7e3      	b.n	8017446 <_svfprintf_r+0xfe6>
 801747e:	aa22      	add	r2, sp, #136	; 0x88
 8017480:	4649      	mov	r1, r9
 8017482:	4650      	mov	r0, sl
 8017484:	f003 feb7 	bl	801b1f6 <__ssprint_r>
 8017488:	2800      	cmp	r0, #0
 801748a:	f040 8163 	bne.w	8017754 <_svfprintf_r+0x12f4>
 801748e:	ac25      	add	r4, sp, #148	; 0x94
 8017490:	e770      	b.n	8017374 <_svfprintf_r+0xf14>
 8017492:	2010      	movs	r0, #16
 8017494:	4402      	add	r2, r0
 8017496:	2b07      	cmp	r3, #7
 8017498:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801749c:	6060      	str	r0, [r4, #4]
 801749e:	dd08      	ble.n	80174b2 <_svfprintf_r+0x1052>
 80174a0:	aa22      	add	r2, sp, #136	; 0x88
 80174a2:	4649      	mov	r1, r9
 80174a4:	4650      	mov	r0, sl
 80174a6:	f003 fea6 	bl	801b1f6 <__ssprint_r>
 80174aa:	2800      	cmp	r0, #0
 80174ac:	f040 8152 	bne.w	8017754 <_svfprintf_r+0x12f4>
 80174b0:	a925      	add	r1, sp, #148	; 0x94
 80174b2:	3e10      	subs	r6, #16
 80174b4:	460c      	mov	r4, r1
 80174b6:	e764      	b.n	8017382 <_svfprintf_r+0xf22>
 80174b8:	460c      	mov	r4, r1
 80174ba:	e77b      	b.n	80173b4 <_svfprintf_r+0xf54>
 80174bc:	9b08      	ldr	r3, [sp, #32]
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d04a      	beq.n	8017558 <_svfprintf_r+0x10f8>
 80174c2:	9b08      	ldr	r3, [sp, #32]
 80174c4:	3b01      	subs	r3, #1
 80174c6:	9308      	str	r3, [sp, #32]
 80174c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80174ca:	6023      	str	r3, [r4, #0]
 80174cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80174ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80174d0:	6063      	str	r3, [r4, #4]
 80174d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80174d4:	4413      	add	r3, r2
 80174d6:	9324      	str	r3, [sp, #144]	; 0x90
 80174d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80174da:	3301      	adds	r3, #1
 80174dc:	2b07      	cmp	r3, #7
 80174de:	9323      	str	r3, [sp, #140]	; 0x8c
 80174e0:	dc41      	bgt.n	8017566 <_svfprintf_r+0x1106>
 80174e2:	3408      	adds	r4, #8
 80174e4:	9b05      	ldr	r3, [sp, #20]
 80174e6:	445b      	add	r3, fp
 80174e8:	1b5a      	subs	r2, r3, r5
 80174ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80174ec:	781b      	ldrb	r3, [r3, #0]
 80174ee:	4293      	cmp	r3, r2
 80174f0:	bfa8      	it	ge
 80174f2:	4613      	movge	r3, r2
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	461f      	mov	r7, r3
 80174f8:	dd0a      	ble.n	8017510 <_svfprintf_r+0x10b0>
 80174fa:	e9c4 5300 	strd	r5, r3, [r4]
 80174fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017500:	443b      	add	r3, r7
 8017502:	9324      	str	r3, [sp, #144]	; 0x90
 8017504:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017506:	3301      	adds	r3, #1
 8017508:	2b07      	cmp	r3, #7
 801750a:	9323      	str	r3, [sp, #140]	; 0x8c
 801750c:	dc35      	bgt.n	801757a <_svfprintf_r+0x111a>
 801750e:	3408      	adds	r4, #8
 8017510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017512:	781b      	ldrb	r3, [r3, #0]
 8017514:	2f00      	cmp	r7, #0
 8017516:	bfac      	ite	ge
 8017518:	1bdf      	subge	r7, r3, r7
 801751a:	461f      	movlt	r7, r3
 801751c:	2f00      	cmp	r7, #0
 801751e:	dd17      	ble.n	8017550 <_svfprintf_r+0x10f0>
 8017520:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 8017524:	2f10      	cmp	r7, #16
 8017526:	f102 0201 	add.w	r2, r2, #1
 801752a:	f104 0108 	add.w	r1, r4, #8
 801752e:	6026      	str	r6, [r4, #0]
 8017530:	dc2d      	bgt.n	801758e <_svfprintf_r+0x112e>
 8017532:	443b      	add	r3, r7
 8017534:	2a07      	cmp	r2, #7
 8017536:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 801753a:	6067      	str	r7, [r4, #4]
 801753c:	dd3a      	ble.n	80175b4 <_svfprintf_r+0x1154>
 801753e:	aa22      	add	r2, sp, #136	; 0x88
 8017540:	4649      	mov	r1, r9
 8017542:	4650      	mov	r0, sl
 8017544:	f003 fe57 	bl	801b1f6 <__ssprint_r>
 8017548:	2800      	cmp	r0, #0
 801754a:	f040 8103 	bne.w	8017754 <_svfprintf_r+0x12f4>
 801754e:	ac25      	add	r4, sp, #148	; 0x94
 8017550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017552:	781b      	ldrb	r3, [r3, #0]
 8017554:	441d      	add	r5, r3
 8017556:	e732      	b.n	80173be <_svfprintf_r+0xf5e>
 8017558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801755a:	3b01      	subs	r3, #1
 801755c:	930a      	str	r3, [sp, #40]	; 0x28
 801755e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017560:	3b01      	subs	r3, #1
 8017562:	9309      	str	r3, [sp, #36]	; 0x24
 8017564:	e7b0      	b.n	80174c8 <_svfprintf_r+0x1068>
 8017566:	aa22      	add	r2, sp, #136	; 0x88
 8017568:	4649      	mov	r1, r9
 801756a:	4650      	mov	r0, sl
 801756c:	f003 fe43 	bl	801b1f6 <__ssprint_r>
 8017570:	2800      	cmp	r0, #0
 8017572:	f040 80ef 	bne.w	8017754 <_svfprintf_r+0x12f4>
 8017576:	ac25      	add	r4, sp, #148	; 0x94
 8017578:	e7b4      	b.n	80174e4 <_svfprintf_r+0x1084>
 801757a:	aa22      	add	r2, sp, #136	; 0x88
 801757c:	4649      	mov	r1, r9
 801757e:	4650      	mov	r0, sl
 8017580:	f003 fe39 	bl	801b1f6 <__ssprint_r>
 8017584:	2800      	cmp	r0, #0
 8017586:	f040 80e5 	bne.w	8017754 <_svfprintf_r+0x12f4>
 801758a:	ac25      	add	r4, sp, #148	; 0x94
 801758c:	e7c0      	b.n	8017510 <_svfprintf_r+0x10b0>
 801758e:	2010      	movs	r0, #16
 8017590:	4403      	add	r3, r0
 8017592:	2a07      	cmp	r2, #7
 8017594:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8017598:	6060      	str	r0, [r4, #4]
 801759a:	dd08      	ble.n	80175ae <_svfprintf_r+0x114e>
 801759c:	aa22      	add	r2, sp, #136	; 0x88
 801759e:	4649      	mov	r1, r9
 80175a0:	4650      	mov	r0, sl
 80175a2:	f003 fe28 	bl	801b1f6 <__ssprint_r>
 80175a6:	2800      	cmp	r0, #0
 80175a8:	f040 80d4 	bne.w	8017754 <_svfprintf_r+0x12f4>
 80175ac:	a925      	add	r1, sp, #148	; 0x94
 80175ae:	3f10      	subs	r7, #16
 80175b0:	460c      	mov	r4, r1
 80175b2:	e7b5      	b.n	8017520 <_svfprintf_r+0x10c0>
 80175b4:	460c      	mov	r4, r1
 80175b6:	e7cb      	b.n	8017550 <_svfprintf_r+0x10f0>
 80175b8:	aa22      	add	r2, sp, #136	; 0x88
 80175ba:	4649      	mov	r1, r9
 80175bc:	4650      	mov	r0, sl
 80175be:	f003 fe1a 	bl	801b1f6 <__ssprint_r>
 80175c2:	2800      	cmp	r0, #0
 80175c4:	f040 80c6 	bne.w	8017754 <_svfprintf_r+0x12f4>
 80175c8:	ac25      	add	r4, sp, #148	; 0x94
 80175ca:	e719      	b.n	8017400 <_svfprintf_r+0xfa0>
 80175cc:	aa22      	add	r2, sp, #136	; 0x88
 80175ce:	4649      	mov	r1, r9
 80175d0:	4650      	mov	r0, sl
 80175d2:	f003 fe10 	bl	801b1f6 <__ssprint_r>
 80175d6:	2800      	cmp	r0, #0
 80175d8:	f040 80bc 	bne.w	8017754 <_svfprintf_r+0x12f4>
 80175dc:	ac25      	add	r4, sp, #148	; 0x94
 80175de:	e726      	b.n	801742e <_svfprintf_r+0xfce>
 80175e0:	0801e72c 	.word	0x0801e72c
 80175e4:	9a05      	ldr	r2, [sp, #20]
 80175e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80175e8:	2a01      	cmp	r2, #1
 80175ea:	f106 0601 	add.w	r6, r6, #1
 80175ee:	f103 0301 	add.w	r3, r3, #1
 80175f2:	f104 0508 	add.w	r5, r4, #8
 80175f6:	dc02      	bgt.n	80175fe <_svfprintf_r+0x119e>
 80175f8:	f018 0f01 	tst.w	r8, #1
 80175fc:	d07e      	beq.n	80176fc <_svfprintf_r+0x129c>
 80175fe:	2201      	movs	r2, #1
 8017600:	2b07      	cmp	r3, #7
 8017602:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8017606:	f8c4 b000 	str.w	fp, [r4]
 801760a:	6062      	str	r2, [r4, #4]
 801760c:	dd08      	ble.n	8017620 <_svfprintf_r+0x11c0>
 801760e:	aa22      	add	r2, sp, #136	; 0x88
 8017610:	4649      	mov	r1, r9
 8017612:	4650      	mov	r0, sl
 8017614:	f003 fdef 	bl	801b1f6 <__ssprint_r>
 8017618:	2800      	cmp	r0, #0
 801761a:	f040 809b 	bne.w	8017754 <_svfprintf_r+0x12f4>
 801761e:	ad25      	add	r5, sp, #148	; 0x94
 8017620:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017622:	602b      	str	r3, [r5, #0]
 8017624:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017626:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017628:	606b      	str	r3, [r5, #4]
 801762a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801762c:	4413      	add	r3, r2
 801762e:	9324      	str	r3, [sp, #144]	; 0x90
 8017630:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017632:	3301      	adds	r3, #1
 8017634:	2b07      	cmp	r3, #7
 8017636:	9323      	str	r3, [sp, #140]	; 0x8c
 8017638:	dc32      	bgt.n	80176a0 <_svfprintf_r+0x1240>
 801763a:	3508      	adds	r5, #8
 801763c:	9b05      	ldr	r3, [sp, #20]
 801763e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017642:	1e5c      	subs	r4, r3, #1
 8017644:	2200      	movs	r2, #0
 8017646:	2300      	movs	r3, #0
 8017648:	f7ed fa4e 	bl	8004ae8 <__aeabi_dcmpeq>
 801764c:	2800      	cmp	r0, #0
 801764e:	d130      	bne.n	80176b2 <_svfprintf_r+0x1252>
 8017650:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8017652:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017654:	9a05      	ldr	r2, [sp, #20]
 8017656:	3101      	adds	r1, #1
 8017658:	3b01      	subs	r3, #1
 801765a:	f10b 0001 	add.w	r0, fp, #1
 801765e:	4413      	add	r3, r2
 8017660:	2907      	cmp	r1, #7
 8017662:	e9c5 0400 	strd	r0, r4, [r5]
 8017666:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 801766a:	dd50      	ble.n	801770e <_svfprintf_r+0x12ae>
 801766c:	aa22      	add	r2, sp, #136	; 0x88
 801766e:	4649      	mov	r1, r9
 8017670:	4650      	mov	r0, sl
 8017672:	f003 fdc0 	bl	801b1f6 <__ssprint_r>
 8017676:	2800      	cmp	r0, #0
 8017678:	d16c      	bne.n	8017754 <_svfprintf_r+0x12f4>
 801767a:	ad25      	add	r5, sp, #148	; 0x94
 801767c:	ab1e      	add	r3, sp, #120	; 0x78
 801767e:	602b      	str	r3, [r5, #0]
 8017680:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017682:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8017684:	606b      	str	r3, [r5, #4]
 8017686:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017688:	4413      	add	r3, r2
 801768a:	9324      	str	r3, [sp, #144]	; 0x90
 801768c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801768e:	3301      	adds	r3, #1
 8017690:	2b07      	cmp	r3, #7
 8017692:	9323      	str	r3, [sp, #140]	; 0x8c
 8017694:	f73f adb5 	bgt.w	8017202 <_svfprintf_r+0xda2>
 8017698:	f105 0408 	add.w	r4, r5, #8
 801769c:	f7ff bac2 	b.w	8016c24 <_svfprintf_r+0x7c4>
 80176a0:	aa22      	add	r2, sp, #136	; 0x88
 80176a2:	4649      	mov	r1, r9
 80176a4:	4650      	mov	r0, sl
 80176a6:	f003 fda6 	bl	801b1f6 <__ssprint_r>
 80176aa:	2800      	cmp	r0, #0
 80176ac:	d152      	bne.n	8017754 <_svfprintf_r+0x12f4>
 80176ae:	ad25      	add	r5, sp, #148	; 0x94
 80176b0:	e7c4      	b.n	801763c <_svfprintf_r+0x11dc>
 80176b2:	2c00      	cmp	r4, #0
 80176b4:	dde2      	ble.n	801767c <_svfprintf_r+0x121c>
 80176b6:	4e58      	ldr	r6, [pc, #352]	; (8017818 <_svfprintf_r+0x13b8>)
 80176b8:	2710      	movs	r7, #16
 80176ba:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80176be:	2c10      	cmp	r4, #16
 80176c0:	f103 0301 	add.w	r3, r3, #1
 80176c4:	f105 0108 	add.w	r1, r5, #8
 80176c8:	602e      	str	r6, [r5, #0]
 80176ca:	dc07      	bgt.n	80176dc <_svfprintf_r+0x127c>
 80176cc:	606c      	str	r4, [r5, #4]
 80176ce:	2b07      	cmp	r3, #7
 80176d0:	4414      	add	r4, r2
 80176d2:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 80176d6:	dcc9      	bgt.n	801766c <_svfprintf_r+0x120c>
 80176d8:	460d      	mov	r5, r1
 80176da:	e7cf      	b.n	801767c <_svfprintf_r+0x121c>
 80176dc:	3210      	adds	r2, #16
 80176de:	2b07      	cmp	r3, #7
 80176e0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80176e4:	606f      	str	r7, [r5, #4]
 80176e6:	dd06      	ble.n	80176f6 <_svfprintf_r+0x1296>
 80176e8:	aa22      	add	r2, sp, #136	; 0x88
 80176ea:	4649      	mov	r1, r9
 80176ec:	4650      	mov	r0, sl
 80176ee:	f003 fd82 	bl	801b1f6 <__ssprint_r>
 80176f2:	bb78      	cbnz	r0, 8017754 <_svfprintf_r+0x12f4>
 80176f4:	a925      	add	r1, sp, #148	; 0x94
 80176f6:	3c10      	subs	r4, #16
 80176f8:	460d      	mov	r5, r1
 80176fa:	e7de      	b.n	80176ba <_svfprintf_r+0x125a>
 80176fc:	2201      	movs	r2, #1
 80176fe:	2b07      	cmp	r3, #7
 8017700:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8017704:	f8c4 b000 	str.w	fp, [r4]
 8017708:	6062      	str	r2, [r4, #4]
 801770a:	ddb7      	ble.n	801767c <_svfprintf_r+0x121c>
 801770c:	e7ae      	b.n	801766c <_svfprintf_r+0x120c>
 801770e:	3508      	adds	r5, #8
 8017710:	e7b4      	b.n	801767c <_svfprintf_r+0x121c>
 8017712:	460c      	mov	r4, r1
 8017714:	f7ff ba86 	b.w	8016c24 <_svfprintf_r+0x7c4>
 8017718:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801771c:	1a9d      	subs	r5, r3, r2
 801771e:	2d00      	cmp	r5, #0
 8017720:	f77f aa84 	ble.w	8016c2c <_svfprintf_r+0x7cc>
 8017724:	4e3d      	ldr	r6, [pc, #244]	; (801781c <_svfprintf_r+0x13bc>)
 8017726:	2710      	movs	r7, #16
 8017728:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801772c:	2d10      	cmp	r5, #16
 801772e:	f103 0301 	add.w	r3, r3, #1
 8017732:	6026      	str	r6, [r4, #0]
 8017734:	dc18      	bgt.n	8017768 <_svfprintf_r+0x1308>
 8017736:	6065      	str	r5, [r4, #4]
 8017738:	2b07      	cmp	r3, #7
 801773a:	4415      	add	r5, r2
 801773c:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8017740:	f77f aa74 	ble.w	8016c2c <_svfprintf_r+0x7cc>
 8017744:	aa22      	add	r2, sp, #136	; 0x88
 8017746:	4649      	mov	r1, r9
 8017748:	4650      	mov	r0, sl
 801774a:	f003 fd54 	bl	801b1f6 <__ssprint_r>
 801774e:	2800      	cmp	r0, #0
 8017750:	f43f aa6c 	beq.w	8016c2c <_svfprintf_r+0x7cc>
 8017754:	9b03      	ldr	r3, [sp, #12]
 8017756:	2b00      	cmp	r3, #0
 8017758:	f43f a88a 	beq.w	8016870 <_svfprintf_r+0x410>
 801775c:	4619      	mov	r1, r3
 801775e:	4650      	mov	r0, sl
 8017760:	f002 fb7e 	bl	8019e60 <_free_r>
 8017764:	f7ff b884 	b.w	8016870 <_svfprintf_r+0x410>
 8017768:	3210      	adds	r2, #16
 801776a:	2b07      	cmp	r3, #7
 801776c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8017770:	6067      	str	r7, [r4, #4]
 8017772:	dc02      	bgt.n	801777a <_svfprintf_r+0x131a>
 8017774:	3408      	adds	r4, #8
 8017776:	3d10      	subs	r5, #16
 8017778:	e7d6      	b.n	8017728 <_svfprintf_r+0x12c8>
 801777a:	aa22      	add	r2, sp, #136	; 0x88
 801777c:	4649      	mov	r1, r9
 801777e:	4650      	mov	r0, sl
 8017780:	f003 fd39 	bl	801b1f6 <__ssprint_r>
 8017784:	2800      	cmp	r0, #0
 8017786:	d1e5      	bne.n	8017754 <_svfprintf_r+0x12f4>
 8017788:	ac25      	add	r4, sp, #148	; 0x94
 801778a:	e7f4      	b.n	8017776 <_svfprintf_r+0x1316>
 801778c:	9903      	ldr	r1, [sp, #12]
 801778e:	4650      	mov	r0, sl
 8017790:	f002 fb66 	bl	8019e60 <_free_r>
 8017794:	f7ff ba62 	b.w	8016c5c <_svfprintf_r+0x7fc>
 8017798:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801779a:	2b00      	cmp	r3, #0
 801779c:	f43f a868 	beq.w	8016870 <_svfprintf_r+0x410>
 80177a0:	aa22      	add	r2, sp, #136	; 0x88
 80177a2:	4649      	mov	r1, r9
 80177a4:	4650      	mov	r0, sl
 80177a6:	f003 fd26 	bl	801b1f6 <__ssprint_r>
 80177aa:	f7ff b861 	b.w	8016870 <_svfprintf_r+0x410>
 80177ae:	ea56 0207 	orrs.w	r2, r6, r7
 80177b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80177b6:	f43f ab78 	beq.w	8016eaa <_svfprintf_r+0xa4a>
 80177ba:	2b01      	cmp	r3, #1
 80177bc:	f43f ac0d 	beq.w	8016fda <_svfprintf_r+0xb7a>
 80177c0:	2b02      	cmp	r3, #2
 80177c2:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 80177c6:	f43f ac55 	beq.w	8017074 <_svfprintf_r+0xc14>
 80177ca:	08f2      	lsrs	r2, r6, #3
 80177cc:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 80177d0:	08f8      	lsrs	r0, r7, #3
 80177d2:	f006 0307 	and.w	r3, r6, #7
 80177d6:	4607      	mov	r7, r0
 80177d8:	4616      	mov	r6, r2
 80177da:	3330      	adds	r3, #48	; 0x30
 80177dc:	ea56 0207 	orrs.w	r2, r6, r7
 80177e0:	4659      	mov	r1, fp
 80177e2:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 80177e6:	d1f0      	bne.n	80177ca <_svfprintf_r+0x136a>
 80177e8:	9a03      	ldr	r2, [sp, #12]
 80177ea:	07d2      	lsls	r2, r2, #31
 80177ec:	d506      	bpl.n	80177fc <_svfprintf_r+0x139c>
 80177ee:	2b30      	cmp	r3, #48	; 0x30
 80177f0:	d004      	beq.n	80177fc <_svfprintf_r+0x139c>
 80177f2:	2330      	movs	r3, #48	; 0x30
 80177f4:	f80b 3c01 	strb.w	r3, [fp, #-1]
 80177f8:	f1a1 0b02 	sub.w	fp, r1, #2
 80177fc:	ab4e      	add	r3, sp, #312	; 0x138
 80177fe:	eba3 030b 	sub.w	r3, r3, fp
 8017802:	9e04      	ldr	r6, [sp, #16]
 8017804:	9304      	str	r3, [sp, #16]
 8017806:	2300      	movs	r3, #0
 8017808:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801780c:	9303      	str	r3, [sp, #12]
 801780e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8017812:	461d      	mov	r5, r3
 8017814:	f7ff b94c 	b.w	8016ab0 <_svfprintf_r+0x650>
 8017818:	0801e72c 	.word	0x0801e72c
 801781c:	0801e71c 	.word	0x0801e71c

08017820 <sysconf>:
 8017820:	2808      	cmp	r0, #8
 8017822:	b508      	push	{r3, lr}
 8017824:	d006      	beq.n	8017834 <sysconf+0x14>
 8017826:	f002 f98b 	bl	8019b40 <__errno>
 801782a:	2316      	movs	r3, #22
 801782c:	6003      	str	r3, [r0, #0]
 801782e:	f04f 30ff 	mov.w	r0, #4294967295
 8017832:	bd08      	pop	{r3, pc}
 8017834:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8017838:	e7fb      	b.n	8017832 <sysconf+0x12>
	...

0801783c <__utoa>:
 801783c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801783e:	4c1f      	ldr	r4, [pc, #124]	; (80178bc <__utoa+0x80>)
 8017840:	b08b      	sub	sp, #44	; 0x2c
 8017842:	4605      	mov	r5, r0
 8017844:	460b      	mov	r3, r1
 8017846:	466e      	mov	r6, sp
 8017848:	f104 0c20 	add.w	ip, r4, #32
 801784c:	6820      	ldr	r0, [r4, #0]
 801784e:	6861      	ldr	r1, [r4, #4]
 8017850:	4637      	mov	r7, r6
 8017852:	c703      	stmia	r7!, {r0, r1}
 8017854:	3408      	adds	r4, #8
 8017856:	4564      	cmp	r4, ip
 8017858:	463e      	mov	r6, r7
 801785a:	d1f7      	bne.n	801784c <__utoa+0x10>
 801785c:	7921      	ldrb	r1, [r4, #4]
 801785e:	7139      	strb	r1, [r7, #4]
 8017860:	1e91      	subs	r1, r2, #2
 8017862:	6820      	ldr	r0, [r4, #0]
 8017864:	6038      	str	r0, [r7, #0]
 8017866:	2922      	cmp	r1, #34	; 0x22
 8017868:	f04f 0100 	mov.w	r1, #0
 801786c:	d904      	bls.n	8017878 <__utoa+0x3c>
 801786e:	7019      	strb	r1, [r3, #0]
 8017870:	460b      	mov	r3, r1
 8017872:	4618      	mov	r0, r3
 8017874:	b00b      	add	sp, #44	; 0x2c
 8017876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017878:	1e58      	subs	r0, r3, #1
 801787a:	4684      	mov	ip, r0
 801787c:	fbb5 f7f2 	udiv	r7, r5, r2
 8017880:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8017884:	fb02 5617 	mls	r6, r2, r7, r5
 8017888:	4476      	add	r6, lr
 801788a:	460c      	mov	r4, r1
 801788c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8017890:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8017894:	462e      	mov	r6, r5
 8017896:	42b2      	cmp	r2, r6
 8017898:	f101 0101 	add.w	r1, r1, #1
 801789c:	463d      	mov	r5, r7
 801789e:	d9ed      	bls.n	801787c <__utoa+0x40>
 80178a0:	2200      	movs	r2, #0
 80178a2:	545a      	strb	r2, [r3, r1]
 80178a4:	1919      	adds	r1, r3, r4
 80178a6:	1aa5      	subs	r5, r4, r2
 80178a8:	42aa      	cmp	r2, r5
 80178aa:	dae2      	bge.n	8017872 <__utoa+0x36>
 80178ac:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80178b0:	780e      	ldrb	r6, [r1, #0]
 80178b2:	7006      	strb	r6, [r0, #0]
 80178b4:	3201      	adds	r2, #1
 80178b6:	f801 5901 	strb.w	r5, [r1], #-1
 80178ba:	e7f4      	b.n	80178a6 <__utoa+0x6a>
 80178bc:	0801e73c 	.word	0x0801e73c

080178c0 <_vfprintf_r>:
 80178c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178c4:	ed2d 8b04 	vpush	{d8-d9}
 80178c8:	b0cf      	sub	sp, #316	; 0x13c
 80178ca:	4689      	mov	r9, r1
 80178cc:	9203      	str	r2, [sp, #12]
 80178ce:	461c      	mov	r4, r3
 80178d0:	461e      	mov	r6, r3
 80178d2:	4682      	mov	sl, r0
 80178d4:	f002 ff18 	bl	801a708 <_localeconv_r>
 80178d8:	6803      	ldr	r3, [r0, #0]
 80178da:	9313      	str	r3, [sp, #76]	; 0x4c
 80178dc:	4618      	mov	r0, r3
 80178de:	f7ec fc87 	bl	80041f0 <strlen>
 80178e2:	900e      	str	r0, [sp, #56]	; 0x38
 80178e4:	f1ba 0f00 	cmp.w	sl, #0
 80178e8:	d005      	beq.n	80178f6 <_vfprintf_r+0x36>
 80178ea:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 80178ee:	b913      	cbnz	r3, 80178f6 <_vfprintf_r+0x36>
 80178f0:	4650      	mov	r0, sl
 80178f2:	f002 fa25 	bl	8019d40 <__sinit>
 80178f6:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 80178fa:	07d8      	lsls	r0, r3, #31
 80178fc:	d407      	bmi.n	801790e <_vfprintf_r+0x4e>
 80178fe:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8017902:	0599      	lsls	r1, r3, #22
 8017904:	d403      	bmi.n	801790e <_vfprintf_r+0x4e>
 8017906:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801790a:	f002 ff03 	bl	801a714 <__retarget_lock_acquire_recursive>
 801790e:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 8017912:	049a      	lsls	r2, r3, #18
 8017914:	d409      	bmi.n	801792a <_vfprintf_r+0x6a>
 8017916:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801791a:	f8a9 300c 	strh.w	r3, [r9, #12]
 801791e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8017922:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8017926:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 801792a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801792e:	071f      	lsls	r7, r3, #28
 8017930:	d502      	bpl.n	8017938 <_vfprintf_r+0x78>
 8017932:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017936:	b9d3      	cbnz	r3, 801796e <_vfprintf_r+0xae>
 8017938:	4649      	mov	r1, r9
 801793a:	4650      	mov	r0, sl
 801793c:	f001 fa36 	bl	8018dac <__swsetup_r>
 8017940:	b1a8      	cbz	r0, 801796e <_vfprintf_r+0xae>
 8017942:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8017946:	07dd      	lsls	r5, r3, #31
 8017948:	d508      	bpl.n	801795c <_vfprintf_r+0x9c>
 801794a:	f04f 33ff 	mov.w	r3, #4294967295
 801794e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017950:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8017952:	b04f      	add	sp, #316	; 0x13c
 8017954:	ecbd 8b04 	vpop	{d8-d9}
 8017958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801795c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8017960:	059c      	lsls	r4, r3, #22
 8017962:	d4f2      	bmi.n	801794a <_vfprintf_r+0x8a>
 8017964:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8017968:	f002 fed5 	bl	801a716 <__retarget_lock_release_recursive>
 801796c:	e7ed      	b.n	801794a <_vfprintf_r+0x8a>
 801796e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8017972:	f003 021a 	and.w	r2, r3, #26
 8017976:	2a0a      	cmp	r2, #10
 8017978:	d115      	bne.n	80179a6 <_vfprintf_r+0xe6>
 801797a:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 801797e:	2a00      	cmp	r2, #0
 8017980:	db11      	blt.n	80179a6 <_vfprintf_r+0xe6>
 8017982:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 8017986:	07d0      	lsls	r0, r2, #31
 8017988:	d405      	bmi.n	8017996 <_vfprintf_r+0xd6>
 801798a:	0599      	lsls	r1, r3, #22
 801798c:	d403      	bmi.n	8017996 <_vfprintf_r+0xd6>
 801798e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8017992:	f002 fec0 	bl	801a716 <__retarget_lock_release_recursive>
 8017996:	9a03      	ldr	r2, [sp, #12]
 8017998:	4623      	mov	r3, r4
 801799a:	4649      	mov	r1, r9
 801799c:	4650      	mov	r0, sl
 801799e:	f001 f9c5 	bl	8018d2c <__sbprintf>
 80179a2:	900f      	str	r0, [sp, #60]	; 0x3c
 80179a4:	e7d4      	b.n	8017950 <_vfprintf_r+0x90>
 80179a6:	ed9f 7b9a 	vldr	d7, [pc, #616]	; 8017c10 <_vfprintf_r+0x350>
 80179aa:	2500      	movs	r5, #0
 80179ac:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 80179b0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80179b4:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 80179b8:	ac25      	add	r4, sp, #148	; 0x94
 80179ba:	9422      	str	r4, [sp, #136]	; 0x88
 80179bc:	9505      	str	r5, [sp, #20]
 80179be:	950a      	str	r5, [sp, #40]	; 0x28
 80179c0:	9512      	str	r5, [sp, #72]	; 0x48
 80179c2:	9514      	str	r5, [sp, #80]	; 0x50
 80179c4:	950f      	str	r5, [sp, #60]	; 0x3c
 80179c6:	9b03      	ldr	r3, [sp, #12]
 80179c8:	461d      	mov	r5, r3
 80179ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80179ce:	b10a      	cbz	r2, 80179d4 <_vfprintf_r+0x114>
 80179d0:	2a25      	cmp	r2, #37	; 0x25
 80179d2:	d1f9      	bne.n	80179c8 <_vfprintf_r+0x108>
 80179d4:	9b03      	ldr	r3, [sp, #12]
 80179d6:	1aef      	subs	r7, r5, r3
 80179d8:	d00d      	beq.n	80179f6 <_vfprintf_r+0x136>
 80179da:	e9c4 3700 	strd	r3, r7, [r4]
 80179de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80179e0:	443b      	add	r3, r7
 80179e2:	9324      	str	r3, [sp, #144]	; 0x90
 80179e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80179e6:	3301      	adds	r3, #1
 80179e8:	2b07      	cmp	r3, #7
 80179ea:	9323      	str	r3, [sp, #140]	; 0x8c
 80179ec:	dc79      	bgt.n	8017ae2 <_vfprintf_r+0x222>
 80179ee:	3408      	adds	r4, #8
 80179f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80179f2:	443b      	add	r3, r7
 80179f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80179f6:	782b      	ldrb	r3, [r5, #0]
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	f001 8156 	beq.w	8018caa <_vfprintf_r+0x13ea>
 80179fe:	2300      	movs	r3, #0
 8017a00:	3501      	adds	r5, #1
 8017a02:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8017a06:	f04f 38ff 	mov.w	r8, #4294967295
 8017a0a:	9310      	str	r3, [sp, #64]	; 0x40
 8017a0c:	469b      	mov	fp, r3
 8017a0e:	270a      	movs	r7, #10
 8017a10:	212b      	movs	r1, #43	; 0x2b
 8017a12:	462a      	mov	r2, r5
 8017a14:	f812 3b01 	ldrb.w	r3, [r2], #1
 8017a18:	9307      	str	r3, [sp, #28]
 8017a1a:	4613      	mov	r3, r2
 8017a1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8017a1e:	9b07      	ldr	r3, [sp, #28]
 8017a20:	3b20      	subs	r3, #32
 8017a22:	2b5a      	cmp	r3, #90	; 0x5a
 8017a24:	f200 85c0 	bhi.w	80185a8 <_vfprintf_r+0xce8>
 8017a28:	e8df f013 	tbh	[pc, r3, lsl #1]
 8017a2c:	05be007e 	.word	0x05be007e
 8017a30:	008605be 	.word	0x008605be
 8017a34:	05be05be 	.word	0x05be05be
 8017a38:	006505be 	.word	0x006505be
 8017a3c:	05be05be 	.word	0x05be05be
 8017a40:	00930089 	.word	0x00930089
 8017a44:	009005be 	.word	0x009005be
 8017a48:	05be0096 	.word	0x05be0096
 8017a4c:	00b200af 	.word	0x00b200af
 8017a50:	00b200b2 	.word	0x00b200b2
 8017a54:	00b200b2 	.word	0x00b200b2
 8017a58:	00b200b2 	.word	0x00b200b2
 8017a5c:	00b200b2 	.word	0x00b200b2
 8017a60:	05be05be 	.word	0x05be05be
 8017a64:	05be05be 	.word	0x05be05be
 8017a68:	05be05be 	.word	0x05be05be
 8017a6c:	012105be 	.word	0x012105be
 8017a70:	00df05be 	.word	0x00df05be
 8017a74:	012100f6 	.word	0x012100f6
 8017a78:	01210121 	.word	0x01210121
 8017a7c:	05be05be 	.word	0x05be05be
 8017a80:	05be05be 	.word	0x05be05be
 8017a84:	05be00c2 	.word	0x05be00c2
 8017a88:	049005be 	.word	0x049005be
 8017a8c:	05be05be 	.word	0x05be05be
 8017a90:	04d705be 	.word	0x04d705be
 8017a94:	04fb05be 	.word	0x04fb05be
 8017a98:	05be05be 	.word	0x05be05be
 8017a9c:	05be051a 	.word	0x05be051a
 8017aa0:	05be05be 	.word	0x05be05be
 8017aa4:	05be05be 	.word	0x05be05be
 8017aa8:	05be05be 	.word	0x05be05be
 8017aac:	012105be 	.word	0x012105be
 8017ab0:	00df05be 	.word	0x00df05be
 8017ab4:	012100f8 	.word	0x012100f8
 8017ab8:	01210121 	.word	0x01210121
 8017abc:	00f800c5 	.word	0x00f800c5
 8017ac0:	05be00d9 	.word	0x05be00d9
 8017ac4:	05be00d2 	.word	0x05be00d2
 8017ac8:	0492046d 	.word	0x0492046d
 8017acc:	00d904c6 	.word	0x00d904c6
 8017ad0:	04d705be 	.word	0x04d705be
 8017ad4:	04fd007c 	.word	0x04fd007c
 8017ad8:	05be05be 	.word	0x05be05be
 8017adc:	05be0537 	.word	0x05be0537
 8017ae0:	007c      	.short	0x007c
 8017ae2:	aa22      	add	r2, sp, #136	; 0x88
 8017ae4:	4649      	mov	r1, r9
 8017ae6:	4650      	mov	r0, sl
 8017ae8:	f003 fc00 	bl	801b2ec <__sprint_r>
 8017aec:	2800      	cmp	r0, #0
 8017aee:	f040 8130 	bne.w	8017d52 <_vfprintf_r+0x492>
 8017af2:	ac25      	add	r4, sp, #148	; 0x94
 8017af4:	e77c      	b.n	80179f0 <_vfprintf_r+0x130>
 8017af6:	4650      	mov	r0, sl
 8017af8:	f002 fe06 	bl	801a708 <_localeconv_r>
 8017afc:	6843      	ldr	r3, [r0, #4]
 8017afe:	9314      	str	r3, [sp, #80]	; 0x50
 8017b00:	4618      	mov	r0, r3
 8017b02:	f7ec fb75 	bl	80041f0 <strlen>
 8017b06:	9012      	str	r0, [sp, #72]	; 0x48
 8017b08:	4650      	mov	r0, sl
 8017b0a:	f002 fdfd 	bl	801a708 <_localeconv_r>
 8017b0e:	6883      	ldr	r3, [r0, #8]
 8017b10:	930a      	str	r3, [sp, #40]	; 0x28
 8017b12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017b14:	212b      	movs	r1, #43	; 0x2b
 8017b16:	b12b      	cbz	r3, 8017b24 <_vfprintf_r+0x264>
 8017b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b1a:	b11b      	cbz	r3, 8017b24 <_vfprintf_r+0x264>
 8017b1c:	781b      	ldrb	r3, [r3, #0]
 8017b1e:	b10b      	cbz	r3, 8017b24 <_vfprintf_r+0x264>
 8017b20:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 8017b24:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8017b26:	e774      	b.n	8017a12 <_vfprintf_r+0x152>
 8017b28:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	d1f9      	bne.n	8017b24 <_vfprintf_r+0x264>
 8017b30:	2320      	movs	r3, #32
 8017b32:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8017b36:	e7f5      	b.n	8017b24 <_vfprintf_r+0x264>
 8017b38:	f04b 0b01 	orr.w	fp, fp, #1
 8017b3c:	e7f2      	b.n	8017b24 <_vfprintf_r+0x264>
 8017b3e:	f856 3b04 	ldr.w	r3, [r6], #4
 8017b42:	9310      	str	r3, [sp, #64]	; 0x40
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	daed      	bge.n	8017b24 <_vfprintf_r+0x264>
 8017b48:	425b      	negs	r3, r3
 8017b4a:	9310      	str	r3, [sp, #64]	; 0x40
 8017b4c:	f04b 0b04 	orr.w	fp, fp, #4
 8017b50:	e7e8      	b.n	8017b24 <_vfprintf_r+0x264>
 8017b52:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 8017b56:	e7e5      	b.n	8017b24 <_vfprintf_r+0x264>
 8017b58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017b5e:	9207      	str	r2, [sp, #28]
 8017b60:	2a2a      	cmp	r2, #42	; 0x2a
 8017b62:	d10f      	bne.n	8017b84 <_vfprintf_r+0x2c4>
 8017b64:	f856 0b04 	ldr.w	r0, [r6], #4
 8017b68:	930b      	str	r3, [sp, #44]	; 0x2c
 8017b6a:	ea40 78e0 	orr.w	r8, r0, r0, asr #31
 8017b6e:	e7d9      	b.n	8017b24 <_vfprintf_r+0x264>
 8017b70:	fb07 2808 	mla	r8, r7, r8, r2
 8017b74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017b78:	9207      	str	r2, [sp, #28]
 8017b7a:	9a07      	ldr	r2, [sp, #28]
 8017b7c:	3a30      	subs	r2, #48	; 0x30
 8017b7e:	2a09      	cmp	r2, #9
 8017b80:	d9f6      	bls.n	8017b70 <_vfprintf_r+0x2b0>
 8017b82:	e74b      	b.n	8017a1c <_vfprintf_r+0x15c>
 8017b84:	f04f 0800 	mov.w	r8, #0
 8017b88:	e7f7      	b.n	8017b7a <_vfprintf_r+0x2ba>
 8017b8a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8017b8e:	e7c9      	b.n	8017b24 <_vfprintf_r+0x264>
 8017b90:	2200      	movs	r2, #0
 8017b92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b94:	9210      	str	r2, [sp, #64]	; 0x40
 8017b96:	9a07      	ldr	r2, [sp, #28]
 8017b98:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017b9a:	3a30      	subs	r2, #48	; 0x30
 8017b9c:	fb07 2200 	mla	r2, r7, r0, r2
 8017ba0:	9210      	str	r2, [sp, #64]	; 0x40
 8017ba2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017ba6:	9207      	str	r2, [sp, #28]
 8017ba8:	3a30      	subs	r2, #48	; 0x30
 8017baa:	2a09      	cmp	r2, #9
 8017bac:	d9f3      	bls.n	8017b96 <_vfprintf_r+0x2d6>
 8017bae:	e735      	b.n	8017a1c <_vfprintf_r+0x15c>
 8017bb0:	f04b 0b08 	orr.w	fp, fp, #8
 8017bb4:	e7b6      	b.n	8017b24 <_vfprintf_r+0x264>
 8017bb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017bb8:	781b      	ldrb	r3, [r3, #0]
 8017bba:	2b68      	cmp	r3, #104	; 0x68
 8017bbc:	bf01      	itttt	eq
 8017bbe:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 8017bc0:	3301      	addeq	r3, #1
 8017bc2:	930b      	streq	r3, [sp, #44]	; 0x2c
 8017bc4:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8017bc8:	bf18      	it	ne
 8017bca:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 8017bce:	e7a9      	b.n	8017b24 <_vfprintf_r+0x264>
 8017bd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017bd2:	781b      	ldrb	r3, [r3, #0]
 8017bd4:	2b6c      	cmp	r3, #108	; 0x6c
 8017bd6:	d105      	bne.n	8017be4 <_vfprintf_r+0x324>
 8017bd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017bda:	3301      	adds	r3, #1
 8017bdc:	930b      	str	r3, [sp, #44]	; 0x2c
 8017bde:	f04b 0b20 	orr.w	fp, fp, #32
 8017be2:	e79f      	b.n	8017b24 <_vfprintf_r+0x264>
 8017be4:	f04b 0b10 	orr.w	fp, fp, #16
 8017be8:	e79c      	b.n	8017b24 <_vfprintf_r+0x264>
 8017bea:	4632      	mov	r2, r6
 8017bec:	2000      	movs	r0, #0
 8017bee:	f852 3b04 	ldr.w	r3, [r2], #4
 8017bf2:	9206      	str	r2, [sp, #24]
 8017bf4:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8017bf8:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8017bfc:	ab35      	add	r3, sp, #212	; 0xd4
 8017bfe:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8017c02:	9004      	str	r0, [sp, #16]
 8017c04:	f04f 0801 	mov.w	r8, #1
 8017c08:	4606      	mov	r6, r0
 8017c0a:	4605      	mov	r5, r0
 8017c0c:	9303      	str	r3, [sp, #12]
 8017c0e:	e1c3      	b.n	8017f98 <_vfprintf_r+0x6d8>
	...
 8017c18:	f04b 0b10 	orr.w	fp, fp, #16
 8017c1c:	f01b 0f20 	tst.w	fp, #32
 8017c20:	d012      	beq.n	8017c48 <_vfprintf_r+0x388>
 8017c22:	3607      	adds	r6, #7
 8017c24:	f026 0307 	bic.w	r3, r6, #7
 8017c28:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8017c2c:	9306      	str	r3, [sp, #24]
 8017c2e:	2e00      	cmp	r6, #0
 8017c30:	f177 0300 	sbcs.w	r3, r7, #0
 8017c34:	da06      	bge.n	8017c44 <_vfprintf_r+0x384>
 8017c36:	4276      	negs	r6, r6
 8017c38:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8017c3c:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8017c40:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8017c44:	2301      	movs	r3, #1
 8017c46:	e392      	b.n	801836e <_vfprintf_r+0xaae>
 8017c48:	1d33      	adds	r3, r6, #4
 8017c4a:	f01b 0f10 	tst.w	fp, #16
 8017c4e:	9306      	str	r3, [sp, #24]
 8017c50:	d002      	beq.n	8017c58 <_vfprintf_r+0x398>
 8017c52:	6836      	ldr	r6, [r6, #0]
 8017c54:	17f7      	asrs	r7, r6, #31
 8017c56:	e7ea      	b.n	8017c2e <_vfprintf_r+0x36e>
 8017c58:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8017c5c:	6836      	ldr	r6, [r6, #0]
 8017c5e:	d001      	beq.n	8017c64 <_vfprintf_r+0x3a4>
 8017c60:	b236      	sxth	r6, r6
 8017c62:	e7f7      	b.n	8017c54 <_vfprintf_r+0x394>
 8017c64:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8017c68:	bf18      	it	ne
 8017c6a:	b276      	sxtbne	r6, r6
 8017c6c:	e7f2      	b.n	8017c54 <_vfprintf_r+0x394>
 8017c6e:	3607      	adds	r6, #7
 8017c70:	f026 0307 	bic.w	r3, r6, #7
 8017c74:	ecb3 7b02 	vldmia	r3!, {d7}
 8017c78:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8017c7c:	9306      	str	r3, [sp, #24]
 8017c7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017c80:	ee09 3a10 	vmov	s18, r3
 8017c84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017c86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017c8a:	ee09 3a90 	vmov	s19, r3
 8017c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8017c92:	4b39      	ldr	r3, [pc, #228]	; (8017d78 <_vfprintf_r+0x4b8>)
 8017c94:	ec51 0b19 	vmov	r0, r1, d9
 8017c98:	f7ec ff58 	bl	8004b4c <__aeabi_dcmpun>
 8017c9c:	bb20      	cbnz	r0, 8017ce8 <_vfprintf_r+0x428>
 8017c9e:	4b36      	ldr	r3, [pc, #216]	; (8017d78 <_vfprintf_r+0x4b8>)
 8017ca0:	ec51 0b19 	vmov	r0, r1, d9
 8017ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8017ca8:	f7ec ff32 	bl	8004b10 <__aeabi_dcmple>
 8017cac:	b9e0      	cbnz	r0, 8017ce8 <_vfprintf_r+0x428>
 8017cae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017cb2:	2200      	movs	r2, #0
 8017cb4:	2300      	movs	r3, #0
 8017cb6:	f7ec ff21 	bl	8004afc <__aeabi_dcmplt>
 8017cba:	b110      	cbz	r0, 8017cc2 <_vfprintf_r+0x402>
 8017cbc:	232d      	movs	r3, #45	; 0x2d
 8017cbe:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8017cc2:	4a2e      	ldr	r2, [pc, #184]	; (8017d7c <_vfprintf_r+0x4bc>)
 8017cc4:	482e      	ldr	r0, [pc, #184]	; (8017d80 <_vfprintf_r+0x4c0>)
 8017cc6:	9907      	ldr	r1, [sp, #28]
 8017cc8:	4613      	mov	r3, r2
 8017cca:	2947      	cmp	r1, #71	; 0x47
 8017ccc:	bfc8      	it	gt
 8017cce:	4603      	movgt	r3, r0
 8017cd0:	9303      	str	r3, [sp, #12]
 8017cd2:	2300      	movs	r3, #0
 8017cd4:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 8017cd8:	9304      	str	r3, [sp, #16]
 8017cda:	f04f 0803 	mov.w	r8, #3
 8017cde:	461e      	mov	r6, r3
 8017ce0:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8017ce4:	461d      	mov	r5, r3
 8017ce6:	e157      	b.n	8017f98 <_vfprintf_r+0x6d8>
 8017ce8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017cec:	4610      	mov	r0, r2
 8017cee:	4619      	mov	r1, r3
 8017cf0:	f7ec ff2c 	bl	8004b4c <__aeabi_dcmpun>
 8017cf4:	b140      	cbz	r0, 8017d08 <_vfprintf_r+0x448>
 8017cf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017cf8:	4a22      	ldr	r2, [pc, #136]	; (8017d84 <_vfprintf_r+0x4c4>)
 8017cfa:	4823      	ldr	r0, [pc, #140]	; (8017d88 <_vfprintf_r+0x4c8>)
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	bfbc      	itt	lt
 8017d00:	232d      	movlt	r3, #45	; 0x2d
 8017d02:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 8017d06:	e7de      	b.n	8017cc6 <_vfprintf_r+0x406>
 8017d08:	9b07      	ldr	r3, [sp, #28]
 8017d0a:	f023 0320 	bic.w	r3, r3, #32
 8017d0e:	2b41      	cmp	r3, #65	; 0x41
 8017d10:	9308      	str	r3, [sp, #32]
 8017d12:	d13b      	bne.n	8017d8c <_vfprintf_r+0x4cc>
 8017d14:	2330      	movs	r3, #48	; 0x30
 8017d16:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8017d1a:	9b07      	ldr	r3, [sp, #28]
 8017d1c:	2b61      	cmp	r3, #97	; 0x61
 8017d1e:	bf0c      	ite	eq
 8017d20:	2378      	moveq	r3, #120	; 0x78
 8017d22:	2358      	movne	r3, #88	; 0x58
 8017d24:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 8017d28:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8017d2c:	f04b 0b02 	orr.w	fp, fp, #2
 8017d30:	f340 8209 	ble.w	8018146 <_vfprintf_r+0x886>
 8017d34:	f108 0101 	add.w	r1, r8, #1
 8017d38:	4650      	mov	r0, sl
 8017d3a:	f7fd f98b 	bl	8015054 <_malloc_r>
 8017d3e:	9003      	str	r0, [sp, #12]
 8017d40:	2800      	cmp	r0, #0
 8017d42:	f040 8204 	bne.w	801814e <_vfprintf_r+0x88e>
 8017d46:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8017d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017d4e:	f8a9 300c 	strh.w	r3, [r9, #12]
 8017d52:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8017d56:	07d9      	lsls	r1, r3, #31
 8017d58:	d407      	bmi.n	8017d6a <_vfprintf_r+0x4aa>
 8017d5a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8017d5e:	059a      	lsls	r2, r3, #22
 8017d60:	d403      	bmi.n	8017d6a <_vfprintf_r+0x4aa>
 8017d62:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8017d66:	f002 fcd6 	bl	801a716 <__retarget_lock_release_recursive>
 8017d6a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8017d6e:	065b      	lsls	r3, r3, #25
 8017d70:	f57f adee 	bpl.w	8017950 <_vfprintf_r+0x90>
 8017d74:	e5e9      	b.n	801794a <_vfprintf_r+0x8a>
 8017d76:	bf00      	nop
 8017d78:	7fefffff 	.word	0x7fefffff
 8017d7c:	0801e6e8 	.word	0x0801e6e8
 8017d80:	0801e6ec 	.word	0x0801e6ec
 8017d84:	0801e6f0 	.word	0x0801e6f0
 8017d88:	0801e6f4 	.word	0x0801e6f4
 8017d8c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8017d90:	f000 81e0 	beq.w	8018154 <_vfprintf_r+0x894>
 8017d94:	9b08      	ldr	r3, [sp, #32]
 8017d96:	2b47      	cmp	r3, #71	; 0x47
 8017d98:	f040 81e0 	bne.w	801815c <_vfprintf_r+0x89c>
 8017d9c:	f1b8 0f00 	cmp.w	r8, #0
 8017da0:	f040 81dc 	bne.w	801815c <_vfprintf_r+0x89c>
 8017da4:	f8cd 8010 	str.w	r8, [sp, #16]
 8017da8:	f04f 0801 	mov.w	r8, #1
 8017dac:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 8017db0:	9311      	str	r3, [sp, #68]	; 0x44
 8017db2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	f280 81d3 	bge.w	8018160 <_vfprintf_r+0x8a0>
 8017dba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017dbc:	ee08 3a10 	vmov	s16, r3
 8017dc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017dc2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017dc6:	ee08 3a90 	vmov	s17, r3
 8017dca:	232d      	movs	r3, #45	; 0x2d
 8017dcc:	9318      	str	r3, [sp, #96]	; 0x60
 8017dce:	9b08      	ldr	r3, [sp, #32]
 8017dd0:	2b41      	cmp	r3, #65	; 0x41
 8017dd2:	f040 81e3 	bne.w	801819c <_vfprintf_r+0x8dc>
 8017dd6:	eeb0 0a48 	vmov.f32	s0, s16
 8017dda:	eef0 0a68 	vmov.f32	s1, s17
 8017dde:	a81c      	add	r0, sp, #112	; 0x70
 8017de0:	f003 f986 	bl	801b0f0 <frexp>
 8017de4:	2200      	movs	r2, #0
 8017de6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8017dea:	ec51 0b10 	vmov	r0, r1, d0
 8017dee:	f7ec fc13 	bl	8004618 <__aeabi_dmul>
 8017df2:	2200      	movs	r2, #0
 8017df4:	2300      	movs	r3, #0
 8017df6:	4606      	mov	r6, r0
 8017df8:	460f      	mov	r7, r1
 8017dfa:	f7ec fe75 	bl	8004ae8 <__aeabi_dcmpeq>
 8017dfe:	b108      	cbz	r0, 8017e04 <_vfprintf_r+0x544>
 8017e00:	2301      	movs	r3, #1
 8017e02:	931c      	str	r3, [sp, #112]	; 0x70
 8017e04:	4bb7      	ldr	r3, [pc, #732]	; (80180e4 <_vfprintf_r+0x824>)
 8017e06:	4ab8      	ldr	r2, [pc, #736]	; (80180e8 <_vfprintf_r+0x828>)
 8017e08:	9907      	ldr	r1, [sp, #28]
 8017e0a:	9d03      	ldr	r5, [sp, #12]
 8017e0c:	2961      	cmp	r1, #97	; 0x61
 8017e0e:	bf18      	it	ne
 8017e10:	461a      	movne	r2, r3
 8017e12:	f108 33ff 	add.w	r3, r8, #4294967295
 8017e16:	9217      	str	r2, [sp, #92]	; 0x5c
 8017e18:	9305      	str	r3, [sp, #20]
 8017e1a:	4bb4      	ldr	r3, [pc, #720]	; (80180ec <_vfprintf_r+0x82c>)
 8017e1c:	2200      	movs	r2, #0
 8017e1e:	4630      	mov	r0, r6
 8017e20:	4639      	mov	r1, r7
 8017e22:	f7ec fbf9 	bl	8004618 <__aeabi_dmul>
 8017e26:	460f      	mov	r7, r1
 8017e28:	4606      	mov	r6, r0
 8017e2a:	f7ec fea5 	bl	8004b78 <__aeabi_d2iz>
 8017e2e:	9019      	str	r0, [sp, #100]	; 0x64
 8017e30:	f7ec fb88 	bl	8004544 <__aeabi_i2d>
 8017e34:	4602      	mov	r2, r0
 8017e36:	460b      	mov	r3, r1
 8017e38:	4630      	mov	r0, r6
 8017e3a:	4639      	mov	r1, r7
 8017e3c:	f7ec fa34 	bl	80042a8 <__aeabi_dsub>
 8017e40:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8017e42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017e44:	5c9b      	ldrb	r3, [r3, r2]
 8017e46:	f805 3b01 	strb.w	r3, [r5], #1
 8017e4a:	9b05      	ldr	r3, [sp, #20]
 8017e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8017e4e:	1c5a      	adds	r2, r3, #1
 8017e50:	4606      	mov	r6, r0
 8017e52:	460f      	mov	r7, r1
 8017e54:	d007      	beq.n	8017e66 <_vfprintf_r+0x5a6>
 8017e56:	3b01      	subs	r3, #1
 8017e58:	9305      	str	r3, [sp, #20]
 8017e5a:	2200      	movs	r2, #0
 8017e5c:	2300      	movs	r3, #0
 8017e5e:	f7ec fe43 	bl	8004ae8 <__aeabi_dcmpeq>
 8017e62:	2800      	cmp	r0, #0
 8017e64:	d0d9      	beq.n	8017e1a <_vfprintf_r+0x55a>
 8017e66:	4ba2      	ldr	r3, [pc, #648]	; (80180f0 <_vfprintf_r+0x830>)
 8017e68:	2200      	movs	r2, #0
 8017e6a:	4630      	mov	r0, r6
 8017e6c:	4639      	mov	r1, r7
 8017e6e:	f7ec fe63 	bl	8004b38 <__aeabi_dcmpgt>
 8017e72:	b960      	cbnz	r0, 8017e8e <_vfprintf_r+0x5ce>
 8017e74:	4b9e      	ldr	r3, [pc, #632]	; (80180f0 <_vfprintf_r+0x830>)
 8017e76:	2200      	movs	r2, #0
 8017e78:	4630      	mov	r0, r6
 8017e7a:	4639      	mov	r1, r7
 8017e7c:	f7ec fe34 	bl	8004ae8 <__aeabi_dcmpeq>
 8017e80:	2800      	cmp	r0, #0
 8017e82:	f000 8186 	beq.w	8018192 <_vfprintf_r+0x8d2>
 8017e86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017e88:	07df      	lsls	r7, r3, #31
 8017e8a:	f140 8182 	bpl.w	8018192 <_vfprintf_r+0x8d2>
 8017e8e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017e90:	9520      	str	r5, [sp, #128]	; 0x80
 8017e92:	7bd9      	ldrb	r1, [r3, #15]
 8017e94:	2030      	movs	r0, #48	; 0x30
 8017e96:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017e98:	1e53      	subs	r3, r2, #1
 8017e9a:	9320      	str	r3, [sp, #128]	; 0x80
 8017e9c:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8017ea0:	428b      	cmp	r3, r1
 8017ea2:	f000 8165 	beq.w	8018170 <_vfprintf_r+0x8b0>
 8017ea6:	2b39      	cmp	r3, #57	; 0x39
 8017ea8:	bf0b      	itete	eq
 8017eaa:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8017eac:	3301      	addne	r3, #1
 8017eae:	7a9b      	ldrbeq	r3, [r3, #10]
 8017eb0:	b2db      	uxtbne	r3, r3
 8017eb2:	f802 3c01 	strb.w	r3, [r2, #-1]
 8017eb6:	9b03      	ldr	r3, [sp, #12]
 8017eb8:	1aeb      	subs	r3, r5, r3
 8017eba:	9305      	str	r3, [sp, #20]
 8017ebc:	9b08      	ldr	r3, [sp, #32]
 8017ebe:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8017ec0:	2b47      	cmp	r3, #71	; 0x47
 8017ec2:	f040 81b3 	bne.w	801822c <_vfprintf_r+0x96c>
 8017ec6:	1cee      	adds	r6, r5, #3
 8017ec8:	db02      	blt.n	8017ed0 <_vfprintf_r+0x610>
 8017eca:	4545      	cmp	r5, r8
 8017ecc:	f340 81d5 	ble.w	801827a <_vfprintf_r+0x9ba>
 8017ed0:	9b07      	ldr	r3, [sp, #28]
 8017ed2:	3b02      	subs	r3, #2
 8017ed4:	9307      	str	r3, [sp, #28]
 8017ed6:	9907      	ldr	r1, [sp, #28]
 8017ed8:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8017edc:	f021 0120 	bic.w	r1, r1, #32
 8017ee0:	2941      	cmp	r1, #65	; 0x41
 8017ee2:	bf08      	it	eq
 8017ee4:	320f      	addeq	r2, #15
 8017ee6:	f105 33ff 	add.w	r3, r5, #4294967295
 8017eea:	bf06      	itte	eq
 8017eec:	b2d2      	uxtbeq	r2, r2
 8017eee:	2101      	moveq	r1, #1
 8017ef0:	2100      	movne	r1, #0
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	931c      	str	r3, [sp, #112]	; 0x70
 8017ef6:	bfb8      	it	lt
 8017ef8:	f1c5 0301 	rsblt	r3, r5, #1
 8017efc:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8017f00:	bfb4      	ite	lt
 8017f02:	222d      	movlt	r2, #45	; 0x2d
 8017f04:	222b      	movge	r2, #43	; 0x2b
 8017f06:	2b09      	cmp	r3, #9
 8017f08:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8017f0c:	f340 81a4 	ble.w	8018258 <_vfprintf_r+0x998>
 8017f10:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 8017f14:	260a      	movs	r6, #10
 8017f16:	4611      	mov	r1, r2
 8017f18:	fb93 f5f6 	sdiv	r5, r3, r6
 8017f1c:	fb06 3015 	mls	r0, r6, r5, r3
 8017f20:	3030      	adds	r0, #48	; 0x30
 8017f22:	f801 0c01 	strb.w	r0, [r1, #-1]
 8017f26:	4618      	mov	r0, r3
 8017f28:	2863      	cmp	r0, #99	; 0x63
 8017f2a:	f102 32ff 	add.w	r2, r2, #4294967295
 8017f2e:	462b      	mov	r3, r5
 8017f30:	dcf1      	bgt.n	8017f16 <_vfprintf_r+0x656>
 8017f32:	3330      	adds	r3, #48	; 0x30
 8017f34:	1e88      	subs	r0, r1, #2
 8017f36:	f802 3c01 	strb.w	r3, [r2, #-1]
 8017f3a:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 8017f3e:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8017f42:	4603      	mov	r3, r0
 8017f44:	42ab      	cmp	r3, r5
 8017f46:	f0c0 8182 	bcc.w	801824e <_vfprintf_r+0x98e>
 8017f4a:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 8017f4e:	1a52      	subs	r2, r2, r1
 8017f50:	42a8      	cmp	r0, r5
 8017f52:	bf88      	it	hi
 8017f54:	2200      	movhi	r2, #0
 8017f56:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 8017f5a:	441a      	add	r2, r3
 8017f5c:	ab1e      	add	r3, sp, #120	; 0x78
 8017f5e:	1ad3      	subs	r3, r2, r3
 8017f60:	9a05      	ldr	r2, [sp, #20]
 8017f62:	9315      	str	r3, [sp, #84]	; 0x54
 8017f64:	2a01      	cmp	r2, #1
 8017f66:	eb03 0802 	add.w	r8, r3, r2
 8017f6a:	dc02      	bgt.n	8017f72 <_vfprintf_r+0x6b2>
 8017f6c:	f01b 0f01 	tst.w	fp, #1
 8017f70:	d001      	beq.n	8017f76 <_vfprintf_r+0x6b6>
 8017f72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017f74:	4498      	add	r8, r3
 8017f76:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 8017f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017f7e:	9311      	str	r3, [sp, #68]	; 0x44
 8017f80:	2300      	movs	r3, #0
 8017f82:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8017f86:	461d      	mov	r5, r3
 8017f88:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017f8a:	b113      	cbz	r3, 8017f92 <_vfprintf_r+0x6d2>
 8017f8c:	232d      	movs	r3, #45	; 0x2d
 8017f8e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8017f92:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8017f96:	2600      	movs	r6, #0
 8017f98:	4546      	cmp	r6, r8
 8017f9a:	4633      	mov	r3, r6
 8017f9c:	bfb8      	it	lt
 8017f9e:	4643      	movlt	r3, r8
 8017fa0:	9311      	str	r3, [sp, #68]	; 0x44
 8017fa2:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8017fa6:	b113      	cbz	r3, 8017fae <_vfprintf_r+0x6ee>
 8017fa8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017faa:	3301      	adds	r3, #1
 8017fac:	9311      	str	r3, [sp, #68]	; 0x44
 8017fae:	f01b 0302 	ands.w	r3, fp, #2
 8017fb2:	9317      	str	r3, [sp, #92]	; 0x5c
 8017fb4:	bf1e      	ittt	ne
 8017fb6:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8017fb8:	3302      	addne	r3, #2
 8017fba:	9311      	strne	r3, [sp, #68]	; 0x44
 8017fbc:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8017fc0:	9318      	str	r3, [sp, #96]	; 0x60
 8017fc2:	d11f      	bne.n	8018004 <_vfprintf_r+0x744>
 8017fc4:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8017fc8:	1a9f      	subs	r7, r3, r2
 8017fca:	2f00      	cmp	r7, #0
 8017fcc:	dd1a      	ble.n	8018004 <_vfprintf_r+0x744>
 8017fce:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8017fd2:	4848      	ldr	r0, [pc, #288]	; (80180f4 <_vfprintf_r+0x834>)
 8017fd4:	6020      	str	r0, [r4, #0]
 8017fd6:	2f10      	cmp	r7, #16
 8017fd8:	f103 0301 	add.w	r3, r3, #1
 8017fdc:	f104 0108 	add.w	r1, r4, #8
 8017fe0:	f300 82f0 	bgt.w	80185c4 <_vfprintf_r+0xd04>
 8017fe4:	6067      	str	r7, [r4, #4]
 8017fe6:	2b07      	cmp	r3, #7
 8017fe8:	4417      	add	r7, r2
 8017fea:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8017fee:	f340 82fc 	ble.w	80185ea <_vfprintf_r+0xd2a>
 8017ff2:	aa22      	add	r2, sp, #136	; 0x88
 8017ff4:	4649      	mov	r1, r9
 8017ff6:	4650      	mov	r0, sl
 8017ff8:	f003 f978 	bl	801b2ec <__sprint_r>
 8017ffc:	2800      	cmp	r0, #0
 8017ffe:	f040 8632 	bne.w	8018c66 <_vfprintf_r+0x13a6>
 8018002:	ac25      	add	r4, sp, #148	; 0x94
 8018004:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8018008:	b173      	cbz	r3, 8018028 <_vfprintf_r+0x768>
 801800a:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 801800e:	6023      	str	r3, [r4, #0]
 8018010:	2301      	movs	r3, #1
 8018012:	6063      	str	r3, [r4, #4]
 8018014:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018016:	3301      	adds	r3, #1
 8018018:	9324      	str	r3, [sp, #144]	; 0x90
 801801a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801801c:	3301      	adds	r3, #1
 801801e:	2b07      	cmp	r3, #7
 8018020:	9323      	str	r3, [sp, #140]	; 0x8c
 8018022:	f300 82e4 	bgt.w	80185ee <_vfprintf_r+0xd2e>
 8018026:	3408      	adds	r4, #8
 8018028:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801802a:	b16b      	cbz	r3, 8018048 <_vfprintf_r+0x788>
 801802c:	ab1b      	add	r3, sp, #108	; 0x6c
 801802e:	6023      	str	r3, [r4, #0]
 8018030:	2302      	movs	r3, #2
 8018032:	6063      	str	r3, [r4, #4]
 8018034:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018036:	3302      	adds	r3, #2
 8018038:	9324      	str	r3, [sp, #144]	; 0x90
 801803a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801803c:	3301      	adds	r3, #1
 801803e:	2b07      	cmp	r3, #7
 8018040:	9323      	str	r3, [sp, #140]	; 0x8c
 8018042:	f300 82de 	bgt.w	8018602 <_vfprintf_r+0xd42>
 8018046:	3408      	adds	r4, #8
 8018048:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801804a:	2b80      	cmp	r3, #128	; 0x80
 801804c:	d11f      	bne.n	801808e <_vfprintf_r+0x7ce>
 801804e:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8018052:	1a9f      	subs	r7, r3, r2
 8018054:	2f00      	cmp	r7, #0
 8018056:	dd1a      	ble.n	801808e <_vfprintf_r+0x7ce>
 8018058:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801805c:	4826      	ldr	r0, [pc, #152]	; (80180f8 <_vfprintf_r+0x838>)
 801805e:	6020      	str	r0, [r4, #0]
 8018060:	2f10      	cmp	r7, #16
 8018062:	f103 0301 	add.w	r3, r3, #1
 8018066:	f104 0108 	add.w	r1, r4, #8
 801806a:	f300 82d4 	bgt.w	8018616 <_vfprintf_r+0xd56>
 801806e:	6067      	str	r7, [r4, #4]
 8018070:	2b07      	cmp	r3, #7
 8018072:	4417      	add	r7, r2
 8018074:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8018078:	f340 82e0 	ble.w	801863c <_vfprintf_r+0xd7c>
 801807c:	aa22      	add	r2, sp, #136	; 0x88
 801807e:	4649      	mov	r1, r9
 8018080:	4650      	mov	r0, sl
 8018082:	f003 f933 	bl	801b2ec <__sprint_r>
 8018086:	2800      	cmp	r0, #0
 8018088:	f040 85ed 	bne.w	8018c66 <_vfprintf_r+0x13a6>
 801808c:	ac25      	add	r4, sp, #148	; 0x94
 801808e:	eba6 0608 	sub.w	r6, r6, r8
 8018092:	2e00      	cmp	r6, #0
 8018094:	dd1a      	ble.n	80180cc <_vfprintf_r+0x80c>
 8018096:	4f18      	ldr	r7, [pc, #96]	; (80180f8 <_vfprintf_r+0x838>)
 8018098:	6027      	str	r7, [r4, #0]
 801809a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801809e:	2e10      	cmp	r6, #16
 80180a0:	f103 0301 	add.w	r3, r3, #1
 80180a4:	f104 0108 	add.w	r1, r4, #8
 80180a8:	f300 82ca 	bgt.w	8018640 <_vfprintf_r+0xd80>
 80180ac:	6066      	str	r6, [r4, #4]
 80180ae:	2b07      	cmp	r3, #7
 80180b0:	4416      	add	r6, r2
 80180b2:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80180b6:	f340 82d6 	ble.w	8018666 <_vfprintf_r+0xda6>
 80180ba:	aa22      	add	r2, sp, #136	; 0x88
 80180bc:	4649      	mov	r1, r9
 80180be:	4650      	mov	r0, sl
 80180c0:	f003 f914 	bl	801b2ec <__sprint_r>
 80180c4:	2800      	cmp	r0, #0
 80180c6:	f040 85ce 	bne.w	8018c66 <_vfprintf_r+0x13a6>
 80180ca:	ac25      	add	r4, sp, #148	; 0x94
 80180cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80180d0:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80180d2:	f040 82cf 	bne.w	8018674 <_vfprintf_r+0xdb4>
 80180d6:	9b03      	ldr	r3, [sp, #12]
 80180d8:	e9c4 3800 	strd	r3, r8, [r4]
 80180dc:	4446      	add	r6, r8
 80180de:	9624      	str	r6, [sp, #144]	; 0x90
 80180e0:	e00c      	b.n	80180fc <_vfprintf_r+0x83c>
 80180e2:	bf00      	nop
 80180e4:	0801e709 	.word	0x0801e709
 80180e8:	0801e6f8 	.word	0x0801e6f8
 80180ec:	40300000 	.word	0x40300000
 80180f0:	3fe00000 	.word	0x3fe00000
 80180f4:	0801e761 	.word	0x0801e761
 80180f8:	0801e771 	.word	0x0801e771
 80180fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80180fe:	3301      	adds	r3, #1
 8018100:	2b07      	cmp	r3, #7
 8018102:	9323      	str	r3, [sp, #140]	; 0x8c
 8018104:	f300 82fb 	bgt.w	80186fe <_vfprintf_r+0xe3e>
 8018108:	3408      	adds	r4, #8
 801810a:	f01b 0f04 	tst.w	fp, #4
 801810e:	f040 858c 	bne.w	8018c2a <_vfprintf_r+0x136a>
 8018112:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8018116:	9911      	ldr	r1, [sp, #68]	; 0x44
 8018118:	428a      	cmp	r2, r1
 801811a:	bfac      	ite	ge
 801811c:	189b      	addge	r3, r3, r2
 801811e:	185b      	addlt	r3, r3, r1
 8018120:	930f      	str	r3, [sp, #60]	; 0x3c
 8018122:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018124:	b13b      	cbz	r3, 8018136 <_vfprintf_r+0x876>
 8018126:	aa22      	add	r2, sp, #136	; 0x88
 8018128:	4649      	mov	r1, r9
 801812a:	4650      	mov	r0, sl
 801812c:	f003 f8de 	bl	801b2ec <__sprint_r>
 8018130:	2800      	cmp	r0, #0
 8018132:	f040 8598 	bne.w	8018c66 <_vfprintf_r+0x13a6>
 8018136:	2300      	movs	r3, #0
 8018138:	9323      	str	r3, [sp, #140]	; 0x8c
 801813a:	9b04      	ldr	r3, [sp, #16]
 801813c:	2b00      	cmp	r3, #0
 801813e:	f040 85ae 	bne.w	8018c9e <_vfprintf_r+0x13de>
 8018142:	ac25      	add	r4, sp, #148	; 0x94
 8018144:	e0eb      	b.n	801831e <_vfprintf_r+0xa5e>
 8018146:	ab35      	add	r3, sp, #212	; 0xd4
 8018148:	9004      	str	r0, [sp, #16]
 801814a:	9303      	str	r3, [sp, #12]
 801814c:	e62e      	b.n	8017dac <_vfprintf_r+0x4ec>
 801814e:	9b03      	ldr	r3, [sp, #12]
 8018150:	9304      	str	r3, [sp, #16]
 8018152:	e62b      	b.n	8017dac <_vfprintf_r+0x4ec>
 8018154:	9004      	str	r0, [sp, #16]
 8018156:	f04f 0806 	mov.w	r8, #6
 801815a:	e627      	b.n	8017dac <_vfprintf_r+0x4ec>
 801815c:	9004      	str	r0, [sp, #16]
 801815e:	e625      	b.n	8017dac <_vfprintf_r+0x4ec>
 8018160:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 8018164:	2300      	movs	r3, #0
 8018166:	eeb0 8a47 	vmov.f32	s16, s14
 801816a:	eef0 8a67 	vmov.f32	s17, s15
 801816e:	e62d      	b.n	8017dcc <_vfprintf_r+0x50c>
 8018170:	f802 0c01 	strb.w	r0, [r2, #-1]
 8018174:	e68f      	b.n	8017e96 <_vfprintf_r+0x5d6>
 8018176:	f803 0b01 	strb.w	r0, [r3], #1
 801817a:	1aca      	subs	r2, r1, r3
 801817c:	2a00      	cmp	r2, #0
 801817e:	dafa      	bge.n	8018176 <_vfprintf_r+0x8b6>
 8018180:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018184:	3201      	adds	r2, #1
 8018186:	f103 0301 	add.w	r3, r3, #1
 801818a:	bfb8      	it	lt
 801818c:	2300      	movlt	r3, #0
 801818e:	441d      	add	r5, r3
 8018190:	e691      	b.n	8017eb6 <_vfprintf_r+0x5f6>
 8018192:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018194:	462b      	mov	r3, r5
 8018196:	18a9      	adds	r1, r5, r2
 8018198:	2030      	movs	r0, #48	; 0x30
 801819a:	e7ee      	b.n	801817a <_vfprintf_r+0x8ba>
 801819c:	9b08      	ldr	r3, [sp, #32]
 801819e:	2b46      	cmp	r3, #70	; 0x46
 80181a0:	d005      	beq.n	80181ae <_vfprintf_r+0x8ee>
 80181a2:	2b45      	cmp	r3, #69	; 0x45
 80181a4:	d11b      	bne.n	80181de <_vfprintf_r+0x91e>
 80181a6:	f108 0501 	add.w	r5, r8, #1
 80181aa:	2102      	movs	r1, #2
 80181ac:	e001      	b.n	80181b2 <_vfprintf_r+0x8f2>
 80181ae:	4645      	mov	r5, r8
 80181b0:	2103      	movs	r1, #3
 80181b2:	ab20      	add	r3, sp, #128	; 0x80
 80181b4:	9301      	str	r3, [sp, #4]
 80181b6:	ab1d      	add	r3, sp, #116	; 0x74
 80181b8:	9300      	str	r3, [sp, #0]
 80181ba:	462a      	mov	r2, r5
 80181bc:	ab1c      	add	r3, sp, #112	; 0x70
 80181be:	4650      	mov	r0, sl
 80181c0:	eeb0 0a48 	vmov.f32	s0, s16
 80181c4:	eef0 0a68 	vmov.f32	s1, s17
 80181c8:	f000 fee6 	bl	8018f98 <_dtoa_r>
 80181cc:	9b08      	ldr	r3, [sp, #32]
 80181ce:	9003      	str	r0, [sp, #12]
 80181d0:	2b47      	cmp	r3, #71	; 0x47
 80181d2:	d106      	bne.n	80181e2 <_vfprintf_r+0x922>
 80181d4:	f01b 0f01 	tst.w	fp, #1
 80181d8:	d103      	bne.n	80181e2 <_vfprintf_r+0x922>
 80181da:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80181dc:	e66b      	b.n	8017eb6 <_vfprintf_r+0x5f6>
 80181de:	4645      	mov	r5, r8
 80181e0:	e7e3      	b.n	80181aa <_vfprintf_r+0x8ea>
 80181e2:	9b03      	ldr	r3, [sp, #12]
 80181e4:	195e      	adds	r6, r3, r5
 80181e6:	9b08      	ldr	r3, [sp, #32]
 80181e8:	2b46      	cmp	r3, #70	; 0x46
 80181ea:	d10f      	bne.n	801820c <_vfprintf_r+0x94c>
 80181ec:	9b03      	ldr	r3, [sp, #12]
 80181ee:	781b      	ldrb	r3, [r3, #0]
 80181f0:	2b30      	cmp	r3, #48	; 0x30
 80181f2:	d109      	bne.n	8018208 <_vfprintf_r+0x948>
 80181f4:	ec51 0b18 	vmov	r0, r1, d8
 80181f8:	2200      	movs	r2, #0
 80181fa:	2300      	movs	r3, #0
 80181fc:	f7ec fc74 	bl	8004ae8 <__aeabi_dcmpeq>
 8018200:	b910      	cbnz	r0, 8018208 <_vfprintf_r+0x948>
 8018202:	f1c5 0501 	rsb	r5, r5, #1
 8018206:	951c      	str	r5, [sp, #112]	; 0x70
 8018208:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801820a:	441e      	add	r6, r3
 801820c:	ec51 0b18 	vmov	r0, r1, d8
 8018210:	2200      	movs	r2, #0
 8018212:	2300      	movs	r3, #0
 8018214:	f7ec fc68 	bl	8004ae8 <__aeabi_dcmpeq>
 8018218:	b100      	cbz	r0, 801821c <_vfprintf_r+0x95c>
 801821a:	9620      	str	r6, [sp, #128]	; 0x80
 801821c:	2230      	movs	r2, #48	; 0x30
 801821e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018220:	429e      	cmp	r6, r3
 8018222:	d9da      	bls.n	80181da <_vfprintf_r+0x91a>
 8018224:	1c59      	adds	r1, r3, #1
 8018226:	9120      	str	r1, [sp, #128]	; 0x80
 8018228:	701a      	strb	r2, [r3, #0]
 801822a:	e7f8      	b.n	801821e <_vfprintf_r+0x95e>
 801822c:	9b08      	ldr	r3, [sp, #32]
 801822e:	2b46      	cmp	r3, #70	; 0x46
 8018230:	f47f ae51 	bne.w	8017ed6 <_vfprintf_r+0x616>
 8018234:	f00b 0301 	and.w	r3, fp, #1
 8018238:	2d00      	cmp	r5, #0
 801823a:	ea43 0308 	orr.w	r3, r3, r8
 801823e:	dd18      	ble.n	8018272 <_vfprintf_r+0x9b2>
 8018240:	b383      	cbz	r3, 80182a4 <_vfprintf_r+0x9e4>
 8018242:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018244:	18eb      	adds	r3, r5, r3
 8018246:	4498      	add	r8, r3
 8018248:	2366      	movs	r3, #102	; 0x66
 801824a:	9307      	str	r3, [sp, #28]
 801824c:	e030      	b.n	80182b0 <_vfprintf_r+0x9f0>
 801824e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8018252:	f802 6b01 	strb.w	r6, [r2], #1
 8018256:	e675      	b.n	8017f44 <_vfprintf_r+0x684>
 8018258:	b941      	cbnz	r1, 801826c <_vfprintf_r+0x9ac>
 801825a:	2230      	movs	r2, #48	; 0x30
 801825c:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 8018260:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8018264:	3330      	adds	r3, #48	; 0x30
 8018266:	f802 3b01 	strb.w	r3, [r2], #1
 801826a:	e677      	b.n	8017f5c <_vfprintf_r+0x69c>
 801826c:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8018270:	e7f8      	b.n	8018264 <_vfprintf_r+0x9a4>
 8018272:	b1cb      	cbz	r3, 80182a8 <_vfprintf_r+0x9e8>
 8018274:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018276:	3301      	adds	r3, #1
 8018278:	e7e5      	b.n	8018246 <_vfprintf_r+0x986>
 801827a:	9b05      	ldr	r3, [sp, #20]
 801827c:	429d      	cmp	r5, r3
 801827e:	db07      	blt.n	8018290 <_vfprintf_r+0x9d0>
 8018280:	f01b 0f01 	tst.w	fp, #1
 8018284:	d029      	beq.n	80182da <_vfprintf_r+0xa1a>
 8018286:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018288:	eb05 0803 	add.w	r8, r5, r3
 801828c:	2367      	movs	r3, #103	; 0x67
 801828e:	e7dc      	b.n	801824a <_vfprintf_r+0x98a>
 8018290:	9b05      	ldr	r3, [sp, #20]
 8018292:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018294:	2d00      	cmp	r5, #0
 8018296:	eb03 0802 	add.w	r8, r3, r2
 801829a:	dcf7      	bgt.n	801828c <_vfprintf_r+0x9cc>
 801829c:	f1c5 0301 	rsb	r3, r5, #1
 80182a0:	4498      	add	r8, r3
 80182a2:	e7f3      	b.n	801828c <_vfprintf_r+0x9cc>
 80182a4:	46a8      	mov	r8, r5
 80182a6:	e7cf      	b.n	8018248 <_vfprintf_r+0x988>
 80182a8:	2366      	movs	r3, #102	; 0x66
 80182aa:	9307      	str	r3, [sp, #28]
 80182ac:	f04f 0801 	mov.w	r8, #1
 80182b0:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 80182b4:	9309      	str	r3, [sp, #36]	; 0x24
 80182b6:	d023      	beq.n	8018300 <_vfprintf_r+0xa40>
 80182b8:	2300      	movs	r3, #0
 80182ba:	2d00      	cmp	r5, #0
 80182bc:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80182c0:	f77f ae62 	ble.w	8017f88 <_vfprintf_r+0x6c8>
 80182c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80182c6:	781b      	ldrb	r3, [r3, #0]
 80182c8:	2bff      	cmp	r3, #255	; 0xff
 80182ca:	d108      	bne.n	80182de <_vfprintf_r+0xa1e>
 80182cc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80182d0:	4413      	add	r3, r2
 80182d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80182d4:	fb02 8803 	mla	r8, r2, r3, r8
 80182d8:	e656      	b.n	8017f88 <_vfprintf_r+0x6c8>
 80182da:	46a8      	mov	r8, r5
 80182dc:	e7d6      	b.n	801828c <_vfprintf_r+0x9cc>
 80182de:	42ab      	cmp	r3, r5
 80182e0:	daf4      	bge.n	80182cc <_vfprintf_r+0xa0c>
 80182e2:	1aed      	subs	r5, r5, r3
 80182e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80182e6:	785b      	ldrb	r3, [r3, #1]
 80182e8:	b133      	cbz	r3, 80182f8 <_vfprintf_r+0xa38>
 80182ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182ec:	3301      	adds	r3, #1
 80182ee:	9309      	str	r3, [sp, #36]	; 0x24
 80182f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80182f2:	3301      	adds	r3, #1
 80182f4:	930a      	str	r3, [sp, #40]	; 0x28
 80182f6:	e7e5      	b.n	80182c4 <_vfprintf_r+0xa04>
 80182f8:	9b08      	ldr	r3, [sp, #32]
 80182fa:	3301      	adds	r3, #1
 80182fc:	9308      	str	r3, [sp, #32]
 80182fe:	e7e1      	b.n	80182c4 <_vfprintf_r+0xa04>
 8018300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018302:	9308      	str	r3, [sp, #32]
 8018304:	e640      	b.n	8017f88 <_vfprintf_r+0x6c8>
 8018306:	4632      	mov	r2, r6
 8018308:	f01b 0f20 	tst.w	fp, #32
 801830c:	f852 3b04 	ldr.w	r3, [r2], #4
 8018310:	9206      	str	r2, [sp, #24]
 8018312:	d009      	beq.n	8018328 <_vfprintf_r+0xa68>
 8018314:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018316:	4610      	mov	r0, r2
 8018318:	17d1      	asrs	r1, r2, #31
 801831a:	e9c3 0100 	strd	r0, r1, [r3]
 801831e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018320:	9e06      	ldr	r6, [sp, #24]
 8018322:	9303      	str	r3, [sp, #12]
 8018324:	f7ff bb4f 	b.w	80179c6 <_vfprintf_r+0x106>
 8018328:	f01b 0f10 	tst.w	fp, #16
 801832c:	d002      	beq.n	8018334 <_vfprintf_r+0xa74>
 801832e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018330:	601a      	str	r2, [r3, #0]
 8018332:	e7f4      	b.n	801831e <_vfprintf_r+0xa5e>
 8018334:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8018338:	d002      	beq.n	8018340 <_vfprintf_r+0xa80>
 801833a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801833c:	801a      	strh	r2, [r3, #0]
 801833e:	e7ee      	b.n	801831e <_vfprintf_r+0xa5e>
 8018340:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8018344:	d0f3      	beq.n	801832e <_vfprintf_r+0xa6e>
 8018346:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018348:	701a      	strb	r2, [r3, #0]
 801834a:	e7e8      	b.n	801831e <_vfprintf_r+0xa5e>
 801834c:	f04b 0b10 	orr.w	fp, fp, #16
 8018350:	f01b 0f20 	tst.w	fp, #32
 8018354:	d01e      	beq.n	8018394 <_vfprintf_r+0xad4>
 8018356:	3607      	adds	r6, #7
 8018358:	f026 0307 	bic.w	r3, r6, #7
 801835c:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8018360:	9306      	str	r3, [sp, #24]
 8018362:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8018366:	2300      	movs	r3, #0
 8018368:	2200      	movs	r2, #0
 801836a:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 801836e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8018372:	f000 84a9 	beq.w	8018cc8 <_vfprintf_r+0x1408>
 8018376:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 801837a:	9204      	str	r2, [sp, #16]
 801837c:	ea56 0207 	orrs.w	r2, r6, r7
 8018380:	f040 84a8 	bne.w	8018cd4 <_vfprintf_r+0x1414>
 8018384:	f1b8 0f00 	cmp.w	r8, #0
 8018388:	f000 8104 	beq.w	8018594 <_vfprintf_r+0xcd4>
 801838c:	2b01      	cmp	r3, #1
 801838e:	f040 84a4 	bne.w	8018cda <_vfprintf_r+0x141a>
 8018392:	e09a      	b.n	80184ca <_vfprintf_r+0xc0a>
 8018394:	1d33      	adds	r3, r6, #4
 8018396:	f01b 0f10 	tst.w	fp, #16
 801839a:	9306      	str	r3, [sp, #24]
 801839c:	d001      	beq.n	80183a2 <_vfprintf_r+0xae2>
 801839e:	6836      	ldr	r6, [r6, #0]
 80183a0:	e003      	b.n	80183aa <_vfprintf_r+0xaea>
 80183a2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80183a6:	d002      	beq.n	80183ae <_vfprintf_r+0xaee>
 80183a8:	8836      	ldrh	r6, [r6, #0]
 80183aa:	2700      	movs	r7, #0
 80183ac:	e7d9      	b.n	8018362 <_vfprintf_r+0xaa2>
 80183ae:	f41b 7f00 	tst.w	fp, #512	; 0x200
 80183b2:	d0f4      	beq.n	801839e <_vfprintf_r+0xade>
 80183b4:	7836      	ldrb	r6, [r6, #0]
 80183b6:	e7f8      	b.n	80183aa <_vfprintf_r+0xaea>
 80183b8:	4633      	mov	r3, r6
 80183ba:	2278      	movs	r2, #120	; 0x78
 80183bc:	f853 6b04 	ldr.w	r6, [r3], #4
 80183c0:	9306      	str	r3, [sp, #24]
 80183c2:	f647 0330 	movw	r3, #30768	; 0x7830
 80183c6:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 80183ca:	4ba8      	ldr	r3, [pc, #672]	; (801866c <_vfprintf_r+0xdac>)
 80183cc:	9316      	str	r3, [sp, #88]	; 0x58
 80183ce:	2700      	movs	r7, #0
 80183d0:	f04b 0b02 	orr.w	fp, fp, #2
 80183d4:	2302      	movs	r3, #2
 80183d6:	9207      	str	r2, [sp, #28]
 80183d8:	e7c6      	b.n	8018368 <_vfprintf_r+0xaa8>
 80183da:	4632      	mov	r2, r6
 80183dc:	2500      	movs	r5, #0
 80183de:	f852 3b04 	ldr.w	r3, [r2], #4
 80183e2:	9303      	str	r3, [sp, #12]
 80183e4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80183e8:	9206      	str	r2, [sp, #24]
 80183ea:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 80183ee:	d010      	beq.n	8018412 <_vfprintf_r+0xb52>
 80183f0:	9803      	ldr	r0, [sp, #12]
 80183f2:	4642      	mov	r2, r8
 80183f4:	4629      	mov	r1, r5
 80183f6:	f7eb ff03 	bl	8004200 <memchr>
 80183fa:	9004      	str	r0, [sp, #16]
 80183fc:	2800      	cmp	r0, #0
 80183fe:	f000 80df 	beq.w	80185c0 <_vfprintf_r+0xd00>
 8018402:	9a03      	ldr	r2, [sp, #12]
 8018404:	9504      	str	r5, [sp, #16]
 8018406:	e9cd 5508 	strd	r5, r5, [sp, #32]
 801840a:	eba0 0802 	sub.w	r8, r0, r2
 801840e:	462e      	mov	r6, r5
 8018410:	e5c2      	b.n	8017f98 <_vfprintf_r+0x6d8>
 8018412:	9803      	ldr	r0, [sp, #12]
 8018414:	f7eb feec 	bl	80041f0 <strlen>
 8018418:	462e      	mov	r6, r5
 801841a:	4680      	mov	r8, r0
 801841c:	9504      	str	r5, [sp, #16]
 801841e:	4633      	mov	r3, r6
 8018420:	e45e      	b.n	8017ce0 <_vfprintf_r+0x420>
 8018422:	f04b 0b10 	orr.w	fp, fp, #16
 8018426:	f01b 0f20 	tst.w	fp, #32
 801842a:	d007      	beq.n	801843c <_vfprintf_r+0xb7c>
 801842c:	3607      	adds	r6, #7
 801842e:	f026 0307 	bic.w	r3, r6, #7
 8018432:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8018436:	9306      	str	r3, [sp, #24]
 8018438:	2301      	movs	r3, #1
 801843a:	e795      	b.n	8018368 <_vfprintf_r+0xaa8>
 801843c:	1d33      	adds	r3, r6, #4
 801843e:	f01b 0f10 	tst.w	fp, #16
 8018442:	9306      	str	r3, [sp, #24]
 8018444:	d001      	beq.n	801844a <_vfprintf_r+0xb8a>
 8018446:	6836      	ldr	r6, [r6, #0]
 8018448:	e003      	b.n	8018452 <_vfprintf_r+0xb92>
 801844a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801844e:	d002      	beq.n	8018456 <_vfprintf_r+0xb96>
 8018450:	8836      	ldrh	r6, [r6, #0]
 8018452:	2700      	movs	r7, #0
 8018454:	e7f0      	b.n	8018438 <_vfprintf_r+0xb78>
 8018456:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801845a:	d0f4      	beq.n	8018446 <_vfprintf_r+0xb86>
 801845c:	7836      	ldrb	r6, [r6, #0]
 801845e:	e7f8      	b.n	8018452 <_vfprintf_r+0xb92>
 8018460:	4b83      	ldr	r3, [pc, #524]	; (8018670 <_vfprintf_r+0xdb0>)
 8018462:	9316      	str	r3, [sp, #88]	; 0x58
 8018464:	f01b 0f20 	tst.w	fp, #32
 8018468:	d019      	beq.n	801849e <_vfprintf_r+0xbde>
 801846a:	3607      	adds	r6, #7
 801846c:	f026 0307 	bic.w	r3, r6, #7
 8018470:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8018474:	9306      	str	r3, [sp, #24]
 8018476:	f01b 0f01 	tst.w	fp, #1
 801847a:	d00a      	beq.n	8018492 <_vfprintf_r+0xbd2>
 801847c:	ea56 0307 	orrs.w	r3, r6, r7
 8018480:	d007      	beq.n	8018492 <_vfprintf_r+0xbd2>
 8018482:	2330      	movs	r3, #48	; 0x30
 8018484:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8018488:	9b07      	ldr	r3, [sp, #28]
 801848a:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801848e:	f04b 0b02 	orr.w	fp, fp, #2
 8018492:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8018496:	2302      	movs	r3, #2
 8018498:	e766      	b.n	8018368 <_vfprintf_r+0xaa8>
 801849a:	4b74      	ldr	r3, [pc, #464]	; (801866c <_vfprintf_r+0xdac>)
 801849c:	e7e1      	b.n	8018462 <_vfprintf_r+0xba2>
 801849e:	1d33      	adds	r3, r6, #4
 80184a0:	f01b 0f10 	tst.w	fp, #16
 80184a4:	9306      	str	r3, [sp, #24]
 80184a6:	d001      	beq.n	80184ac <_vfprintf_r+0xbec>
 80184a8:	6836      	ldr	r6, [r6, #0]
 80184aa:	e003      	b.n	80184b4 <_vfprintf_r+0xbf4>
 80184ac:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80184b0:	d002      	beq.n	80184b8 <_vfprintf_r+0xbf8>
 80184b2:	8836      	ldrh	r6, [r6, #0]
 80184b4:	2700      	movs	r7, #0
 80184b6:	e7de      	b.n	8018476 <_vfprintf_r+0xbb6>
 80184b8:	f41b 7f00 	tst.w	fp, #512	; 0x200
 80184bc:	d0f4      	beq.n	80184a8 <_vfprintf_r+0xbe8>
 80184be:	7836      	ldrb	r6, [r6, #0]
 80184c0:	e7f8      	b.n	80184b4 <_vfprintf_r+0xbf4>
 80184c2:	2f00      	cmp	r7, #0
 80184c4:	bf08      	it	eq
 80184c6:	2e0a      	cmpeq	r6, #10
 80184c8:	d206      	bcs.n	80184d8 <_vfprintf_r+0xc18>
 80184ca:	3630      	adds	r6, #48	; 0x30
 80184cc:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 80184d0:	f20d 1337 	addw	r3, sp, #311	; 0x137
 80184d4:	f000 bc23 	b.w	8018d1e <_vfprintf_r+0x145e>
 80184d8:	2300      	movs	r3, #0
 80184da:	9305      	str	r3, [sp, #20]
 80184dc:	9b04      	ldr	r3, [sp, #16]
 80184de:	ad4e      	add	r5, sp, #312	; 0x138
 80184e0:	f403 6b80 	and.w	fp, r3, #1024	; 0x400
 80184e4:	1e6b      	subs	r3, r5, #1
 80184e6:	9303      	str	r3, [sp, #12]
 80184e8:	220a      	movs	r2, #10
 80184ea:	2300      	movs	r3, #0
 80184ec:	4630      	mov	r0, r6
 80184ee:	4639      	mov	r1, r7
 80184f0:	f7ec fbda 	bl	8004ca8 <__aeabi_uldivmod>
 80184f4:	9b05      	ldr	r3, [sp, #20]
 80184f6:	3230      	adds	r2, #48	; 0x30
 80184f8:	3301      	adds	r3, #1
 80184fa:	f805 2c01 	strb.w	r2, [r5, #-1]
 80184fe:	9305      	str	r3, [sp, #20]
 8018500:	f1bb 0f00 	cmp.w	fp, #0
 8018504:	d019      	beq.n	801853a <_vfprintf_r+0xc7a>
 8018506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018508:	9a05      	ldr	r2, [sp, #20]
 801850a:	781b      	ldrb	r3, [r3, #0]
 801850c:	429a      	cmp	r2, r3
 801850e:	d114      	bne.n	801853a <_vfprintf_r+0xc7a>
 8018510:	2aff      	cmp	r2, #255	; 0xff
 8018512:	d012      	beq.n	801853a <_vfprintf_r+0xc7a>
 8018514:	2f00      	cmp	r7, #0
 8018516:	bf08      	it	eq
 8018518:	2e0a      	cmpeq	r6, #10
 801851a:	d30e      	bcc.n	801853a <_vfprintf_r+0xc7a>
 801851c:	9b03      	ldr	r3, [sp, #12]
 801851e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018520:	9914      	ldr	r1, [sp, #80]	; 0x50
 8018522:	1a9b      	subs	r3, r3, r2
 8018524:	4618      	mov	r0, r3
 8018526:	9303      	str	r3, [sp, #12]
 8018528:	f7fd f87e 	bl	8015628 <strncpy>
 801852c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801852e:	785d      	ldrb	r5, [r3, #1]
 8018530:	b1e5      	cbz	r5, 801856c <_vfprintf_r+0xcac>
 8018532:	3301      	adds	r3, #1
 8018534:	930a      	str	r3, [sp, #40]	; 0x28
 8018536:	2300      	movs	r3, #0
 8018538:	9305      	str	r3, [sp, #20]
 801853a:	220a      	movs	r2, #10
 801853c:	2300      	movs	r3, #0
 801853e:	4630      	mov	r0, r6
 8018540:	4639      	mov	r1, r7
 8018542:	f7ec fbb1 	bl	8004ca8 <__aeabi_uldivmod>
 8018546:	2f00      	cmp	r7, #0
 8018548:	bf08      	it	eq
 801854a:	2e0a      	cmpeq	r6, #10
 801854c:	d20a      	bcs.n	8018564 <_vfprintf_r+0xca4>
 801854e:	9b03      	ldr	r3, [sp, #12]
 8018550:	f8dd b010 	ldr.w	fp, [sp, #16]
 8018554:	aa4e      	add	r2, sp, #312	; 0x138
 8018556:	4646      	mov	r6, r8
 8018558:	eba2 0803 	sub.w	r8, r2, r3
 801855c:	2300      	movs	r3, #0
 801855e:	9304      	str	r3, [sp, #16]
 8018560:	f7ff bbbe 	b.w	8017ce0 <_vfprintf_r+0x420>
 8018564:	9d03      	ldr	r5, [sp, #12]
 8018566:	4606      	mov	r6, r0
 8018568:	460f      	mov	r7, r1
 801856a:	e7bb      	b.n	80184e4 <_vfprintf_r+0xc24>
 801856c:	9505      	str	r5, [sp, #20]
 801856e:	e7e4      	b.n	801853a <_vfprintf_r+0xc7a>
 8018570:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018572:	f006 030f 	and.w	r3, r6, #15
 8018576:	5cd3      	ldrb	r3, [r2, r3]
 8018578:	9a03      	ldr	r2, [sp, #12]
 801857a:	f802 3d01 	strb.w	r3, [r2, #-1]!
 801857e:	0933      	lsrs	r3, r6, #4
 8018580:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8018584:	9203      	str	r2, [sp, #12]
 8018586:	093a      	lsrs	r2, r7, #4
 8018588:	461e      	mov	r6, r3
 801858a:	4617      	mov	r7, r2
 801858c:	ea56 0307 	orrs.w	r3, r6, r7
 8018590:	d1ee      	bne.n	8018570 <_vfprintf_r+0xcb0>
 8018592:	e7dc      	b.n	801854e <_vfprintf_r+0xc8e>
 8018594:	b933      	cbnz	r3, 80185a4 <_vfprintf_r+0xce4>
 8018596:	f01b 0f01 	tst.w	fp, #1
 801859a:	d003      	beq.n	80185a4 <_vfprintf_r+0xce4>
 801859c:	2330      	movs	r3, #48	; 0x30
 801859e:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 80185a2:	e795      	b.n	80184d0 <_vfprintf_r+0xc10>
 80185a4:	ab4e      	add	r3, sp, #312	; 0x138
 80185a6:	e3ba      	b.n	8018d1e <_vfprintf_r+0x145e>
 80185a8:	9b07      	ldr	r3, [sp, #28]
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	f000 837d 	beq.w	8018caa <_vfprintf_r+0x13ea>
 80185b0:	2000      	movs	r0, #0
 80185b2:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 80185b6:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 80185ba:	9606      	str	r6, [sp, #24]
 80185bc:	f7ff bb1e 	b.w	8017bfc <_vfprintf_r+0x33c>
 80185c0:	9e04      	ldr	r6, [sp, #16]
 80185c2:	e72c      	b.n	801841e <_vfprintf_r+0xb5e>
 80185c4:	2010      	movs	r0, #16
 80185c6:	4402      	add	r2, r0
 80185c8:	2b07      	cmp	r3, #7
 80185ca:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80185ce:	6060      	str	r0, [r4, #4]
 80185d0:	dd08      	ble.n	80185e4 <_vfprintf_r+0xd24>
 80185d2:	aa22      	add	r2, sp, #136	; 0x88
 80185d4:	4649      	mov	r1, r9
 80185d6:	4650      	mov	r0, sl
 80185d8:	f002 fe88 	bl	801b2ec <__sprint_r>
 80185dc:	2800      	cmp	r0, #0
 80185de:	f040 8342 	bne.w	8018c66 <_vfprintf_r+0x13a6>
 80185e2:	a925      	add	r1, sp, #148	; 0x94
 80185e4:	3f10      	subs	r7, #16
 80185e6:	460c      	mov	r4, r1
 80185e8:	e4f1      	b.n	8017fce <_vfprintf_r+0x70e>
 80185ea:	460c      	mov	r4, r1
 80185ec:	e50a      	b.n	8018004 <_vfprintf_r+0x744>
 80185ee:	aa22      	add	r2, sp, #136	; 0x88
 80185f0:	4649      	mov	r1, r9
 80185f2:	4650      	mov	r0, sl
 80185f4:	f002 fe7a 	bl	801b2ec <__sprint_r>
 80185f8:	2800      	cmp	r0, #0
 80185fa:	f040 8334 	bne.w	8018c66 <_vfprintf_r+0x13a6>
 80185fe:	ac25      	add	r4, sp, #148	; 0x94
 8018600:	e512      	b.n	8018028 <_vfprintf_r+0x768>
 8018602:	aa22      	add	r2, sp, #136	; 0x88
 8018604:	4649      	mov	r1, r9
 8018606:	4650      	mov	r0, sl
 8018608:	f002 fe70 	bl	801b2ec <__sprint_r>
 801860c:	2800      	cmp	r0, #0
 801860e:	f040 832a 	bne.w	8018c66 <_vfprintf_r+0x13a6>
 8018612:	ac25      	add	r4, sp, #148	; 0x94
 8018614:	e518      	b.n	8018048 <_vfprintf_r+0x788>
 8018616:	2010      	movs	r0, #16
 8018618:	4402      	add	r2, r0
 801861a:	2b07      	cmp	r3, #7
 801861c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8018620:	6060      	str	r0, [r4, #4]
 8018622:	dd08      	ble.n	8018636 <_vfprintf_r+0xd76>
 8018624:	aa22      	add	r2, sp, #136	; 0x88
 8018626:	4649      	mov	r1, r9
 8018628:	4650      	mov	r0, sl
 801862a:	f002 fe5f 	bl	801b2ec <__sprint_r>
 801862e:	2800      	cmp	r0, #0
 8018630:	f040 8319 	bne.w	8018c66 <_vfprintf_r+0x13a6>
 8018634:	a925      	add	r1, sp, #148	; 0x94
 8018636:	3f10      	subs	r7, #16
 8018638:	460c      	mov	r4, r1
 801863a:	e50d      	b.n	8018058 <_vfprintf_r+0x798>
 801863c:	460c      	mov	r4, r1
 801863e:	e526      	b.n	801808e <_vfprintf_r+0x7ce>
 8018640:	2010      	movs	r0, #16
 8018642:	4402      	add	r2, r0
 8018644:	2b07      	cmp	r3, #7
 8018646:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801864a:	6060      	str	r0, [r4, #4]
 801864c:	dd08      	ble.n	8018660 <_vfprintf_r+0xda0>
 801864e:	aa22      	add	r2, sp, #136	; 0x88
 8018650:	4649      	mov	r1, r9
 8018652:	4650      	mov	r0, sl
 8018654:	f002 fe4a 	bl	801b2ec <__sprint_r>
 8018658:	2800      	cmp	r0, #0
 801865a:	f040 8304 	bne.w	8018c66 <_vfprintf_r+0x13a6>
 801865e:	a925      	add	r1, sp, #148	; 0x94
 8018660:	3e10      	subs	r6, #16
 8018662:	460c      	mov	r4, r1
 8018664:	e518      	b.n	8018098 <_vfprintf_r+0x7d8>
 8018666:	460c      	mov	r4, r1
 8018668:	e530      	b.n	80180cc <_vfprintf_r+0x80c>
 801866a:	bf00      	nop
 801866c:	0801e6f8 	.word	0x0801e6f8
 8018670:	0801e709 	.word	0x0801e709
 8018674:	9b07      	ldr	r3, [sp, #28]
 8018676:	2b65      	cmp	r3, #101	; 0x65
 8018678:	f340 8242 	ble.w	8018b00 <_vfprintf_r+0x1240>
 801867c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018680:	2200      	movs	r2, #0
 8018682:	2300      	movs	r3, #0
 8018684:	f7ec fa30 	bl	8004ae8 <__aeabi_dcmpeq>
 8018688:	2800      	cmp	r0, #0
 801868a:	d068      	beq.n	801875e <_vfprintf_r+0xe9e>
 801868c:	4b6d      	ldr	r3, [pc, #436]	; (8018844 <_vfprintf_r+0xf84>)
 801868e:	6023      	str	r3, [r4, #0]
 8018690:	2301      	movs	r3, #1
 8018692:	441e      	add	r6, r3
 8018694:	6063      	str	r3, [r4, #4]
 8018696:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018698:	9624      	str	r6, [sp, #144]	; 0x90
 801869a:	3301      	adds	r3, #1
 801869c:	2b07      	cmp	r3, #7
 801869e:	9323      	str	r3, [sp, #140]	; 0x8c
 80186a0:	dc37      	bgt.n	8018712 <_vfprintf_r+0xe52>
 80186a2:	3408      	adds	r4, #8
 80186a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80186a6:	9a05      	ldr	r2, [sp, #20]
 80186a8:	4293      	cmp	r3, r2
 80186aa:	db03      	blt.n	80186b4 <_vfprintf_r+0xdf4>
 80186ac:	f01b 0f01 	tst.w	fp, #1
 80186b0:	f43f ad2b 	beq.w	801810a <_vfprintf_r+0x84a>
 80186b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80186b6:	6023      	str	r3, [r4, #0]
 80186b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80186ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80186bc:	6063      	str	r3, [r4, #4]
 80186be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80186c0:	4413      	add	r3, r2
 80186c2:	9324      	str	r3, [sp, #144]	; 0x90
 80186c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80186c6:	3301      	adds	r3, #1
 80186c8:	2b07      	cmp	r3, #7
 80186ca:	9323      	str	r3, [sp, #140]	; 0x8c
 80186cc:	dc2b      	bgt.n	8018726 <_vfprintf_r+0xe66>
 80186ce:	3408      	adds	r4, #8
 80186d0:	9b05      	ldr	r3, [sp, #20]
 80186d2:	1e5d      	subs	r5, r3, #1
 80186d4:	2d00      	cmp	r5, #0
 80186d6:	f77f ad18 	ble.w	801810a <_vfprintf_r+0x84a>
 80186da:	4e5b      	ldr	r6, [pc, #364]	; (8018848 <_vfprintf_r+0xf88>)
 80186dc:	2710      	movs	r7, #16
 80186de:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80186e2:	2d10      	cmp	r5, #16
 80186e4:	f103 0301 	add.w	r3, r3, #1
 80186e8:	f104 0108 	add.w	r1, r4, #8
 80186ec:	6026      	str	r6, [r4, #0]
 80186ee:	dc24      	bgt.n	801873a <_vfprintf_r+0xe7a>
 80186f0:	6065      	str	r5, [r4, #4]
 80186f2:	2b07      	cmp	r3, #7
 80186f4:	4415      	add	r5, r2
 80186f6:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 80186fa:	f340 8293 	ble.w	8018c24 <_vfprintf_r+0x1364>
 80186fe:	aa22      	add	r2, sp, #136	; 0x88
 8018700:	4649      	mov	r1, r9
 8018702:	4650      	mov	r0, sl
 8018704:	f002 fdf2 	bl	801b2ec <__sprint_r>
 8018708:	2800      	cmp	r0, #0
 801870a:	f040 82ac 	bne.w	8018c66 <_vfprintf_r+0x13a6>
 801870e:	ac25      	add	r4, sp, #148	; 0x94
 8018710:	e4fb      	b.n	801810a <_vfprintf_r+0x84a>
 8018712:	aa22      	add	r2, sp, #136	; 0x88
 8018714:	4649      	mov	r1, r9
 8018716:	4650      	mov	r0, sl
 8018718:	f002 fde8 	bl	801b2ec <__sprint_r>
 801871c:	2800      	cmp	r0, #0
 801871e:	f040 82a2 	bne.w	8018c66 <_vfprintf_r+0x13a6>
 8018722:	ac25      	add	r4, sp, #148	; 0x94
 8018724:	e7be      	b.n	80186a4 <_vfprintf_r+0xde4>
 8018726:	aa22      	add	r2, sp, #136	; 0x88
 8018728:	4649      	mov	r1, r9
 801872a:	4650      	mov	r0, sl
 801872c:	f002 fdde 	bl	801b2ec <__sprint_r>
 8018730:	2800      	cmp	r0, #0
 8018732:	f040 8298 	bne.w	8018c66 <_vfprintf_r+0x13a6>
 8018736:	ac25      	add	r4, sp, #148	; 0x94
 8018738:	e7ca      	b.n	80186d0 <_vfprintf_r+0xe10>
 801873a:	3210      	adds	r2, #16
 801873c:	2b07      	cmp	r3, #7
 801873e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8018742:	6067      	str	r7, [r4, #4]
 8018744:	dd08      	ble.n	8018758 <_vfprintf_r+0xe98>
 8018746:	aa22      	add	r2, sp, #136	; 0x88
 8018748:	4649      	mov	r1, r9
 801874a:	4650      	mov	r0, sl
 801874c:	f002 fdce 	bl	801b2ec <__sprint_r>
 8018750:	2800      	cmp	r0, #0
 8018752:	f040 8288 	bne.w	8018c66 <_vfprintf_r+0x13a6>
 8018756:	a925      	add	r1, sp, #148	; 0x94
 8018758:	3d10      	subs	r5, #16
 801875a:	460c      	mov	r4, r1
 801875c:	e7bf      	b.n	80186de <_vfprintf_r+0xe1e>
 801875e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018760:	2b00      	cmp	r3, #0
 8018762:	dc73      	bgt.n	801884c <_vfprintf_r+0xf8c>
 8018764:	4b37      	ldr	r3, [pc, #220]	; (8018844 <_vfprintf_r+0xf84>)
 8018766:	6023      	str	r3, [r4, #0]
 8018768:	2301      	movs	r3, #1
 801876a:	441e      	add	r6, r3
 801876c:	6063      	str	r3, [r4, #4]
 801876e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018770:	9624      	str	r6, [sp, #144]	; 0x90
 8018772:	3301      	adds	r3, #1
 8018774:	2b07      	cmp	r3, #7
 8018776:	9323      	str	r3, [sp, #140]	; 0x8c
 8018778:	dc3d      	bgt.n	80187f6 <_vfprintf_r+0xf36>
 801877a:	3408      	adds	r4, #8
 801877c:	9905      	ldr	r1, [sp, #20]
 801877e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018780:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018782:	430a      	orrs	r2, r1
 8018784:	f00b 0101 	and.w	r1, fp, #1
 8018788:	430a      	orrs	r2, r1
 801878a:	f43f acbe 	beq.w	801810a <_vfprintf_r+0x84a>
 801878e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018790:	6022      	str	r2, [r4, #0]
 8018792:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018794:	6062      	str	r2, [r4, #4]
 8018796:	4413      	add	r3, r2
 8018798:	9324      	str	r3, [sp, #144]	; 0x90
 801879a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801879c:	3301      	adds	r3, #1
 801879e:	2b07      	cmp	r3, #7
 80187a0:	9323      	str	r3, [sp, #140]	; 0x8c
 80187a2:	dc32      	bgt.n	801880a <_vfprintf_r+0xf4a>
 80187a4:	3408      	adds	r4, #8
 80187a6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80187a8:	2d00      	cmp	r5, #0
 80187aa:	da1b      	bge.n	80187e4 <_vfprintf_r+0xf24>
 80187ac:	4e26      	ldr	r6, [pc, #152]	; (8018848 <_vfprintf_r+0xf88>)
 80187ae:	426d      	negs	r5, r5
 80187b0:	4623      	mov	r3, r4
 80187b2:	2710      	movs	r7, #16
 80187b4:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 80187b8:	2d10      	cmp	r5, #16
 80187ba:	f102 0201 	add.w	r2, r2, #1
 80187be:	f104 0408 	add.w	r4, r4, #8
 80187c2:	601e      	str	r6, [r3, #0]
 80187c4:	dc2b      	bgt.n	801881e <_vfprintf_r+0xf5e>
 80187c6:	605d      	str	r5, [r3, #4]
 80187c8:	2a07      	cmp	r2, #7
 80187ca:	440d      	add	r5, r1
 80187cc:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 80187d0:	dd08      	ble.n	80187e4 <_vfprintf_r+0xf24>
 80187d2:	aa22      	add	r2, sp, #136	; 0x88
 80187d4:	4649      	mov	r1, r9
 80187d6:	4650      	mov	r0, sl
 80187d8:	f002 fd88 	bl	801b2ec <__sprint_r>
 80187dc:	2800      	cmp	r0, #0
 80187de:	f040 8242 	bne.w	8018c66 <_vfprintf_r+0x13a6>
 80187e2:	ac25      	add	r4, sp, #148	; 0x94
 80187e4:	9b03      	ldr	r3, [sp, #12]
 80187e6:	6023      	str	r3, [r4, #0]
 80187e8:	9b05      	ldr	r3, [sp, #20]
 80187ea:	9a05      	ldr	r2, [sp, #20]
 80187ec:	6063      	str	r3, [r4, #4]
 80187ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80187f0:	4413      	add	r3, r2
 80187f2:	9324      	str	r3, [sp, #144]	; 0x90
 80187f4:	e482      	b.n	80180fc <_vfprintf_r+0x83c>
 80187f6:	aa22      	add	r2, sp, #136	; 0x88
 80187f8:	4649      	mov	r1, r9
 80187fa:	4650      	mov	r0, sl
 80187fc:	f002 fd76 	bl	801b2ec <__sprint_r>
 8018800:	2800      	cmp	r0, #0
 8018802:	f040 8230 	bne.w	8018c66 <_vfprintf_r+0x13a6>
 8018806:	ac25      	add	r4, sp, #148	; 0x94
 8018808:	e7b8      	b.n	801877c <_vfprintf_r+0xebc>
 801880a:	aa22      	add	r2, sp, #136	; 0x88
 801880c:	4649      	mov	r1, r9
 801880e:	4650      	mov	r0, sl
 8018810:	f002 fd6c 	bl	801b2ec <__sprint_r>
 8018814:	2800      	cmp	r0, #0
 8018816:	f040 8226 	bne.w	8018c66 <_vfprintf_r+0x13a6>
 801881a:	ac25      	add	r4, sp, #148	; 0x94
 801881c:	e7c3      	b.n	80187a6 <_vfprintf_r+0xee6>
 801881e:	3110      	adds	r1, #16
 8018820:	2a07      	cmp	r2, #7
 8018822:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 8018826:	605f      	str	r7, [r3, #4]
 8018828:	dd08      	ble.n	801883c <_vfprintf_r+0xf7c>
 801882a:	aa22      	add	r2, sp, #136	; 0x88
 801882c:	4649      	mov	r1, r9
 801882e:	4650      	mov	r0, sl
 8018830:	f002 fd5c 	bl	801b2ec <__sprint_r>
 8018834:	2800      	cmp	r0, #0
 8018836:	f040 8216 	bne.w	8018c66 <_vfprintf_r+0x13a6>
 801883a:	ac25      	add	r4, sp, #148	; 0x94
 801883c:	3d10      	subs	r5, #16
 801883e:	4623      	mov	r3, r4
 8018840:	e7b8      	b.n	80187b4 <_vfprintf_r+0xef4>
 8018842:	bf00      	nop
 8018844:	0801e71a 	.word	0x0801e71a
 8018848:	0801e771 	.word	0x0801e771
 801884c:	9b05      	ldr	r3, [sp, #20]
 801884e:	42ab      	cmp	r3, r5
 8018850:	bfa8      	it	ge
 8018852:	462b      	movge	r3, r5
 8018854:	2b00      	cmp	r3, #0
 8018856:	461f      	mov	r7, r3
 8018858:	dd0b      	ble.n	8018872 <_vfprintf_r+0xfb2>
 801885a:	9b03      	ldr	r3, [sp, #12]
 801885c:	e9c4 3700 	strd	r3, r7, [r4]
 8018860:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018862:	3301      	adds	r3, #1
 8018864:	443e      	add	r6, r7
 8018866:	2b07      	cmp	r3, #7
 8018868:	9624      	str	r6, [sp, #144]	; 0x90
 801886a:	9323      	str	r3, [sp, #140]	; 0x8c
 801886c:	f300 808c 	bgt.w	8018988 <_vfprintf_r+0x10c8>
 8018870:	3408      	adds	r4, #8
 8018872:	2f00      	cmp	r7, #0
 8018874:	bfac      	ite	ge
 8018876:	1bee      	subge	r6, r5, r7
 8018878:	462e      	movlt	r6, r5
 801887a:	2e00      	cmp	r6, #0
 801887c:	dd1c      	ble.n	80188b8 <_vfprintf_r+0xff8>
 801887e:	4f9f      	ldr	r7, [pc, #636]	; (8018afc <_vfprintf_r+0x123c>)
 8018880:	f04f 0810 	mov.w	r8, #16
 8018884:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8018888:	2e10      	cmp	r6, #16
 801888a:	f103 0301 	add.w	r3, r3, #1
 801888e:	f104 0108 	add.w	r1, r4, #8
 8018892:	6027      	str	r7, [r4, #0]
 8018894:	f300 8082 	bgt.w	801899c <_vfprintf_r+0x10dc>
 8018898:	6066      	str	r6, [r4, #4]
 801889a:	2b07      	cmp	r3, #7
 801889c:	4416      	add	r6, r2
 801889e:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80188a2:	f340 808e 	ble.w	80189c2 <_vfprintf_r+0x1102>
 80188a6:	aa22      	add	r2, sp, #136	; 0x88
 80188a8:	4649      	mov	r1, r9
 80188aa:	4650      	mov	r0, sl
 80188ac:	f002 fd1e 	bl	801b2ec <__sprint_r>
 80188b0:	2800      	cmp	r0, #0
 80188b2:	f040 81d8 	bne.w	8018c66 <_vfprintf_r+0x13a6>
 80188b6:	ac25      	add	r4, sp, #148	; 0x94
 80188b8:	9b03      	ldr	r3, [sp, #12]
 80188ba:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 80188be:	441d      	add	r5, r3
 80188c0:	d00d      	beq.n	80188de <_vfprintf_r+0x101e>
 80188c2:	4e8e      	ldr	r6, [pc, #568]	; (8018afc <_vfprintf_r+0x123c>)
 80188c4:	2710      	movs	r7, #16
 80188c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	d17c      	bne.n	80189c6 <_vfprintf_r+0x1106>
 80188cc:	9b08      	ldr	r3, [sp, #32]
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d17c      	bne.n	80189cc <_vfprintf_r+0x110c>
 80188d2:	9b03      	ldr	r3, [sp, #12]
 80188d4:	9a05      	ldr	r2, [sp, #20]
 80188d6:	4413      	add	r3, r2
 80188d8:	429d      	cmp	r5, r3
 80188da:	bf28      	it	cs
 80188dc:	461d      	movcs	r5, r3
 80188de:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80188e0:	9a05      	ldr	r2, [sp, #20]
 80188e2:	4293      	cmp	r3, r2
 80188e4:	db02      	blt.n	80188ec <_vfprintf_r+0x102c>
 80188e6:	f01b 0f01 	tst.w	fp, #1
 80188ea:	d00e      	beq.n	801890a <_vfprintf_r+0x104a>
 80188ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80188ee:	6023      	str	r3, [r4, #0]
 80188f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80188f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80188f4:	6063      	str	r3, [r4, #4]
 80188f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80188f8:	4413      	add	r3, r2
 80188fa:	9324      	str	r3, [sp, #144]	; 0x90
 80188fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80188fe:	3301      	adds	r3, #1
 8018900:	2b07      	cmp	r3, #7
 8018902:	9323      	str	r3, [sp, #140]	; 0x8c
 8018904:	f300 80e5 	bgt.w	8018ad2 <_vfprintf_r+0x1212>
 8018908:	3408      	adds	r4, #8
 801890a:	9905      	ldr	r1, [sp, #20]
 801890c:	9b03      	ldr	r3, [sp, #12]
 801890e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8018910:	440b      	add	r3, r1
 8018912:	1b8e      	subs	r6, r1, r6
 8018914:	1b5a      	subs	r2, r3, r5
 8018916:	4296      	cmp	r6, r2
 8018918:	bfa8      	it	ge
 801891a:	4616      	movge	r6, r2
 801891c:	2e00      	cmp	r6, #0
 801891e:	dd0b      	ble.n	8018938 <_vfprintf_r+0x1078>
 8018920:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018922:	4433      	add	r3, r6
 8018924:	9324      	str	r3, [sp, #144]	; 0x90
 8018926:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018928:	3301      	adds	r3, #1
 801892a:	2b07      	cmp	r3, #7
 801892c:	e9c4 5600 	strd	r5, r6, [r4]
 8018930:	9323      	str	r3, [sp, #140]	; 0x8c
 8018932:	f300 80d8 	bgt.w	8018ae6 <_vfprintf_r+0x1226>
 8018936:	3408      	adds	r4, #8
 8018938:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801893a:	9b05      	ldr	r3, [sp, #20]
 801893c:	2e00      	cmp	r6, #0
 801893e:	eba3 0505 	sub.w	r5, r3, r5
 8018942:	bfa8      	it	ge
 8018944:	1bad      	subge	r5, r5, r6
 8018946:	2d00      	cmp	r5, #0
 8018948:	f77f abdf 	ble.w	801810a <_vfprintf_r+0x84a>
 801894c:	4e6b      	ldr	r6, [pc, #428]	; (8018afc <_vfprintf_r+0x123c>)
 801894e:	2710      	movs	r7, #16
 8018950:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8018954:	2d10      	cmp	r5, #16
 8018956:	f103 0301 	add.w	r3, r3, #1
 801895a:	f104 0108 	add.w	r1, r4, #8
 801895e:	6026      	str	r6, [r4, #0]
 8018960:	f77f aec6 	ble.w	80186f0 <_vfprintf_r+0xe30>
 8018964:	3210      	adds	r2, #16
 8018966:	2b07      	cmp	r3, #7
 8018968:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801896c:	6067      	str	r7, [r4, #4]
 801896e:	dd08      	ble.n	8018982 <_vfprintf_r+0x10c2>
 8018970:	aa22      	add	r2, sp, #136	; 0x88
 8018972:	4649      	mov	r1, r9
 8018974:	4650      	mov	r0, sl
 8018976:	f002 fcb9 	bl	801b2ec <__sprint_r>
 801897a:	2800      	cmp	r0, #0
 801897c:	f040 8173 	bne.w	8018c66 <_vfprintf_r+0x13a6>
 8018980:	a925      	add	r1, sp, #148	; 0x94
 8018982:	3d10      	subs	r5, #16
 8018984:	460c      	mov	r4, r1
 8018986:	e7e3      	b.n	8018950 <_vfprintf_r+0x1090>
 8018988:	aa22      	add	r2, sp, #136	; 0x88
 801898a:	4649      	mov	r1, r9
 801898c:	4650      	mov	r0, sl
 801898e:	f002 fcad 	bl	801b2ec <__sprint_r>
 8018992:	2800      	cmp	r0, #0
 8018994:	f040 8167 	bne.w	8018c66 <_vfprintf_r+0x13a6>
 8018998:	ac25      	add	r4, sp, #148	; 0x94
 801899a:	e76a      	b.n	8018872 <_vfprintf_r+0xfb2>
 801899c:	3210      	adds	r2, #16
 801899e:	2b07      	cmp	r3, #7
 80189a0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80189a4:	f8c4 8004 	str.w	r8, [r4, #4]
 80189a8:	dd08      	ble.n	80189bc <_vfprintf_r+0x10fc>
 80189aa:	aa22      	add	r2, sp, #136	; 0x88
 80189ac:	4649      	mov	r1, r9
 80189ae:	4650      	mov	r0, sl
 80189b0:	f002 fc9c 	bl	801b2ec <__sprint_r>
 80189b4:	2800      	cmp	r0, #0
 80189b6:	f040 8156 	bne.w	8018c66 <_vfprintf_r+0x13a6>
 80189ba:	a925      	add	r1, sp, #148	; 0x94
 80189bc:	3e10      	subs	r6, #16
 80189be:	460c      	mov	r4, r1
 80189c0:	e760      	b.n	8018884 <_vfprintf_r+0xfc4>
 80189c2:	460c      	mov	r4, r1
 80189c4:	e778      	b.n	80188b8 <_vfprintf_r+0xff8>
 80189c6:	9b08      	ldr	r3, [sp, #32]
 80189c8:	2b00      	cmp	r3, #0
 80189ca:	d052      	beq.n	8018a72 <_vfprintf_r+0x11b2>
 80189cc:	9b08      	ldr	r3, [sp, #32]
 80189ce:	3b01      	subs	r3, #1
 80189d0:	9308      	str	r3, [sp, #32]
 80189d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80189d4:	6023      	str	r3, [r4, #0]
 80189d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80189d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80189da:	6063      	str	r3, [r4, #4]
 80189dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80189de:	4413      	add	r3, r2
 80189e0:	9324      	str	r3, [sp, #144]	; 0x90
 80189e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80189e4:	3301      	adds	r3, #1
 80189e6:	2b07      	cmp	r3, #7
 80189e8:	9323      	str	r3, [sp, #140]	; 0x8c
 80189ea:	dc49      	bgt.n	8018a80 <_vfprintf_r+0x11c0>
 80189ec:	3408      	adds	r4, #8
 80189ee:	9b03      	ldr	r3, [sp, #12]
 80189f0:	9a05      	ldr	r2, [sp, #20]
 80189f2:	eb03 0802 	add.w	r8, r3, r2
 80189f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80189f8:	781b      	ldrb	r3, [r3, #0]
 80189fa:	eba8 0805 	sub.w	r8, r8, r5
 80189fe:	4598      	cmp	r8, r3
 8018a00:	bfa8      	it	ge
 8018a02:	4698      	movge	r8, r3
 8018a04:	f1b8 0f00 	cmp.w	r8, #0
 8018a08:	dd0a      	ble.n	8018a20 <_vfprintf_r+0x1160>
 8018a0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018a0c:	4443      	add	r3, r8
 8018a0e:	9324      	str	r3, [sp, #144]	; 0x90
 8018a10:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018a12:	3301      	adds	r3, #1
 8018a14:	2b07      	cmp	r3, #7
 8018a16:	e9c4 5800 	strd	r5, r8, [r4]
 8018a1a:	9323      	str	r3, [sp, #140]	; 0x8c
 8018a1c:	dc3a      	bgt.n	8018a94 <_vfprintf_r+0x11d4>
 8018a1e:	3408      	adds	r4, #8
 8018a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018a22:	781b      	ldrb	r3, [r3, #0]
 8018a24:	f1b8 0f00 	cmp.w	r8, #0
 8018a28:	bfac      	ite	ge
 8018a2a:	eba3 0808 	subge.w	r8, r3, r8
 8018a2e:	4698      	movlt	r8, r3
 8018a30:	f1b8 0f00 	cmp.w	r8, #0
 8018a34:	dd19      	ble.n	8018a6a <_vfprintf_r+0x11aa>
 8018a36:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 8018a3a:	f1b8 0f10 	cmp.w	r8, #16
 8018a3e:	f102 0201 	add.w	r2, r2, #1
 8018a42:	f104 0108 	add.w	r1, r4, #8
 8018a46:	6026      	str	r6, [r4, #0]
 8018a48:	dc2e      	bgt.n	8018aa8 <_vfprintf_r+0x11e8>
 8018a4a:	4443      	add	r3, r8
 8018a4c:	2a07      	cmp	r2, #7
 8018a4e:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8018a52:	f8c4 8004 	str.w	r8, [r4, #4]
 8018a56:	dd3a      	ble.n	8018ace <_vfprintf_r+0x120e>
 8018a58:	aa22      	add	r2, sp, #136	; 0x88
 8018a5a:	4649      	mov	r1, r9
 8018a5c:	4650      	mov	r0, sl
 8018a5e:	f002 fc45 	bl	801b2ec <__sprint_r>
 8018a62:	2800      	cmp	r0, #0
 8018a64:	f040 80ff 	bne.w	8018c66 <_vfprintf_r+0x13a6>
 8018a68:	ac25      	add	r4, sp, #148	; 0x94
 8018a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018a6c:	781b      	ldrb	r3, [r3, #0]
 8018a6e:	441d      	add	r5, r3
 8018a70:	e729      	b.n	80188c6 <_vfprintf_r+0x1006>
 8018a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018a74:	3b01      	subs	r3, #1
 8018a76:	930a      	str	r3, [sp, #40]	; 0x28
 8018a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a7a:	3b01      	subs	r3, #1
 8018a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8018a7e:	e7a8      	b.n	80189d2 <_vfprintf_r+0x1112>
 8018a80:	aa22      	add	r2, sp, #136	; 0x88
 8018a82:	4649      	mov	r1, r9
 8018a84:	4650      	mov	r0, sl
 8018a86:	f002 fc31 	bl	801b2ec <__sprint_r>
 8018a8a:	2800      	cmp	r0, #0
 8018a8c:	f040 80eb 	bne.w	8018c66 <_vfprintf_r+0x13a6>
 8018a90:	ac25      	add	r4, sp, #148	; 0x94
 8018a92:	e7ac      	b.n	80189ee <_vfprintf_r+0x112e>
 8018a94:	aa22      	add	r2, sp, #136	; 0x88
 8018a96:	4649      	mov	r1, r9
 8018a98:	4650      	mov	r0, sl
 8018a9a:	f002 fc27 	bl	801b2ec <__sprint_r>
 8018a9e:	2800      	cmp	r0, #0
 8018aa0:	f040 80e1 	bne.w	8018c66 <_vfprintf_r+0x13a6>
 8018aa4:	ac25      	add	r4, sp, #148	; 0x94
 8018aa6:	e7bb      	b.n	8018a20 <_vfprintf_r+0x1160>
 8018aa8:	3310      	adds	r3, #16
 8018aaa:	2a07      	cmp	r2, #7
 8018aac:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8018ab0:	6067      	str	r7, [r4, #4]
 8018ab2:	dd08      	ble.n	8018ac6 <_vfprintf_r+0x1206>
 8018ab4:	aa22      	add	r2, sp, #136	; 0x88
 8018ab6:	4649      	mov	r1, r9
 8018ab8:	4650      	mov	r0, sl
 8018aba:	f002 fc17 	bl	801b2ec <__sprint_r>
 8018abe:	2800      	cmp	r0, #0
 8018ac0:	f040 80d1 	bne.w	8018c66 <_vfprintf_r+0x13a6>
 8018ac4:	a925      	add	r1, sp, #148	; 0x94
 8018ac6:	f1a8 0810 	sub.w	r8, r8, #16
 8018aca:	460c      	mov	r4, r1
 8018acc:	e7b3      	b.n	8018a36 <_vfprintf_r+0x1176>
 8018ace:	460c      	mov	r4, r1
 8018ad0:	e7cb      	b.n	8018a6a <_vfprintf_r+0x11aa>
 8018ad2:	aa22      	add	r2, sp, #136	; 0x88
 8018ad4:	4649      	mov	r1, r9
 8018ad6:	4650      	mov	r0, sl
 8018ad8:	f002 fc08 	bl	801b2ec <__sprint_r>
 8018adc:	2800      	cmp	r0, #0
 8018ade:	f040 80c2 	bne.w	8018c66 <_vfprintf_r+0x13a6>
 8018ae2:	ac25      	add	r4, sp, #148	; 0x94
 8018ae4:	e711      	b.n	801890a <_vfprintf_r+0x104a>
 8018ae6:	aa22      	add	r2, sp, #136	; 0x88
 8018ae8:	4649      	mov	r1, r9
 8018aea:	4650      	mov	r0, sl
 8018aec:	f002 fbfe 	bl	801b2ec <__sprint_r>
 8018af0:	2800      	cmp	r0, #0
 8018af2:	f040 80b8 	bne.w	8018c66 <_vfprintf_r+0x13a6>
 8018af6:	ac25      	add	r4, sp, #148	; 0x94
 8018af8:	e71e      	b.n	8018938 <_vfprintf_r+0x1078>
 8018afa:	bf00      	nop
 8018afc:	0801e771 	.word	0x0801e771
 8018b00:	9a05      	ldr	r2, [sp, #20]
 8018b02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018b04:	2a01      	cmp	r2, #1
 8018b06:	9a03      	ldr	r2, [sp, #12]
 8018b08:	6022      	str	r2, [r4, #0]
 8018b0a:	f106 0601 	add.w	r6, r6, #1
 8018b0e:	f103 0301 	add.w	r3, r3, #1
 8018b12:	f04f 0201 	mov.w	r2, #1
 8018b16:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8018b1a:	f104 0508 	add.w	r5, r4, #8
 8018b1e:	6062      	str	r2, [r4, #4]
 8018b20:	dc02      	bgt.n	8018b28 <_vfprintf_r+0x1268>
 8018b22:	f01b 0f01 	tst.w	fp, #1
 8018b26:	d078      	beq.n	8018c1a <_vfprintf_r+0x135a>
 8018b28:	2b07      	cmp	r3, #7
 8018b2a:	dd08      	ble.n	8018b3e <_vfprintf_r+0x127e>
 8018b2c:	aa22      	add	r2, sp, #136	; 0x88
 8018b2e:	4649      	mov	r1, r9
 8018b30:	4650      	mov	r0, sl
 8018b32:	f002 fbdb 	bl	801b2ec <__sprint_r>
 8018b36:	2800      	cmp	r0, #0
 8018b38:	f040 8095 	bne.w	8018c66 <_vfprintf_r+0x13a6>
 8018b3c:	ad25      	add	r5, sp, #148	; 0x94
 8018b3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018b40:	602b      	str	r3, [r5, #0]
 8018b42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018b44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018b46:	606b      	str	r3, [r5, #4]
 8018b48:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018b4a:	4413      	add	r3, r2
 8018b4c:	9324      	str	r3, [sp, #144]	; 0x90
 8018b4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018b50:	3301      	adds	r3, #1
 8018b52:	2b07      	cmp	r3, #7
 8018b54:	9323      	str	r3, [sp, #140]	; 0x8c
 8018b56:	dc32      	bgt.n	8018bbe <_vfprintf_r+0x12fe>
 8018b58:	3508      	adds	r5, #8
 8018b5a:	9b05      	ldr	r3, [sp, #20]
 8018b5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018b60:	1e5c      	subs	r4, r3, #1
 8018b62:	2200      	movs	r2, #0
 8018b64:	2300      	movs	r3, #0
 8018b66:	f7eb ffbf 	bl	8004ae8 <__aeabi_dcmpeq>
 8018b6a:	2800      	cmp	r0, #0
 8018b6c:	d130      	bne.n	8018bd0 <_vfprintf_r+0x1310>
 8018b6e:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8018b70:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018b72:	9803      	ldr	r0, [sp, #12]
 8018b74:	9a05      	ldr	r2, [sp, #20]
 8018b76:	3101      	adds	r1, #1
 8018b78:	3b01      	subs	r3, #1
 8018b7a:	3001      	adds	r0, #1
 8018b7c:	4413      	add	r3, r2
 8018b7e:	2907      	cmp	r1, #7
 8018b80:	e9c5 0400 	strd	r0, r4, [r5]
 8018b84:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 8018b88:	dd4a      	ble.n	8018c20 <_vfprintf_r+0x1360>
 8018b8a:	aa22      	add	r2, sp, #136	; 0x88
 8018b8c:	4649      	mov	r1, r9
 8018b8e:	4650      	mov	r0, sl
 8018b90:	f002 fbac 	bl	801b2ec <__sprint_r>
 8018b94:	2800      	cmp	r0, #0
 8018b96:	d166      	bne.n	8018c66 <_vfprintf_r+0x13a6>
 8018b98:	ad25      	add	r5, sp, #148	; 0x94
 8018b9a:	ab1e      	add	r3, sp, #120	; 0x78
 8018b9c:	602b      	str	r3, [r5, #0]
 8018b9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018ba0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018ba2:	606b      	str	r3, [r5, #4]
 8018ba4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018ba6:	4413      	add	r3, r2
 8018ba8:	9324      	str	r3, [sp, #144]	; 0x90
 8018baa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018bac:	3301      	adds	r3, #1
 8018bae:	2b07      	cmp	r3, #7
 8018bb0:	9323      	str	r3, [sp, #140]	; 0x8c
 8018bb2:	f73f ada4 	bgt.w	80186fe <_vfprintf_r+0xe3e>
 8018bb6:	f105 0408 	add.w	r4, r5, #8
 8018bba:	f7ff baa6 	b.w	801810a <_vfprintf_r+0x84a>
 8018bbe:	aa22      	add	r2, sp, #136	; 0x88
 8018bc0:	4649      	mov	r1, r9
 8018bc2:	4650      	mov	r0, sl
 8018bc4:	f002 fb92 	bl	801b2ec <__sprint_r>
 8018bc8:	2800      	cmp	r0, #0
 8018bca:	d14c      	bne.n	8018c66 <_vfprintf_r+0x13a6>
 8018bcc:	ad25      	add	r5, sp, #148	; 0x94
 8018bce:	e7c4      	b.n	8018b5a <_vfprintf_r+0x129a>
 8018bd0:	2c00      	cmp	r4, #0
 8018bd2:	dde2      	ble.n	8018b9a <_vfprintf_r+0x12da>
 8018bd4:	4e53      	ldr	r6, [pc, #332]	; (8018d24 <_vfprintf_r+0x1464>)
 8018bd6:	2710      	movs	r7, #16
 8018bd8:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8018bdc:	2c10      	cmp	r4, #16
 8018bde:	f103 0301 	add.w	r3, r3, #1
 8018be2:	f105 0108 	add.w	r1, r5, #8
 8018be6:	602e      	str	r6, [r5, #0]
 8018be8:	dc07      	bgt.n	8018bfa <_vfprintf_r+0x133a>
 8018bea:	606c      	str	r4, [r5, #4]
 8018bec:	2b07      	cmp	r3, #7
 8018bee:	4414      	add	r4, r2
 8018bf0:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 8018bf4:	dcc9      	bgt.n	8018b8a <_vfprintf_r+0x12ca>
 8018bf6:	460d      	mov	r5, r1
 8018bf8:	e7cf      	b.n	8018b9a <_vfprintf_r+0x12da>
 8018bfa:	3210      	adds	r2, #16
 8018bfc:	2b07      	cmp	r3, #7
 8018bfe:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8018c02:	606f      	str	r7, [r5, #4]
 8018c04:	dd06      	ble.n	8018c14 <_vfprintf_r+0x1354>
 8018c06:	aa22      	add	r2, sp, #136	; 0x88
 8018c08:	4649      	mov	r1, r9
 8018c0a:	4650      	mov	r0, sl
 8018c0c:	f002 fb6e 	bl	801b2ec <__sprint_r>
 8018c10:	bb48      	cbnz	r0, 8018c66 <_vfprintf_r+0x13a6>
 8018c12:	a925      	add	r1, sp, #148	; 0x94
 8018c14:	3c10      	subs	r4, #16
 8018c16:	460d      	mov	r5, r1
 8018c18:	e7de      	b.n	8018bd8 <_vfprintf_r+0x1318>
 8018c1a:	2b07      	cmp	r3, #7
 8018c1c:	ddbd      	ble.n	8018b9a <_vfprintf_r+0x12da>
 8018c1e:	e7b4      	b.n	8018b8a <_vfprintf_r+0x12ca>
 8018c20:	3508      	adds	r5, #8
 8018c22:	e7ba      	b.n	8018b9a <_vfprintf_r+0x12da>
 8018c24:	460c      	mov	r4, r1
 8018c26:	f7ff ba70 	b.w	801810a <_vfprintf_r+0x84a>
 8018c2a:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8018c2e:	1a9d      	subs	r5, r3, r2
 8018c30:	2d00      	cmp	r5, #0
 8018c32:	f77f aa6e 	ble.w	8018112 <_vfprintf_r+0x852>
 8018c36:	4e3c      	ldr	r6, [pc, #240]	; (8018d28 <_vfprintf_r+0x1468>)
 8018c38:	2710      	movs	r7, #16
 8018c3a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8018c3e:	2d10      	cmp	r5, #16
 8018c40:	f103 0301 	add.w	r3, r3, #1
 8018c44:	6026      	str	r6, [r4, #0]
 8018c46:	dc18      	bgt.n	8018c7a <_vfprintf_r+0x13ba>
 8018c48:	6065      	str	r5, [r4, #4]
 8018c4a:	2b07      	cmp	r3, #7
 8018c4c:	4415      	add	r5, r2
 8018c4e:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8018c52:	f77f aa5e 	ble.w	8018112 <_vfprintf_r+0x852>
 8018c56:	aa22      	add	r2, sp, #136	; 0x88
 8018c58:	4649      	mov	r1, r9
 8018c5a:	4650      	mov	r0, sl
 8018c5c:	f002 fb46 	bl	801b2ec <__sprint_r>
 8018c60:	2800      	cmp	r0, #0
 8018c62:	f43f aa56 	beq.w	8018112 <_vfprintf_r+0x852>
 8018c66:	9b04      	ldr	r3, [sp, #16]
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	f43f a872 	beq.w	8017d52 <_vfprintf_r+0x492>
 8018c6e:	4619      	mov	r1, r3
 8018c70:	4650      	mov	r0, sl
 8018c72:	f001 f8f5 	bl	8019e60 <_free_r>
 8018c76:	f7ff b86c 	b.w	8017d52 <_vfprintf_r+0x492>
 8018c7a:	3210      	adds	r2, #16
 8018c7c:	2b07      	cmp	r3, #7
 8018c7e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8018c82:	6067      	str	r7, [r4, #4]
 8018c84:	dc02      	bgt.n	8018c8c <_vfprintf_r+0x13cc>
 8018c86:	3408      	adds	r4, #8
 8018c88:	3d10      	subs	r5, #16
 8018c8a:	e7d6      	b.n	8018c3a <_vfprintf_r+0x137a>
 8018c8c:	aa22      	add	r2, sp, #136	; 0x88
 8018c8e:	4649      	mov	r1, r9
 8018c90:	4650      	mov	r0, sl
 8018c92:	f002 fb2b 	bl	801b2ec <__sprint_r>
 8018c96:	2800      	cmp	r0, #0
 8018c98:	d1e5      	bne.n	8018c66 <_vfprintf_r+0x13a6>
 8018c9a:	ac25      	add	r4, sp, #148	; 0x94
 8018c9c:	e7f4      	b.n	8018c88 <_vfprintf_r+0x13c8>
 8018c9e:	9904      	ldr	r1, [sp, #16]
 8018ca0:	4650      	mov	r0, sl
 8018ca2:	f001 f8dd 	bl	8019e60 <_free_r>
 8018ca6:	f7ff ba4c 	b.w	8018142 <_vfprintf_r+0x882>
 8018caa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018cac:	b91b      	cbnz	r3, 8018cb6 <_vfprintf_r+0x13f6>
 8018cae:	2300      	movs	r3, #0
 8018cb0:	9323      	str	r3, [sp, #140]	; 0x8c
 8018cb2:	f7ff b84e 	b.w	8017d52 <_vfprintf_r+0x492>
 8018cb6:	aa22      	add	r2, sp, #136	; 0x88
 8018cb8:	4649      	mov	r1, r9
 8018cba:	4650      	mov	r0, sl
 8018cbc:	f002 fb16 	bl	801b2ec <__sprint_r>
 8018cc0:	2800      	cmp	r0, #0
 8018cc2:	d0f4      	beq.n	8018cae <_vfprintf_r+0x13ee>
 8018cc4:	f7ff b845 	b.w	8017d52 <_vfprintf_r+0x492>
 8018cc8:	ea56 0207 	orrs.w	r2, r6, r7
 8018ccc:	f8cd b010 	str.w	fp, [sp, #16]
 8018cd0:	f43f ab5c 	beq.w	801838c <_vfprintf_r+0xacc>
 8018cd4:	2b01      	cmp	r3, #1
 8018cd6:	f43f abf4 	beq.w	80184c2 <_vfprintf_r+0xc02>
 8018cda:	2b02      	cmp	r3, #2
 8018cdc:	ab4e      	add	r3, sp, #312	; 0x138
 8018cde:	9303      	str	r3, [sp, #12]
 8018ce0:	f43f ac46 	beq.w	8018570 <_vfprintf_r+0xcb0>
 8018ce4:	9903      	ldr	r1, [sp, #12]
 8018ce6:	f006 0307 	and.w	r3, r6, #7
 8018cea:	460a      	mov	r2, r1
 8018cec:	3330      	adds	r3, #48	; 0x30
 8018cee:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8018cf2:	9203      	str	r2, [sp, #12]
 8018cf4:	08f2      	lsrs	r2, r6, #3
 8018cf6:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8018cfa:	08f8      	lsrs	r0, r7, #3
 8018cfc:	4616      	mov	r6, r2
 8018cfe:	4607      	mov	r7, r0
 8018d00:	ea56 0207 	orrs.w	r2, r6, r7
 8018d04:	d1ee      	bne.n	8018ce4 <_vfprintf_r+0x1424>
 8018d06:	9a04      	ldr	r2, [sp, #16]
 8018d08:	07d0      	lsls	r0, r2, #31
 8018d0a:	f57f ac20 	bpl.w	801854e <_vfprintf_r+0xc8e>
 8018d0e:	2b30      	cmp	r3, #48	; 0x30
 8018d10:	f43f ac1d 	beq.w	801854e <_vfprintf_r+0xc8e>
 8018d14:	9a03      	ldr	r2, [sp, #12]
 8018d16:	2330      	movs	r3, #48	; 0x30
 8018d18:	f802 3c01 	strb.w	r3, [r2, #-1]
 8018d1c:	1e8b      	subs	r3, r1, #2
 8018d1e:	9303      	str	r3, [sp, #12]
 8018d20:	e415      	b.n	801854e <_vfprintf_r+0xc8e>
 8018d22:	bf00      	nop
 8018d24:	0801e771 	.word	0x0801e771
 8018d28:	0801e761 	.word	0x0801e761

08018d2c <__sbprintf>:
 8018d2c:	b570      	push	{r4, r5, r6, lr}
 8018d2e:	460c      	mov	r4, r1
 8018d30:	8989      	ldrh	r1, [r1, #12]
 8018d32:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8018d36:	f021 0102 	bic.w	r1, r1, #2
 8018d3a:	f8ad 1014 	strh.w	r1, [sp, #20]
 8018d3e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8018d40:	911b      	str	r1, [sp, #108]	; 0x6c
 8018d42:	89e1      	ldrh	r1, [r4, #14]
 8018d44:	f8ad 1016 	strh.w	r1, [sp, #22]
 8018d48:	69e1      	ldr	r1, [r4, #28]
 8018d4a:	9109      	str	r1, [sp, #36]	; 0x24
 8018d4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018d4e:	910b      	str	r1, [sp, #44]	; 0x2c
 8018d50:	a91c      	add	r1, sp, #112	; 0x70
 8018d52:	9102      	str	r1, [sp, #8]
 8018d54:	9106      	str	r1, [sp, #24]
 8018d56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018d5a:	4606      	mov	r6, r0
 8018d5c:	9104      	str	r1, [sp, #16]
 8018d5e:	9107      	str	r1, [sp, #28]
 8018d60:	a818      	add	r0, sp, #96	; 0x60
 8018d62:	2100      	movs	r1, #0
 8018d64:	e9cd 3200 	strd	r3, r2, [sp]
 8018d68:	9108      	str	r1, [sp, #32]
 8018d6a:	f001 fcd1 	bl	801a710 <__retarget_lock_init_recursive>
 8018d6e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018d72:	a902      	add	r1, sp, #8
 8018d74:	4630      	mov	r0, r6
 8018d76:	f7fe fda3 	bl	80178c0 <_vfprintf_r>
 8018d7a:	1e05      	subs	r5, r0, #0
 8018d7c:	db07      	blt.n	8018d8e <__sbprintf+0x62>
 8018d7e:	a902      	add	r1, sp, #8
 8018d80:	4630      	mov	r0, r6
 8018d82:	f000 ff71 	bl	8019c68 <_fflush_r>
 8018d86:	2800      	cmp	r0, #0
 8018d88:	bf18      	it	ne
 8018d8a:	f04f 35ff 	movne.w	r5, #4294967295
 8018d8e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8018d92:	9818      	ldr	r0, [sp, #96]	; 0x60
 8018d94:	065b      	lsls	r3, r3, #25
 8018d96:	bf42      	ittt	mi
 8018d98:	89a3      	ldrhmi	r3, [r4, #12]
 8018d9a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8018d9e:	81a3      	strhmi	r3, [r4, #12]
 8018da0:	f001 fcb7 	bl	801a712 <__retarget_lock_close_recursive>
 8018da4:	4628      	mov	r0, r5
 8018da6:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8018daa:	bd70      	pop	{r4, r5, r6, pc}

08018dac <__swsetup_r>:
 8018dac:	b538      	push	{r3, r4, r5, lr}
 8018dae:	4b2a      	ldr	r3, [pc, #168]	; (8018e58 <__swsetup_r+0xac>)
 8018db0:	4605      	mov	r5, r0
 8018db2:	6818      	ldr	r0, [r3, #0]
 8018db4:	460c      	mov	r4, r1
 8018db6:	b118      	cbz	r0, 8018dc0 <__swsetup_r+0x14>
 8018db8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8018dba:	b90b      	cbnz	r3, 8018dc0 <__swsetup_r+0x14>
 8018dbc:	f000 ffc0 	bl	8019d40 <__sinit>
 8018dc0:	89a3      	ldrh	r3, [r4, #12]
 8018dc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018dc6:	0718      	lsls	r0, r3, #28
 8018dc8:	d422      	bmi.n	8018e10 <__swsetup_r+0x64>
 8018dca:	06d9      	lsls	r1, r3, #27
 8018dcc:	d407      	bmi.n	8018dde <__swsetup_r+0x32>
 8018dce:	2309      	movs	r3, #9
 8018dd0:	602b      	str	r3, [r5, #0]
 8018dd2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018dd6:	81a3      	strh	r3, [r4, #12]
 8018dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8018ddc:	e034      	b.n	8018e48 <__swsetup_r+0x9c>
 8018dde:	0758      	lsls	r0, r3, #29
 8018de0:	d512      	bpl.n	8018e08 <__swsetup_r+0x5c>
 8018de2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018de4:	b141      	cbz	r1, 8018df8 <__swsetup_r+0x4c>
 8018de6:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8018dea:	4299      	cmp	r1, r3
 8018dec:	d002      	beq.n	8018df4 <__swsetup_r+0x48>
 8018dee:	4628      	mov	r0, r5
 8018df0:	f001 f836 	bl	8019e60 <_free_r>
 8018df4:	2300      	movs	r3, #0
 8018df6:	6323      	str	r3, [r4, #48]	; 0x30
 8018df8:	89a3      	ldrh	r3, [r4, #12]
 8018dfa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018dfe:	81a3      	strh	r3, [r4, #12]
 8018e00:	2300      	movs	r3, #0
 8018e02:	6063      	str	r3, [r4, #4]
 8018e04:	6923      	ldr	r3, [r4, #16]
 8018e06:	6023      	str	r3, [r4, #0]
 8018e08:	89a3      	ldrh	r3, [r4, #12]
 8018e0a:	f043 0308 	orr.w	r3, r3, #8
 8018e0e:	81a3      	strh	r3, [r4, #12]
 8018e10:	6923      	ldr	r3, [r4, #16]
 8018e12:	b94b      	cbnz	r3, 8018e28 <__swsetup_r+0x7c>
 8018e14:	89a3      	ldrh	r3, [r4, #12]
 8018e16:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018e1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018e1e:	d003      	beq.n	8018e28 <__swsetup_r+0x7c>
 8018e20:	4621      	mov	r1, r4
 8018e22:	4628      	mov	r0, r5
 8018e24:	f001 fca4 	bl	801a770 <__smakebuf_r>
 8018e28:	89a0      	ldrh	r0, [r4, #12]
 8018e2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018e2e:	f010 0301 	ands.w	r3, r0, #1
 8018e32:	d00a      	beq.n	8018e4a <__swsetup_r+0x9e>
 8018e34:	2300      	movs	r3, #0
 8018e36:	60a3      	str	r3, [r4, #8]
 8018e38:	6963      	ldr	r3, [r4, #20]
 8018e3a:	425b      	negs	r3, r3
 8018e3c:	61a3      	str	r3, [r4, #24]
 8018e3e:	6923      	ldr	r3, [r4, #16]
 8018e40:	b943      	cbnz	r3, 8018e54 <__swsetup_r+0xa8>
 8018e42:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018e46:	d1c4      	bne.n	8018dd2 <__swsetup_r+0x26>
 8018e48:	bd38      	pop	{r3, r4, r5, pc}
 8018e4a:	0781      	lsls	r1, r0, #30
 8018e4c:	bf58      	it	pl
 8018e4e:	6963      	ldrpl	r3, [r4, #20]
 8018e50:	60a3      	str	r3, [r4, #8]
 8018e52:	e7f4      	b.n	8018e3e <__swsetup_r+0x92>
 8018e54:	2000      	movs	r0, #0
 8018e56:	e7f7      	b.n	8018e48 <__swsetup_r+0x9c>
 8018e58:	20003880 	.word	0x20003880

08018e5c <register_fini>:
 8018e5c:	4b02      	ldr	r3, [pc, #8]	; (8018e68 <register_fini+0xc>)
 8018e5e:	b113      	cbz	r3, 8018e66 <register_fini+0xa>
 8018e60:	4802      	ldr	r0, [pc, #8]	; (8018e6c <register_fini+0x10>)
 8018e62:	f000 b805 	b.w	8018e70 <atexit>
 8018e66:	4770      	bx	lr
 8018e68:	00000000 	.word	0x00000000
 8018e6c:	08019d91 	.word	0x08019d91

08018e70 <atexit>:
 8018e70:	2300      	movs	r3, #0
 8018e72:	4601      	mov	r1, r0
 8018e74:	461a      	mov	r2, r3
 8018e76:	4618      	mov	r0, r3
 8018e78:	f002 bf52 	b.w	801bd20 <__register_exitproc>

08018e7c <quorem>:
 8018e7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e80:	6903      	ldr	r3, [r0, #16]
 8018e82:	690c      	ldr	r4, [r1, #16]
 8018e84:	42a3      	cmp	r3, r4
 8018e86:	4607      	mov	r7, r0
 8018e88:	f2c0 8081 	blt.w	8018f8e <quorem+0x112>
 8018e8c:	3c01      	subs	r4, #1
 8018e8e:	f101 0814 	add.w	r8, r1, #20
 8018e92:	f100 0514 	add.w	r5, r0, #20
 8018e96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018e9a:	9301      	str	r3, [sp, #4]
 8018e9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018ea0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018ea4:	3301      	adds	r3, #1
 8018ea6:	429a      	cmp	r2, r3
 8018ea8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018eac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018eb0:	fbb2 f6f3 	udiv	r6, r2, r3
 8018eb4:	d331      	bcc.n	8018f1a <quorem+0x9e>
 8018eb6:	f04f 0e00 	mov.w	lr, #0
 8018eba:	4640      	mov	r0, r8
 8018ebc:	46ac      	mov	ip, r5
 8018ebe:	46f2      	mov	sl, lr
 8018ec0:	f850 2b04 	ldr.w	r2, [r0], #4
 8018ec4:	b293      	uxth	r3, r2
 8018ec6:	fb06 e303 	mla	r3, r6, r3, lr
 8018eca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8018ece:	b29b      	uxth	r3, r3
 8018ed0:	ebaa 0303 	sub.w	r3, sl, r3
 8018ed4:	0c12      	lsrs	r2, r2, #16
 8018ed6:	f8dc a000 	ldr.w	sl, [ip]
 8018eda:	fb06 e202 	mla	r2, r6, r2, lr
 8018ede:	fa13 f38a 	uxtah	r3, r3, sl
 8018ee2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018ee6:	fa1f fa82 	uxth.w	sl, r2
 8018eea:	f8dc 2000 	ldr.w	r2, [ip]
 8018eee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8018ef2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018ef6:	b29b      	uxth	r3, r3
 8018ef8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018efc:	4581      	cmp	r9, r0
 8018efe:	f84c 3b04 	str.w	r3, [ip], #4
 8018f02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8018f06:	d2db      	bcs.n	8018ec0 <quorem+0x44>
 8018f08:	f855 300b 	ldr.w	r3, [r5, fp]
 8018f0c:	b92b      	cbnz	r3, 8018f1a <quorem+0x9e>
 8018f0e:	9b01      	ldr	r3, [sp, #4]
 8018f10:	3b04      	subs	r3, #4
 8018f12:	429d      	cmp	r5, r3
 8018f14:	461a      	mov	r2, r3
 8018f16:	d32e      	bcc.n	8018f76 <quorem+0xfa>
 8018f18:	613c      	str	r4, [r7, #16]
 8018f1a:	4638      	mov	r0, r7
 8018f1c:	f001 fef4 	bl	801ad08 <__mcmp>
 8018f20:	2800      	cmp	r0, #0
 8018f22:	db24      	blt.n	8018f6e <quorem+0xf2>
 8018f24:	3601      	adds	r6, #1
 8018f26:	4628      	mov	r0, r5
 8018f28:	f04f 0c00 	mov.w	ip, #0
 8018f2c:	f858 2b04 	ldr.w	r2, [r8], #4
 8018f30:	f8d0 e000 	ldr.w	lr, [r0]
 8018f34:	b293      	uxth	r3, r2
 8018f36:	ebac 0303 	sub.w	r3, ip, r3
 8018f3a:	0c12      	lsrs	r2, r2, #16
 8018f3c:	fa13 f38e 	uxtah	r3, r3, lr
 8018f40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8018f44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018f48:	b29b      	uxth	r3, r3
 8018f4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018f4e:	45c1      	cmp	r9, r8
 8018f50:	f840 3b04 	str.w	r3, [r0], #4
 8018f54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8018f58:	d2e8      	bcs.n	8018f2c <quorem+0xb0>
 8018f5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018f5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018f62:	b922      	cbnz	r2, 8018f6e <quorem+0xf2>
 8018f64:	3b04      	subs	r3, #4
 8018f66:	429d      	cmp	r5, r3
 8018f68:	461a      	mov	r2, r3
 8018f6a:	d30a      	bcc.n	8018f82 <quorem+0x106>
 8018f6c:	613c      	str	r4, [r7, #16]
 8018f6e:	4630      	mov	r0, r6
 8018f70:	b003      	add	sp, #12
 8018f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f76:	6812      	ldr	r2, [r2, #0]
 8018f78:	3b04      	subs	r3, #4
 8018f7a:	2a00      	cmp	r2, #0
 8018f7c:	d1cc      	bne.n	8018f18 <quorem+0x9c>
 8018f7e:	3c01      	subs	r4, #1
 8018f80:	e7c7      	b.n	8018f12 <quorem+0x96>
 8018f82:	6812      	ldr	r2, [r2, #0]
 8018f84:	3b04      	subs	r3, #4
 8018f86:	2a00      	cmp	r2, #0
 8018f88:	d1f0      	bne.n	8018f6c <quorem+0xf0>
 8018f8a:	3c01      	subs	r4, #1
 8018f8c:	e7eb      	b.n	8018f66 <quorem+0xea>
 8018f8e:	2000      	movs	r0, #0
 8018f90:	e7ee      	b.n	8018f70 <quorem+0xf4>
 8018f92:	0000      	movs	r0, r0
 8018f94:	0000      	movs	r0, r0
	...

08018f98 <_dtoa_r>:
 8018f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f9c:	ed2d 8b02 	vpush	{d8}
 8018fa0:	b095      	sub	sp, #84	; 0x54
 8018fa2:	ec57 6b10 	vmov	r6, r7, d0
 8018fa6:	9105      	str	r1, [sp, #20]
 8018fa8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8018faa:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8018fac:	9209      	str	r2, [sp, #36]	; 0x24
 8018fae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8018fb2:	4604      	mov	r4, r0
 8018fb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8018fb6:	b141      	cbz	r1, 8018fca <_dtoa_r+0x32>
 8018fb8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018fba:	604a      	str	r2, [r1, #4]
 8018fbc:	2301      	movs	r3, #1
 8018fbe:	4093      	lsls	r3, r2
 8018fc0:	608b      	str	r3, [r1, #8]
 8018fc2:	f001 fc4c 	bl	801a85e <_Bfree>
 8018fc6:	2300      	movs	r3, #0
 8018fc8:	6423      	str	r3, [r4, #64]	; 0x40
 8018fca:	1e3b      	subs	r3, r7, #0
 8018fcc:	bfb9      	ittee	lt
 8018fce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8018fd2:	9303      	strlt	r3, [sp, #12]
 8018fd4:	2300      	movge	r3, #0
 8018fd6:	602b      	strge	r3, [r5, #0]
 8018fd8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8018fdc:	4ba2      	ldr	r3, [pc, #648]	; (8019268 <_dtoa_r+0x2d0>)
 8018fde:	bfbc      	itt	lt
 8018fe0:	2201      	movlt	r2, #1
 8018fe2:	602a      	strlt	r2, [r5, #0]
 8018fe4:	ea33 0309 	bics.w	r3, r3, r9
 8018fe8:	d11b      	bne.n	8019022 <_dtoa_r+0x8a>
 8018fea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018fec:	f242 730f 	movw	r3, #9999	; 0x270f
 8018ff0:	6013      	str	r3, [r2, #0]
 8018ff2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018ff6:	4333      	orrs	r3, r6
 8018ff8:	f000 8578 	beq.w	8019aec <_dtoa_r+0xb54>
 8018ffc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018ffe:	b90b      	cbnz	r3, 8019004 <_dtoa_r+0x6c>
 8019000:	4b9a      	ldr	r3, [pc, #616]	; (801926c <_dtoa_r+0x2d4>)
 8019002:	e024      	b.n	801904e <_dtoa_r+0xb6>
 8019004:	4b99      	ldr	r3, [pc, #612]	; (801926c <_dtoa_r+0x2d4>)
 8019006:	9300      	str	r3, [sp, #0]
 8019008:	3303      	adds	r3, #3
 801900a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801900c:	6013      	str	r3, [r2, #0]
 801900e:	9800      	ldr	r0, [sp, #0]
 8019010:	b015      	add	sp, #84	; 0x54
 8019012:	ecbd 8b02 	vpop	{d8}
 8019016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801901a:	4b95      	ldr	r3, [pc, #596]	; (8019270 <_dtoa_r+0x2d8>)
 801901c:	9300      	str	r3, [sp, #0]
 801901e:	3308      	adds	r3, #8
 8019020:	e7f3      	b.n	801900a <_dtoa_r+0x72>
 8019022:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019026:	2200      	movs	r2, #0
 8019028:	ec51 0b17 	vmov	r0, r1, d7
 801902c:	2300      	movs	r3, #0
 801902e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8019032:	f7eb fd59 	bl	8004ae8 <__aeabi_dcmpeq>
 8019036:	4680      	mov	r8, r0
 8019038:	b158      	cbz	r0, 8019052 <_dtoa_r+0xba>
 801903a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801903c:	2301      	movs	r3, #1
 801903e:	6013      	str	r3, [r2, #0]
 8019040:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019042:	2b00      	cmp	r3, #0
 8019044:	f000 854f 	beq.w	8019ae6 <_dtoa_r+0xb4e>
 8019048:	488a      	ldr	r0, [pc, #552]	; (8019274 <_dtoa_r+0x2dc>)
 801904a:	6018      	str	r0, [r3, #0]
 801904c:	1e43      	subs	r3, r0, #1
 801904e:	9300      	str	r3, [sp, #0]
 8019050:	e7dd      	b.n	801900e <_dtoa_r+0x76>
 8019052:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8019056:	aa12      	add	r2, sp, #72	; 0x48
 8019058:	a913      	add	r1, sp, #76	; 0x4c
 801905a:	4620      	mov	r0, r4
 801905c:	f001 ff74 	bl	801af48 <__d2b>
 8019060:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019064:	4683      	mov	fp, r0
 8019066:	2d00      	cmp	r5, #0
 8019068:	d07c      	beq.n	8019164 <_dtoa_r+0x1cc>
 801906a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801906c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8019070:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019074:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8019078:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801907c:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8019080:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8019084:	4b7c      	ldr	r3, [pc, #496]	; (8019278 <_dtoa_r+0x2e0>)
 8019086:	2200      	movs	r2, #0
 8019088:	4630      	mov	r0, r6
 801908a:	4639      	mov	r1, r7
 801908c:	f7eb f90c 	bl	80042a8 <__aeabi_dsub>
 8019090:	a36f      	add	r3, pc, #444	; (adr r3, 8019250 <_dtoa_r+0x2b8>)
 8019092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019096:	f7eb fabf 	bl	8004618 <__aeabi_dmul>
 801909a:	a36f      	add	r3, pc, #444	; (adr r3, 8019258 <_dtoa_r+0x2c0>)
 801909c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190a0:	f7eb f904 	bl	80042ac <__adddf3>
 80190a4:	4606      	mov	r6, r0
 80190a6:	4628      	mov	r0, r5
 80190a8:	460f      	mov	r7, r1
 80190aa:	f7eb fa4b 	bl	8004544 <__aeabi_i2d>
 80190ae:	a36c      	add	r3, pc, #432	; (adr r3, 8019260 <_dtoa_r+0x2c8>)
 80190b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190b4:	f7eb fab0 	bl	8004618 <__aeabi_dmul>
 80190b8:	4602      	mov	r2, r0
 80190ba:	460b      	mov	r3, r1
 80190bc:	4630      	mov	r0, r6
 80190be:	4639      	mov	r1, r7
 80190c0:	f7eb f8f4 	bl	80042ac <__adddf3>
 80190c4:	4606      	mov	r6, r0
 80190c6:	460f      	mov	r7, r1
 80190c8:	f7eb fd56 	bl	8004b78 <__aeabi_d2iz>
 80190cc:	2200      	movs	r2, #0
 80190ce:	4682      	mov	sl, r0
 80190d0:	2300      	movs	r3, #0
 80190d2:	4630      	mov	r0, r6
 80190d4:	4639      	mov	r1, r7
 80190d6:	f7eb fd11 	bl	8004afc <__aeabi_dcmplt>
 80190da:	b148      	cbz	r0, 80190f0 <_dtoa_r+0x158>
 80190dc:	4650      	mov	r0, sl
 80190de:	f7eb fa31 	bl	8004544 <__aeabi_i2d>
 80190e2:	4632      	mov	r2, r6
 80190e4:	463b      	mov	r3, r7
 80190e6:	f7eb fcff 	bl	8004ae8 <__aeabi_dcmpeq>
 80190ea:	b908      	cbnz	r0, 80190f0 <_dtoa_r+0x158>
 80190ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80190f0:	f1ba 0f16 	cmp.w	sl, #22
 80190f4:	d854      	bhi.n	80191a0 <_dtoa_r+0x208>
 80190f6:	4b61      	ldr	r3, [pc, #388]	; (801927c <_dtoa_r+0x2e4>)
 80190f8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80190fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019100:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8019104:	f7eb fcfa 	bl	8004afc <__aeabi_dcmplt>
 8019108:	2800      	cmp	r0, #0
 801910a:	d04b      	beq.n	80191a4 <_dtoa_r+0x20c>
 801910c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019110:	2300      	movs	r3, #0
 8019112:	930e      	str	r3, [sp, #56]	; 0x38
 8019114:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019116:	1b5d      	subs	r5, r3, r5
 8019118:	1e6b      	subs	r3, r5, #1
 801911a:	9304      	str	r3, [sp, #16]
 801911c:	bf43      	ittte	mi
 801911e:	2300      	movmi	r3, #0
 8019120:	f1c5 0801 	rsbmi	r8, r5, #1
 8019124:	9304      	strmi	r3, [sp, #16]
 8019126:	f04f 0800 	movpl.w	r8, #0
 801912a:	f1ba 0f00 	cmp.w	sl, #0
 801912e:	db3b      	blt.n	80191a8 <_dtoa_r+0x210>
 8019130:	9b04      	ldr	r3, [sp, #16]
 8019132:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8019136:	4453      	add	r3, sl
 8019138:	9304      	str	r3, [sp, #16]
 801913a:	2300      	movs	r3, #0
 801913c:	9306      	str	r3, [sp, #24]
 801913e:	9b05      	ldr	r3, [sp, #20]
 8019140:	2b09      	cmp	r3, #9
 8019142:	d86a      	bhi.n	801921a <_dtoa_r+0x282>
 8019144:	2b05      	cmp	r3, #5
 8019146:	bfc4      	itt	gt
 8019148:	3b04      	subgt	r3, #4
 801914a:	9305      	strgt	r3, [sp, #20]
 801914c:	9b05      	ldr	r3, [sp, #20]
 801914e:	f1a3 0302 	sub.w	r3, r3, #2
 8019152:	bfcc      	ite	gt
 8019154:	2500      	movgt	r5, #0
 8019156:	2501      	movle	r5, #1
 8019158:	2b03      	cmp	r3, #3
 801915a:	d86a      	bhi.n	8019232 <_dtoa_r+0x29a>
 801915c:	e8df f003 	tbb	[pc, r3]
 8019160:	5b4d4f2c 	.word	0x5b4d4f2c
 8019164:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8019168:	441d      	add	r5, r3
 801916a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801916e:	2b20      	cmp	r3, #32
 8019170:	bfc1      	itttt	gt
 8019172:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8019176:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801917a:	fa09 f303 	lslgt.w	r3, r9, r3
 801917e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8019182:	bfda      	itte	le
 8019184:	f1c3 0320 	rsble	r3, r3, #32
 8019188:	fa06 f003 	lslle.w	r0, r6, r3
 801918c:	4318      	orrgt	r0, r3
 801918e:	f7eb f9c9 	bl	8004524 <__aeabi_ui2d>
 8019192:	2301      	movs	r3, #1
 8019194:	4606      	mov	r6, r0
 8019196:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801919a:	3d01      	subs	r5, #1
 801919c:	9310      	str	r3, [sp, #64]	; 0x40
 801919e:	e771      	b.n	8019084 <_dtoa_r+0xec>
 80191a0:	2301      	movs	r3, #1
 80191a2:	e7b6      	b.n	8019112 <_dtoa_r+0x17a>
 80191a4:	900e      	str	r0, [sp, #56]	; 0x38
 80191a6:	e7b5      	b.n	8019114 <_dtoa_r+0x17c>
 80191a8:	f1ca 0300 	rsb	r3, sl, #0
 80191ac:	9306      	str	r3, [sp, #24]
 80191ae:	2300      	movs	r3, #0
 80191b0:	eba8 080a 	sub.w	r8, r8, sl
 80191b4:	930d      	str	r3, [sp, #52]	; 0x34
 80191b6:	e7c2      	b.n	801913e <_dtoa_r+0x1a6>
 80191b8:	2300      	movs	r3, #0
 80191ba:	9308      	str	r3, [sp, #32]
 80191bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191be:	2b00      	cmp	r3, #0
 80191c0:	dc3a      	bgt.n	8019238 <_dtoa_r+0x2a0>
 80191c2:	f04f 0901 	mov.w	r9, #1
 80191c6:	f8cd 9004 	str.w	r9, [sp, #4]
 80191ca:	464b      	mov	r3, r9
 80191cc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80191d0:	2200      	movs	r2, #0
 80191d2:	6462      	str	r2, [r4, #68]	; 0x44
 80191d4:	2204      	movs	r2, #4
 80191d6:	f102 0014 	add.w	r0, r2, #20
 80191da:	4298      	cmp	r0, r3
 80191dc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80191de:	d931      	bls.n	8019244 <_dtoa_r+0x2ac>
 80191e0:	4620      	mov	r0, r4
 80191e2:	f001 fb17 	bl	801a814 <_Balloc>
 80191e6:	9000      	str	r0, [sp, #0]
 80191e8:	2800      	cmp	r0, #0
 80191ea:	d14d      	bne.n	8019288 <_dtoa_r+0x2f0>
 80191ec:	4b24      	ldr	r3, [pc, #144]	; (8019280 <_dtoa_r+0x2e8>)
 80191ee:	4602      	mov	r2, r0
 80191f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80191f4:	4823      	ldr	r0, [pc, #140]	; (8019284 <_dtoa_r+0x2ec>)
 80191f6:	f002 fdd3 	bl	801bda0 <__assert_func>
 80191fa:	2301      	movs	r3, #1
 80191fc:	e7dd      	b.n	80191ba <_dtoa_r+0x222>
 80191fe:	2300      	movs	r3, #0
 8019200:	9308      	str	r3, [sp, #32]
 8019202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019204:	eb0a 0903 	add.w	r9, sl, r3
 8019208:	f109 0301 	add.w	r3, r9, #1
 801920c:	2b01      	cmp	r3, #1
 801920e:	9301      	str	r3, [sp, #4]
 8019210:	bfb8      	it	lt
 8019212:	2301      	movlt	r3, #1
 8019214:	e7dc      	b.n	80191d0 <_dtoa_r+0x238>
 8019216:	2301      	movs	r3, #1
 8019218:	e7f2      	b.n	8019200 <_dtoa_r+0x268>
 801921a:	2501      	movs	r5, #1
 801921c:	2300      	movs	r3, #0
 801921e:	9305      	str	r3, [sp, #20]
 8019220:	9508      	str	r5, [sp, #32]
 8019222:	f04f 39ff 	mov.w	r9, #4294967295
 8019226:	2200      	movs	r2, #0
 8019228:	f8cd 9004 	str.w	r9, [sp, #4]
 801922c:	2312      	movs	r3, #18
 801922e:	9209      	str	r2, [sp, #36]	; 0x24
 8019230:	e7ce      	b.n	80191d0 <_dtoa_r+0x238>
 8019232:	2301      	movs	r3, #1
 8019234:	9308      	str	r3, [sp, #32]
 8019236:	e7f4      	b.n	8019222 <_dtoa_r+0x28a>
 8019238:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801923c:	f8cd 9004 	str.w	r9, [sp, #4]
 8019240:	464b      	mov	r3, r9
 8019242:	e7c5      	b.n	80191d0 <_dtoa_r+0x238>
 8019244:	3101      	adds	r1, #1
 8019246:	6461      	str	r1, [r4, #68]	; 0x44
 8019248:	0052      	lsls	r2, r2, #1
 801924a:	e7c4      	b.n	80191d6 <_dtoa_r+0x23e>
 801924c:	f3af 8000 	nop.w
 8019250:	636f4361 	.word	0x636f4361
 8019254:	3fd287a7 	.word	0x3fd287a7
 8019258:	8b60c8b3 	.word	0x8b60c8b3
 801925c:	3fc68a28 	.word	0x3fc68a28
 8019260:	509f79fb 	.word	0x509f79fb
 8019264:	3fd34413 	.word	0x3fd34413
 8019268:	7ff00000 	.word	0x7ff00000
 801926c:	0801e882 	.word	0x0801e882
 8019270:	0801e886 	.word	0x0801e886
 8019274:	0801e71b 	.word	0x0801e71b
 8019278:	3ff80000 	.word	0x3ff80000
 801927c:	0801ea08 	.word	0x0801ea08
 8019280:	0801e88f 	.word	0x0801e88f
 8019284:	0801e8a0 	.word	0x0801e8a0
 8019288:	9b00      	ldr	r3, [sp, #0]
 801928a:	6423      	str	r3, [r4, #64]	; 0x40
 801928c:	9b01      	ldr	r3, [sp, #4]
 801928e:	2b0e      	cmp	r3, #14
 8019290:	f200 80ad 	bhi.w	80193ee <_dtoa_r+0x456>
 8019294:	2d00      	cmp	r5, #0
 8019296:	f000 80aa 	beq.w	80193ee <_dtoa_r+0x456>
 801929a:	f1ba 0f00 	cmp.w	sl, #0
 801929e:	dd36      	ble.n	801930e <_dtoa_r+0x376>
 80192a0:	4ac2      	ldr	r2, [pc, #776]	; (80195ac <_dtoa_r+0x614>)
 80192a2:	f00a 030f 	and.w	r3, sl, #15
 80192a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80192aa:	ed93 7b00 	vldr	d7, [r3]
 80192ae:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80192b2:	ea4f 172a 	mov.w	r7, sl, asr #4
 80192b6:	eeb0 8a47 	vmov.f32	s16, s14
 80192ba:	eef0 8a67 	vmov.f32	s17, s15
 80192be:	d016      	beq.n	80192ee <_dtoa_r+0x356>
 80192c0:	4bbb      	ldr	r3, [pc, #748]	; (80195b0 <_dtoa_r+0x618>)
 80192c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80192c6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80192ca:	f7eb facf 	bl	800486c <__aeabi_ddiv>
 80192ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80192d2:	f007 070f 	and.w	r7, r7, #15
 80192d6:	2503      	movs	r5, #3
 80192d8:	4eb5      	ldr	r6, [pc, #724]	; (80195b0 <_dtoa_r+0x618>)
 80192da:	b957      	cbnz	r7, 80192f2 <_dtoa_r+0x35a>
 80192dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80192e0:	ec53 2b18 	vmov	r2, r3, d8
 80192e4:	f7eb fac2 	bl	800486c <__aeabi_ddiv>
 80192e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80192ec:	e029      	b.n	8019342 <_dtoa_r+0x3aa>
 80192ee:	2502      	movs	r5, #2
 80192f0:	e7f2      	b.n	80192d8 <_dtoa_r+0x340>
 80192f2:	07f9      	lsls	r1, r7, #31
 80192f4:	d508      	bpl.n	8019308 <_dtoa_r+0x370>
 80192f6:	ec51 0b18 	vmov	r0, r1, d8
 80192fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80192fe:	f7eb f98b 	bl	8004618 <__aeabi_dmul>
 8019302:	ec41 0b18 	vmov	d8, r0, r1
 8019306:	3501      	adds	r5, #1
 8019308:	107f      	asrs	r7, r7, #1
 801930a:	3608      	adds	r6, #8
 801930c:	e7e5      	b.n	80192da <_dtoa_r+0x342>
 801930e:	f000 80a6 	beq.w	801945e <_dtoa_r+0x4c6>
 8019312:	f1ca 0600 	rsb	r6, sl, #0
 8019316:	4ba5      	ldr	r3, [pc, #660]	; (80195ac <_dtoa_r+0x614>)
 8019318:	4fa5      	ldr	r7, [pc, #660]	; (80195b0 <_dtoa_r+0x618>)
 801931a:	f006 020f 	and.w	r2, r6, #15
 801931e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019326:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801932a:	f7eb f975 	bl	8004618 <__aeabi_dmul>
 801932e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019332:	1136      	asrs	r6, r6, #4
 8019334:	2300      	movs	r3, #0
 8019336:	2502      	movs	r5, #2
 8019338:	2e00      	cmp	r6, #0
 801933a:	f040 8085 	bne.w	8019448 <_dtoa_r+0x4b0>
 801933e:	2b00      	cmp	r3, #0
 8019340:	d1d2      	bne.n	80192e8 <_dtoa_r+0x350>
 8019342:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019344:	2b00      	cmp	r3, #0
 8019346:	f000 808c 	beq.w	8019462 <_dtoa_r+0x4ca>
 801934a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801934e:	4b99      	ldr	r3, [pc, #612]	; (80195b4 <_dtoa_r+0x61c>)
 8019350:	2200      	movs	r2, #0
 8019352:	4630      	mov	r0, r6
 8019354:	4639      	mov	r1, r7
 8019356:	f7eb fbd1 	bl	8004afc <__aeabi_dcmplt>
 801935a:	2800      	cmp	r0, #0
 801935c:	f000 8081 	beq.w	8019462 <_dtoa_r+0x4ca>
 8019360:	9b01      	ldr	r3, [sp, #4]
 8019362:	2b00      	cmp	r3, #0
 8019364:	d07d      	beq.n	8019462 <_dtoa_r+0x4ca>
 8019366:	f1b9 0f00 	cmp.w	r9, #0
 801936a:	dd3c      	ble.n	80193e6 <_dtoa_r+0x44e>
 801936c:	f10a 33ff 	add.w	r3, sl, #4294967295
 8019370:	9307      	str	r3, [sp, #28]
 8019372:	2200      	movs	r2, #0
 8019374:	4b90      	ldr	r3, [pc, #576]	; (80195b8 <_dtoa_r+0x620>)
 8019376:	4630      	mov	r0, r6
 8019378:	4639      	mov	r1, r7
 801937a:	f7eb f94d 	bl	8004618 <__aeabi_dmul>
 801937e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019382:	3501      	adds	r5, #1
 8019384:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8019388:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801938c:	4628      	mov	r0, r5
 801938e:	f7eb f8d9 	bl	8004544 <__aeabi_i2d>
 8019392:	4632      	mov	r2, r6
 8019394:	463b      	mov	r3, r7
 8019396:	f7eb f93f 	bl	8004618 <__aeabi_dmul>
 801939a:	4b88      	ldr	r3, [pc, #544]	; (80195bc <_dtoa_r+0x624>)
 801939c:	2200      	movs	r2, #0
 801939e:	f7ea ff85 	bl	80042ac <__adddf3>
 80193a2:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80193a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80193aa:	9303      	str	r3, [sp, #12]
 80193ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80193ae:	2b00      	cmp	r3, #0
 80193b0:	d15c      	bne.n	801946c <_dtoa_r+0x4d4>
 80193b2:	4b83      	ldr	r3, [pc, #524]	; (80195c0 <_dtoa_r+0x628>)
 80193b4:	2200      	movs	r2, #0
 80193b6:	4630      	mov	r0, r6
 80193b8:	4639      	mov	r1, r7
 80193ba:	f7ea ff75 	bl	80042a8 <__aeabi_dsub>
 80193be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80193c2:	4606      	mov	r6, r0
 80193c4:	460f      	mov	r7, r1
 80193c6:	f7eb fbb7 	bl	8004b38 <__aeabi_dcmpgt>
 80193ca:	2800      	cmp	r0, #0
 80193cc:	f040 8295 	bne.w	80198fa <_dtoa_r+0x962>
 80193d0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80193d4:	4630      	mov	r0, r6
 80193d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80193da:	4639      	mov	r1, r7
 80193dc:	f7eb fb8e 	bl	8004afc <__aeabi_dcmplt>
 80193e0:	2800      	cmp	r0, #0
 80193e2:	f040 8287 	bne.w	80198f4 <_dtoa_r+0x95c>
 80193e6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80193ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80193ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	f2c0 8157 	blt.w	80196a4 <_dtoa_r+0x70c>
 80193f6:	f1ba 0f0e 	cmp.w	sl, #14
 80193fa:	f300 8153 	bgt.w	80196a4 <_dtoa_r+0x70c>
 80193fe:	4b6b      	ldr	r3, [pc, #428]	; (80195ac <_dtoa_r+0x614>)
 8019400:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8019404:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801940a:	2b00      	cmp	r3, #0
 801940c:	f280 80e2 	bge.w	80195d4 <_dtoa_r+0x63c>
 8019410:	9b01      	ldr	r3, [sp, #4]
 8019412:	2b00      	cmp	r3, #0
 8019414:	f300 80de 	bgt.w	80195d4 <_dtoa_r+0x63c>
 8019418:	f040 826c 	bne.w	80198f4 <_dtoa_r+0x95c>
 801941c:	4b68      	ldr	r3, [pc, #416]	; (80195c0 <_dtoa_r+0x628>)
 801941e:	2200      	movs	r2, #0
 8019420:	4640      	mov	r0, r8
 8019422:	4649      	mov	r1, r9
 8019424:	f7eb f8f8 	bl	8004618 <__aeabi_dmul>
 8019428:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801942c:	f7eb fb7a 	bl	8004b24 <__aeabi_dcmpge>
 8019430:	9e01      	ldr	r6, [sp, #4]
 8019432:	4637      	mov	r7, r6
 8019434:	2800      	cmp	r0, #0
 8019436:	f040 8242 	bne.w	80198be <_dtoa_r+0x926>
 801943a:	9d00      	ldr	r5, [sp, #0]
 801943c:	2331      	movs	r3, #49	; 0x31
 801943e:	f805 3b01 	strb.w	r3, [r5], #1
 8019442:	f10a 0a01 	add.w	sl, sl, #1
 8019446:	e23e      	b.n	80198c6 <_dtoa_r+0x92e>
 8019448:	07f2      	lsls	r2, r6, #31
 801944a:	d505      	bpl.n	8019458 <_dtoa_r+0x4c0>
 801944c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019450:	f7eb f8e2 	bl	8004618 <__aeabi_dmul>
 8019454:	3501      	adds	r5, #1
 8019456:	2301      	movs	r3, #1
 8019458:	1076      	asrs	r6, r6, #1
 801945a:	3708      	adds	r7, #8
 801945c:	e76c      	b.n	8019338 <_dtoa_r+0x3a0>
 801945e:	2502      	movs	r5, #2
 8019460:	e76f      	b.n	8019342 <_dtoa_r+0x3aa>
 8019462:	9b01      	ldr	r3, [sp, #4]
 8019464:	f8cd a01c 	str.w	sl, [sp, #28]
 8019468:	930c      	str	r3, [sp, #48]	; 0x30
 801946a:	e78d      	b.n	8019388 <_dtoa_r+0x3f0>
 801946c:	9900      	ldr	r1, [sp, #0]
 801946e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8019470:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019472:	4b4e      	ldr	r3, [pc, #312]	; (80195ac <_dtoa_r+0x614>)
 8019474:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019478:	4401      	add	r1, r0
 801947a:	9102      	str	r1, [sp, #8]
 801947c:	9908      	ldr	r1, [sp, #32]
 801947e:	eeb0 8a47 	vmov.f32	s16, s14
 8019482:	eef0 8a67 	vmov.f32	s17, s15
 8019486:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801948a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801948e:	2900      	cmp	r1, #0
 8019490:	d045      	beq.n	801951e <_dtoa_r+0x586>
 8019492:	494c      	ldr	r1, [pc, #304]	; (80195c4 <_dtoa_r+0x62c>)
 8019494:	2000      	movs	r0, #0
 8019496:	f7eb f9e9 	bl	800486c <__aeabi_ddiv>
 801949a:	ec53 2b18 	vmov	r2, r3, d8
 801949e:	f7ea ff03 	bl	80042a8 <__aeabi_dsub>
 80194a2:	9d00      	ldr	r5, [sp, #0]
 80194a4:	ec41 0b18 	vmov	d8, r0, r1
 80194a8:	4639      	mov	r1, r7
 80194aa:	4630      	mov	r0, r6
 80194ac:	f7eb fb64 	bl	8004b78 <__aeabi_d2iz>
 80194b0:	900c      	str	r0, [sp, #48]	; 0x30
 80194b2:	f7eb f847 	bl	8004544 <__aeabi_i2d>
 80194b6:	4602      	mov	r2, r0
 80194b8:	460b      	mov	r3, r1
 80194ba:	4630      	mov	r0, r6
 80194bc:	4639      	mov	r1, r7
 80194be:	f7ea fef3 	bl	80042a8 <__aeabi_dsub>
 80194c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80194c4:	3330      	adds	r3, #48	; 0x30
 80194c6:	f805 3b01 	strb.w	r3, [r5], #1
 80194ca:	ec53 2b18 	vmov	r2, r3, d8
 80194ce:	4606      	mov	r6, r0
 80194d0:	460f      	mov	r7, r1
 80194d2:	f7eb fb13 	bl	8004afc <__aeabi_dcmplt>
 80194d6:	2800      	cmp	r0, #0
 80194d8:	d165      	bne.n	80195a6 <_dtoa_r+0x60e>
 80194da:	4632      	mov	r2, r6
 80194dc:	463b      	mov	r3, r7
 80194de:	4935      	ldr	r1, [pc, #212]	; (80195b4 <_dtoa_r+0x61c>)
 80194e0:	2000      	movs	r0, #0
 80194e2:	f7ea fee1 	bl	80042a8 <__aeabi_dsub>
 80194e6:	ec53 2b18 	vmov	r2, r3, d8
 80194ea:	f7eb fb07 	bl	8004afc <__aeabi_dcmplt>
 80194ee:	2800      	cmp	r0, #0
 80194f0:	f040 80b8 	bne.w	8019664 <_dtoa_r+0x6cc>
 80194f4:	9b02      	ldr	r3, [sp, #8]
 80194f6:	429d      	cmp	r5, r3
 80194f8:	f43f af75 	beq.w	80193e6 <_dtoa_r+0x44e>
 80194fc:	4b2e      	ldr	r3, [pc, #184]	; (80195b8 <_dtoa_r+0x620>)
 80194fe:	ec51 0b18 	vmov	r0, r1, d8
 8019502:	2200      	movs	r2, #0
 8019504:	f7eb f888 	bl	8004618 <__aeabi_dmul>
 8019508:	4b2b      	ldr	r3, [pc, #172]	; (80195b8 <_dtoa_r+0x620>)
 801950a:	ec41 0b18 	vmov	d8, r0, r1
 801950e:	2200      	movs	r2, #0
 8019510:	4630      	mov	r0, r6
 8019512:	4639      	mov	r1, r7
 8019514:	f7eb f880 	bl	8004618 <__aeabi_dmul>
 8019518:	4606      	mov	r6, r0
 801951a:	460f      	mov	r7, r1
 801951c:	e7c4      	b.n	80194a8 <_dtoa_r+0x510>
 801951e:	ec51 0b17 	vmov	r0, r1, d7
 8019522:	f7eb f879 	bl	8004618 <__aeabi_dmul>
 8019526:	9b02      	ldr	r3, [sp, #8]
 8019528:	9d00      	ldr	r5, [sp, #0]
 801952a:	930c      	str	r3, [sp, #48]	; 0x30
 801952c:	ec41 0b18 	vmov	d8, r0, r1
 8019530:	4639      	mov	r1, r7
 8019532:	4630      	mov	r0, r6
 8019534:	f7eb fb20 	bl	8004b78 <__aeabi_d2iz>
 8019538:	9011      	str	r0, [sp, #68]	; 0x44
 801953a:	f7eb f803 	bl	8004544 <__aeabi_i2d>
 801953e:	4602      	mov	r2, r0
 8019540:	460b      	mov	r3, r1
 8019542:	4630      	mov	r0, r6
 8019544:	4639      	mov	r1, r7
 8019546:	f7ea feaf 	bl	80042a8 <__aeabi_dsub>
 801954a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801954c:	3330      	adds	r3, #48	; 0x30
 801954e:	f805 3b01 	strb.w	r3, [r5], #1
 8019552:	9b02      	ldr	r3, [sp, #8]
 8019554:	429d      	cmp	r5, r3
 8019556:	4606      	mov	r6, r0
 8019558:	460f      	mov	r7, r1
 801955a:	f04f 0200 	mov.w	r2, #0
 801955e:	d133      	bne.n	80195c8 <_dtoa_r+0x630>
 8019560:	4b18      	ldr	r3, [pc, #96]	; (80195c4 <_dtoa_r+0x62c>)
 8019562:	ec51 0b18 	vmov	r0, r1, d8
 8019566:	f7ea fea1 	bl	80042ac <__adddf3>
 801956a:	4602      	mov	r2, r0
 801956c:	460b      	mov	r3, r1
 801956e:	4630      	mov	r0, r6
 8019570:	4639      	mov	r1, r7
 8019572:	f7eb fae1 	bl	8004b38 <__aeabi_dcmpgt>
 8019576:	2800      	cmp	r0, #0
 8019578:	d174      	bne.n	8019664 <_dtoa_r+0x6cc>
 801957a:	ec53 2b18 	vmov	r2, r3, d8
 801957e:	4911      	ldr	r1, [pc, #68]	; (80195c4 <_dtoa_r+0x62c>)
 8019580:	2000      	movs	r0, #0
 8019582:	f7ea fe91 	bl	80042a8 <__aeabi_dsub>
 8019586:	4602      	mov	r2, r0
 8019588:	460b      	mov	r3, r1
 801958a:	4630      	mov	r0, r6
 801958c:	4639      	mov	r1, r7
 801958e:	f7eb fab5 	bl	8004afc <__aeabi_dcmplt>
 8019592:	2800      	cmp	r0, #0
 8019594:	f43f af27 	beq.w	80193e6 <_dtoa_r+0x44e>
 8019598:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801959a:	1e6b      	subs	r3, r5, #1
 801959c:	930c      	str	r3, [sp, #48]	; 0x30
 801959e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80195a2:	2b30      	cmp	r3, #48	; 0x30
 80195a4:	d0f8      	beq.n	8019598 <_dtoa_r+0x600>
 80195a6:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80195aa:	e049      	b.n	8019640 <_dtoa_r+0x6a8>
 80195ac:	0801ea08 	.word	0x0801ea08
 80195b0:	0801e9e0 	.word	0x0801e9e0
 80195b4:	3ff00000 	.word	0x3ff00000
 80195b8:	40240000 	.word	0x40240000
 80195bc:	401c0000 	.word	0x401c0000
 80195c0:	40140000 	.word	0x40140000
 80195c4:	3fe00000 	.word	0x3fe00000
 80195c8:	4baf      	ldr	r3, [pc, #700]	; (8019888 <_dtoa_r+0x8f0>)
 80195ca:	f7eb f825 	bl	8004618 <__aeabi_dmul>
 80195ce:	4606      	mov	r6, r0
 80195d0:	460f      	mov	r7, r1
 80195d2:	e7ad      	b.n	8019530 <_dtoa_r+0x598>
 80195d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80195d8:	9d00      	ldr	r5, [sp, #0]
 80195da:	4642      	mov	r2, r8
 80195dc:	464b      	mov	r3, r9
 80195de:	4630      	mov	r0, r6
 80195e0:	4639      	mov	r1, r7
 80195e2:	f7eb f943 	bl	800486c <__aeabi_ddiv>
 80195e6:	f7eb fac7 	bl	8004b78 <__aeabi_d2iz>
 80195ea:	9002      	str	r0, [sp, #8]
 80195ec:	f7ea ffaa 	bl	8004544 <__aeabi_i2d>
 80195f0:	4642      	mov	r2, r8
 80195f2:	464b      	mov	r3, r9
 80195f4:	f7eb f810 	bl	8004618 <__aeabi_dmul>
 80195f8:	4602      	mov	r2, r0
 80195fa:	460b      	mov	r3, r1
 80195fc:	4630      	mov	r0, r6
 80195fe:	4639      	mov	r1, r7
 8019600:	f7ea fe52 	bl	80042a8 <__aeabi_dsub>
 8019604:	9e02      	ldr	r6, [sp, #8]
 8019606:	9f01      	ldr	r7, [sp, #4]
 8019608:	3630      	adds	r6, #48	; 0x30
 801960a:	f805 6b01 	strb.w	r6, [r5], #1
 801960e:	9e00      	ldr	r6, [sp, #0]
 8019610:	1bae      	subs	r6, r5, r6
 8019612:	42b7      	cmp	r7, r6
 8019614:	4602      	mov	r2, r0
 8019616:	460b      	mov	r3, r1
 8019618:	d137      	bne.n	801968a <_dtoa_r+0x6f2>
 801961a:	f7ea fe47 	bl	80042ac <__adddf3>
 801961e:	4642      	mov	r2, r8
 8019620:	464b      	mov	r3, r9
 8019622:	4606      	mov	r6, r0
 8019624:	460f      	mov	r7, r1
 8019626:	f7eb fa87 	bl	8004b38 <__aeabi_dcmpgt>
 801962a:	b9c8      	cbnz	r0, 8019660 <_dtoa_r+0x6c8>
 801962c:	4642      	mov	r2, r8
 801962e:	464b      	mov	r3, r9
 8019630:	4630      	mov	r0, r6
 8019632:	4639      	mov	r1, r7
 8019634:	f7eb fa58 	bl	8004ae8 <__aeabi_dcmpeq>
 8019638:	b110      	cbz	r0, 8019640 <_dtoa_r+0x6a8>
 801963a:	9b02      	ldr	r3, [sp, #8]
 801963c:	07d9      	lsls	r1, r3, #31
 801963e:	d40f      	bmi.n	8019660 <_dtoa_r+0x6c8>
 8019640:	4620      	mov	r0, r4
 8019642:	4659      	mov	r1, fp
 8019644:	f001 f90b 	bl	801a85e <_Bfree>
 8019648:	2300      	movs	r3, #0
 801964a:	702b      	strb	r3, [r5, #0]
 801964c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801964e:	f10a 0001 	add.w	r0, sl, #1
 8019652:	6018      	str	r0, [r3, #0]
 8019654:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019656:	2b00      	cmp	r3, #0
 8019658:	f43f acd9 	beq.w	801900e <_dtoa_r+0x76>
 801965c:	601d      	str	r5, [r3, #0]
 801965e:	e4d6      	b.n	801900e <_dtoa_r+0x76>
 8019660:	f8cd a01c 	str.w	sl, [sp, #28]
 8019664:	462b      	mov	r3, r5
 8019666:	461d      	mov	r5, r3
 8019668:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801966c:	2a39      	cmp	r2, #57	; 0x39
 801966e:	d108      	bne.n	8019682 <_dtoa_r+0x6ea>
 8019670:	9a00      	ldr	r2, [sp, #0]
 8019672:	429a      	cmp	r2, r3
 8019674:	d1f7      	bne.n	8019666 <_dtoa_r+0x6ce>
 8019676:	9a07      	ldr	r2, [sp, #28]
 8019678:	9900      	ldr	r1, [sp, #0]
 801967a:	3201      	adds	r2, #1
 801967c:	9207      	str	r2, [sp, #28]
 801967e:	2230      	movs	r2, #48	; 0x30
 8019680:	700a      	strb	r2, [r1, #0]
 8019682:	781a      	ldrb	r2, [r3, #0]
 8019684:	3201      	adds	r2, #1
 8019686:	701a      	strb	r2, [r3, #0]
 8019688:	e78d      	b.n	80195a6 <_dtoa_r+0x60e>
 801968a:	4b7f      	ldr	r3, [pc, #508]	; (8019888 <_dtoa_r+0x8f0>)
 801968c:	2200      	movs	r2, #0
 801968e:	f7ea ffc3 	bl	8004618 <__aeabi_dmul>
 8019692:	2200      	movs	r2, #0
 8019694:	2300      	movs	r3, #0
 8019696:	4606      	mov	r6, r0
 8019698:	460f      	mov	r7, r1
 801969a:	f7eb fa25 	bl	8004ae8 <__aeabi_dcmpeq>
 801969e:	2800      	cmp	r0, #0
 80196a0:	d09b      	beq.n	80195da <_dtoa_r+0x642>
 80196a2:	e7cd      	b.n	8019640 <_dtoa_r+0x6a8>
 80196a4:	9a08      	ldr	r2, [sp, #32]
 80196a6:	2a00      	cmp	r2, #0
 80196a8:	f000 80c4 	beq.w	8019834 <_dtoa_r+0x89c>
 80196ac:	9a05      	ldr	r2, [sp, #20]
 80196ae:	2a01      	cmp	r2, #1
 80196b0:	f300 80a8 	bgt.w	8019804 <_dtoa_r+0x86c>
 80196b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80196b6:	2a00      	cmp	r2, #0
 80196b8:	f000 80a0 	beq.w	80197fc <_dtoa_r+0x864>
 80196bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80196c0:	9e06      	ldr	r6, [sp, #24]
 80196c2:	4645      	mov	r5, r8
 80196c4:	9a04      	ldr	r2, [sp, #16]
 80196c6:	2101      	movs	r1, #1
 80196c8:	441a      	add	r2, r3
 80196ca:	4620      	mov	r0, r4
 80196cc:	4498      	add	r8, r3
 80196ce:	9204      	str	r2, [sp, #16]
 80196d0:	f001 f9b2 	bl	801aa38 <__i2b>
 80196d4:	4607      	mov	r7, r0
 80196d6:	2d00      	cmp	r5, #0
 80196d8:	dd0b      	ble.n	80196f2 <_dtoa_r+0x75a>
 80196da:	9b04      	ldr	r3, [sp, #16]
 80196dc:	2b00      	cmp	r3, #0
 80196de:	dd08      	ble.n	80196f2 <_dtoa_r+0x75a>
 80196e0:	42ab      	cmp	r3, r5
 80196e2:	9a04      	ldr	r2, [sp, #16]
 80196e4:	bfa8      	it	ge
 80196e6:	462b      	movge	r3, r5
 80196e8:	eba8 0803 	sub.w	r8, r8, r3
 80196ec:	1aed      	subs	r5, r5, r3
 80196ee:	1ad3      	subs	r3, r2, r3
 80196f0:	9304      	str	r3, [sp, #16]
 80196f2:	9b06      	ldr	r3, [sp, #24]
 80196f4:	b1fb      	cbz	r3, 8019736 <_dtoa_r+0x79e>
 80196f6:	9b08      	ldr	r3, [sp, #32]
 80196f8:	2b00      	cmp	r3, #0
 80196fa:	f000 809f 	beq.w	801983c <_dtoa_r+0x8a4>
 80196fe:	2e00      	cmp	r6, #0
 8019700:	dd11      	ble.n	8019726 <_dtoa_r+0x78e>
 8019702:	4639      	mov	r1, r7
 8019704:	4632      	mov	r2, r6
 8019706:	4620      	mov	r0, r4
 8019708:	f001 fa52 	bl	801abb0 <__pow5mult>
 801970c:	465a      	mov	r2, fp
 801970e:	4601      	mov	r1, r0
 8019710:	4607      	mov	r7, r0
 8019712:	4620      	mov	r0, r4
 8019714:	f001 f9a6 	bl	801aa64 <__multiply>
 8019718:	4659      	mov	r1, fp
 801971a:	9007      	str	r0, [sp, #28]
 801971c:	4620      	mov	r0, r4
 801971e:	f001 f89e 	bl	801a85e <_Bfree>
 8019722:	9b07      	ldr	r3, [sp, #28]
 8019724:	469b      	mov	fp, r3
 8019726:	9b06      	ldr	r3, [sp, #24]
 8019728:	1b9a      	subs	r2, r3, r6
 801972a:	d004      	beq.n	8019736 <_dtoa_r+0x79e>
 801972c:	4659      	mov	r1, fp
 801972e:	4620      	mov	r0, r4
 8019730:	f001 fa3e 	bl	801abb0 <__pow5mult>
 8019734:	4683      	mov	fp, r0
 8019736:	2101      	movs	r1, #1
 8019738:	4620      	mov	r0, r4
 801973a:	f001 f97d 	bl	801aa38 <__i2b>
 801973e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019740:	2b00      	cmp	r3, #0
 8019742:	4606      	mov	r6, r0
 8019744:	dd7c      	ble.n	8019840 <_dtoa_r+0x8a8>
 8019746:	461a      	mov	r2, r3
 8019748:	4601      	mov	r1, r0
 801974a:	4620      	mov	r0, r4
 801974c:	f001 fa30 	bl	801abb0 <__pow5mult>
 8019750:	9b05      	ldr	r3, [sp, #20]
 8019752:	2b01      	cmp	r3, #1
 8019754:	4606      	mov	r6, r0
 8019756:	dd76      	ble.n	8019846 <_dtoa_r+0x8ae>
 8019758:	2300      	movs	r3, #0
 801975a:	9306      	str	r3, [sp, #24]
 801975c:	6933      	ldr	r3, [r6, #16]
 801975e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8019762:	6918      	ldr	r0, [r3, #16]
 8019764:	f001 f918 	bl	801a998 <__hi0bits>
 8019768:	f1c0 0020 	rsb	r0, r0, #32
 801976c:	9b04      	ldr	r3, [sp, #16]
 801976e:	4418      	add	r0, r3
 8019770:	f010 001f 	ands.w	r0, r0, #31
 8019774:	f000 8086 	beq.w	8019884 <_dtoa_r+0x8ec>
 8019778:	f1c0 0320 	rsb	r3, r0, #32
 801977c:	2b04      	cmp	r3, #4
 801977e:	dd7f      	ble.n	8019880 <_dtoa_r+0x8e8>
 8019780:	f1c0 001c 	rsb	r0, r0, #28
 8019784:	9b04      	ldr	r3, [sp, #16]
 8019786:	4403      	add	r3, r0
 8019788:	4480      	add	r8, r0
 801978a:	4405      	add	r5, r0
 801978c:	9304      	str	r3, [sp, #16]
 801978e:	f1b8 0f00 	cmp.w	r8, #0
 8019792:	dd05      	ble.n	80197a0 <_dtoa_r+0x808>
 8019794:	4659      	mov	r1, fp
 8019796:	4642      	mov	r2, r8
 8019798:	4620      	mov	r0, r4
 801979a:	f001 fa49 	bl	801ac30 <__lshift>
 801979e:	4683      	mov	fp, r0
 80197a0:	9b04      	ldr	r3, [sp, #16]
 80197a2:	2b00      	cmp	r3, #0
 80197a4:	dd05      	ble.n	80197b2 <_dtoa_r+0x81a>
 80197a6:	4631      	mov	r1, r6
 80197a8:	461a      	mov	r2, r3
 80197aa:	4620      	mov	r0, r4
 80197ac:	f001 fa40 	bl	801ac30 <__lshift>
 80197b0:	4606      	mov	r6, r0
 80197b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	d069      	beq.n	801988c <_dtoa_r+0x8f4>
 80197b8:	4631      	mov	r1, r6
 80197ba:	4658      	mov	r0, fp
 80197bc:	f001 faa4 	bl	801ad08 <__mcmp>
 80197c0:	2800      	cmp	r0, #0
 80197c2:	da63      	bge.n	801988c <_dtoa_r+0x8f4>
 80197c4:	2300      	movs	r3, #0
 80197c6:	4659      	mov	r1, fp
 80197c8:	220a      	movs	r2, #10
 80197ca:	4620      	mov	r0, r4
 80197cc:	f001 f850 	bl	801a870 <__multadd>
 80197d0:	9b08      	ldr	r3, [sp, #32]
 80197d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80197d6:	4683      	mov	fp, r0
 80197d8:	2b00      	cmp	r3, #0
 80197da:	f000 818e 	beq.w	8019afa <_dtoa_r+0xb62>
 80197de:	4639      	mov	r1, r7
 80197e0:	2300      	movs	r3, #0
 80197e2:	220a      	movs	r2, #10
 80197e4:	4620      	mov	r0, r4
 80197e6:	f001 f843 	bl	801a870 <__multadd>
 80197ea:	f1b9 0f00 	cmp.w	r9, #0
 80197ee:	4607      	mov	r7, r0
 80197f0:	f300 808e 	bgt.w	8019910 <_dtoa_r+0x978>
 80197f4:	9b05      	ldr	r3, [sp, #20]
 80197f6:	2b02      	cmp	r3, #2
 80197f8:	dc50      	bgt.n	801989c <_dtoa_r+0x904>
 80197fa:	e089      	b.n	8019910 <_dtoa_r+0x978>
 80197fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80197fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8019802:	e75d      	b.n	80196c0 <_dtoa_r+0x728>
 8019804:	9b01      	ldr	r3, [sp, #4]
 8019806:	1e5e      	subs	r6, r3, #1
 8019808:	9b06      	ldr	r3, [sp, #24]
 801980a:	42b3      	cmp	r3, r6
 801980c:	bfbf      	itttt	lt
 801980e:	9b06      	ldrlt	r3, [sp, #24]
 8019810:	9606      	strlt	r6, [sp, #24]
 8019812:	1af2      	sublt	r2, r6, r3
 8019814:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8019816:	bfb6      	itet	lt
 8019818:	189b      	addlt	r3, r3, r2
 801981a:	1b9e      	subge	r6, r3, r6
 801981c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801981e:	9b01      	ldr	r3, [sp, #4]
 8019820:	bfb8      	it	lt
 8019822:	2600      	movlt	r6, #0
 8019824:	2b00      	cmp	r3, #0
 8019826:	bfb5      	itete	lt
 8019828:	eba8 0503 	sublt.w	r5, r8, r3
 801982c:	9b01      	ldrge	r3, [sp, #4]
 801982e:	2300      	movlt	r3, #0
 8019830:	4645      	movge	r5, r8
 8019832:	e747      	b.n	80196c4 <_dtoa_r+0x72c>
 8019834:	9e06      	ldr	r6, [sp, #24]
 8019836:	9f08      	ldr	r7, [sp, #32]
 8019838:	4645      	mov	r5, r8
 801983a:	e74c      	b.n	80196d6 <_dtoa_r+0x73e>
 801983c:	9a06      	ldr	r2, [sp, #24]
 801983e:	e775      	b.n	801972c <_dtoa_r+0x794>
 8019840:	9b05      	ldr	r3, [sp, #20]
 8019842:	2b01      	cmp	r3, #1
 8019844:	dc18      	bgt.n	8019878 <_dtoa_r+0x8e0>
 8019846:	9b02      	ldr	r3, [sp, #8]
 8019848:	b9b3      	cbnz	r3, 8019878 <_dtoa_r+0x8e0>
 801984a:	9b03      	ldr	r3, [sp, #12]
 801984c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019850:	b9a3      	cbnz	r3, 801987c <_dtoa_r+0x8e4>
 8019852:	9b03      	ldr	r3, [sp, #12]
 8019854:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019858:	0d1b      	lsrs	r3, r3, #20
 801985a:	051b      	lsls	r3, r3, #20
 801985c:	b12b      	cbz	r3, 801986a <_dtoa_r+0x8d2>
 801985e:	9b04      	ldr	r3, [sp, #16]
 8019860:	3301      	adds	r3, #1
 8019862:	9304      	str	r3, [sp, #16]
 8019864:	f108 0801 	add.w	r8, r8, #1
 8019868:	2301      	movs	r3, #1
 801986a:	9306      	str	r3, [sp, #24]
 801986c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801986e:	2b00      	cmp	r3, #0
 8019870:	f47f af74 	bne.w	801975c <_dtoa_r+0x7c4>
 8019874:	2001      	movs	r0, #1
 8019876:	e779      	b.n	801976c <_dtoa_r+0x7d4>
 8019878:	2300      	movs	r3, #0
 801987a:	e7f6      	b.n	801986a <_dtoa_r+0x8d2>
 801987c:	9b02      	ldr	r3, [sp, #8]
 801987e:	e7f4      	b.n	801986a <_dtoa_r+0x8d2>
 8019880:	d085      	beq.n	801978e <_dtoa_r+0x7f6>
 8019882:	4618      	mov	r0, r3
 8019884:	301c      	adds	r0, #28
 8019886:	e77d      	b.n	8019784 <_dtoa_r+0x7ec>
 8019888:	40240000 	.word	0x40240000
 801988c:	9b01      	ldr	r3, [sp, #4]
 801988e:	2b00      	cmp	r3, #0
 8019890:	dc38      	bgt.n	8019904 <_dtoa_r+0x96c>
 8019892:	9b05      	ldr	r3, [sp, #20]
 8019894:	2b02      	cmp	r3, #2
 8019896:	dd35      	ble.n	8019904 <_dtoa_r+0x96c>
 8019898:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801989c:	f1b9 0f00 	cmp.w	r9, #0
 80198a0:	d10d      	bne.n	80198be <_dtoa_r+0x926>
 80198a2:	4631      	mov	r1, r6
 80198a4:	464b      	mov	r3, r9
 80198a6:	2205      	movs	r2, #5
 80198a8:	4620      	mov	r0, r4
 80198aa:	f000 ffe1 	bl	801a870 <__multadd>
 80198ae:	4601      	mov	r1, r0
 80198b0:	4606      	mov	r6, r0
 80198b2:	4658      	mov	r0, fp
 80198b4:	f001 fa28 	bl	801ad08 <__mcmp>
 80198b8:	2800      	cmp	r0, #0
 80198ba:	f73f adbe 	bgt.w	801943a <_dtoa_r+0x4a2>
 80198be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198c0:	9d00      	ldr	r5, [sp, #0]
 80198c2:	ea6f 0a03 	mvn.w	sl, r3
 80198c6:	f04f 0800 	mov.w	r8, #0
 80198ca:	4631      	mov	r1, r6
 80198cc:	4620      	mov	r0, r4
 80198ce:	f000 ffc6 	bl	801a85e <_Bfree>
 80198d2:	2f00      	cmp	r7, #0
 80198d4:	f43f aeb4 	beq.w	8019640 <_dtoa_r+0x6a8>
 80198d8:	f1b8 0f00 	cmp.w	r8, #0
 80198dc:	d005      	beq.n	80198ea <_dtoa_r+0x952>
 80198de:	45b8      	cmp	r8, r7
 80198e0:	d003      	beq.n	80198ea <_dtoa_r+0x952>
 80198e2:	4641      	mov	r1, r8
 80198e4:	4620      	mov	r0, r4
 80198e6:	f000 ffba 	bl	801a85e <_Bfree>
 80198ea:	4639      	mov	r1, r7
 80198ec:	4620      	mov	r0, r4
 80198ee:	f000 ffb6 	bl	801a85e <_Bfree>
 80198f2:	e6a5      	b.n	8019640 <_dtoa_r+0x6a8>
 80198f4:	2600      	movs	r6, #0
 80198f6:	4637      	mov	r7, r6
 80198f8:	e7e1      	b.n	80198be <_dtoa_r+0x926>
 80198fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80198fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8019900:	4637      	mov	r7, r6
 8019902:	e59a      	b.n	801943a <_dtoa_r+0x4a2>
 8019904:	9b08      	ldr	r3, [sp, #32]
 8019906:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801990a:	2b00      	cmp	r3, #0
 801990c:	f000 80fc 	beq.w	8019b08 <_dtoa_r+0xb70>
 8019910:	2d00      	cmp	r5, #0
 8019912:	dd05      	ble.n	8019920 <_dtoa_r+0x988>
 8019914:	4639      	mov	r1, r7
 8019916:	462a      	mov	r2, r5
 8019918:	4620      	mov	r0, r4
 801991a:	f001 f989 	bl	801ac30 <__lshift>
 801991e:	4607      	mov	r7, r0
 8019920:	9b06      	ldr	r3, [sp, #24]
 8019922:	2b00      	cmp	r3, #0
 8019924:	d05b      	beq.n	80199de <_dtoa_r+0xa46>
 8019926:	6879      	ldr	r1, [r7, #4]
 8019928:	4620      	mov	r0, r4
 801992a:	f000 ff73 	bl	801a814 <_Balloc>
 801992e:	4605      	mov	r5, r0
 8019930:	b920      	cbnz	r0, 801993c <_dtoa_r+0x9a4>
 8019932:	4b80      	ldr	r3, [pc, #512]	; (8019b34 <_dtoa_r+0xb9c>)
 8019934:	4602      	mov	r2, r0
 8019936:	f240 21ea 	movw	r1, #746	; 0x2ea
 801993a:	e45b      	b.n	80191f4 <_dtoa_r+0x25c>
 801993c:	693a      	ldr	r2, [r7, #16]
 801993e:	3202      	adds	r2, #2
 8019940:	0092      	lsls	r2, r2, #2
 8019942:	f107 010c 	add.w	r1, r7, #12
 8019946:	300c      	adds	r0, #12
 8019948:	f7fb fdd4 	bl	80154f4 <memcpy>
 801994c:	2201      	movs	r2, #1
 801994e:	4629      	mov	r1, r5
 8019950:	4620      	mov	r0, r4
 8019952:	f001 f96d 	bl	801ac30 <__lshift>
 8019956:	9b00      	ldr	r3, [sp, #0]
 8019958:	3301      	adds	r3, #1
 801995a:	9301      	str	r3, [sp, #4]
 801995c:	9b00      	ldr	r3, [sp, #0]
 801995e:	444b      	add	r3, r9
 8019960:	9307      	str	r3, [sp, #28]
 8019962:	9b02      	ldr	r3, [sp, #8]
 8019964:	f003 0301 	and.w	r3, r3, #1
 8019968:	46b8      	mov	r8, r7
 801996a:	9306      	str	r3, [sp, #24]
 801996c:	4607      	mov	r7, r0
 801996e:	9b01      	ldr	r3, [sp, #4]
 8019970:	4631      	mov	r1, r6
 8019972:	3b01      	subs	r3, #1
 8019974:	4658      	mov	r0, fp
 8019976:	9302      	str	r3, [sp, #8]
 8019978:	f7ff fa80 	bl	8018e7c <quorem>
 801997c:	4603      	mov	r3, r0
 801997e:	3330      	adds	r3, #48	; 0x30
 8019980:	9004      	str	r0, [sp, #16]
 8019982:	4641      	mov	r1, r8
 8019984:	4658      	mov	r0, fp
 8019986:	9308      	str	r3, [sp, #32]
 8019988:	f001 f9be 	bl	801ad08 <__mcmp>
 801998c:	463a      	mov	r2, r7
 801998e:	4681      	mov	r9, r0
 8019990:	4631      	mov	r1, r6
 8019992:	4620      	mov	r0, r4
 8019994:	f001 f9d4 	bl	801ad40 <__mdiff>
 8019998:	68c2      	ldr	r2, [r0, #12]
 801999a:	9b08      	ldr	r3, [sp, #32]
 801999c:	4605      	mov	r5, r0
 801999e:	bb02      	cbnz	r2, 80199e2 <_dtoa_r+0xa4a>
 80199a0:	4601      	mov	r1, r0
 80199a2:	4658      	mov	r0, fp
 80199a4:	f001 f9b0 	bl	801ad08 <__mcmp>
 80199a8:	9b08      	ldr	r3, [sp, #32]
 80199aa:	4602      	mov	r2, r0
 80199ac:	4629      	mov	r1, r5
 80199ae:	4620      	mov	r0, r4
 80199b0:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80199b4:	f000 ff53 	bl	801a85e <_Bfree>
 80199b8:	9b05      	ldr	r3, [sp, #20]
 80199ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80199bc:	9d01      	ldr	r5, [sp, #4]
 80199be:	ea43 0102 	orr.w	r1, r3, r2
 80199c2:	9b06      	ldr	r3, [sp, #24]
 80199c4:	430b      	orrs	r3, r1
 80199c6:	9b08      	ldr	r3, [sp, #32]
 80199c8:	d10d      	bne.n	80199e6 <_dtoa_r+0xa4e>
 80199ca:	2b39      	cmp	r3, #57	; 0x39
 80199cc:	d029      	beq.n	8019a22 <_dtoa_r+0xa8a>
 80199ce:	f1b9 0f00 	cmp.w	r9, #0
 80199d2:	dd01      	ble.n	80199d8 <_dtoa_r+0xa40>
 80199d4:	9b04      	ldr	r3, [sp, #16]
 80199d6:	3331      	adds	r3, #49	; 0x31
 80199d8:	9a02      	ldr	r2, [sp, #8]
 80199da:	7013      	strb	r3, [r2, #0]
 80199dc:	e775      	b.n	80198ca <_dtoa_r+0x932>
 80199de:	4638      	mov	r0, r7
 80199e0:	e7b9      	b.n	8019956 <_dtoa_r+0x9be>
 80199e2:	2201      	movs	r2, #1
 80199e4:	e7e2      	b.n	80199ac <_dtoa_r+0xa14>
 80199e6:	f1b9 0f00 	cmp.w	r9, #0
 80199ea:	db06      	blt.n	80199fa <_dtoa_r+0xa62>
 80199ec:	9905      	ldr	r1, [sp, #20]
 80199ee:	ea41 0909 	orr.w	r9, r1, r9
 80199f2:	9906      	ldr	r1, [sp, #24]
 80199f4:	ea59 0101 	orrs.w	r1, r9, r1
 80199f8:	d120      	bne.n	8019a3c <_dtoa_r+0xaa4>
 80199fa:	2a00      	cmp	r2, #0
 80199fc:	ddec      	ble.n	80199d8 <_dtoa_r+0xa40>
 80199fe:	4659      	mov	r1, fp
 8019a00:	2201      	movs	r2, #1
 8019a02:	4620      	mov	r0, r4
 8019a04:	9301      	str	r3, [sp, #4]
 8019a06:	f001 f913 	bl	801ac30 <__lshift>
 8019a0a:	4631      	mov	r1, r6
 8019a0c:	4683      	mov	fp, r0
 8019a0e:	f001 f97b 	bl	801ad08 <__mcmp>
 8019a12:	2800      	cmp	r0, #0
 8019a14:	9b01      	ldr	r3, [sp, #4]
 8019a16:	dc02      	bgt.n	8019a1e <_dtoa_r+0xa86>
 8019a18:	d1de      	bne.n	80199d8 <_dtoa_r+0xa40>
 8019a1a:	07da      	lsls	r2, r3, #31
 8019a1c:	d5dc      	bpl.n	80199d8 <_dtoa_r+0xa40>
 8019a1e:	2b39      	cmp	r3, #57	; 0x39
 8019a20:	d1d8      	bne.n	80199d4 <_dtoa_r+0xa3c>
 8019a22:	9a02      	ldr	r2, [sp, #8]
 8019a24:	2339      	movs	r3, #57	; 0x39
 8019a26:	7013      	strb	r3, [r2, #0]
 8019a28:	462b      	mov	r3, r5
 8019a2a:	461d      	mov	r5, r3
 8019a2c:	3b01      	subs	r3, #1
 8019a2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8019a32:	2a39      	cmp	r2, #57	; 0x39
 8019a34:	d050      	beq.n	8019ad8 <_dtoa_r+0xb40>
 8019a36:	3201      	adds	r2, #1
 8019a38:	701a      	strb	r2, [r3, #0]
 8019a3a:	e746      	b.n	80198ca <_dtoa_r+0x932>
 8019a3c:	2a00      	cmp	r2, #0
 8019a3e:	dd03      	ble.n	8019a48 <_dtoa_r+0xab0>
 8019a40:	2b39      	cmp	r3, #57	; 0x39
 8019a42:	d0ee      	beq.n	8019a22 <_dtoa_r+0xa8a>
 8019a44:	3301      	adds	r3, #1
 8019a46:	e7c7      	b.n	80199d8 <_dtoa_r+0xa40>
 8019a48:	9a01      	ldr	r2, [sp, #4]
 8019a4a:	9907      	ldr	r1, [sp, #28]
 8019a4c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8019a50:	428a      	cmp	r2, r1
 8019a52:	d02a      	beq.n	8019aaa <_dtoa_r+0xb12>
 8019a54:	4659      	mov	r1, fp
 8019a56:	2300      	movs	r3, #0
 8019a58:	220a      	movs	r2, #10
 8019a5a:	4620      	mov	r0, r4
 8019a5c:	f000 ff08 	bl	801a870 <__multadd>
 8019a60:	45b8      	cmp	r8, r7
 8019a62:	4683      	mov	fp, r0
 8019a64:	f04f 0300 	mov.w	r3, #0
 8019a68:	f04f 020a 	mov.w	r2, #10
 8019a6c:	4641      	mov	r1, r8
 8019a6e:	4620      	mov	r0, r4
 8019a70:	d107      	bne.n	8019a82 <_dtoa_r+0xaea>
 8019a72:	f000 fefd 	bl	801a870 <__multadd>
 8019a76:	4680      	mov	r8, r0
 8019a78:	4607      	mov	r7, r0
 8019a7a:	9b01      	ldr	r3, [sp, #4]
 8019a7c:	3301      	adds	r3, #1
 8019a7e:	9301      	str	r3, [sp, #4]
 8019a80:	e775      	b.n	801996e <_dtoa_r+0x9d6>
 8019a82:	f000 fef5 	bl	801a870 <__multadd>
 8019a86:	4639      	mov	r1, r7
 8019a88:	4680      	mov	r8, r0
 8019a8a:	2300      	movs	r3, #0
 8019a8c:	220a      	movs	r2, #10
 8019a8e:	4620      	mov	r0, r4
 8019a90:	f000 feee 	bl	801a870 <__multadd>
 8019a94:	4607      	mov	r7, r0
 8019a96:	e7f0      	b.n	8019a7a <_dtoa_r+0xae2>
 8019a98:	f1b9 0f00 	cmp.w	r9, #0
 8019a9c:	9a00      	ldr	r2, [sp, #0]
 8019a9e:	bfcc      	ite	gt
 8019aa0:	464d      	movgt	r5, r9
 8019aa2:	2501      	movle	r5, #1
 8019aa4:	4415      	add	r5, r2
 8019aa6:	f04f 0800 	mov.w	r8, #0
 8019aaa:	4659      	mov	r1, fp
 8019aac:	2201      	movs	r2, #1
 8019aae:	4620      	mov	r0, r4
 8019ab0:	9301      	str	r3, [sp, #4]
 8019ab2:	f001 f8bd 	bl	801ac30 <__lshift>
 8019ab6:	4631      	mov	r1, r6
 8019ab8:	4683      	mov	fp, r0
 8019aba:	f001 f925 	bl	801ad08 <__mcmp>
 8019abe:	2800      	cmp	r0, #0
 8019ac0:	dcb2      	bgt.n	8019a28 <_dtoa_r+0xa90>
 8019ac2:	d102      	bne.n	8019aca <_dtoa_r+0xb32>
 8019ac4:	9b01      	ldr	r3, [sp, #4]
 8019ac6:	07db      	lsls	r3, r3, #31
 8019ac8:	d4ae      	bmi.n	8019a28 <_dtoa_r+0xa90>
 8019aca:	462b      	mov	r3, r5
 8019acc:	461d      	mov	r5, r3
 8019ace:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019ad2:	2a30      	cmp	r2, #48	; 0x30
 8019ad4:	d0fa      	beq.n	8019acc <_dtoa_r+0xb34>
 8019ad6:	e6f8      	b.n	80198ca <_dtoa_r+0x932>
 8019ad8:	9a00      	ldr	r2, [sp, #0]
 8019ada:	429a      	cmp	r2, r3
 8019adc:	d1a5      	bne.n	8019a2a <_dtoa_r+0xa92>
 8019ade:	f10a 0a01 	add.w	sl, sl, #1
 8019ae2:	2331      	movs	r3, #49	; 0x31
 8019ae4:	e779      	b.n	80199da <_dtoa_r+0xa42>
 8019ae6:	4b14      	ldr	r3, [pc, #80]	; (8019b38 <_dtoa_r+0xba0>)
 8019ae8:	f7ff bab1 	b.w	801904e <_dtoa_r+0xb6>
 8019aec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019aee:	2b00      	cmp	r3, #0
 8019af0:	f47f aa93 	bne.w	801901a <_dtoa_r+0x82>
 8019af4:	4b11      	ldr	r3, [pc, #68]	; (8019b3c <_dtoa_r+0xba4>)
 8019af6:	f7ff baaa 	b.w	801904e <_dtoa_r+0xb6>
 8019afa:	f1b9 0f00 	cmp.w	r9, #0
 8019afe:	dc03      	bgt.n	8019b08 <_dtoa_r+0xb70>
 8019b00:	9b05      	ldr	r3, [sp, #20]
 8019b02:	2b02      	cmp	r3, #2
 8019b04:	f73f aeca 	bgt.w	801989c <_dtoa_r+0x904>
 8019b08:	9d00      	ldr	r5, [sp, #0]
 8019b0a:	4631      	mov	r1, r6
 8019b0c:	4658      	mov	r0, fp
 8019b0e:	f7ff f9b5 	bl	8018e7c <quorem>
 8019b12:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8019b16:	f805 3b01 	strb.w	r3, [r5], #1
 8019b1a:	9a00      	ldr	r2, [sp, #0]
 8019b1c:	1aaa      	subs	r2, r5, r2
 8019b1e:	4591      	cmp	r9, r2
 8019b20:	ddba      	ble.n	8019a98 <_dtoa_r+0xb00>
 8019b22:	4659      	mov	r1, fp
 8019b24:	2300      	movs	r3, #0
 8019b26:	220a      	movs	r2, #10
 8019b28:	4620      	mov	r0, r4
 8019b2a:	f000 fea1 	bl	801a870 <__multadd>
 8019b2e:	4683      	mov	fp, r0
 8019b30:	e7eb      	b.n	8019b0a <_dtoa_r+0xb72>
 8019b32:	bf00      	nop
 8019b34:	0801e88f 	.word	0x0801e88f
 8019b38:	0801e71a 	.word	0x0801e71a
 8019b3c:	0801e886 	.word	0x0801e886

08019b40 <__errno>:
 8019b40:	4b01      	ldr	r3, [pc, #4]	; (8019b48 <__errno+0x8>)
 8019b42:	6818      	ldr	r0, [r3, #0]
 8019b44:	4770      	bx	lr
 8019b46:	bf00      	nop
 8019b48:	20003880 	.word	0x20003880

08019b4c <__sflush_r>:
 8019b4c:	898b      	ldrh	r3, [r1, #12]
 8019b4e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b56:	4605      	mov	r5, r0
 8019b58:	0718      	lsls	r0, r3, #28
 8019b5a:	460c      	mov	r4, r1
 8019b5c:	d45f      	bmi.n	8019c1e <__sflush_r+0xd2>
 8019b5e:	684b      	ldr	r3, [r1, #4]
 8019b60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8019b64:	2b00      	cmp	r3, #0
 8019b66:	818a      	strh	r2, [r1, #12]
 8019b68:	dc05      	bgt.n	8019b76 <__sflush_r+0x2a>
 8019b6a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8019b6c:	2b00      	cmp	r3, #0
 8019b6e:	dc02      	bgt.n	8019b76 <__sflush_r+0x2a>
 8019b70:	2000      	movs	r0, #0
 8019b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019b78:	2e00      	cmp	r6, #0
 8019b7a:	d0f9      	beq.n	8019b70 <__sflush_r+0x24>
 8019b7c:	2300      	movs	r3, #0
 8019b7e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019b82:	682f      	ldr	r7, [r5, #0]
 8019b84:	602b      	str	r3, [r5, #0]
 8019b86:	d036      	beq.n	8019bf6 <__sflush_r+0xaa>
 8019b88:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8019b8a:	89a3      	ldrh	r3, [r4, #12]
 8019b8c:	075a      	lsls	r2, r3, #29
 8019b8e:	d505      	bpl.n	8019b9c <__sflush_r+0x50>
 8019b90:	6863      	ldr	r3, [r4, #4]
 8019b92:	1ac0      	subs	r0, r0, r3
 8019b94:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019b96:	b10b      	cbz	r3, 8019b9c <__sflush_r+0x50>
 8019b98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019b9a:	1ac0      	subs	r0, r0, r3
 8019b9c:	2300      	movs	r3, #0
 8019b9e:	4602      	mov	r2, r0
 8019ba0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019ba2:	69e1      	ldr	r1, [r4, #28]
 8019ba4:	4628      	mov	r0, r5
 8019ba6:	47b0      	blx	r6
 8019ba8:	1c43      	adds	r3, r0, #1
 8019baa:	89a3      	ldrh	r3, [r4, #12]
 8019bac:	d106      	bne.n	8019bbc <__sflush_r+0x70>
 8019bae:	6829      	ldr	r1, [r5, #0]
 8019bb0:	291d      	cmp	r1, #29
 8019bb2:	d830      	bhi.n	8019c16 <__sflush_r+0xca>
 8019bb4:	4a2b      	ldr	r2, [pc, #172]	; (8019c64 <__sflush_r+0x118>)
 8019bb6:	40ca      	lsrs	r2, r1
 8019bb8:	07d6      	lsls	r6, r2, #31
 8019bba:	d52c      	bpl.n	8019c16 <__sflush_r+0xca>
 8019bbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019bc0:	b21b      	sxth	r3, r3
 8019bc2:	2200      	movs	r2, #0
 8019bc4:	6062      	str	r2, [r4, #4]
 8019bc6:	04d9      	lsls	r1, r3, #19
 8019bc8:	6922      	ldr	r2, [r4, #16]
 8019bca:	81a3      	strh	r3, [r4, #12]
 8019bcc:	6022      	str	r2, [r4, #0]
 8019bce:	d504      	bpl.n	8019bda <__sflush_r+0x8e>
 8019bd0:	1c42      	adds	r2, r0, #1
 8019bd2:	d101      	bne.n	8019bd8 <__sflush_r+0x8c>
 8019bd4:	682b      	ldr	r3, [r5, #0]
 8019bd6:	b903      	cbnz	r3, 8019bda <__sflush_r+0x8e>
 8019bd8:	6520      	str	r0, [r4, #80]	; 0x50
 8019bda:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019bdc:	602f      	str	r7, [r5, #0]
 8019bde:	2900      	cmp	r1, #0
 8019be0:	d0c6      	beq.n	8019b70 <__sflush_r+0x24>
 8019be2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8019be6:	4299      	cmp	r1, r3
 8019be8:	d002      	beq.n	8019bf0 <__sflush_r+0xa4>
 8019bea:	4628      	mov	r0, r5
 8019bec:	f000 f938 	bl	8019e60 <_free_r>
 8019bf0:	2000      	movs	r0, #0
 8019bf2:	6320      	str	r0, [r4, #48]	; 0x30
 8019bf4:	e7bd      	b.n	8019b72 <__sflush_r+0x26>
 8019bf6:	69e1      	ldr	r1, [r4, #28]
 8019bf8:	2301      	movs	r3, #1
 8019bfa:	4628      	mov	r0, r5
 8019bfc:	47b0      	blx	r6
 8019bfe:	1c41      	adds	r1, r0, #1
 8019c00:	d1c3      	bne.n	8019b8a <__sflush_r+0x3e>
 8019c02:	682b      	ldr	r3, [r5, #0]
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	d0c0      	beq.n	8019b8a <__sflush_r+0x3e>
 8019c08:	2b1d      	cmp	r3, #29
 8019c0a:	d001      	beq.n	8019c10 <__sflush_r+0xc4>
 8019c0c:	2b16      	cmp	r3, #22
 8019c0e:	d101      	bne.n	8019c14 <__sflush_r+0xc8>
 8019c10:	602f      	str	r7, [r5, #0]
 8019c12:	e7ad      	b.n	8019b70 <__sflush_r+0x24>
 8019c14:	89a3      	ldrh	r3, [r4, #12]
 8019c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019c1a:	81a3      	strh	r3, [r4, #12]
 8019c1c:	e7a9      	b.n	8019b72 <__sflush_r+0x26>
 8019c1e:	690f      	ldr	r7, [r1, #16]
 8019c20:	2f00      	cmp	r7, #0
 8019c22:	d0a5      	beq.n	8019b70 <__sflush_r+0x24>
 8019c24:	079b      	lsls	r3, r3, #30
 8019c26:	680e      	ldr	r6, [r1, #0]
 8019c28:	bf08      	it	eq
 8019c2a:	694b      	ldreq	r3, [r1, #20]
 8019c2c:	600f      	str	r7, [r1, #0]
 8019c2e:	bf18      	it	ne
 8019c30:	2300      	movne	r3, #0
 8019c32:	eba6 0807 	sub.w	r8, r6, r7
 8019c36:	608b      	str	r3, [r1, #8]
 8019c38:	f1b8 0f00 	cmp.w	r8, #0
 8019c3c:	dd98      	ble.n	8019b70 <__sflush_r+0x24>
 8019c3e:	69e1      	ldr	r1, [r4, #28]
 8019c40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8019c42:	4643      	mov	r3, r8
 8019c44:	463a      	mov	r2, r7
 8019c46:	4628      	mov	r0, r5
 8019c48:	47b0      	blx	r6
 8019c4a:	2800      	cmp	r0, #0
 8019c4c:	dc06      	bgt.n	8019c5c <__sflush_r+0x110>
 8019c4e:	89a3      	ldrh	r3, [r4, #12]
 8019c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019c54:	81a3      	strh	r3, [r4, #12]
 8019c56:	f04f 30ff 	mov.w	r0, #4294967295
 8019c5a:	e78a      	b.n	8019b72 <__sflush_r+0x26>
 8019c5c:	4407      	add	r7, r0
 8019c5e:	eba8 0800 	sub.w	r8, r8, r0
 8019c62:	e7e9      	b.n	8019c38 <__sflush_r+0xec>
 8019c64:	20400001 	.word	0x20400001

08019c68 <_fflush_r>:
 8019c68:	b538      	push	{r3, r4, r5, lr}
 8019c6a:	460c      	mov	r4, r1
 8019c6c:	4605      	mov	r5, r0
 8019c6e:	b118      	cbz	r0, 8019c78 <_fflush_r+0x10>
 8019c70:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8019c72:	b90b      	cbnz	r3, 8019c78 <_fflush_r+0x10>
 8019c74:	f000 f864 	bl	8019d40 <__sinit>
 8019c78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019c7c:	b1bb      	cbz	r3, 8019cae <_fflush_r+0x46>
 8019c7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019c80:	07d0      	lsls	r0, r2, #31
 8019c82:	d404      	bmi.n	8019c8e <_fflush_r+0x26>
 8019c84:	0599      	lsls	r1, r3, #22
 8019c86:	d402      	bmi.n	8019c8e <_fflush_r+0x26>
 8019c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019c8a:	f000 fd43 	bl	801a714 <__retarget_lock_acquire_recursive>
 8019c8e:	4628      	mov	r0, r5
 8019c90:	4621      	mov	r1, r4
 8019c92:	f7ff ff5b 	bl	8019b4c <__sflush_r>
 8019c96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019c98:	07da      	lsls	r2, r3, #31
 8019c9a:	4605      	mov	r5, r0
 8019c9c:	d405      	bmi.n	8019caa <_fflush_r+0x42>
 8019c9e:	89a3      	ldrh	r3, [r4, #12]
 8019ca0:	059b      	lsls	r3, r3, #22
 8019ca2:	d402      	bmi.n	8019caa <_fflush_r+0x42>
 8019ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019ca6:	f000 fd36 	bl	801a716 <__retarget_lock_release_recursive>
 8019caa:	4628      	mov	r0, r5
 8019cac:	bd38      	pop	{r3, r4, r5, pc}
 8019cae:	461d      	mov	r5, r3
 8019cb0:	e7fb      	b.n	8019caa <_fflush_r+0x42>
	...

08019cb4 <std>:
 8019cb4:	2300      	movs	r3, #0
 8019cb6:	b510      	push	{r4, lr}
 8019cb8:	4604      	mov	r4, r0
 8019cba:	e9c0 3300 	strd	r3, r3, [r0]
 8019cbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019cc2:	6083      	str	r3, [r0, #8]
 8019cc4:	8181      	strh	r1, [r0, #12]
 8019cc6:	6643      	str	r3, [r0, #100]	; 0x64
 8019cc8:	81c2      	strh	r2, [r0, #14]
 8019cca:	6183      	str	r3, [r0, #24]
 8019ccc:	4619      	mov	r1, r3
 8019cce:	2208      	movs	r2, #8
 8019cd0:	305c      	adds	r0, #92	; 0x5c
 8019cd2:	f7fb fc1d 	bl	8015510 <memset>
 8019cd6:	4b07      	ldr	r3, [pc, #28]	; (8019cf4 <std+0x40>)
 8019cd8:	6223      	str	r3, [r4, #32]
 8019cda:	4b07      	ldr	r3, [pc, #28]	; (8019cf8 <std+0x44>)
 8019cdc:	6263      	str	r3, [r4, #36]	; 0x24
 8019cde:	4b07      	ldr	r3, [pc, #28]	; (8019cfc <std+0x48>)
 8019ce0:	62a3      	str	r3, [r4, #40]	; 0x28
 8019ce2:	4b07      	ldr	r3, [pc, #28]	; (8019d00 <std+0x4c>)
 8019ce4:	61e4      	str	r4, [r4, #28]
 8019ce6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019ce8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019cf0:	f000 bd0e 	b.w	801a710 <__retarget_lock_init_recursive>
 8019cf4:	0801b171 	.word	0x0801b171
 8019cf8:	0801b193 	.word	0x0801b193
 8019cfc:	0801b1cb 	.word	0x0801b1cb
 8019d00:	0801b1ef 	.word	0x0801b1ef

08019d04 <_cleanup_r>:
 8019d04:	4901      	ldr	r1, [pc, #4]	; (8019d0c <_cleanup_r+0x8>)
 8019d06:	f000 b96b 	b.w	8019fe0 <_fwalk_reent>
 8019d0a:	bf00      	nop
 8019d0c:	0801be59 	.word	0x0801be59

08019d10 <__sfp_lock_acquire>:
 8019d10:	4801      	ldr	r0, [pc, #4]	; (8019d18 <__sfp_lock_acquire+0x8>)
 8019d12:	f000 bcff 	b.w	801a714 <__retarget_lock_acquire_recursive>
 8019d16:	bf00      	nop
 8019d18:	200110b4 	.word	0x200110b4

08019d1c <__sfp_lock_release>:
 8019d1c:	4801      	ldr	r0, [pc, #4]	; (8019d24 <__sfp_lock_release+0x8>)
 8019d1e:	f000 bcfa 	b.w	801a716 <__retarget_lock_release_recursive>
 8019d22:	bf00      	nop
 8019d24:	200110b4 	.word	0x200110b4

08019d28 <__sinit_lock_acquire>:
 8019d28:	4801      	ldr	r0, [pc, #4]	; (8019d30 <__sinit_lock_acquire+0x8>)
 8019d2a:	f000 bcf3 	b.w	801a714 <__retarget_lock_acquire_recursive>
 8019d2e:	bf00      	nop
 8019d30:	200110af 	.word	0x200110af

08019d34 <__sinit_lock_release>:
 8019d34:	4801      	ldr	r0, [pc, #4]	; (8019d3c <__sinit_lock_release+0x8>)
 8019d36:	f000 bcee 	b.w	801a716 <__retarget_lock_release_recursive>
 8019d3a:	bf00      	nop
 8019d3c:	200110af 	.word	0x200110af

08019d40 <__sinit>:
 8019d40:	b510      	push	{r4, lr}
 8019d42:	4604      	mov	r4, r0
 8019d44:	f7ff fff0 	bl	8019d28 <__sinit_lock_acquire>
 8019d48:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8019d4a:	b11a      	cbz	r2, 8019d54 <__sinit+0x14>
 8019d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d50:	f7ff bff0 	b.w	8019d34 <__sinit_lock_release>
 8019d54:	4b0d      	ldr	r3, [pc, #52]	; (8019d8c <__sinit+0x4c>)
 8019d56:	63e3      	str	r3, [r4, #60]	; 0x3c
 8019d58:	2303      	movs	r3, #3
 8019d5a:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 8019d5e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 8019d62:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 8019d66:	6860      	ldr	r0, [r4, #4]
 8019d68:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 8019d6c:	2104      	movs	r1, #4
 8019d6e:	f7ff ffa1 	bl	8019cb4 <std>
 8019d72:	68a0      	ldr	r0, [r4, #8]
 8019d74:	2201      	movs	r2, #1
 8019d76:	2109      	movs	r1, #9
 8019d78:	f7ff ff9c 	bl	8019cb4 <std>
 8019d7c:	68e0      	ldr	r0, [r4, #12]
 8019d7e:	2202      	movs	r2, #2
 8019d80:	2112      	movs	r1, #18
 8019d82:	f7ff ff97 	bl	8019cb4 <std>
 8019d86:	2301      	movs	r3, #1
 8019d88:	63a3      	str	r3, [r4, #56]	; 0x38
 8019d8a:	e7df      	b.n	8019d4c <__sinit+0xc>
 8019d8c:	08019d05 	.word	0x08019d05

08019d90 <__libc_fini_array>:
 8019d90:	b538      	push	{r3, r4, r5, lr}
 8019d92:	4d07      	ldr	r5, [pc, #28]	; (8019db0 <__libc_fini_array+0x20>)
 8019d94:	4c07      	ldr	r4, [pc, #28]	; (8019db4 <__libc_fini_array+0x24>)
 8019d96:	1b64      	subs	r4, r4, r5
 8019d98:	10a4      	asrs	r4, r4, #2
 8019d9a:	b91c      	cbnz	r4, 8019da4 <__libc_fini_array+0x14>
 8019d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019da0:	f002 bd32 	b.w	801c808 <_fini>
 8019da4:	3c01      	subs	r4, #1
 8019da6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8019daa:	4798      	blx	r3
 8019dac:	e7f5      	b.n	8019d9a <__libc_fini_array+0xa>
 8019dae:	bf00      	nop
 8019db0:	0801eb48 	.word	0x0801eb48
 8019db4:	0801eb4c 	.word	0x0801eb4c

08019db8 <_malloc_trim_r>:
 8019db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019dbc:	4606      	mov	r6, r0
 8019dbe:	2008      	movs	r0, #8
 8019dc0:	460c      	mov	r4, r1
 8019dc2:	f7fd fd2d 	bl	8017820 <sysconf>
 8019dc6:	4f23      	ldr	r7, [pc, #140]	; (8019e54 <_malloc_trim_r+0x9c>)
 8019dc8:	4680      	mov	r8, r0
 8019dca:	4630      	mov	r0, r6
 8019dcc:	f7fb fba8 	bl	8015520 <__malloc_lock>
 8019dd0:	68bb      	ldr	r3, [r7, #8]
 8019dd2:	685d      	ldr	r5, [r3, #4]
 8019dd4:	f025 0503 	bic.w	r5, r5, #3
 8019dd8:	1b2c      	subs	r4, r5, r4
 8019dda:	3c11      	subs	r4, #17
 8019ddc:	4444      	add	r4, r8
 8019dde:	fbb4 f4f8 	udiv	r4, r4, r8
 8019de2:	3c01      	subs	r4, #1
 8019de4:	fb08 f404 	mul.w	r4, r8, r4
 8019de8:	45a0      	cmp	r8, r4
 8019dea:	dd05      	ble.n	8019df8 <_malloc_trim_r+0x40>
 8019dec:	4630      	mov	r0, r6
 8019dee:	f7fb fb9d 	bl	801552c <__malloc_unlock>
 8019df2:	2000      	movs	r0, #0
 8019df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019df8:	2100      	movs	r1, #0
 8019dfa:	4630      	mov	r0, r6
 8019dfc:	f7fb fbae 	bl	801555c <_sbrk_r>
 8019e00:	68bb      	ldr	r3, [r7, #8]
 8019e02:	442b      	add	r3, r5
 8019e04:	4298      	cmp	r0, r3
 8019e06:	d1f1      	bne.n	8019dec <_malloc_trim_r+0x34>
 8019e08:	4261      	negs	r1, r4
 8019e0a:	4630      	mov	r0, r6
 8019e0c:	f7fb fba6 	bl	801555c <_sbrk_r>
 8019e10:	3001      	adds	r0, #1
 8019e12:	d110      	bne.n	8019e36 <_malloc_trim_r+0x7e>
 8019e14:	2100      	movs	r1, #0
 8019e16:	4630      	mov	r0, r6
 8019e18:	f7fb fba0 	bl	801555c <_sbrk_r>
 8019e1c:	68ba      	ldr	r2, [r7, #8]
 8019e1e:	1a83      	subs	r3, r0, r2
 8019e20:	2b0f      	cmp	r3, #15
 8019e22:	dde3      	ble.n	8019dec <_malloc_trim_r+0x34>
 8019e24:	490c      	ldr	r1, [pc, #48]	; (8019e58 <_malloc_trim_r+0xa0>)
 8019e26:	6809      	ldr	r1, [r1, #0]
 8019e28:	1a40      	subs	r0, r0, r1
 8019e2a:	490c      	ldr	r1, [pc, #48]	; (8019e5c <_malloc_trim_r+0xa4>)
 8019e2c:	f043 0301 	orr.w	r3, r3, #1
 8019e30:	6008      	str	r0, [r1, #0]
 8019e32:	6053      	str	r3, [r2, #4]
 8019e34:	e7da      	b.n	8019dec <_malloc_trim_r+0x34>
 8019e36:	68bb      	ldr	r3, [r7, #8]
 8019e38:	4a08      	ldr	r2, [pc, #32]	; (8019e5c <_malloc_trim_r+0xa4>)
 8019e3a:	1b2d      	subs	r5, r5, r4
 8019e3c:	f045 0501 	orr.w	r5, r5, #1
 8019e40:	605d      	str	r5, [r3, #4]
 8019e42:	6813      	ldr	r3, [r2, #0]
 8019e44:	4630      	mov	r0, r6
 8019e46:	1b1c      	subs	r4, r3, r4
 8019e48:	6014      	str	r4, [r2, #0]
 8019e4a:	f7fb fb6f 	bl	801552c <__malloc_unlock>
 8019e4e:	2001      	movs	r0, #1
 8019e50:	e7d0      	b.n	8019df4 <_malloc_trim_r+0x3c>
 8019e52:	bf00      	nop
 8019e54:	20003cb0 	.word	0x20003cb0
 8019e58:	200040b8 	.word	0x200040b8
 8019e5c:	20006188 	.word	0x20006188

08019e60 <_free_r>:
 8019e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e62:	4605      	mov	r5, r0
 8019e64:	460f      	mov	r7, r1
 8019e66:	2900      	cmp	r1, #0
 8019e68:	f000 80b1 	beq.w	8019fce <_free_r+0x16e>
 8019e6c:	f7fb fb58 	bl	8015520 <__malloc_lock>
 8019e70:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8019e74:	4856      	ldr	r0, [pc, #344]	; (8019fd0 <_free_r+0x170>)
 8019e76:	f022 0401 	bic.w	r4, r2, #1
 8019e7a:	f1a7 0308 	sub.w	r3, r7, #8
 8019e7e:	eb03 0c04 	add.w	ip, r3, r4
 8019e82:	6881      	ldr	r1, [r0, #8]
 8019e84:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8019e88:	4561      	cmp	r1, ip
 8019e8a:	f026 0603 	bic.w	r6, r6, #3
 8019e8e:	f002 0201 	and.w	r2, r2, #1
 8019e92:	d11b      	bne.n	8019ecc <_free_r+0x6c>
 8019e94:	4434      	add	r4, r6
 8019e96:	b93a      	cbnz	r2, 8019ea8 <_free_r+0x48>
 8019e98:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8019e9c:	1a9b      	subs	r3, r3, r2
 8019e9e:	4414      	add	r4, r2
 8019ea0:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8019ea4:	60ca      	str	r2, [r1, #12]
 8019ea6:	6091      	str	r1, [r2, #8]
 8019ea8:	f044 0201 	orr.w	r2, r4, #1
 8019eac:	605a      	str	r2, [r3, #4]
 8019eae:	6083      	str	r3, [r0, #8]
 8019eb0:	4b48      	ldr	r3, [pc, #288]	; (8019fd4 <_free_r+0x174>)
 8019eb2:	681b      	ldr	r3, [r3, #0]
 8019eb4:	42a3      	cmp	r3, r4
 8019eb6:	d804      	bhi.n	8019ec2 <_free_r+0x62>
 8019eb8:	4b47      	ldr	r3, [pc, #284]	; (8019fd8 <_free_r+0x178>)
 8019eba:	4628      	mov	r0, r5
 8019ebc:	6819      	ldr	r1, [r3, #0]
 8019ebe:	f7ff ff7b 	bl	8019db8 <_malloc_trim_r>
 8019ec2:	4628      	mov	r0, r5
 8019ec4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019ec8:	f7fb bb30 	b.w	801552c <__malloc_unlock>
 8019ecc:	f8cc 6004 	str.w	r6, [ip, #4]
 8019ed0:	2a00      	cmp	r2, #0
 8019ed2:	d138      	bne.n	8019f46 <_free_r+0xe6>
 8019ed4:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8019ed8:	1a5b      	subs	r3, r3, r1
 8019eda:	440c      	add	r4, r1
 8019edc:	6899      	ldr	r1, [r3, #8]
 8019ede:	f100 0708 	add.w	r7, r0, #8
 8019ee2:	42b9      	cmp	r1, r7
 8019ee4:	d031      	beq.n	8019f4a <_free_r+0xea>
 8019ee6:	68df      	ldr	r7, [r3, #12]
 8019ee8:	60cf      	str	r7, [r1, #12]
 8019eea:	60b9      	str	r1, [r7, #8]
 8019eec:	eb0c 0106 	add.w	r1, ip, r6
 8019ef0:	6849      	ldr	r1, [r1, #4]
 8019ef2:	07c9      	lsls	r1, r1, #31
 8019ef4:	d40b      	bmi.n	8019f0e <_free_r+0xae>
 8019ef6:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8019efa:	4434      	add	r4, r6
 8019efc:	bb3a      	cbnz	r2, 8019f4e <_free_r+0xee>
 8019efe:	4e37      	ldr	r6, [pc, #220]	; (8019fdc <_free_r+0x17c>)
 8019f00:	42b1      	cmp	r1, r6
 8019f02:	d124      	bne.n	8019f4e <_free_r+0xee>
 8019f04:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019f08:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8019f0c:	2201      	movs	r2, #1
 8019f0e:	f044 0101 	orr.w	r1, r4, #1
 8019f12:	6059      	str	r1, [r3, #4]
 8019f14:	511c      	str	r4, [r3, r4]
 8019f16:	2a00      	cmp	r2, #0
 8019f18:	d1d3      	bne.n	8019ec2 <_free_r+0x62>
 8019f1a:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8019f1e:	d21b      	bcs.n	8019f58 <_free_r+0xf8>
 8019f20:	0961      	lsrs	r1, r4, #5
 8019f22:	08e2      	lsrs	r2, r4, #3
 8019f24:	2401      	movs	r4, #1
 8019f26:	408c      	lsls	r4, r1
 8019f28:	6841      	ldr	r1, [r0, #4]
 8019f2a:	3201      	adds	r2, #1
 8019f2c:	430c      	orrs	r4, r1
 8019f2e:	6044      	str	r4, [r0, #4]
 8019f30:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8019f34:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8019f38:	3908      	subs	r1, #8
 8019f3a:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8019f3e:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8019f42:	60e3      	str	r3, [r4, #12]
 8019f44:	e7bd      	b.n	8019ec2 <_free_r+0x62>
 8019f46:	2200      	movs	r2, #0
 8019f48:	e7d0      	b.n	8019eec <_free_r+0x8c>
 8019f4a:	2201      	movs	r2, #1
 8019f4c:	e7ce      	b.n	8019eec <_free_r+0x8c>
 8019f4e:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8019f52:	60ce      	str	r6, [r1, #12]
 8019f54:	60b1      	str	r1, [r6, #8]
 8019f56:	e7da      	b.n	8019f0e <_free_r+0xae>
 8019f58:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8019f5c:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8019f60:	d214      	bcs.n	8019f8c <_free_r+0x12c>
 8019f62:	09a2      	lsrs	r2, r4, #6
 8019f64:	3238      	adds	r2, #56	; 0x38
 8019f66:	1c51      	adds	r1, r2, #1
 8019f68:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8019f6c:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8019f70:	428e      	cmp	r6, r1
 8019f72:	d125      	bne.n	8019fc0 <_free_r+0x160>
 8019f74:	2401      	movs	r4, #1
 8019f76:	1092      	asrs	r2, r2, #2
 8019f78:	fa04 f202 	lsl.w	r2, r4, r2
 8019f7c:	6844      	ldr	r4, [r0, #4]
 8019f7e:	4322      	orrs	r2, r4
 8019f80:	6042      	str	r2, [r0, #4]
 8019f82:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8019f86:	60b3      	str	r3, [r6, #8]
 8019f88:	60cb      	str	r3, [r1, #12]
 8019f8a:	e79a      	b.n	8019ec2 <_free_r+0x62>
 8019f8c:	2a14      	cmp	r2, #20
 8019f8e:	d801      	bhi.n	8019f94 <_free_r+0x134>
 8019f90:	325b      	adds	r2, #91	; 0x5b
 8019f92:	e7e8      	b.n	8019f66 <_free_r+0x106>
 8019f94:	2a54      	cmp	r2, #84	; 0x54
 8019f96:	d802      	bhi.n	8019f9e <_free_r+0x13e>
 8019f98:	0b22      	lsrs	r2, r4, #12
 8019f9a:	326e      	adds	r2, #110	; 0x6e
 8019f9c:	e7e3      	b.n	8019f66 <_free_r+0x106>
 8019f9e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8019fa2:	d802      	bhi.n	8019faa <_free_r+0x14a>
 8019fa4:	0be2      	lsrs	r2, r4, #15
 8019fa6:	3277      	adds	r2, #119	; 0x77
 8019fa8:	e7dd      	b.n	8019f66 <_free_r+0x106>
 8019faa:	f240 5154 	movw	r1, #1364	; 0x554
 8019fae:	428a      	cmp	r2, r1
 8019fb0:	bf9a      	itte	ls
 8019fb2:	0ca2      	lsrls	r2, r4, #18
 8019fb4:	327c      	addls	r2, #124	; 0x7c
 8019fb6:	227e      	movhi	r2, #126	; 0x7e
 8019fb8:	e7d5      	b.n	8019f66 <_free_r+0x106>
 8019fba:	6889      	ldr	r1, [r1, #8]
 8019fbc:	428e      	cmp	r6, r1
 8019fbe:	d004      	beq.n	8019fca <_free_r+0x16a>
 8019fc0:	684a      	ldr	r2, [r1, #4]
 8019fc2:	f022 0203 	bic.w	r2, r2, #3
 8019fc6:	42a2      	cmp	r2, r4
 8019fc8:	d8f7      	bhi.n	8019fba <_free_r+0x15a>
 8019fca:	68ce      	ldr	r6, [r1, #12]
 8019fcc:	e7d9      	b.n	8019f82 <_free_r+0x122>
 8019fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019fd0:	20003cb0 	.word	0x20003cb0
 8019fd4:	200040bc 	.word	0x200040bc
 8019fd8:	200061b8 	.word	0x200061b8
 8019fdc:	20003cb8 	.word	0x20003cb8

08019fe0 <_fwalk_reent>:
 8019fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019fe4:	4606      	mov	r6, r0
 8019fe6:	4688      	mov	r8, r1
 8019fe8:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 8019fec:	2700      	movs	r7, #0
 8019fee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019ff2:	f1b9 0901 	subs.w	r9, r9, #1
 8019ff6:	d505      	bpl.n	801a004 <_fwalk_reent+0x24>
 8019ff8:	6824      	ldr	r4, [r4, #0]
 8019ffa:	2c00      	cmp	r4, #0
 8019ffc:	d1f7      	bne.n	8019fee <_fwalk_reent+0xe>
 8019ffe:	4638      	mov	r0, r7
 801a000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a004:	89ab      	ldrh	r3, [r5, #12]
 801a006:	2b01      	cmp	r3, #1
 801a008:	d907      	bls.n	801a01a <_fwalk_reent+0x3a>
 801a00a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a00e:	3301      	adds	r3, #1
 801a010:	d003      	beq.n	801a01a <_fwalk_reent+0x3a>
 801a012:	4629      	mov	r1, r5
 801a014:	4630      	mov	r0, r6
 801a016:	47c0      	blx	r8
 801a018:	4307      	orrs	r7, r0
 801a01a:	3568      	adds	r5, #104	; 0x68
 801a01c:	e7e9      	b.n	8019ff2 <_fwalk_reent+0x12>

0801a01e <rshift>:
 801a01e:	6903      	ldr	r3, [r0, #16]
 801a020:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801a024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a028:	ea4f 1261 	mov.w	r2, r1, asr #5
 801a02c:	f100 0414 	add.w	r4, r0, #20
 801a030:	dd45      	ble.n	801a0be <rshift+0xa0>
 801a032:	f011 011f 	ands.w	r1, r1, #31
 801a036:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801a03a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801a03e:	d10c      	bne.n	801a05a <rshift+0x3c>
 801a040:	f100 0710 	add.w	r7, r0, #16
 801a044:	4629      	mov	r1, r5
 801a046:	42b1      	cmp	r1, r6
 801a048:	d334      	bcc.n	801a0b4 <rshift+0x96>
 801a04a:	1a9b      	subs	r3, r3, r2
 801a04c:	009b      	lsls	r3, r3, #2
 801a04e:	1eea      	subs	r2, r5, #3
 801a050:	4296      	cmp	r6, r2
 801a052:	bf38      	it	cc
 801a054:	2300      	movcc	r3, #0
 801a056:	4423      	add	r3, r4
 801a058:	e015      	b.n	801a086 <rshift+0x68>
 801a05a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801a05e:	f1c1 0820 	rsb	r8, r1, #32
 801a062:	40cf      	lsrs	r7, r1
 801a064:	f105 0e04 	add.w	lr, r5, #4
 801a068:	46a1      	mov	r9, r4
 801a06a:	4576      	cmp	r6, lr
 801a06c:	46f4      	mov	ip, lr
 801a06e:	d815      	bhi.n	801a09c <rshift+0x7e>
 801a070:	1a9b      	subs	r3, r3, r2
 801a072:	009a      	lsls	r2, r3, #2
 801a074:	3a04      	subs	r2, #4
 801a076:	3501      	adds	r5, #1
 801a078:	42ae      	cmp	r6, r5
 801a07a:	bf38      	it	cc
 801a07c:	2200      	movcc	r2, #0
 801a07e:	18a3      	adds	r3, r4, r2
 801a080:	50a7      	str	r7, [r4, r2]
 801a082:	b107      	cbz	r7, 801a086 <rshift+0x68>
 801a084:	3304      	adds	r3, #4
 801a086:	1b1a      	subs	r2, r3, r4
 801a088:	42a3      	cmp	r3, r4
 801a08a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801a08e:	bf08      	it	eq
 801a090:	2300      	moveq	r3, #0
 801a092:	6102      	str	r2, [r0, #16]
 801a094:	bf08      	it	eq
 801a096:	6143      	streq	r3, [r0, #20]
 801a098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a09c:	f8dc c000 	ldr.w	ip, [ip]
 801a0a0:	fa0c fc08 	lsl.w	ip, ip, r8
 801a0a4:	ea4c 0707 	orr.w	r7, ip, r7
 801a0a8:	f849 7b04 	str.w	r7, [r9], #4
 801a0ac:	f85e 7b04 	ldr.w	r7, [lr], #4
 801a0b0:	40cf      	lsrs	r7, r1
 801a0b2:	e7da      	b.n	801a06a <rshift+0x4c>
 801a0b4:	f851 cb04 	ldr.w	ip, [r1], #4
 801a0b8:	f847 cf04 	str.w	ip, [r7, #4]!
 801a0bc:	e7c3      	b.n	801a046 <rshift+0x28>
 801a0be:	4623      	mov	r3, r4
 801a0c0:	e7e1      	b.n	801a086 <rshift+0x68>

0801a0c2 <__hexdig_fun>:
 801a0c2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801a0c6:	2b09      	cmp	r3, #9
 801a0c8:	d802      	bhi.n	801a0d0 <__hexdig_fun+0xe>
 801a0ca:	3820      	subs	r0, #32
 801a0cc:	b2c0      	uxtb	r0, r0
 801a0ce:	4770      	bx	lr
 801a0d0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801a0d4:	2b05      	cmp	r3, #5
 801a0d6:	d801      	bhi.n	801a0dc <__hexdig_fun+0x1a>
 801a0d8:	3847      	subs	r0, #71	; 0x47
 801a0da:	e7f7      	b.n	801a0cc <__hexdig_fun+0xa>
 801a0dc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801a0e0:	2b05      	cmp	r3, #5
 801a0e2:	d801      	bhi.n	801a0e8 <__hexdig_fun+0x26>
 801a0e4:	3827      	subs	r0, #39	; 0x27
 801a0e6:	e7f1      	b.n	801a0cc <__hexdig_fun+0xa>
 801a0e8:	2000      	movs	r0, #0
 801a0ea:	4770      	bx	lr

0801a0ec <__gethex>:
 801a0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0f0:	ed2d 8b02 	vpush	{d8}
 801a0f4:	b089      	sub	sp, #36	; 0x24
 801a0f6:	ee08 0a10 	vmov	s16, r0
 801a0fa:	9304      	str	r3, [sp, #16]
 801a0fc:	4bbc      	ldr	r3, [pc, #752]	; (801a3f0 <__gethex+0x304>)
 801a0fe:	681b      	ldr	r3, [r3, #0]
 801a100:	9301      	str	r3, [sp, #4]
 801a102:	4618      	mov	r0, r3
 801a104:	468b      	mov	fp, r1
 801a106:	4690      	mov	r8, r2
 801a108:	f7ea f872 	bl	80041f0 <strlen>
 801a10c:	9b01      	ldr	r3, [sp, #4]
 801a10e:	f8db 2000 	ldr.w	r2, [fp]
 801a112:	4403      	add	r3, r0
 801a114:	4682      	mov	sl, r0
 801a116:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801a11a:	9305      	str	r3, [sp, #20]
 801a11c:	1c93      	adds	r3, r2, #2
 801a11e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801a122:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801a126:	32fe      	adds	r2, #254	; 0xfe
 801a128:	18d1      	adds	r1, r2, r3
 801a12a:	461f      	mov	r7, r3
 801a12c:	f813 0b01 	ldrb.w	r0, [r3], #1
 801a130:	9100      	str	r1, [sp, #0]
 801a132:	2830      	cmp	r0, #48	; 0x30
 801a134:	d0f8      	beq.n	801a128 <__gethex+0x3c>
 801a136:	f7ff ffc4 	bl	801a0c2 <__hexdig_fun>
 801a13a:	4604      	mov	r4, r0
 801a13c:	2800      	cmp	r0, #0
 801a13e:	d13a      	bne.n	801a1b6 <__gethex+0xca>
 801a140:	9901      	ldr	r1, [sp, #4]
 801a142:	4652      	mov	r2, sl
 801a144:	4638      	mov	r0, r7
 801a146:	f7fb fa5d 	bl	8015604 <strncmp>
 801a14a:	4605      	mov	r5, r0
 801a14c:	2800      	cmp	r0, #0
 801a14e:	d168      	bne.n	801a222 <__gethex+0x136>
 801a150:	f817 000a 	ldrb.w	r0, [r7, sl]
 801a154:	eb07 060a 	add.w	r6, r7, sl
 801a158:	f7ff ffb3 	bl	801a0c2 <__hexdig_fun>
 801a15c:	2800      	cmp	r0, #0
 801a15e:	d062      	beq.n	801a226 <__gethex+0x13a>
 801a160:	4633      	mov	r3, r6
 801a162:	7818      	ldrb	r0, [r3, #0]
 801a164:	2830      	cmp	r0, #48	; 0x30
 801a166:	461f      	mov	r7, r3
 801a168:	f103 0301 	add.w	r3, r3, #1
 801a16c:	d0f9      	beq.n	801a162 <__gethex+0x76>
 801a16e:	f7ff ffa8 	bl	801a0c2 <__hexdig_fun>
 801a172:	2301      	movs	r3, #1
 801a174:	fab0 f480 	clz	r4, r0
 801a178:	0964      	lsrs	r4, r4, #5
 801a17a:	4635      	mov	r5, r6
 801a17c:	9300      	str	r3, [sp, #0]
 801a17e:	463a      	mov	r2, r7
 801a180:	4616      	mov	r6, r2
 801a182:	3201      	adds	r2, #1
 801a184:	7830      	ldrb	r0, [r6, #0]
 801a186:	f7ff ff9c 	bl	801a0c2 <__hexdig_fun>
 801a18a:	2800      	cmp	r0, #0
 801a18c:	d1f8      	bne.n	801a180 <__gethex+0x94>
 801a18e:	9901      	ldr	r1, [sp, #4]
 801a190:	4652      	mov	r2, sl
 801a192:	4630      	mov	r0, r6
 801a194:	f7fb fa36 	bl	8015604 <strncmp>
 801a198:	b980      	cbnz	r0, 801a1bc <__gethex+0xd0>
 801a19a:	b94d      	cbnz	r5, 801a1b0 <__gethex+0xc4>
 801a19c:	eb06 050a 	add.w	r5, r6, sl
 801a1a0:	462a      	mov	r2, r5
 801a1a2:	4616      	mov	r6, r2
 801a1a4:	3201      	adds	r2, #1
 801a1a6:	7830      	ldrb	r0, [r6, #0]
 801a1a8:	f7ff ff8b 	bl	801a0c2 <__hexdig_fun>
 801a1ac:	2800      	cmp	r0, #0
 801a1ae:	d1f8      	bne.n	801a1a2 <__gethex+0xb6>
 801a1b0:	1bad      	subs	r5, r5, r6
 801a1b2:	00ad      	lsls	r5, r5, #2
 801a1b4:	e004      	b.n	801a1c0 <__gethex+0xd4>
 801a1b6:	2400      	movs	r4, #0
 801a1b8:	4625      	mov	r5, r4
 801a1ba:	e7e0      	b.n	801a17e <__gethex+0x92>
 801a1bc:	2d00      	cmp	r5, #0
 801a1be:	d1f7      	bne.n	801a1b0 <__gethex+0xc4>
 801a1c0:	7833      	ldrb	r3, [r6, #0]
 801a1c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a1c6:	2b50      	cmp	r3, #80	; 0x50
 801a1c8:	d13b      	bne.n	801a242 <__gethex+0x156>
 801a1ca:	7873      	ldrb	r3, [r6, #1]
 801a1cc:	2b2b      	cmp	r3, #43	; 0x2b
 801a1ce:	d02c      	beq.n	801a22a <__gethex+0x13e>
 801a1d0:	2b2d      	cmp	r3, #45	; 0x2d
 801a1d2:	d02e      	beq.n	801a232 <__gethex+0x146>
 801a1d4:	1c71      	adds	r1, r6, #1
 801a1d6:	f04f 0900 	mov.w	r9, #0
 801a1da:	7808      	ldrb	r0, [r1, #0]
 801a1dc:	f7ff ff71 	bl	801a0c2 <__hexdig_fun>
 801a1e0:	1e43      	subs	r3, r0, #1
 801a1e2:	b2db      	uxtb	r3, r3
 801a1e4:	2b18      	cmp	r3, #24
 801a1e6:	d82c      	bhi.n	801a242 <__gethex+0x156>
 801a1e8:	f1a0 0210 	sub.w	r2, r0, #16
 801a1ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801a1f0:	f7ff ff67 	bl	801a0c2 <__hexdig_fun>
 801a1f4:	1e43      	subs	r3, r0, #1
 801a1f6:	b2db      	uxtb	r3, r3
 801a1f8:	2b18      	cmp	r3, #24
 801a1fa:	d91d      	bls.n	801a238 <__gethex+0x14c>
 801a1fc:	f1b9 0f00 	cmp.w	r9, #0
 801a200:	d000      	beq.n	801a204 <__gethex+0x118>
 801a202:	4252      	negs	r2, r2
 801a204:	4415      	add	r5, r2
 801a206:	f8cb 1000 	str.w	r1, [fp]
 801a20a:	b1e4      	cbz	r4, 801a246 <__gethex+0x15a>
 801a20c:	9b00      	ldr	r3, [sp, #0]
 801a20e:	2b00      	cmp	r3, #0
 801a210:	bf14      	ite	ne
 801a212:	2700      	movne	r7, #0
 801a214:	2706      	moveq	r7, #6
 801a216:	4638      	mov	r0, r7
 801a218:	b009      	add	sp, #36	; 0x24
 801a21a:	ecbd 8b02 	vpop	{d8}
 801a21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a222:	463e      	mov	r6, r7
 801a224:	4625      	mov	r5, r4
 801a226:	2401      	movs	r4, #1
 801a228:	e7ca      	b.n	801a1c0 <__gethex+0xd4>
 801a22a:	f04f 0900 	mov.w	r9, #0
 801a22e:	1cb1      	adds	r1, r6, #2
 801a230:	e7d3      	b.n	801a1da <__gethex+0xee>
 801a232:	f04f 0901 	mov.w	r9, #1
 801a236:	e7fa      	b.n	801a22e <__gethex+0x142>
 801a238:	230a      	movs	r3, #10
 801a23a:	fb03 0202 	mla	r2, r3, r2, r0
 801a23e:	3a10      	subs	r2, #16
 801a240:	e7d4      	b.n	801a1ec <__gethex+0x100>
 801a242:	4631      	mov	r1, r6
 801a244:	e7df      	b.n	801a206 <__gethex+0x11a>
 801a246:	1bf3      	subs	r3, r6, r7
 801a248:	3b01      	subs	r3, #1
 801a24a:	4621      	mov	r1, r4
 801a24c:	2b07      	cmp	r3, #7
 801a24e:	dc0b      	bgt.n	801a268 <__gethex+0x17c>
 801a250:	ee18 0a10 	vmov	r0, s16
 801a254:	f000 fade 	bl	801a814 <_Balloc>
 801a258:	4604      	mov	r4, r0
 801a25a:	b940      	cbnz	r0, 801a26e <__gethex+0x182>
 801a25c:	4b65      	ldr	r3, [pc, #404]	; (801a3f4 <__gethex+0x308>)
 801a25e:	4602      	mov	r2, r0
 801a260:	21de      	movs	r1, #222	; 0xde
 801a262:	4865      	ldr	r0, [pc, #404]	; (801a3f8 <__gethex+0x30c>)
 801a264:	f001 fd9c 	bl	801bda0 <__assert_func>
 801a268:	3101      	adds	r1, #1
 801a26a:	105b      	asrs	r3, r3, #1
 801a26c:	e7ee      	b.n	801a24c <__gethex+0x160>
 801a26e:	f100 0914 	add.w	r9, r0, #20
 801a272:	f04f 0b00 	mov.w	fp, #0
 801a276:	f1ca 0301 	rsb	r3, sl, #1
 801a27a:	f8cd 9008 	str.w	r9, [sp, #8]
 801a27e:	f8cd b000 	str.w	fp, [sp]
 801a282:	9306      	str	r3, [sp, #24]
 801a284:	42b7      	cmp	r7, r6
 801a286:	d340      	bcc.n	801a30a <__gethex+0x21e>
 801a288:	9802      	ldr	r0, [sp, #8]
 801a28a:	9b00      	ldr	r3, [sp, #0]
 801a28c:	f840 3b04 	str.w	r3, [r0], #4
 801a290:	eba0 0009 	sub.w	r0, r0, r9
 801a294:	1080      	asrs	r0, r0, #2
 801a296:	0146      	lsls	r6, r0, #5
 801a298:	6120      	str	r0, [r4, #16]
 801a29a:	4618      	mov	r0, r3
 801a29c:	f000 fb7c 	bl	801a998 <__hi0bits>
 801a2a0:	1a30      	subs	r0, r6, r0
 801a2a2:	f8d8 6000 	ldr.w	r6, [r8]
 801a2a6:	42b0      	cmp	r0, r6
 801a2a8:	dd63      	ble.n	801a372 <__gethex+0x286>
 801a2aa:	1b87      	subs	r7, r0, r6
 801a2ac:	4639      	mov	r1, r7
 801a2ae:	4620      	mov	r0, r4
 801a2b0:	f000 fefc 	bl	801b0ac <__any_on>
 801a2b4:	4682      	mov	sl, r0
 801a2b6:	b1a8      	cbz	r0, 801a2e4 <__gethex+0x1f8>
 801a2b8:	1e7b      	subs	r3, r7, #1
 801a2ba:	1159      	asrs	r1, r3, #5
 801a2bc:	f003 021f 	and.w	r2, r3, #31
 801a2c0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801a2c4:	f04f 0a01 	mov.w	sl, #1
 801a2c8:	fa0a f202 	lsl.w	r2, sl, r2
 801a2cc:	420a      	tst	r2, r1
 801a2ce:	d009      	beq.n	801a2e4 <__gethex+0x1f8>
 801a2d0:	4553      	cmp	r3, sl
 801a2d2:	dd05      	ble.n	801a2e0 <__gethex+0x1f4>
 801a2d4:	1eb9      	subs	r1, r7, #2
 801a2d6:	4620      	mov	r0, r4
 801a2d8:	f000 fee8 	bl	801b0ac <__any_on>
 801a2dc:	2800      	cmp	r0, #0
 801a2de:	d145      	bne.n	801a36c <__gethex+0x280>
 801a2e0:	f04f 0a02 	mov.w	sl, #2
 801a2e4:	4639      	mov	r1, r7
 801a2e6:	4620      	mov	r0, r4
 801a2e8:	f7ff fe99 	bl	801a01e <rshift>
 801a2ec:	443d      	add	r5, r7
 801a2ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801a2f2:	42ab      	cmp	r3, r5
 801a2f4:	da4c      	bge.n	801a390 <__gethex+0x2a4>
 801a2f6:	ee18 0a10 	vmov	r0, s16
 801a2fa:	4621      	mov	r1, r4
 801a2fc:	f000 faaf 	bl	801a85e <_Bfree>
 801a300:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a302:	2300      	movs	r3, #0
 801a304:	6013      	str	r3, [r2, #0]
 801a306:	27a3      	movs	r7, #163	; 0xa3
 801a308:	e785      	b.n	801a216 <__gethex+0x12a>
 801a30a:	1e73      	subs	r3, r6, #1
 801a30c:	9a05      	ldr	r2, [sp, #20]
 801a30e:	9303      	str	r3, [sp, #12]
 801a310:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801a314:	4293      	cmp	r3, r2
 801a316:	d019      	beq.n	801a34c <__gethex+0x260>
 801a318:	f1bb 0f20 	cmp.w	fp, #32
 801a31c:	d107      	bne.n	801a32e <__gethex+0x242>
 801a31e:	9b02      	ldr	r3, [sp, #8]
 801a320:	9a00      	ldr	r2, [sp, #0]
 801a322:	f843 2b04 	str.w	r2, [r3], #4
 801a326:	9302      	str	r3, [sp, #8]
 801a328:	2300      	movs	r3, #0
 801a32a:	9300      	str	r3, [sp, #0]
 801a32c:	469b      	mov	fp, r3
 801a32e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801a332:	f7ff fec6 	bl	801a0c2 <__hexdig_fun>
 801a336:	9b00      	ldr	r3, [sp, #0]
 801a338:	f000 000f 	and.w	r0, r0, #15
 801a33c:	fa00 f00b 	lsl.w	r0, r0, fp
 801a340:	4303      	orrs	r3, r0
 801a342:	9300      	str	r3, [sp, #0]
 801a344:	f10b 0b04 	add.w	fp, fp, #4
 801a348:	9b03      	ldr	r3, [sp, #12]
 801a34a:	e00d      	b.n	801a368 <__gethex+0x27c>
 801a34c:	9b03      	ldr	r3, [sp, #12]
 801a34e:	9a06      	ldr	r2, [sp, #24]
 801a350:	4413      	add	r3, r2
 801a352:	42bb      	cmp	r3, r7
 801a354:	d3e0      	bcc.n	801a318 <__gethex+0x22c>
 801a356:	4618      	mov	r0, r3
 801a358:	9901      	ldr	r1, [sp, #4]
 801a35a:	9307      	str	r3, [sp, #28]
 801a35c:	4652      	mov	r2, sl
 801a35e:	f7fb f951 	bl	8015604 <strncmp>
 801a362:	9b07      	ldr	r3, [sp, #28]
 801a364:	2800      	cmp	r0, #0
 801a366:	d1d7      	bne.n	801a318 <__gethex+0x22c>
 801a368:	461e      	mov	r6, r3
 801a36a:	e78b      	b.n	801a284 <__gethex+0x198>
 801a36c:	f04f 0a03 	mov.w	sl, #3
 801a370:	e7b8      	b.n	801a2e4 <__gethex+0x1f8>
 801a372:	da0a      	bge.n	801a38a <__gethex+0x29e>
 801a374:	1a37      	subs	r7, r6, r0
 801a376:	4621      	mov	r1, r4
 801a378:	ee18 0a10 	vmov	r0, s16
 801a37c:	463a      	mov	r2, r7
 801a37e:	f000 fc57 	bl	801ac30 <__lshift>
 801a382:	1bed      	subs	r5, r5, r7
 801a384:	4604      	mov	r4, r0
 801a386:	f100 0914 	add.w	r9, r0, #20
 801a38a:	f04f 0a00 	mov.w	sl, #0
 801a38e:	e7ae      	b.n	801a2ee <__gethex+0x202>
 801a390:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801a394:	42a8      	cmp	r0, r5
 801a396:	dd72      	ble.n	801a47e <__gethex+0x392>
 801a398:	1b45      	subs	r5, r0, r5
 801a39a:	42ae      	cmp	r6, r5
 801a39c:	dc36      	bgt.n	801a40c <__gethex+0x320>
 801a39e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801a3a2:	2b02      	cmp	r3, #2
 801a3a4:	d02a      	beq.n	801a3fc <__gethex+0x310>
 801a3a6:	2b03      	cmp	r3, #3
 801a3a8:	d02c      	beq.n	801a404 <__gethex+0x318>
 801a3aa:	2b01      	cmp	r3, #1
 801a3ac:	d115      	bne.n	801a3da <__gethex+0x2ee>
 801a3ae:	42ae      	cmp	r6, r5
 801a3b0:	d113      	bne.n	801a3da <__gethex+0x2ee>
 801a3b2:	2e01      	cmp	r6, #1
 801a3b4:	d10b      	bne.n	801a3ce <__gethex+0x2e2>
 801a3b6:	9a04      	ldr	r2, [sp, #16]
 801a3b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801a3bc:	6013      	str	r3, [r2, #0]
 801a3be:	2301      	movs	r3, #1
 801a3c0:	6123      	str	r3, [r4, #16]
 801a3c2:	f8c9 3000 	str.w	r3, [r9]
 801a3c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a3c8:	2762      	movs	r7, #98	; 0x62
 801a3ca:	601c      	str	r4, [r3, #0]
 801a3cc:	e723      	b.n	801a216 <__gethex+0x12a>
 801a3ce:	1e71      	subs	r1, r6, #1
 801a3d0:	4620      	mov	r0, r4
 801a3d2:	f000 fe6b 	bl	801b0ac <__any_on>
 801a3d6:	2800      	cmp	r0, #0
 801a3d8:	d1ed      	bne.n	801a3b6 <__gethex+0x2ca>
 801a3da:	ee18 0a10 	vmov	r0, s16
 801a3de:	4621      	mov	r1, r4
 801a3e0:	f000 fa3d 	bl	801a85e <_Bfree>
 801a3e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a3e6:	2300      	movs	r3, #0
 801a3e8:	6013      	str	r3, [r2, #0]
 801a3ea:	2750      	movs	r7, #80	; 0x50
 801a3ec:	e713      	b.n	801a216 <__gethex+0x12a>
 801a3ee:	bf00      	nop
 801a3f0:	0801e968 	.word	0x0801e968
 801a3f4:	0801e88f 	.word	0x0801e88f
 801a3f8:	0801e8ff 	.word	0x0801e8ff
 801a3fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	d1eb      	bne.n	801a3da <__gethex+0x2ee>
 801a402:	e7d8      	b.n	801a3b6 <__gethex+0x2ca>
 801a404:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a406:	2b00      	cmp	r3, #0
 801a408:	d1d5      	bne.n	801a3b6 <__gethex+0x2ca>
 801a40a:	e7e6      	b.n	801a3da <__gethex+0x2ee>
 801a40c:	1e6f      	subs	r7, r5, #1
 801a40e:	f1ba 0f00 	cmp.w	sl, #0
 801a412:	d131      	bne.n	801a478 <__gethex+0x38c>
 801a414:	b127      	cbz	r7, 801a420 <__gethex+0x334>
 801a416:	4639      	mov	r1, r7
 801a418:	4620      	mov	r0, r4
 801a41a:	f000 fe47 	bl	801b0ac <__any_on>
 801a41e:	4682      	mov	sl, r0
 801a420:	117b      	asrs	r3, r7, #5
 801a422:	2101      	movs	r1, #1
 801a424:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801a428:	f007 071f 	and.w	r7, r7, #31
 801a42c:	fa01 f707 	lsl.w	r7, r1, r7
 801a430:	421f      	tst	r7, r3
 801a432:	4629      	mov	r1, r5
 801a434:	4620      	mov	r0, r4
 801a436:	bf18      	it	ne
 801a438:	f04a 0a02 	orrne.w	sl, sl, #2
 801a43c:	1b76      	subs	r6, r6, r5
 801a43e:	f7ff fdee 	bl	801a01e <rshift>
 801a442:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801a446:	2702      	movs	r7, #2
 801a448:	f1ba 0f00 	cmp.w	sl, #0
 801a44c:	d048      	beq.n	801a4e0 <__gethex+0x3f4>
 801a44e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801a452:	2b02      	cmp	r3, #2
 801a454:	d015      	beq.n	801a482 <__gethex+0x396>
 801a456:	2b03      	cmp	r3, #3
 801a458:	d017      	beq.n	801a48a <__gethex+0x39e>
 801a45a:	2b01      	cmp	r3, #1
 801a45c:	d109      	bne.n	801a472 <__gethex+0x386>
 801a45e:	f01a 0f02 	tst.w	sl, #2
 801a462:	d006      	beq.n	801a472 <__gethex+0x386>
 801a464:	f8d9 0000 	ldr.w	r0, [r9]
 801a468:	ea4a 0a00 	orr.w	sl, sl, r0
 801a46c:	f01a 0f01 	tst.w	sl, #1
 801a470:	d10e      	bne.n	801a490 <__gethex+0x3a4>
 801a472:	f047 0710 	orr.w	r7, r7, #16
 801a476:	e033      	b.n	801a4e0 <__gethex+0x3f4>
 801a478:	f04f 0a01 	mov.w	sl, #1
 801a47c:	e7d0      	b.n	801a420 <__gethex+0x334>
 801a47e:	2701      	movs	r7, #1
 801a480:	e7e2      	b.n	801a448 <__gethex+0x35c>
 801a482:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a484:	f1c3 0301 	rsb	r3, r3, #1
 801a488:	9315      	str	r3, [sp, #84]	; 0x54
 801a48a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a48c:	2b00      	cmp	r3, #0
 801a48e:	d0f0      	beq.n	801a472 <__gethex+0x386>
 801a490:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801a494:	f104 0314 	add.w	r3, r4, #20
 801a498:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801a49c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801a4a0:	f04f 0c00 	mov.w	ip, #0
 801a4a4:	4618      	mov	r0, r3
 801a4a6:	f853 2b04 	ldr.w	r2, [r3], #4
 801a4aa:	f1b2 3fff 	cmp.w	r2, #4294967295
 801a4ae:	d01c      	beq.n	801a4ea <__gethex+0x3fe>
 801a4b0:	3201      	adds	r2, #1
 801a4b2:	6002      	str	r2, [r0, #0]
 801a4b4:	2f02      	cmp	r7, #2
 801a4b6:	f104 0314 	add.w	r3, r4, #20
 801a4ba:	d13f      	bne.n	801a53c <__gethex+0x450>
 801a4bc:	f8d8 2000 	ldr.w	r2, [r8]
 801a4c0:	3a01      	subs	r2, #1
 801a4c2:	42b2      	cmp	r2, r6
 801a4c4:	d10a      	bne.n	801a4dc <__gethex+0x3f0>
 801a4c6:	1171      	asrs	r1, r6, #5
 801a4c8:	2201      	movs	r2, #1
 801a4ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a4ce:	f006 061f 	and.w	r6, r6, #31
 801a4d2:	fa02 f606 	lsl.w	r6, r2, r6
 801a4d6:	421e      	tst	r6, r3
 801a4d8:	bf18      	it	ne
 801a4da:	4617      	movne	r7, r2
 801a4dc:	f047 0720 	orr.w	r7, r7, #32
 801a4e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a4e2:	601c      	str	r4, [r3, #0]
 801a4e4:	9b04      	ldr	r3, [sp, #16]
 801a4e6:	601d      	str	r5, [r3, #0]
 801a4e8:	e695      	b.n	801a216 <__gethex+0x12a>
 801a4ea:	4299      	cmp	r1, r3
 801a4ec:	f843 cc04 	str.w	ip, [r3, #-4]
 801a4f0:	d8d8      	bhi.n	801a4a4 <__gethex+0x3b8>
 801a4f2:	68a3      	ldr	r3, [r4, #8]
 801a4f4:	459b      	cmp	fp, r3
 801a4f6:	db19      	blt.n	801a52c <__gethex+0x440>
 801a4f8:	6861      	ldr	r1, [r4, #4]
 801a4fa:	ee18 0a10 	vmov	r0, s16
 801a4fe:	3101      	adds	r1, #1
 801a500:	f000 f988 	bl	801a814 <_Balloc>
 801a504:	4681      	mov	r9, r0
 801a506:	b918      	cbnz	r0, 801a510 <__gethex+0x424>
 801a508:	4b1a      	ldr	r3, [pc, #104]	; (801a574 <__gethex+0x488>)
 801a50a:	4602      	mov	r2, r0
 801a50c:	2184      	movs	r1, #132	; 0x84
 801a50e:	e6a8      	b.n	801a262 <__gethex+0x176>
 801a510:	6922      	ldr	r2, [r4, #16]
 801a512:	3202      	adds	r2, #2
 801a514:	f104 010c 	add.w	r1, r4, #12
 801a518:	0092      	lsls	r2, r2, #2
 801a51a:	300c      	adds	r0, #12
 801a51c:	f7fa ffea 	bl	80154f4 <memcpy>
 801a520:	4621      	mov	r1, r4
 801a522:	ee18 0a10 	vmov	r0, s16
 801a526:	f000 f99a 	bl	801a85e <_Bfree>
 801a52a:	464c      	mov	r4, r9
 801a52c:	6923      	ldr	r3, [r4, #16]
 801a52e:	1c5a      	adds	r2, r3, #1
 801a530:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801a534:	6122      	str	r2, [r4, #16]
 801a536:	2201      	movs	r2, #1
 801a538:	615a      	str	r2, [r3, #20]
 801a53a:	e7bb      	b.n	801a4b4 <__gethex+0x3c8>
 801a53c:	6922      	ldr	r2, [r4, #16]
 801a53e:	455a      	cmp	r2, fp
 801a540:	dd0b      	ble.n	801a55a <__gethex+0x46e>
 801a542:	2101      	movs	r1, #1
 801a544:	4620      	mov	r0, r4
 801a546:	f7ff fd6a 	bl	801a01e <rshift>
 801a54a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801a54e:	3501      	adds	r5, #1
 801a550:	42ab      	cmp	r3, r5
 801a552:	f6ff aed0 	blt.w	801a2f6 <__gethex+0x20a>
 801a556:	2701      	movs	r7, #1
 801a558:	e7c0      	b.n	801a4dc <__gethex+0x3f0>
 801a55a:	f016 061f 	ands.w	r6, r6, #31
 801a55e:	d0fa      	beq.n	801a556 <__gethex+0x46a>
 801a560:	449a      	add	sl, r3
 801a562:	f1c6 0620 	rsb	r6, r6, #32
 801a566:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801a56a:	f000 fa15 	bl	801a998 <__hi0bits>
 801a56e:	42b0      	cmp	r0, r6
 801a570:	dbe7      	blt.n	801a542 <__gethex+0x456>
 801a572:	e7f0      	b.n	801a556 <__gethex+0x46a>
 801a574:	0801e88f 	.word	0x0801e88f

0801a578 <L_shift>:
 801a578:	f1c2 0208 	rsb	r2, r2, #8
 801a57c:	0092      	lsls	r2, r2, #2
 801a57e:	b570      	push	{r4, r5, r6, lr}
 801a580:	f1c2 0620 	rsb	r6, r2, #32
 801a584:	6843      	ldr	r3, [r0, #4]
 801a586:	6804      	ldr	r4, [r0, #0]
 801a588:	fa03 f506 	lsl.w	r5, r3, r6
 801a58c:	432c      	orrs	r4, r5
 801a58e:	40d3      	lsrs	r3, r2
 801a590:	6004      	str	r4, [r0, #0]
 801a592:	f840 3f04 	str.w	r3, [r0, #4]!
 801a596:	4288      	cmp	r0, r1
 801a598:	d3f4      	bcc.n	801a584 <L_shift+0xc>
 801a59a:	bd70      	pop	{r4, r5, r6, pc}

0801a59c <__match>:
 801a59c:	b530      	push	{r4, r5, lr}
 801a59e:	6803      	ldr	r3, [r0, #0]
 801a5a0:	3301      	adds	r3, #1
 801a5a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a5a6:	b914      	cbnz	r4, 801a5ae <__match+0x12>
 801a5a8:	6003      	str	r3, [r0, #0]
 801a5aa:	2001      	movs	r0, #1
 801a5ac:	bd30      	pop	{r4, r5, pc}
 801a5ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a5b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801a5b6:	2d19      	cmp	r5, #25
 801a5b8:	bf98      	it	ls
 801a5ba:	3220      	addls	r2, #32
 801a5bc:	42a2      	cmp	r2, r4
 801a5be:	d0f0      	beq.n	801a5a2 <__match+0x6>
 801a5c0:	2000      	movs	r0, #0
 801a5c2:	e7f3      	b.n	801a5ac <__match+0x10>

0801a5c4 <__hexnan>:
 801a5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5c8:	680b      	ldr	r3, [r1, #0]
 801a5ca:	6801      	ldr	r1, [r0, #0]
 801a5cc:	115e      	asrs	r6, r3, #5
 801a5ce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801a5d2:	f013 031f 	ands.w	r3, r3, #31
 801a5d6:	b087      	sub	sp, #28
 801a5d8:	bf18      	it	ne
 801a5da:	3604      	addne	r6, #4
 801a5dc:	2500      	movs	r5, #0
 801a5de:	1f37      	subs	r7, r6, #4
 801a5e0:	4682      	mov	sl, r0
 801a5e2:	4690      	mov	r8, r2
 801a5e4:	9301      	str	r3, [sp, #4]
 801a5e6:	f846 5c04 	str.w	r5, [r6, #-4]
 801a5ea:	46b9      	mov	r9, r7
 801a5ec:	463c      	mov	r4, r7
 801a5ee:	9502      	str	r5, [sp, #8]
 801a5f0:	46ab      	mov	fp, r5
 801a5f2:	784a      	ldrb	r2, [r1, #1]
 801a5f4:	1c4b      	adds	r3, r1, #1
 801a5f6:	9303      	str	r3, [sp, #12]
 801a5f8:	b342      	cbz	r2, 801a64c <__hexnan+0x88>
 801a5fa:	4610      	mov	r0, r2
 801a5fc:	9105      	str	r1, [sp, #20]
 801a5fe:	9204      	str	r2, [sp, #16]
 801a600:	f7ff fd5f 	bl	801a0c2 <__hexdig_fun>
 801a604:	2800      	cmp	r0, #0
 801a606:	d14f      	bne.n	801a6a8 <__hexnan+0xe4>
 801a608:	9a04      	ldr	r2, [sp, #16]
 801a60a:	9905      	ldr	r1, [sp, #20]
 801a60c:	2a20      	cmp	r2, #32
 801a60e:	d818      	bhi.n	801a642 <__hexnan+0x7e>
 801a610:	9b02      	ldr	r3, [sp, #8]
 801a612:	459b      	cmp	fp, r3
 801a614:	dd13      	ble.n	801a63e <__hexnan+0x7a>
 801a616:	454c      	cmp	r4, r9
 801a618:	d206      	bcs.n	801a628 <__hexnan+0x64>
 801a61a:	2d07      	cmp	r5, #7
 801a61c:	dc04      	bgt.n	801a628 <__hexnan+0x64>
 801a61e:	462a      	mov	r2, r5
 801a620:	4649      	mov	r1, r9
 801a622:	4620      	mov	r0, r4
 801a624:	f7ff ffa8 	bl	801a578 <L_shift>
 801a628:	4544      	cmp	r4, r8
 801a62a:	d950      	bls.n	801a6ce <__hexnan+0x10a>
 801a62c:	2300      	movs	r3, #0
 801a62e:	f1a4 0904 	sub.w	r9, r4, #4
 801a632:	f844 3c04 	str.w	r3, [r4, #-4]
 801a636:	f8cd b008 	str.w	fp, [sp, #8]
 801a63a:	464c      	mov	r4, r9
 801a63c:	461d      	mov	r5, r3
 801a63e:	9903      	ldr	r1, [sp, #12]
 801a640:	e7d7      	b.n	801a5f2 <__hexnan+0x2e>
 801a642:	2a29      	cmp	r2, #41	; 0x29
 801a644:	d156      	bne.n	801a6f4 <__hexnan+0x130>
 801a646:	3102      	adds	r1, #2
 801a648:	f8ca 1000 	str.w	r1, [sl]
 801a64c:	f1bb 0f00 	cmp.w	fp, #0
 801a650:	d050      	beq.n	801a6f4 <__hexnan+0x130>
 801a652:	454c      	cmp	r4, r9
 801a654:	d206      	bcs.n	801a664 <__hexnan+0xa0>
 801a656:	2d07      	cmp	r5, #7
 801a658:	dc04      	bgt.n	801a664 <__hexnan+0xa0>
 801a65a:	462a      	mov	r2, r5
 801a65c:	4649      	mov	r1, r9
 801a65e:	4620      	mov	r0, r4
 801a660:	f7ff ff8a 	bl	801a578 <L_shift>
 801a664:	4544      	cmp	r4, r8
 801a666:	d934      	bls.n	801a6d2 <__hexnan+0x10e>
 801a668:	f1a8 0204 	sub.w	r2, r8, #4
 801a66c:	4623      	mov	r3, r4
 801a66e:	f853 1b04 	ldr.w	r1, [r3], #4
 801a672:	f842 1f04 	str.w	r1, [r2, #4]!
 801a676:	429f      	cmp	r7, r3
 801a678:	d2f9      	bcs.n	801a66e <__hexnan+0xaa>
 801a67a:	1b3b      	subs	r3, r7, r4
 801a67c:	f023 0303 	bic.w	r3, r3, #3
 801a680:	3304      	adds	r3, #4
 801a682:	3401      	adds	r4, #1
 801a684:	3e03      	subs	r6, #3
 801a686:	42b4      	cmp	r4, r6
 801a688:	bf88      	it	hi
 801a68a:	2304      	movhi	r3, #4
 801a68c:	4443      	add	r3, r8
 801a68e:	2200      	movs	r2, #0
 801a690:	f843 2b04 	str.w	r2, [r3], #4
 801a694:	429f      	cmp	r7, r3
 801a696:	d2fb      	bcs.n	801a690 <__hexnan+0xcc>
 801a698:	683b      	ldr	r3, [r7, #0]
 801a69a:	b91b      	cbnz	r3, 801a6a4 <__hexnan+0xe0>
 801a69c:	4547      	cmp	r7, r8
 801a69e:	d127      	bne.n	801a6f0 <__hexnan+0x12c>
 801a6a0:	2301      	movs	r3, #1
 801a6a2:	603b      	str	r3, [r7, #0]
 801a6a4:	2005      	movs	r0, #5
 801a6a6:	e026      	b.n	801a6f6 <__hexnan+0x132>
 801a6a8:	3501      	adds	r5, #1
 801a6aa:	2d08      	cmp	r5, #8
 801a6ac:	f10b 0b01 	add.w	fp, fp, #1
 801a6b0:	dd06      	ble.n	801a6c0 <__hexnan+0xfc>
 801a6b2:	4544      	cmp	r4, r8
 801a6b4:	d9c3      	bls.n	801a63e <__hexnan+0x7a>
 801a6b6:	2300      	movs	r3, #0
 801a6b8:	f844 3c04 	str.w	r3, [r4, #-4]
 801a6bc:	2501      	movs	r5, #1
 801a6be:	3c04      	subs	r4, #4
 801a6c0:	6822      	ldr	r2, [r4, #0]
 801a6c2:	f000 000f 	and.w	r0, r0, #15
 801a6c6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801a6ca:	6022      	str	r2, [r4, #0]
 801a6cc:	e7b7      	b.n	801a63e <__hexnan+0x7a>
 801a6ce:	2508      	movs	r5, #8
 801a6d0:	e7b5      	b.n	801a63e <__hexnan+0x7a>
 801a6d2:	9b01      	ldr	r3, [sp, #4]
 801a6d4:	2b00      	cmp	r3, #0
 801a6d6:	d0df      	beq.n	801a698 <__hexnan+0xd4>
 801a6d8:	f04f 32ff 	mov.w	r2, #4294967295
 801a6dc:	f1c3 0320 	rsb	r3, r3, #32
 801a6e0:	fa22 f303 	lsr.w	r3, r2, r3
 801a6e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801a6e8:	401a      	ands	r2, r3
 801a6ea:	f846 2c04 	str.w	r2, [r6, #-4]
 801a6ee:	e7d3      	b.n	801a698 <__hexnan+0xd4>
 801a6f0:	3f04      	subs	r7, #4
 801a6f2:	e7d1      	b.n	801a698 <__hexnan+0xd4>
 801a6f4:	2004      	movs	r0, #4
 801a6f6:	b007      	add	sp, #28
 801a6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a6fc <__locale_mb_cur_max>:
 801a6fc:	4b01      	ldr	r3, [pc, #4]	; (801a704 <__locale_mb_cur_max+0x8>)
 801a6fe:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 801a702:	4770      	bx	lr
 801a704:	200040c8 	.word	0x200040c8

0801a708 <_localeconv_r>:
 801a708:	4800      	ldr	r0, [pc, #0]	; (801a70c <_localeconv_r+0x4>)
 801a70a:	4770      	bx	lr
 801a70c:	200041b8 	.word	0x200041b8

0801a710 <__retarget_lock_init_recursive>:
 801a710:	4770      	bx	lr

0801a712 <__retarget_lock_close_recursive>:
 801a712:	4770      	bx	lr

0801a714 <__retarget_lock_acquire_recursive>:
 801a714:	4770      	bx	lr

0801a716 <__retarget_lock_release_recursive>:
 801a716:	4770      	bx	lr

0801a718 <__swhatbuf_r>:
 801a718:	b570      	push	{r4, r5, r6, lr}
 801a71a:	460e      	mov	r6, r1
 801a71c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a720:	2900      	cmp	r1, #0
 801a722:	b096      	sub	sp, #88	; 0x58
 801a724:	4614      	mov	r4, r2
 801a726:	461d      	mov	r5, r3
 801a728:	da09      	bge.n	801a73e <__swhatbuf_r+0x26>
 801a72a:	89b3      	ldrh	r3, [r6, #12]
 801a72c:	2200      	movs	r2, #0
 801a72e:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801a732:	602a      	str	r2, [r5, #0]
 801a734:	d116      	bne.n	801a764 <__swhatbuf_r+0x4c>
 801a736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a73a:	6023      	str	r3, [r4, #0]
 801a73c:	e015      	b.n	801a76a <__swhatbuf_r+0x52>
 801a73e:	466a      	mov	r2, sp
 801a740:	f001 fc60 	bl	801c004 <_fstat_r>
 801a744:	2800      	cmp	r0, #0
 801a746:	dbf0      	blt.n	801a72a <__swhatbuf_r+0x12>
 801a748:	9a01      	ldr	r2, [sp, #4]
 801a74a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a74e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a752:	425a      	negs	r2, r3
 801a754:	415a      	adcs	r2, r3
 801a756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a75a:	602a      	str	r2, [r5, #0]
 801a75c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801a760:	6023      	str	r3, [r4, #0]
 801a762:	e002      	b.n	801a76a <__swhatbuf_r+0x52>
 801a764:	2340      	movs	r3, #64	; 0x40
 801a766:	6023      	str	r3, [r4, #0]
 801a768:	4610      	mov	r0, r2
 801a76a:	b016      	add	sp, #88	; 0x58
 801a76c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a770 <__smakebuf_r>:
 801a770:	898b      	ldrh	r3, [r1, #12]
 801a772:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a774:	079d      	lsls	r5, r3, #30
 801a776:	4606      	mov	r6, r0
 801a778:	460c      	mov	r4, r1
 801a77a:	d507      	bpl.n	801a78c <__smakebuf_r+0x1c>
 801a77c:	f104 0343 	add.w	r3, r4, #67	; 0x43
 801a780:	6023      	str	r3, [r4, #0]
 801a782:	6123      	str	r3, [r4, #16]
 801a784:	2301      	movs	r3, #1
 801a786:	6163      	str	r3, [r4, #20]
 801a788:	b002      	add	sp, #8
 801a78a:	bd70      	pop	{r4, r5, r6, pc}
 801a78c:	ab01      	add	r3, sp, #4
 801a78e:	466a      	mov	r2, sp
 801a790:	f7ff ffc2 	bl	801a718 <__swhatbuf_r>
 801a794:	9900      	ldr	r1, [sp, #0]
 801a796:	4605      	mov	r5, r0
 801a798:	4630      	mov	r0, r6
 801a79a:	f7fa fc5b 	bl	8015054 <_malloc_r>
 801a79e:	b948      	cbnz	r0, 801a7b4 <__smakebuf_r+0x44>
 801a7a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a7a4:	059a      	lsls	r2, r3, #22
 801a7a6:	d4ef      	bmi.n	801a788 <__smakebuf_r+0x18>
 801a7a8:	f023 0303 	bic.w	r3, r3, #3
 801a7ac:	f043 0302 	orr.w	r3, r3, #2
 801a7b0:	81a3      	strh	r3, [r4, #12]
 801a7b2:	e7e3      	b.n	801a77c <__smakebuf_r+0xc>
 801a7b4:	4b0d      	ldr	r3, [pc, #52]	; (801a7ec <__smakebuf_r+0x7c>)
 801a7b6:	63f3      	str	r3, [r6, #60]	; 0x3c
 801a7b8:	89a3      	ldrh	r3, [r4, #12]
 801a7ba:	6020      	str	r0, [r4, #0]
 801a7bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a7c0:	81a3      	strh	r3, [r4, #12]
 801a7c2:	9b00      	ldr	r3, [sp, #0]
 801a7c4:	6163      	str	r3, [r4, #20]
 801a7c6:	9b01      	ldr	r3, [sp, #4]
 801a7c8:	6120      	str	r0, [r4, #16]
 801a7ca:	b15b      	cbz	r3, 801a7e4 <__smakebuf_r+0x74>
 801a7cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a7d0:	4630      	mov	r0, r6
 801a7d2:	f001 fd73 	bl	801c2bc <_isatty_r>
 801a7d6:	b128      	cbz	r0, 801a7e4 <__smakebuf_r+0x74>
 801a7d8:	89a3      	ldrh	r3, [r4, #12]
 801a7da:	f023 0303 	bic.w	r3, r3, #3
 801a7de:	f043 0301 	orr.w	r3, r3, #1
 801a7e2:	81a3      	strh	r3, [r4, #12]
 801a7e4:	89a0      	ldrh	r0, [r4, #12]
 801a7e6:	4305      	orrs	r5, r0
 801a7e8:	81a5      	strh	r5, [r4, #12]
 801a7ea:	e7cd      	b.n	801a788 <__smakebuf_r+0x18>
 801a7ec:	08019d05 	.word	0x08019d05

0801a7f0 <__ascii_mbtowc>:
 801a7f0:	b082      	sub	sp, #8
 801a7f2:	b901      	cbnz	r1, 801a7f6 <__ascii_mbtowc+0x6>
 801a7f4:	a901      	add	r1, sp, #4
 801a7f6:	b142      	cbz	r2, 801a80a <__ascii_mbtowc+0x1a>
 801a7f8:	b14b      	cbz	r3, 801a80e <__ascii_mbtowc+0x1e>
 801a7fa:	7813      	ldrb	r3, [r2, #0]
 801a7fc:	600b      	str	r3, [r1, #0]
 801a7fe:	7812      	ldrb	r2, [r2, #0]
 801a800:	1e10      	subs	r0, r2, #0
 801a802:	bf18      	it	ne
 801a804:	2001      	movne	r0, #1
 801a806:	b002      	add	sp, #8
 801a808:	4770      	bx	lr
 801a80a:	4610      	mov	r0, r2
 801a80c:	e7fb      	b.n	801a806 <__ascii_mbtowc+0x16>
 801a80e:	f06f 0001 	mvn.w	r0, #1
 801a812:	e7f8      	b.n	801a806 <__ascii_mbtowc+0x16>

0801a814 <_Balloc>:
 801a814:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801a816:	b570      	push	{r4, r5, r6, lr}
 801a818:	4605      	mov	r5, r0
 801a81a:	460c      	mov	r4, r1
 801a81c:	b17b      	cbz	r3, 801a83e <_Balloc+0x2a>
 801a81e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801a820:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a824:	b9a0      	cbnz	r0, 801a850 <_Balloc+0x3c>
 801a826:	2101      	movs	r1, #1
 801a828:	fa01 f604 	lsl.w	r6, r1, r4
 801a82c:	1d72      	adds	r2, r6, #5
 801a82e:	0092      	lsls	r2, r2, #2
 801a830:	4628      	mov	r0, r5
 801a832:	f001 fad3 	bl	801bddc <_calloc_r>
 801a836:	b148      	cbz	r0, 801a84c <_Balloc+0x38>
 801a838:	e9c0 4601 	strd	r4, r6, [r0, #4]
 801a83c:	e00b      	b.n	801a856 <_Balloc+0x42>
 801a83e:	2221      	movs	r2, #33	; 0x21
 801a840:	2104      	movs	r1, #4
 801a842:	f001 facb 	bl	801bddc <_calloc_r>
 801a846:	64e8      	str	r0, [r5, #76]	; 0x4c
 801a848:	2800      	cmp	r0, #0
 801a84a:	d1e8      	bne.n	801a81e <_Balloc+0xa>
 801a84c:	2000      	movs	r0, #0
 801a84e:	bd70      	pop	{r4, r5, r6, pc}
 801a850:	6802      	ldr	r2, [r0, #0]
 801a852:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 801a856:	2300      	movs	r3, #0
 801a858:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a85c:	e7f7      	b.n	801a84e <_Balloc+0x3a>

0801a85e <_Bfree>:
 801a85e:	b131      	cbz	r1, 801a86e <_Bfree+0x10>
 801a860:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801a862:	684a      	ldr	r2, [r1, #4]
 801a864:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a868:	6008      	str	r0, [r1, #0]
 801a86a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801a86e:	4770      	bx	lr

0801a870 <__multadd>:
 801a870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a874:	690e      	ldr	r6, [r1, #16]
 801a876:	4607      	mov	r7, r0
 801a878:	4698      	mov	r8, r3
 801a87a:	460c      	mov	r4, r1
 801a87c:	f101 0014 	add.w	r0, r1, #20
 801a880:	2300      	movs	r3, #0
 801a882:	6805      	ldr	r5, [r0, #0]
 801a884:	b2a9      	uxth	r1, r5
 801a886:	fb02 8101 	mla	r1, r2, r1, r8
 801a88a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801a88e:	0c2d      	lsrs	r5, r5, #16
 801a890:	fb02 c505 	mla	r5, r2, r5, ip
 801a894:	b289      	uxth	r1, r1
 801a896:	3301      	adds	r3, #1
 801a898:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801a89c:	429e      	cmp	r6, r3
 801a89e:	f840 1b04 	str.w	r1, [r0], #4
 801a8a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801a8a6:	dcec      	bgt.n	801a882 <__multadd+0x12>
 801a8a8:	f1b8 0f00 	cmp.w	r8, #0
 801a8ac:	d022      	beq.n	801a8f4 <__multadd+0x84>
 801a8ae:	68a3      	ldr	r3, [r4, #8]
 801a8b0:	42b3      	cmp	r3, r6
 801a8b2:	dc19      	bgt.n	801a8e8 <__multadd+0x78>
 801a8b4:	6861      	ldr	r1, [r4, #4]
 801a8b6:	4638      	mov	r0, r7
 801a8b8:	3101      	adds	r1, #1
 801a8ba:	f7ff ffab 	bl	801a814 <_Balloc>
 801a8be:	4605      	mov	r5, r0
 801a8c0:	b928      	cbnz	r0, 801a8ce <__multadd+0x5e>
 801a8c2:	4602      	mov	r2, r0
 801a8c4:	4b0d      	ldr	r3, [pc, #52]	; (801a8fc <__multadd+0x8c>)
 801a8c6:	480e      	ldr	r0, [pc, #56]	; (801a900 <__multadd+0x90>)
 801a8c8:	21b5      	movs	r1, #181	; 0xb5
 801a8ca:	f001 fa69 	bl	801bda0 <__assert_func>
 801a8ce:	6922      	ldr	r2, [r4, #16]
 801a8d0:	3202      	adds	r2, #2
 801a8d2:	f104 010c 	add.w	r1, r4, #12
 801a8d6:	0092      	lsls	r2, r2, #2
 801a8d8:	300c      	adds	r0, #12
 801a8da:	f7fa fe0b 	bl	80154f4 <memcpy>
 801a8de:	4621      	mov	r1, r4
 801a8e0:	4638      	mov	r0, r7
 801a8e2:	f7ff ffbc 	bl	801a85e <_Bfree>
 801a8e6:	462c      	mov	r4, r5
 801a8e8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801a8ec:	3601      	adds	r6, #1
 801a8ee:	f8c3 8014 	str.w	r8, [r3, #20]
 801a8f2:	6126      	str	r6, [r4, #16]
 801a8f4:	4620      	mov	r0, r4
 801a8f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a8fa:	bf00      	nop
 801a8fc:	0801e88f 	.word	0x0801e88f
 801a900:	0801e97c 	.word	0x0801e97c

0801a904 <__s2b>:
 801a904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a908:	460c      	mov	r4, r1
 801a90a:	4615      	mov	r5, r2
 801a90c:	461f      	mov	r7, r3
 801a90e:	2209      	movs	r2, #9
 801a910:	3308      	adds	r3, #8
 801a912:	4606      	mov	r6, r0
 801a914:	fb93 f3f2 	sdiv	r3, r3, r2
 801a918:	2100      	movs	r1, #0
 801a91a:	2201      	movs	r2, #1
 801a91c:	429a      	cmp	r2, r3
 801a91e:	db09      	blt.n	801a934 <__s2b+0x30>
 801a920:	4630      	mov	r0, r6
 801a922:	f7ff ff77 	bl	801a814 <_Balloc>
 801a926:	b940      	cbnz	r0, 801a93a <__s2b+0x36>
 801a928:	4602      	mov	r2, r0
 801a92a:	4b19      	ldr	r3, [pc, #100]	; (801a990 <__s2b+0x8c>)
 801a92c:	4819      	ldr	r0, [pc, #100]	; (801a994 <__s2b+0x90>)
 801a92e:	21ce      	movs	r1, #206	; 0xce
 801a930:	f001 fa36 	bl	801bda0 <__assert_func>
 801a934:	0052      	lsls	r2, r2, #1
 801a936:	3101      	adds	r1, #1
 801a938:	e7f0      	b.n	801a91c <__s2b+0x18>
 801a93a:	9b08      	ldr	r3, [sp, #32]
 801a93c:	6143      	str	r3, [r0, #20]
 801a93e:	2d09      	cmp	r5, #9
 801a940:	f04f 0301 	mov.w	r3, #1
 801a944:	6103      	str	r3, [r0, #16]
 801a946:	dd16      	ble.n	801a976 <__s2b+0x72>
 801a948:	f104 0909 	add.w	r9, r4, #9
 801a94c:	46c8      	mov	r8, r9
 801a94e:	442c      	add	r4, r5
 801a950:	f818 3b01 	ldrb.w	r3, [r8], #1
 801a954:	4601      	mov	r1, r0
 801a956:	3b30      	subs	r3, #48	; 0x30
 801a958:	220a      	movs	r2, #10
 801a95a:	4630      	mov	r0, r6
 801a95c:	f7ff ff88 	bl	801a870 <__multadd>
 801a960:	45a0      	cmp	r8, r4
 801a962:	d1f5      	bne.n	801a950 <__s2b+0x4c>
 801a964:	f1a5 0408 	sub.w	r4, r5, #8
 801a968:	444c      	add	r4, r9
 801a96a:	1b2d      	subs	r5, r5, r4
 801a96c:	1963      	adds	r3, r4, r5
 801a96e:	42bb      	cmp	r3, r7
 801a970:	db04      	blt.n	801a97c <__s2b+0x78>
 801a972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a976:	340a      	adds	r4, #10
 801a978:	2509      	movs	r5, #9
 801a97a:	e7f6      	b.n	801a96a <__s2b+0x66>
 801a97c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a980:	4601      	mov	r1, r0
 801a982:	3b30      	subs	r3, #48	; 0x30
 801a984:	220a      	movs	r2, #10
 801a986:	4630      	mov	r0, r6
 801a988:	f7ff ff72 	bl	801a870 <__multadd>
 801a98c:	e7ee      	b.n	801a96c <__s2b+0x68>
 801a98e:	bf00      	nop
 801a990:	0801e88f 	.word	0x0801e88f
 801a994:	0801e97c 	.word	0x0801e97c

0801a998 <__hi0bits>:
 801a998:	0c03      	lsrs	r3, r0, #16
 801a99a:	041b      	lsls	r3, r3, #16
 801a99c:	b9d3      	cbnz	r3, 801a9d4 <__hi0bits+0x3c>
 801a99e:	0400      	lsls	r0, r0, #16
 801a9a0:	2310      	movs	r3, #16
 801a9a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801a9a6:	bf04      	itt	eq
 801a9a8:	0200      	lsleq	r0, r0, #8
 801a9aa:	3308      	addeq	r3, #8
 801a9ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801a9b0:	bf04      	itt	eq
 801a9b2:	0100      	lsleq	r0, r0, #4
 801a9b4:	3304      	addeq	r3, #4
 801a9b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801a9ba:	bf04      	itt	eq
 801a9bc:	0080      	lsleq	r0, r0, #2
 801a9be:	3302      	addeq	r3, #2
 801a9c0:	2800      	cmp	r0, #0
 801a9c2:	db05      	blt.n	801a9d0 <__hi0bits+0x38>
 801a9c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801a9c8:	f103 0301 	add.w	r3, r3, #1
 801a9cc:	bf08      	it	eq
 801a9ce:	2320      	moveq	r3, #32
 801a9d0:	4618      	mov	r0, r3
 801a9d2:	4770      	bx	lr
 801a9d4:	2300      	movs	r3, #0
 801a9d6:	e7e4      	b.n	801a9a2 <__hi0bits+0xa>

0801a9d8 <__lo0bits>:
 801a9d8:	6803      	ldr	r3, [r0, #0]
 801a9da:	f013 0207 	ands.w	r2, r3, #7
 801a9de:	4601      	mov	r1, r0
 801a9e0:	d00b      	beq.n	801a9fa <__lo0bits+0x22>
 801a9e2:	07da      	lsls	r2, r3, #31
 801a9e4:	d424      	bmi.n	801aa30 <__lo0bits+0x58>
 801a9e6:	0798      	lsls	r0, r3, #30
 801a9e8:	bf49      	itett	mi
 801a9ea:	085b      	lsrmi	r3, r3, #1
 801a9ec:	089b      	lsrpl	r3, r3, #2
 801a9ee:	2001      	movmi	r0, #1
 801a9f0:	600b      	strmi	r3, [r1, #0]
 801a9f2:	bf5c      	itt	pl
 801a9f4:	600b      	strpl	r3, [r1, #0]
 801a9f6:	2002      	movpl	r0, #2
 801a9f8:	4770      	bx	lr
 801a9fa:	b298      	uxth	r0, r3
 801a9fc:	b9b0      	cbnz	r0, 801aa2c <__lo0bits+0x54>
 801a9fe:	0c1b      	lsrs	r3, r3, #16
 801aa00:	2010      	movs	r0, #16
 801aa02:	f013 0fff 	tst.w	r3, #255	; 0xff
 801aa06:	bf04      	itt	eq
 801aa08:	0a1b      	lsreq	r3, r3, #8
 801aa0a:	3008      	addeq	r0, #8
 801aa0c:	071a      	lsls	r2, r3, #28
 801aa0e:	bf04      	itt	eq
 801aa10:	091b      	lsreq	r3, r3, #4
 801aa12:	3004      	addeq	r0, #4
 801aa14:	079a      	lsls	r2, r3, #30
 801aa16:	bf04      	itt	eq
 801aa18:	089b      	lsreq	r3, r3, #2
 801aa1a:	3002      	addeq	r0, #2
 801aa1c:	07da      	lsls	r2, r3, #31
 801aa1e:	d403      	bmi.n	801aa28 <__lo0bits+0x50>
 801aa20:	085b      	lsrs	r3, r3, #1
 801aa22:	f100 0001 	add.w	r0, r0, #1
 801aa26:	d005      	beq.n	801aa34 <__lo0bits+0x5c>
 801aa28:	600b      	str	r3, [r1, #0]
 801aa2a:	4770      	bx	lr
 801aa2c:	4610      	mov	r0, r2
 801aa2e:	e7e8      	b.n	801aa02 <__lo0bits+0x2a>
 801aa30:	2000      	movs	r0, #0
 801aa32:	4770      	bx	lr
 801aa34:	2020      	movs	r0, #32
 801aa36:	4770      	bx	lr

0801aa38 <__i2b>:
 801aa38:	b510      	push	{r4, lr}
 801aa3a:	460c      	mov	r4, r1
 801aa3c:	2101      	movs	r1, #1
 801aa3e:	f7ff fee9 	bl	801a814 <_Balloc>
 801aa42:	4602      	mov	r2, r0
 801aa44:	b928      	cbnz	r0, 801aa52 <__i2b+0x1a>
 801aa46:	4b05      	ldr	r3, [pc, #20]	; (801aa5c <__i2b+0x24>)
 801aa48:	4805      	ldr	r0, [pc, #20]	; (801aa60 <__i2b+0x28>)
 801aa4a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801aa4e:	f001 f9a7 	bl	801bda0 <__assert_func>
 801aa52:	2301      	movs	r3, #1
 801aa54:	6144      	str	r4, [r0, #20]
 801aa56:	6103      	str	r3, [r0, #16]
 801aa58:	bd10      	pop	{r4, pc}
 801aa5a:	bf00      	nop
 801aa5c:	0801e88f 	.word	0x0801e88f
 801aa60:	0801e97c 	.word	0x0801e97c

0801aa64 <__multiply>:
 801aa64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa68:	4614      	mov	r4, r2
 801aa6a:	690a      	ldr	r2, [r1, #16]
 801aa6c:	6923      	ldr	r3, [r4, #16]
 801aa6e:	429a      	cmp	r2, r3
 801aa70:	bfb8      	it	lt
 801aa72:	460b      	movlt	r3, r1
 801aa74:	460d      	mov	r5, r1
 801aa76:	bfbc      	itt	lt
 801aa78:	4625      	movlt	r5, r4
 801aa7a:	461c      	movlt	r4, r3
 801aa7c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801aa80:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801aa84:	68ab      	ldr	r3, [r5, #8]
 801aa86:	6869      	ldr	r1, [r5, #4]
 801aa88:	eb0a 0709 	add.w	r7, sl, r9
 801aa8c:	42bb      	cmp	r3, r7
 801aa8e:	b085      	sub	sp, #20
 801aa90:	bfb8      	it	lt
 801aa92:	3101      	addlt	r1, #1
 801aa94:	f7ff febe 	bl	801a814 <_Balloc>
 801aa98:	b930      	cbnz	r0, 801aaa8 <__multiply+0x44>
 801aa9a:	4602      	mov	r2, r0
 801aa9c:	4b42      	ldr	r3, [pc, #264]	; (801aba8 <__multiply+0x144>)
 801aa9e:	4843      	ldr	r0, [pc, #268]	; (801abac <__multiply+0x148>)
 801aaa0:	f240 115d 	movw	r1, #349	; 0x15d
 801aaa4:	f001 f97c 	bl	801bda0 <__assert_func>
 801aaa8:	f100 0614 	add.w	r6, r0, #20
 801aaac:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801aab0:	4633      	mov	r3, r6
 801aab2:	2200      	movs	r2, #0
 801aab4:	4543      	cmp	r3, r8
 801aab6:	d31e      	bcc.n	801aaf6 <__multiply+0x92>
 801aab8:	f105 0c14 	add.w	ip, r5, #20
 801aabc:	f104 0314 	add.w	r3, r4, #20
 801aac0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801aac4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801aac8:	9202      	str	r2, [sp, #8]
 801aaca:	ebac 0205 	sub.w	r2, ip, r5
 801aace:	3a15      	subs	r2, #21
 801aad0:	f022 0203 	bic.w	r2, r2, #3
 801aad4:	3204      	adds	r2, #4
 801aad6:	f105 0115 	add.w	r1, r5, #21
 801aada:	458c      	cmp	ip, r1
 801aadc:	bf38      	it	cc
 801aade:	2204      	movcc	r2, #4
 801aae0:	9201      	str	r2, [sp, #4]
 801aae2:	9a02      	ldr	r2, [sp, #8]
 801aae4:	9303      	str	r3, [sp, #12]
 801aae6:	429a      	cmp	r2, r3
 801aae8:	d808      	bhi.n	801aafc <__multiply+0x98>
 801aaea:	2f00      	cmp	r7, #0
 801aaec:	dc55      	bgt.n	801ab9a <__multiply+0x136>
 801aaee:	6107      	str	r7, [r0, #16]
 801aaf0:	b005      	add	sp, #20
 801aaf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aaf6:	f843 2b04 	str.w	r2, [r3], #4
 801aafa:	e7db      	b.n	801aab4 <__multiply+0x50>
 801aafc:	f8b3 a000 	ldrh.w	sl, [r3]
 801ab00:	f1ba 0f00 	cmp.w	sl, #0
 801ab04:	d020      	beq.n	801ab48 <__multiply+0xe4>
 801ab06:	f105 0e14 	add.w	lr, r5, #20
 801ab0a:	46b1      	mov	r9, r6
 801ab0c:	2200      	movs	r2, #0
 801ab0e:	f85e 4b04 	ldr.w	r4, [lr], #4
 801ab12:	f8d9 b000 	ldr.w	fp, [r9]
 801ab16:	b2a1      	uxth	r1, r4
 801ab18:	fa1f fb8b 	uxth.w	fp, fp
 801ab1c:	fb0a b101 	mla	r1, sl, r1, fp
 801ab20:	4411      	add	r1, r2
 801ab22:	f8d9 2000 	ldr.w	r2, [r9]
 801ab26:	0c24      	lsrs	r4, r4, #16
 801ab28:	0c12      	lsrs	r2, r2, #16
 801ab2a:	fb0a 2404 	mla	r4, sl, r4, r2
 801ab2e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801ab32:	b289      	uxth	r1, r1
 801ab34:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801ab38:	45f4      	cmp	ip, lr
 801ab3a:	f849 1b04 	str.w	r1, [r9], #4
 801ab3e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801ab42:	d8e4      	bhi.n	801ab0e <__multiply+0xaa>
 801ab44:	9901      	ldr	r1, [sp, #4]
 801ab46:	5072      	str	r2, [r6, r1]
 801ab48:	9a03      	ldr	r2, [sp, #12]
 801ab4a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801ab4e:	3304      	adds	r3, #4
 801ab50:	f1b9 0f00 	cmp.w	r9, #0
 801ab54:	d01f      	beq.n	801ab96 <__multiply+0x132>
 801ab56:	6834      	ldr	r4, [r6, #0]
 801ab58:	f105 0114 	add.w	r1, r5, #20
 801ab5c:	46b6      	mov	lr, r6
 801ab5e:	f04f 0a00 	mov.w	sl, #0
 801ab62:	880a      	ldrh	r2, [r1, #0]
 801ab64:	f8be b002 	ldrh.w	fp, [lr, #2]
 801ab68:	fb09 b202 	mla	r2, r9, r2, fp
 801ab6c:	4492      	add	sl, r2
 801ab6e:	b2a4      	uxth	r4, r4
 801ab70:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801ab74:	f84e 4b04 	str.w	r4, [lr], #4
 801ab78:	f851 4b04 	ldr.w	r4, [r1], #4
 801ab7c:	f8be 2000 	ldrh.w	r2, [lr]
 801ab80:	0c24      	lsrs	r4, r4, #16
 801ab82:	fb09 2404 	mla	r4, r9, r4, r2
 801ab86:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801ab8a:	458c      	cmp	ip, r1
 801ab8c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801ab90:	d8e7      	bhi.n	801ab62 <__multiply+0xfe>
 801ab92:	9a01      	ldr	r2, [sp, #4]
 801ab94:	50b4      	str	r4, [r6, r2]
 801ab96:	3604      	adds	r6, #4
 801ab98:	e7a3      	b.n	801aae2 <__multiply+0x7e>
 801ab9a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ab9e:	2b00      	cmp	r3, #0
 801aba0:	d1a5      	bne.n	801aaee <__multiply+0x8a>
 801aba2:	3f01      	subs	r7, #1
 801aba4:	e7a1      	b.n	801aaea <__multiply+0x86>
 801aba6:	bf00      	nop
 801aba8:	0801e88f 	.word	0x0801e88f
 801abac:	0801e97c 	.word	0x0801e97c

0801abb0 <__pow5mult>:
 801abb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801abb4:	4615      	mov	r5, r2
 801abb6:	f012 0203 	ands.w	r2, r2, #3
 801abba:	4606      	mov	r6, r0
 801abbc:	460f      	mov	r7, r1
 801abbe:	d007      	beq.n	801abd0 <__pow5mult+0x20>
 801abc0:	4c1a      	ldr	r4, [pc, #104]	; (801ac2c <__pow5mult+0x7c>)
 801abc2:	3a01      	subs	r2, #1
 801abc4:	2300      	movs	r3, #0
 801abc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801abca:	f7ff fe51 	bl	801a870 <__multadd>
 801abce:	4607      	mov	r7, r0
 801abd0:	10ad      	asrs	r5, r5, #2
 801abd2:	d027      	beq.n	801ac24 <__pow5mult+0x74>
 801abd4:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 801abd6:	b944      	cbnz	r4, 801abea <__pow5mult+0x3a>
 801abd8:	f240 2171 	movw	r1, #625	; 0x271
 801abdc:	4630      	mov	r0, r6
 801abde:	f7ff ff2b 	bl	801aa38 <__i2b>
 801abe2:	2300      	movs	r3, #0
 801abe4:	64b0      	str	r0, [r6, #72]	; 0x48
 801abe6:	4604      	mov	r4, r0
 801abe8:	6003      	str	r3, [r0, #0]
 801abea:	f04f 0900 	mov.w	r9, #0
 801abee:	07eb      	lsls	r3, r5, #31
 801abf0:	d50a      	bpl.n	801ac08 <__pow5mult+0x58>
 801abf2:	4639      	mov	r1, r7
 801abf4:	4622      	mov	r2, r4
 801abf6:	4630      	mov	r0, r6
 801abf8:	f7ff ff34 	bl	801aa64 <__multiply>
 801abfc:	4639      	mov	r1, r7
 801abfe:	4680      	mov	r8, r0
 801ac00:	4630      	mov	r0, r6
 801ac02:	f7ff fe2c 	bl	801a85e <_Bfree>
 801ac06:	4647      	mov	r7, r8
 801ac08:	106d      	asrs	r5, r5, #1
 801ac0a:	d00b      	beq.n	801ac24 <__pow5mult+0x74>
 801ac0c:	6820      	ldr	r0, [r4, #0]
 801ac0e:	b938      	cbnz	r0, 801ac20 <__pow5mult+0x70>
 801ac10:	4622      	mov	r2, r4
 801ac12:	4621      	mov	r1, r4
 801ac14:	4630      	mov	r0, r6
 801ac16:	f7ff ff25 	bl	801aa64 <__multiply>
 801ac1a:	6020      	str	r0, [r4, #0]
 801ac1c:	f8c0 9000 	str.w	r9, [r0]
 801ac20:	4604      	mov	r4, r0
 801ac22:	e7e4      	b.n	801abee <__pow5mult+0x3e>
 801ac24:	4638      	mov	r0, r7
 801ac26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ac2a:	bf00      	nop
 801ac2c:	0801ead0 	.word	0x0801ead0

0801ac30 <__lshift>:
 801ac30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ac34:	460c      	mov	r4, r1
 801ac36:	6849      	ldr	r1, [r1, #4]
 801ac38:	6923      	ldr	r3, [r4, #16]
 801ac3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ac3e:	68a3      	ldr	r3, [r4, #8]
 801ac40:	4607      	mov	r7, r0
 801ac42:	4691      	mov	r9, r2
 801ac44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ac48:	f108 0601 	add.w	r6, r8, #1
 801ac4c:	42b3      	cmp	r3, r6
 801ac4e:	db0b      	blt.n	801ac68 <__lshift+0x38>
 801ac50:	4638      	mov	r0, r7
 801ac52:	f7ff fddf 	bl	801a814 <_Balloc>
 801ac56:	4605      	mov	r5, r0
 801ac58:	b948      	cbnz	r0, 801ac6e <__lshift+0x3e>
 801ac5a:	4602      	mov	r2, r0
 801ac5c:	4b28      	ldr	r3, [pc, #160]	; (801ad00 <__lshift+0xd0>)
 801ac5e:	4829      	ldr	r0, [pc, #164]	; (801ad04 <__lshift+0xd4>)
 801ac60:	f240 11d9 	movw	r1, #473	; 0x1d9
 801ac64:	f001 f89c 	bl	801bda0 <__assert_func>
 801ac68:	3101      	adds	r1, #1
 801ac6a:	005b      	lsls	r3, r3, #1
 801ac6c:	e7ee      	b.n	801ac4c <__lshift+0x1c>
 801ac6e:	2300      	movs	r3, #0
 801ac70:	f100 0114 	add.w	r1, r0, #20
 801ac74:	f100 0210 	add.w	r2, r0, #16
 801ac78:	4618      	mov	r0, r3
 801ac7a:	4553      	cmp	r3, sl
 801ac7c:	db33      	blt.n	801ace6 <__lshift+0xb6>
 801ac7e:	6920      	ldr	r0, [r4, #16]
 801ac80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ac84:	f104 0314 	add.w	r3, r4, #20
 801ac88:	f019 091f 	ands.w	r9, r9, #31
 801ac8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ac90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801ac94:	d02b      	beq.n	801acee <__lshift+0xbe>
 801ac96:	f1c9 0e20 	rsb	lr, r9, #32
 801ac9a:	468a      	mov	sl, r1
 801ac9c:	2200      	movs	r2, #0
 801ac9e:	6818      	ldr	r0, [r3, #0]
 801aca0:	fa00 f009 	lsl.w	r0, r0, r9
 801aca4:	4302      	orrs	r2, r0
 801aca6:	f84a 2b04 	str.w	r2, [sl], #4
 801acaa:	f853 2b04 	ldr.w	r2, [r3], #4
 801acae:	459c      	cmp	ip, r3
 801acb0:	fa22 f20e 	lsr.w	r2, r2, lr
 801acb4:	d8f3      	bhi.n	801ac9e <__lshift+0x6e>
 801acb6:	ebac 0304 	sub.w	r3, ip, r4
 801acba:	3b15      	subs	r3, #21
 801acbc:	f023 0303 	bic.w	r3, r3, #3
 801acc0:	3304      	adds	r3, #4
 801acc2:	f104 0015 	add.w	r0, r4, #21
 801acc6:	4584      	cmp	ip, r0
 801acc8:	bf38      	it	cc
 801acca:	2304      	movcc	r3, #4
 801accc:	50ca      	str	r2, [r1, r3]
 801acce:	b10a      	cbz	r2, 801acd4 <__lshift+0xa4>
 801acd0:	f108 0602 	add.w	r6, r8, #2
 801acd4:	3e01      	subs	r6, #1
 801acd6:	4638      	mov	r0, r7
 801acd8:	612e      	str	r6, [r5, #16]
 801acda:	4621      	mov	r1, r4
 801acdc:	f7ff fdbf 	bl	801a85e <_Bfree>
 801ace0:	4628      	mov	r0, r5
 801ace2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ace6:	f842 0f04 	str.w	r0, [r2, #4]!
 801acea:	3301      	adds	r3, #1
 801acec:	e7c5      	b.n	801ac7a <__lshift+0x4a>
 801acee:	3904      	subs	r1, #4
 801acf0:	f853 2b04 	ldr.w	r2, [r3], #4
 801acf4:	f841 2f04 	str.w	r2, [r1, #4]!
 801acf8:	459c      	cmp	ip, r3
 801acfa:	d8f9      	bhi.n	801acf0 <__lshift+0xc0>
 801acfc:	e7ea      	b.n	801acd4 <__lshift+0xa4>
 801acfe:	bf00      	nop
 801ad00:	0801e88f 	.word	0x0801e88f
 801ad04:	0801e97c 	.word	0x0801e97c

0801ad08 <__mcmp>:
 801ad08:	b530      	push	{r4, r5, lr}
 801ad0a:	6902      	ldr	r2, [r0, #16]
 801ad0c:	690c      	ldr	r4, [r1, #16]
 801ad0e:	1b12      	subs	r2, r2, r4
 801ad10:	d10e      	bne.n	801ad30 <__mcmp+0x28>
 801ad12:	f100 0314 	add.w	r3, r0, #20
 801ad16:	3114      	adds	r1, #20
 801ad18:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801ad1c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801ad20:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801ad24:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801ad28:	42a5      	cmp	r5, r4
 801ad2a:	d003      	beq.n	801ad34 <__mcmp+0x2c>
 801ad2c:	d305      	bcc.n	801ad3a <__mcmp+0x32>
 801ad2e:	2201      	movs	r2, #1
 801ad30:	4610      	mov	r0, r2
 801ad32:	bd30      	pop	{r4, r5, pc}
 801ad34:	4283      	cmp	r3, r0
 801ad36:	d3f3      	bcc.n	801ad20 <__mcmp+0x18>
 801ad38:	e7fa      	b.n	801ad30 <__mcmp+0x28>
 801ad3a:	f04f 32ff 	mov.w	r2, #4294967295
 801ad3e:	e7f7      	b.n	801ad30 <__mcmp+0x28>

0801ad40 <__mdiff>:
 801ad40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad44:	460c      	mov	r4, r1
 801ad46:	4606      	mov	r6, r0
 801ad48:	4611      	mov	r1, r2
 801ad4a:	4620      	mov	r0, r4
 801ad4c:	4617      	mov	r7, r2
 801ad4e:	f7ff ffdb 	bl	801ad08 <__mcmp>
 801ad52:	1e05      	subs	r5, r0, #0
 801ad54:	d110      	bne.n	801ad78 <__mdiff+0x38>
 801ad56:	4629      	mov	r1, r5
 801ad58:	4630      	mov	r0, r6
 801ad5a:	f7ff fd5b 	bl	801a814 <_Balloc>
 801ad5e:	b930      	cbnz	r0, 801ad6e <__mdiff+0x2e>
 801ad60:	4b39      	ldr	r3, [pc, #228]	; (801ae48 <__mdiff+0x108>)
 801ad62:	4602      	mov	r2, r0
 801ad64:	f240 2132 	movw	r1, #562	; 0x232
 801ad68:	4838      	ldr	r0, [pc, #224]	; (801ae4c <__mdiff+0x10c>)
 801ad6a:	f001 f819 	bl	801bda0 <__assert_func>
 801ad6e:	2301      	movs	r3, #1
 801ad70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801ad74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad78:	bfa4      	itt	ge
 801ad7a:	463b      	movge	r3, r7
 801ad7c:	4627      	movge	r7, r4
 801ad7e:	4630      	mov	r0, r6
 801ad80:	6879      	ldr	r1, [r7, #4]
 801ad82:	bfa6      	itte	ge
 801ad84:	461c      	movge	r4, r3
 801ad86:	2500      	movge	r5, #0
 801ad88:	2501      	movlt	r5, #1
 801ad8a:	f7ff fd43 	bl	801a814 <_Balloc>
 801ad8e:	b920      	cbnz	r0, 801ad9a <__mdiff+0x5a>
 801ad90:	4b2d      	ldr	r3, [pc, #180]	; (801ae48 <__mdiff+0x108>)
 801ad92:	4602      	mov	r2, r0
 801ad94:	f44f 7110 	mov.w	r1, #576	; 0x240
 801ad98:	e7e6      	b.n	801ad68 <__mdiff+0x28>
 801ad9a:	693e      	ldr	r6, [r7, #16]
 801ad9c:	60c5      	str	r5, [r0, #12]
 801ad9e:	6925      	ldr	r5, [r4, #16]
 801ada0:	f107 0114 	add.w	r1, r7, #20
 801ada4:	f104 0914 	add.w	r9, r4, #20
 801ada8:	f100 0e14 	add.w	lr, r0, #20
 801adac:	f107 0210 	add.w	r2, r7, #16
 801adb0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801adb4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801adb8:	46f2      	mov	sl, lr
 801adba:	2700      	movs	r7, #0
 801adbc:	f859 3b04 	ldr.w	r3, [r9], #4
 801adc0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801adc4:	fa1f f883 	uxth.w	r8, r3
 801adc8:	fa17 f78b 	uxtah	r7, r7, fp
 801adcc:	0c1b      	lsrs	r3, r3, #16
 801adce:	eba7 0808 	sub.w	r8, r7, r8
 801add2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801add6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801adda:	fa1f f888 	uxth.w	r8, r8
 801adde:	141f      	asrs	r7, r3, #16
 801ade0:	454d      	cmp	r5, r9
 801ade2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801ade6:	f84a 3b04 	str.w	r3, [sl], #4
 801adea:	d8e7      	bhi.n	801adbc <__mdiff+0x7c>
 801adec:	1b2b      	subs	r3, r5, r4
 801adee:	3b15      	subs	r3, #21
 801adf0:	f023 0303 	bic.w	r3, r3, #3
 801adf4:	3304      	adds	r3, #4
 801adf6:	3415      	adds	r4, #21
 801adf8:	42a5      	cmp	r5, r4
 801adfa:	bf38      	it	cc
 801adfc:	2304      	movcc	r3, #4
 801adfe:	4419      	add	r1, r3
 801ae00:	4473      	add	r3, lr
 801ae02:	469e      	mov	lr, r3
 801ae04:	460d      	mov	r5, r1
 801ae06:	4565      	cmp	r5, ip
 801ae08:	d30e      	bcc.n	801ae28 <__mdiff+0xe8>
 801ae0a:	f10c 0203 	add.w	r2, ip, #3
 801ae0e:	1a52      	subs	r2, r2, r1
 801ae10:	f022 0203 	bic.w	r2, r2, #3
 801ae14:	3903      	subs	r1, #3
 801ae16:	458c      	cmp	ip, r1
 801ae18:	bf38      	it	cc
 801ae1a:	2200      	movcc	r2, #0
 801ae1c:	441a      	add	r2, r3
 801ae1e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801ae22:	b17b      	cbz	r3, 801ae44 <__mdiff+0x104>
 801ae24:	6106      	str	r6, [r0, #16]
 801ae26:	e7a5      	b.n	801ad74 <__mdiff+0x34>
 801ae28:	f855 8b04 	ldr.w	r8, [r5], #4
 801ae2c:	fa17 f488 	uxtah	r4, r7, r8
 801ae30:	1422      	asrs	r2, r4, #16
 801ae32:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801ae36:	b2a4      	uxth	r4, r4
 801ae38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801ae3c:	f84e 4b04 	str.w	r4, [lr], #4
 801ae40:	1417      	asrs	r7, r2, #16
 801ae42:	e7e0      	b.n	801ae06 <__mdiff+0xc6>
 801ae44:	3e01      	subs	r6, #1
 801ae46:	e7ea      	b.n	801ae1e <__mdiff+0xde>
 801ae48:	0801e88f 	.word	0x0801e88f
 801ae4c:	0801e97c 	.word	0x0801e97c

0801ae50 <__ulp>:
 801ae50:	b082      	sub	sp, #8
 801ae52:	ed8d 0b00 	vstr	d0, [sp]
 801ae56:	9b01      	ldr	r3, [sp, #4]
 801ae58:	4912      	ldr	r1, [pc, #72]	; (801aea4 <__ulp+0x54>)
 801ae5a:	4019      	ands	r1, r3
 801ae5c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801ae60:	2900      	cmp	r1, #0
 801ae62:	dd05      	ble.n	801ae70 <__ulp+0x20>
 801ae64:	2200      	movs	r2, #0
 801ae66:	460b      	mov	r3, r1
 801ae68:	ec43 2b10 	vmov	d0, r2, r3
 801ae6c:	b002      	add	sp, #8
 801ae6e:	4770      	bx	lr
 801ae70:	4249      	negs	r1, r1
 801ae72:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801ae76:	ea4f 5021 	mov.w	r0, r1, asr #20
 801ae7a:	f04f 0200 	mov.w	r2, #0
 801ae7e:	f04f 0300 	mov.w	r3, #0
 801ae82:	da04      	bge.n	801ae8e <__ulp+0x3e>
 801ae84:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801ae88:	fa41 f300 	asr.w	r3, r1, r0
 801ae8c:	e7ec      	b.n	801ae68 <__ulp+0x18>
 801ae8e:	f1a0 0114 	sub.w	r1, r0, #20
 801ae92:	291e      	cmp	r1, #30
 801ae94:	bfda      	itte	le
 801ae96:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801ae9a:	fa20 f101 	lsrle.w	r1, r0, r1
 801ae9e:	2101      	movgt	r1, #1
 801aea0:	460a      	mov	r2, r1
 801aea2:	e7e1      	b.n	801ae68 <__ulp+0x18>
 801aea4:	7ff00000 	.word	0x7ff00000

0801aea8 <__b2d>:
 801aea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aeaa:	6905      	ldr	r5, [r0, #16]
 801aeac:	f100 0714 	add.w	r7, r0, #20
 801aeb0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801aeb4:	1f2e      	subs	r6, r5, #4
 801aeb6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801aeba:	4620      	mov	r0, r4
 801aebc:	f7ff fd6c 	bl	801a998 <__hi0bits>
 801aec0:	f1c0 0320 	rsb	r3, r0, #32
 801aec4:	280a      	cmp	r0, #10
 801aec6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801af44 <__b2d+0x9c>
 801aeca:	600b      	str	r3, [r1, #0]
 801aecc:	dc14      	bgt.n	801aef8 <__b2d+0x50>
 801aece:	f1c0 0e0b 	rsb	lr, r0, #11
 801aed2:	fa24 f10e 	lsr.w	r1, r4, lr
 801aed6:	42b7      	cmp	r7, r6
 801aed8:	ea41 030c 	orr.w	r3, r1, ip
 801aedc:	bf34      	ite	cc
 801aede:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801aee2:	2100      	movcs	r1, #0
 801aee4:	3015      	adds	r0, #21
 801aee6:	fa04 f000 	lsl.w	r0, r4, r0
 801aeea:	fa21 f10e 	lsr.w	r1, r1, lr
 801aeee:	ea40 0201 	orr.w	r2, r0, r1
 801aef2:	ec43 2b10 	vmov	d0, r2, r3
 801aef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aef8:	42b7      	cmp	r7, r6
 801aefa:	bf3a      	itte	cc
 801aefc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801af00:	f1a5 0608 	subcc.w	r6, r5, #8
 801af04:	2100      	movcs	r1, #0
 801af06:	380b      	subs	r0, #11
 801af08:	d017      	beq.n	801af3a <__b2d+0x92>
 801af0a:	f1c0 0c20 	rsb	ip, r0, #32
 801af0e:	fa04 f500 	lsl.w	r5, r4, r0
 801af12:	42be      	cmp	r6, r7
 801af14:	fa21 f40c 	lsr.w	r4, r1, ip
 801af18:	ea45 0504 	orr.w	r5, r5, r4
 801af1c:	bf8c      	ite	hi
 801af1e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801af22:	2400      	movls	r4, #0
 801af24:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801af28:	fa01 f000 	lsl.w	r0, r1, r0
 801af2c:	fa24 f40c 	lsr.w	r4, r4, ip
 801af30:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801af34:	ea40 0204 	orr.w	r2, r0, r4
 801af38:	e7db      	b.n	801aef2 <__b2d+0x4a>
 801af3a:	ea44 030c 	orr.w	r3, r4, ip
 801af3e:	460a      	mov	r2, r1
 801af40:	e7d7      	b.n	801aef2 <__b2d+0x4a>
 801af42:	bf00      	nop
 801af44:	3ff00000 	.word	0x3ff00000

0801af48 <__d2b>:
 801af48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801af4c:	4689      	mov	r9, r1
 801af4e:	2101      	movs	r1, #1
 801af50:	ec57 6b10 	vmov	r6, r7, d0
 801af54:	4690      	mov	r8, r2
 801af56:	f7ff fc5d 	bl	801a814 <_Balloc>
 801af5a:	4604      	mov	r4, r0
 801af5c:	b930      	cbnz	r0, 801af6c <__d2b+0x24>
 801af5e:	4602      	mov	r2, r0
 801af60:	4b25      	ldr	r3, [pc, #148]	; (801aff8 <__d2b+0xb0>)
 801af62:	4826      	ldr	r0, [pc, #152]	; (801affc <__d2b+0xb4>)
 801af64:	f240 310a 	movw	r1, #778	; 0x30a
 801af68:	f000 ff1a 	bl	801bda0 <__assert_func>
 801af6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801af70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801af74:	bb35      	cbnz	r5, 801afc4 <__d2b+0x7c>
 801af76:	2e00      	cmp	r6, #0
 801af78:	9301      	str	r3, [sp, #4]
 801af7a:	d028      	beq.n	801afce <__d2b+0x86>
 801af7c:	4668      	mov	r0, sp
 801af7e:	9600      	str	r6, [sp, #0]
 801af80:	f7ff fd2a 	bl	801a9d8 <__lo0bits>
 801af84:	9900      	ldr	r1, [sp, #0]
 801af86:	b300      	cbz	r0, 801afca <__d2b+0x82>
 801af88:	9a01      	ldr	r2, [sp, #4]
 801af8a:	f1c0 0320 	rsb	r3, r0, #32
 801af8e:	fa02 f303 	lsl.w	r3, r2, r3
 801af92:	430b      	orrs	r3, r1
 801af94:	40c2      	lsrs	r2, r0
 801af96:	6163      	str	r3, [r4, #20]
 801af98:	9201      	str	r2, [sp, #4]
 801af9a:	9b01      	ldr	r3, [sp, #4]
 801af9c:	61a3      	str	r3, [r4, #24]
 801af9e:	2b00      	cmp	r3, #0
 801afa0:	bf14      	ite	ne
 801afa2:	2202      	movne	r2, #2
 801afa4:	2201      	moveq	r2, #1
 801afa6:	6122      	str	r2, [r4, #16]
 801afa8:	b1d5      	cbz	r5, 801afe0 <__d2b+0x98>
 801afaa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801afae:	4405      	add	r5, r0
 801afb0:	f8c9 5000 	str.w	r5, [r9]
 801afb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801afb8:	f8c8 0000 	str.w	r0, [r8]
 801afbc:	4620      	mov	r0, r4
 801afbe:	b003      	add	sp, #12
 801afc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801afc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801afc8:	e7d5      	b.n	801af76 <__d2b+0x2e>
 801afca:	6161      	str	r1, [r4, #20]
 801afcc:	e7e5      	b.n	801af9a <__d2b+0x52>
 801afce:	a801      	add	r0, sp, #4
 801afd0:	f7ff fd02 	bl	801a9d8 <__lo0bits>
 801afd4:	9b01      	ldr	r3, [sp, #4]
 801afd6:	6163      	str	r3, [r4, #20]
 801afd8:	2201      	movs	r2, #1
 801afda:	6122      	str	r2, [r4, #16]
 801afdc:	3020      	adds	r0, #32
 801afde:	e7e3      	b.n	801afa8 <__d2b+0x60>
 801afe0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801afe4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801afe8:	f8c9 0000 	str.w	r0, [r9]
 801afec:	6918      	ldr	r0, [r3, #16]
 801afee:	f7ff fcd3 	bl	801a998 <__hi0bits>
 801aff2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801aff6:	e7df      	b.n	801afb8 <__d2b+0x70>
 801aff8:	0801e88f 	.word	0x0801e88f
 801affc:	0801e97c 	.word	0x0801e97c

0801b000 <__ratio>:
 801b000:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b004:	4688      	mov	r8, r1
 801b006:	4669      	mov	r1, sp
 801b008:	4681      	mov	r9, r0
 801b00a:	f7ff ff4d 	bl	801aea8 <__b2d>
 801b00e:	a901      	add	r1, sp, #4
 801b010:	4640      	mov	r0, r8
 801b012:	ec55 4b10 	vmov	r4, r5, d0
 801b016:	f7ff ff47 	bl	801aea8 <__b2d>
 801b01a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b01e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801b022:	eba3 0c02 	sub.w	ip, r3, r2
 801b026:	e9dd 3200 	ldrd	r3, r2, [sp]
 801b02a:	1a9b      	subs	r3, r3, r2
 801b02c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801b030:	ec51 0b10 	vmov	r0, r1, d0
 801b034:	2b00      	cmp	r3, #0
 801b036:	bfd6      	itet	le
 801b038:	460a      	movle	r2, r1
 801b03a:	462a      	movgt	r2, r5
 801b03c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801b040:	468b      	mov	fp, r1
 801b042:	462f      	mov	r7, r5
 801b044:	bfd4      	ite	le
 801b046:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801b04a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801b04e:	4620      	mov	r0, r4
 801b050:	ee10 2a10 	vmov	r2, s0
 801b054:	465b      	mov	r3, fp
 801b056:	4639      	mov	r1, r7
 801b058:	f7e9 fc08 	bl	800486c <__aeabi_ddiv>
 801b05c:	ec41 0b10 	vmov	d0, r0, r1
 801b060:	b003      	add	sp, #12
 801b062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b066 <__copybits>:
 801b066:	3901      	subs	r1, #1
 801b068:	b570      	push	{r4, r5, r6, lr}
 801b06a:	1149      	asrs	r1, r1, #5
 801b06c:	6914      	ldr	r4, [r2, #16]
 801b06e:	3101      	adds	r1, #1
 801b070:	f102 0314 	add.w	r3, r2, #20
 801b074:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801b078:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801b07c:	1f05      	subs	r5, r0, #4
 801b07e:	42a3      	cmp	r3, r4
 801b080:	d30c      	bcc.n	801b09c <__copybits+0x36>
 801b082:	1aa3      	subs	r3, r4, r2
 801b084:	3b11      	subs	r3, #17
 801b086:	f023 0303 	bic.w	r3, r3, #3
 801b08a:	3211      	adds	r2, #17
 801b08c:	42a2      	cmp	r2, r4
 801b08e:	bf88      	it	hi
 801b090:	2300      	movhi	r3, #0
 801b092:	4418      	add	r0, r3
 801b094:	2300      	movs	r3, #0
 801b096:	4288      	cmp	r0, r1
 801b098:	d305      	bcc.n	801b0a6 <__copybits+0x40>
 801b09a:	bd70      	pop	{r4, r5, r6, pc}
 801b09c:	f853 6b04 	ldr.w	r6, [r3], #4
 801b0a0:	f845 6f04 	str.w	r6, [r5, #4]!
 801b0a4:	e7eb      	b.n	801b07e <__copybits+0x18>
 801b0a6:	f840 3b04 	str.w	r3, [r0], #4
 801b0aa:	e7f4      	b.n	801b096 <__copybits+0x30>

0801b0ac <__any_on>:
 801b0ac:	f100 0214 	add.w	r2, r0, #20
 801b0b0:	6900      	ldr	r0, [r0, #16]
 801b0b2:	114b      	asrs	r3, r1, #5
 801b0b4:	4298      	cmp	r0, r3
 801b0b6:	b510      	push	{r4, lr}
 801b0b8:	db11      	blt.n	801b0de <__any_on+0x32>
 801b0ba:	dd0a      	ble.n	801b0d2 <__any_on+0x26>
 801b0bc:	f011 011f 	ands.w	r1, r1, #31
 801b0c0:	d007      	beq.n	801b0d2 <__any_on+0x26>
 801b0c2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801b0c6:	fa24 f001 	lsr.w	r0, r4, r1
 801b0ca:	fa00 f101 	lsl.w	r1, r0, r1
 801b0ce:	428c      	cmp	r4, r1
 801b0d0:	d10b      	bne.n	801b0ea <__any_on+0x3e>
 801b0d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b0d6:	4293      	cmp	r3, r2
 801b0d8:	d803      	bhi.n	801b0e2 <__any_on+0x36>
 801b0da:	2000      	movs	r0, #0
 801b0dc:	bd10      	pop	{r4, pc}
 801b0de:	4603      	mov	r3, r0
 801b0e0:	e7f7      	b.n	801b0d2 <__any_on+0x26>
 801b0e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801b0e6:	2900      	cmp	r1, #0
 801b0e8:	d0f5      	beq.n	801b0d6 <__any_on+0x2a>
 801b0ea:	2001      	movs	r0, #1
 801b0ec:	e7f6      	b.n	801b0dc <__any_on+0x30>
	...

0801b0f0 <frexp>:
 801b0f0:	b570      	push	{r4, r5, r6, lr}
 801b0f2:	2100      	movs	r1, #0
 801b0f4:	ec55 4b10 	vmov	r4, r5, d0
 801b0f8:	6001      	str	r1, [r0, #0]
 801b0fa:	4916      	ldr	r1, [pc, #88]	; (801b154 <frexp+0x64>)
 801b0fc:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801b100:	428a      	cmp	r2, r1
 801b102:	4606      	mov	r6, r0
 801b104:	462b      	mov	r3, r5
 801b106:	dc22      	bgt.n	801b14e <frexp+0x5e>
 801b108:	ee10 1a10 	vmov	r1, s0
 801b10c:	4311      	orrs	r1, r2
 801b10e:	d01e      	beq.n	801b14e <frexp+0x5e>
 801b110:	4911      	ldr	r1, [pc, #68]	; (801b158 <frexp+0x68>)
 801b112:	4029      	ands	r1, r5
 801b114:	b969      	cbnz	r1, 801b132 <frexp+0x42>
 801b116:	4b11      	ldr	r3, [pc, #68]	; (801b15c <frexp+0x6c>)
 801b118:	2200      	movs	r2, #0
 801b11a:	ee10 0a10 	vmov	r0, s0
 801b11e:	4629      	mov	r1, r5
 801b120:	f7e9 fa7a 	bl	8004618 <__aeabi_dmul>
 801b124:	460b      	mov	r3, r1
 801b126:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801b12a:	f06f 0135 	mvn.w	r1, #53	; 0x35
 801b12e:	4604      	mov	r4, r0
 801b130:	6031      	str	r1, [r6, #0]
 801b132:	6831      	ldr	r1, [r6, #0]
 801b134:	1512      	asrs	r2, r2, #20
 801b136:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b13a:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 801b13e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b142:	440a      	add	r2, r1
 801b144:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 801b148:	6032      	str	r2, [r6, #0]
 801b14a:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 801b14e:	ec45 4b10 	vmov	d0, r4, r5
 801b152:	bd70      	pop	{r4, r5, r6, pc}
 801b154:	7fefffff 	.word	0x7fefffff
 801b158:	7ff00000 	.word	0x7ff00000
 801b15c:	43500000 	.word	0x43500000

0801b160 <nan>:
 801b160:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801b168 <nan+0x8>
 801b164:	4770      	bx	lr
 801b166:	bf00      	nop
 801b168:	00000000 	.word	0x00000000
 801b16c:	7ff80000 	.word	0x7ff80000

0801b170 <__sread>:
 801b170:	b510      	push	{r4, lr}
 801b172:	460c      	mov	r4, r1
 801b174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b178:	f001 f8dc 	bl	801c334 <_read_r>
 801b17c:	2800      	cmp	r0, #0
 801b17e:	bfab      	itete	ge
 801b180:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 801b182:	89a3      	ldrhlt	r3, [r4, #12]
 801b184:	181b      	addge	r3, r3, r0
 801b186:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b18a:	bfac      	ite	ge
 801b18c:	6523      	strge	r3, [r4, #80]	; 0x50
 801b18e:	81a3      	strhlt	r3, [r4, #12]
 801b190:	bd10      	pop	{r4, pc}

0801b192 <__swrite>:
 801b192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b196:	461f      	mov	r7, r3
 801b198:	898b      	ldrh	r3, [r1, #12]
 801b19a:	05db      	lsls	r3, r3, #23
 801b19c:	4605      	mov	r5, r0
 801b19e:	460c      	mov	r4, r1
 801b1a0:	4616      	mov	r6, r2
 801b1a2:	d505      	bpl.n	801b1b0 <__swrite+0x1e>
 801b1a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b1a8:	2302      	movs	r3, #2
 801b1aa:	2200      	movs	r2, #0
 801b1ac:	f001 f896 	bl	801c2dc <_lseek_r>
 801b1b0:	89a3      	ldrh	r3, [r4, #12]
 801b1b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b1b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b1ba:	81a3      	strh	r3, [r4, #12]
 801b1bc:	4632      	mov	r2, r6
 801b1be:	463b      	mov	r3, r7
 801b1c0:	4628      	mov	r0, r5
 801b1c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b1c6:	f000 bd99 	b.w	801bcfc <_write_r>

0801b1ca <__sseek>:
 801b1ca:	b510      	push	{r4, lr}
 801b1cc:	460c      	mov	r4, r1
 801b1ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b1d2:	f001 f883 	bl	801c2dc <_lseek_r>
 801b1d6:	1c43      	adds	r3, r0, #1
 801b1d8:	89a3      	ldrh	r3, [r4, #12]
 801b1da:	bf15      	itete	ne
 801b1dc:	6520      	strne	r0, [r4, #80]	; 0x50
 801b1de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b1e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b1e6:	81a3      	strheq	r3, [r4, #12]
 801b1e8:	bf18      	it	ne
 801b1ea:	81a3      	strhne	r3, [r4, #12]
 801b1ec:	bd10      	pop	{r4, pc}

0801b1ee <__sclose>:
 801b1ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b1f2:	f000 be21 	b.w	801be38 <_close_r>

0801b1f6 <__ssprint_r>:
 801b1f6:	6893      	ldr	r3, [r2, #8]
 801b1f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1fc:	4680      	mov	r8, r0
 801b1fe:	460c      	mov	r4, r1
 801b200:	4617      	mov	r7, r2
 801b202:	2b00      	cmp	r3, #0
 801b204:	d061      	beq.n	801b2ca <__ssprint_r+0xd4>
 801b206:	2300      	movs	r3, #0
 801b208:	f8d2 a000 	ldr.w	sl, [r2]
 801b20c:	9301      	str	r3, [sp, #4]
 801b20e:	469b      	mov	fp, r3
 801b210:	f1bb 0f00 	cmp.w	fp, #0
 801b214:	d02b      	beq.n	801b26e <__ssprint_r+0x78>
 801b216:	68a6      	ldr	r6, [r4, #8]
 801b218:	45b3      	cmp	fp, r6
 801b21a:	d342      	bcc.n	801b2a2 <__ssprint_r+0xac>
 801b21c:	89a2      	ldrh	r2, [r4, #12]
 801b21e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b222:	d03e      	beq.n	801b2a2 <__ssprint_r+0xac>
 801b224:	6825      	ldr	r5, [r4, #0]
 801b226:	6921      	ldr	r1, [r4, #16]
 801b228:	eba5 0901 	sub.w	r9, r5, r1
 801b22c:	6965      	ldr	r5, [r4, #20]
 801b22e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b232:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b236:	f109 0001 	add.w	r0, r9, #1
 801b23a:	106d      	asrs	r5, r5, #1
 801b23c:	4458      	add	r0, fp
 801b23e:	4285      	cmp	r5, r0
 801b240:	bf38      	it	cc
 801b242:	4605      	movcc	r5, r0
 801b244:	0553      	lsls	r3, r2, #21
 801b246:	d545      	bpl.n	801b2d4 <__ssprint_r+0xde>
 801b248:	4629      	mov	r1, r5
 801b24a:	4640      	mov	r0, r8
 801b24c:	f7f9 ff02 	bl	8015054 <_malloc_r>
 801b250:	4606      	mov	r6, r0
 801b252:	b9a0      	cbnz	r0, 801b27e <__ssprint_r+0x88>
 801b254:	230c      	movs	r3, #12
 801b256:	f8c8 3000 	str.w	r3, [r8]
 801b25a:	89a3      	ldrh	r3, [r4, #12]
 801b25c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b260:	81a3      	strh	r3, [r4, #12]
 801b262:	2300      	movs	r3, #0
 801b264:	e9c7 3301 	strd	r3, r3, [r7, #4]
 801b268:	f04f 30ff 	mov.w	r0, #4294967295
 801b26c:	e02f      	b.n	801b2ce <__ssprint_r+0xd8>
 801b26e:	f8da 3000 	ldr.w	r3, [sl]
 801b272:	f8da b004 	ldr.w	fp, [sl, #4]
 801b276:	9301      	str	r3, [sp, #4]
 801b278:	f10a 0a08 	add.w	sl, sl, #8
 801b27c:	e7c8      	b.n	801b210 <__ssprint_r+0x1a>
 801b27e:	464a      	mov	r2, r9
 801b280:	6921      	ldr	r1, [r4, #16]
 801b282:	f7fa f937 	bl	80154f4 <memcpy>
 801b286:	89a2      	ldrh	r2, [r4, #12]
 801b288:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801b28c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801b290:	81a2      	strh	r2, [r4, #12]
 801b292:	6126      	str	r6, [r4, #16]
 801b294:	6165      	str	r5, [r4, #20]
 801b296:	444e      	add	r6, r9
 801b298:	eba5 0509 	sub.w	r5, r5, r9
 801b29c:	6026      	str	r6, [r4, #0]
 801b29e:	60a5      	str	r5, [r4, #8]
 801b2a0:	465e      	mov	r6, fp
 801b2a2:	455e      	cmp	r6, fp
 801b2a4:	bf28      	it	cs
 801b2a6:	465e      	movcs	r6, fp
 801b2a8:	4632      	mov	r2, r6
 801b2aa:	9901      	ldr	r1, [sp, #4]
 801b2ac:	6820      	ldr	r0, [r4, #0]
 801b2ae:	f001 f827 	bl	801c300 <memmove>
 801b2b2:	68a2      	ldr	r2, [r4, #8]
 801b2b4:	1b92      	subs	r2, r2, r6
 801b2b6:	60a2      	str	r2, [r4, #8]
 801b2b8:	6822      	ldr	r2, [r4, #0]
 801b2ba:	4432      	add	r2, r6
 801b2bc:	6022      	str	r2, [r4, #0]
 801b2be:	68ba      	ldr	r2, [r7, #8]
 801b2c0:	eba2 030b 	sub.w	r3, r2, fp
 801b2c4:	60bb      	str	r3, [r7, #8]
 801b2c6:	2b00      	cmp	r3, #0
 801b2c8:	d1d1      	bne.n	801b26e <__ssprint_r+0x78>
 801b2ca:	2000      	movs	r0, #0
 801b2cc:	6078      	str	r0, [r7, #4]
 801b2ce:	b003      	add	sp, #12
 801b2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2d4:	462a      	mov	r2, r5
 801b2d6:	4640      	mov	r0, r8
 801b2d8:	f001 f83e 	bl	801c358 <_realloc_r>
 801b2dc:	4606      	mov	r6, r0
 801b2de:	2800      	cmp	r0, #0
 801b2e0:	d1d7      	bne.n	801b292 <__ssprint_r+0x9c>
 801b2e2:	6921      	ldr	r1, [r4, #16]
 801b2e4:	4640      	mov	r0, r8
 801b2e6:	f7fe fdbb 	bl	8019e60 <_free_r>
 801b2ea:	e7b3      	b.n	801b254 <__ssprint_r+0x5e>

0801b2ec <__sprint_r>:
 801b2ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2f0:	6893      	ldr	r3, [r2, #8]
 801b2f2:	4680      	mov	r8, r0
 801b2f4:	460f      	mov	r7, r1
 801b2f6:	4614      	mov	r4, r2
 801b2f8:	b91b      	cbnz	r3, 801b302 <__sprint_r+0x16>
 801b2fa:	6053      	str	r3, [r2, #4]
 801b2fc:	4618      	mov	r0, r3
 801b2fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b302:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801b304:	049d      	lsls	r5, r3, #18
 801b306:	d520      	bpl.n	801b34a <__sprint_r+0x5e>
 801b308:	6815      	ldr	r5, [r2, #0]
 801b30a:	3508      	adds	r5, #8
 801b30c:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 801b310:	f04f 0900 	mov.w	r9, #0
 801b314:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 801b318:	45ca      	cmp	sl, r9
 801b31a:	dc0b      	bgt.n	801b334 <__sprint_r+0x48>
 801b31c:	68a3      	ldr	r3, [r4, #8]
 801b31e:	f026 0003 	bic.w	r0, r6, #3
 801b322:	1a18      	subs	r0, r3, r0
 801b324:	60a0      	str	r0, [r4, #8]
 801b326:	3508      	adds	r5, #8
 801b328:	2800      	cmp	r0, #0
 801b32a:	d1ef      	bne.n	801b30c <__sprint_r+0x20>
 801b32c:	2300      	movs	r3, #0
 801b32e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801b332:	e7e4      	b.n	801b2fe <__sprint_r+0x12>
 801b334:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 801b338:	463a      	mov	r2, r7
 801b33a:	4640      	mov	r0, r8
 801b33c:	f000 fe37 	bl	801bfae <_fputwc_r>
 801b340:	1c43      	adds	r3, r0, #1
 801b342:	d0f3      	beq.n	801b32c <__sprint_r+0x40>
 801b344:	f109 0901 	add.w	r9, r9, #1
 801b348:	e7e6      	b.n	801b318 <__sprint_r+0x2c>
 801b34a:	f000 fe6d 	bl	801c028 <__sfvwrite_r>
 801b34e:	e7ed      	b.n	801b32c <__sprint_r+0x40>

0801b350 <_vfiprintf_r>:
 801b350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b354:	ed2d 8b02 	vpush	{d8}
 801b358:	b0b9      	sub	sp, #228	; 0xe4
 801b35a:	460f      	mov	r7, r1
 801b35c:	9201      	str	r2, [sp, #4]
 801b35e:	461d      	mov	r5, r3
 801b360:	461c      	mov	r4, r3
 801b362:	4681      	mov	r9, r0
 801b364:	b118      	cbz	r0, 801b36e <_vfiprintf_r+0x1e>
 801b366:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801b368:	b90b      	cbnz	r3, 801b36e <_vfiprintf_r+0x1e>
 801b36a:	f7fe fce9 	bl	8019d40 <__sinit>
 801b36e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801b370:	07d8      	lsls	r0, r3, #31
 801b372:	d405      	bmi.n	801b380 <_vfiprintf_r+0x30>
 801b374:	89bb      	ldrh	r3, [r7, #12]
 801b376:	0599      	lsls	r1, r3, #22
 801b378:	d402      	bmi.n	801b380 <_vfiprintf_r+0x30>
 801b37a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801b37c:	f7ff f9ca 	bl	801a714 <__retarget_lock_acquire_recursive>
 801b380:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801b384:	049a      	lsls	r2, r3, #18
 801b386:	d406      	bmi.n	801b396 <_vfiprintf_r+0x46>
 801b388:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801b38c:	81bb      	strh	r3, [r7, #12]
 801b38e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801b390:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801b394:	667b      	str	r3, [r7, #100]	; 0x64
 801b396:	89bb      	ldrh	r3, [r7, #12]
 801b398:	071e      	lsls	r6, r3, #28
 801b39a:	d501      	bpl.n	801b3a0 <_vfiprintf_r+0x50>
 801b39c:	693b      	ldr	r3, [r7, #16]
 801b39e:	b9bb      	cbnz	r3, 801b3d0 <_vfiprintf_r+0x80>
 801b3a0:	4639      	mov	r1, r7
 801b3a2:	4648      	mov	r0, r9
 801b3a4:	f7fd fd02 	bl	8018dac <__swsetup_r>
 801b3a8:	b190      	cbz	r0, 801b3d0 <_vfiprintf_r+0x80>
 801b3aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801b3ac:	07d8      	lsls	r0, r3, #31
 801b3ae:	d508      	bpl.n	801b3c2 <_vfiprintf_r+0x72>
 801b3b0:	f04f 33ff 	mov.w	r3, #4294967295
 801b3b4:	9302      	str	r3, [sp, #8]
 801b3b6:	9802      	ldr	r0, [sp, #8]
 801b3b8:	b039      	add	sp, #228	; 0xe4
 801b3ba:	ecbd 8b02 	vpop	{d8}
 801b3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3c2:	89bb      	ldrh	r3, [r7, #12]
 801b3c4:	0599      	lsls	r1, r3, #22
 801b3c6:	d4f3      	bmi.n	801b3b0 <_vfiprintf_r+0x60>
 801b3c8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801b3ca:	f7ff f9a4 	bl	801a716 <__retarget_lock_release_recursive>
 801b3ce:	e7ef      	b.n	801b3b0 <_vfiprintf_r+0x60>
 801b3d0:	89bb      	ldrh	r3, [r7, #12]
 801b3d2:	f003 021a 	and.w	r2, r3, #26
 801b3d6:	2a0a      	cmp	r2, #10
 801b3d8:	d113      	bne.n	801b402 <_vfiprintf_r+0xb2>
 801b3da:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801b3de:	2a00      	cmp	r2, #0
 801b3e0:	db0f      	blt.n	801b402 <_vfiprintf_r+0xb2>
 801b3e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801b3e4:	07d2      	lsls	r2, r2, #31
 801b3e6:	d404      	bmi.n	801b3f2 <_vfiprintf_r+0xa2>
 801b3e8:	059e      	lsls	r6, r3, #22
 801b3ea:	d402      	bmi.n	801b3f2 <_vfiprintf_r+0xa2>
 801b3ec:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801b3ee:	f7ff f992 	bl	801a716 <__retarget_lock_release_recursive>
 801b3f2:	9a01      	ldr	r2, [sp, #4]
 801b3f4:	462b      	mov	r3, r5
 801b3f6:	4639      	mov	r1, r7
 801b3f8:	4648      	mov	r0, r9
 801b3fa:	f000 fc31 	bl	801bc60 <__sbprintf>
 801b3fe:	9002      	str	r0, [sp, #8]
 801b400:	e7d9      	b.n	801b3b6 <_vfiprintf_r+0x66>
 801b402:	2300      	movs	r3, #0
 801b404:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 801b408:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801b40c:	ae0f      	add	r6, sp, #60	; 0x3c
 801b40e:	ee08 3a10 	vmov	s16, r3
 801b412:	960c      	str	r6, [sp, #48]	; 0x30
 801b414:	9307      	str	r3, [sp, #28]
 801b416:	9302      	str	r3, [sp, #8]
 801b418:	9b01      	ldr	r3, [sp, #4]
 801b41a:	461d      	mov	r5, r3
 801b41c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b420:	b10a      	cbz	r2, 801b426 <_vfiprintf_r+0xd6>
 801b422:	2a25      	cmp	r2, #37	; 0x25
 801b424:	d1f9      	bne.n	801b41a <_vfiprintf_r+0xca>
 801b426:	9b01      	ldr	r3, [sp, #4]
 801b428:	ebb5 0803 	subs.w	r8, r5, r3
 801b42c:	d00d      	beq.n	801b44a <_vfiprintf_r+0xfa>
 801b42e:	e9c6 3800 	strd	r3, r8, [r6]
 801b432:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b434:	4443      	add	r3, r8
 801b436:	930e      	str	r3, [sp, #56]	; 0x38
 801b438:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b43a:	3301      	adds	r3, #1
 801b43c:	2b07      	cmp	r3, #7
 801b43e:	930d      	str	r3, [sp, #52]	; 0x34
 801b440:	dc75      	bgt.n	801b52e <_vfiprintf_r+0x1de>
 801b442:	3608      	adds	r6, #8
 801b444:	9b02      	ldr	r3, [sp, #8]
 801b446:	4443      	add	r3, r8
 801b448:	9302      	str	r3, [sp, #8]
 801b44a:	782b      	ldrb	r3, [r5, #0]
 801b44c:	2b00      	cmp	r3, #0
 801b44e:	f000 83c8 	beq.w	801bbe2 <_vfiprintf_r+0x892>
 801b452:	2300      	movs	r3, #0
 801b454:	f04f 31ff 	mov.w	r1, #4294967295
 801b458:	1c6a      	adds	r2, r5, #1
 801b45a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801b45e:	9100      	str	r1, [sp, #0]
 801b460:	9303      	str	r3, [sp, #12]
 801b462:	469a      	mov	sl, r3
 801b464:	f812 3b01 	ldrb.w	r3, [r2], #1
 801b468:	9201      	str	r2, [sp, #4]
 801b46a:	f1a3 0220 	sub.w	r2, r3, #32
 801b46e:	2a5a      	cmp	r2, #90	; 0x5a
 801b470:	f200 8310 	bhi.w	801ba94 <_vfiprintf_r+0x744>
 801b474:	e8df f012 	tbh	[pc, r2, lsl #1]
 801b478:	030e0099 	.word	0x030e0099
 801b47c:	00a1030e 	.word	0x00a1030e
 801b480:	030e030e 	.word	0x030e030e
 801b484:	0080030e 	.word	0x0080030e
 801b488:	030e030e 	.word	0x030e030e
 801b48c:	00ae00a4 	.word	0x00ae00a4
 801b490:	00ab030e 	.word	0x00ab030e
 801b494:	030e00b0 	.word	0x030e00b0
 801b498:	00ce00cb 	.word	0x00ce00cb
 801b49c:	00ce00ce 	.word	0x00ce00ce
 801b4a0:	00ce00ce 	.word	0x00ce00ce
 801b4a4:	00ce00ce 	.word	0x00ce00ce
 801b4a8:	00ce00ce 	.word	0x00ce00ce
 801b4ac:	030e030e 	.word	0x030e030e
 801b4b0:	030e030e 	.word	0x030e030e
 801b4b4:	030e030e 	.word	0x030e030e
 801b4b8:	030e030e 	.word	0x030e030e
 801b4bc:	00f8030e 	.word	0x00f8030e
 801b4c0:	030e0106 	.word	0x030e0106
 801b4c4:	030e030e 	.word	0x030e030e
 801b4c8:	030e030e 	.word	0x030e030e
 801b4cc:	030e030e 	.word	0x030e030e
 801b4d0:	030e030e 	.word	0x030e030e
 801b4d4:	014d030e 	.word	0x014d030e
 801b4d8:	030e030e 	.word	0x030e030e
 801b4dc:	0192030e 	.word	0x0192030e
 801b4e0:	0270030e 	.word	0x0270030e
 801b4e4:	030e030e 	.word	0x030e030e
 801b4e8:	030e028e 	.word	0x030e028e
 801b4ec:	030e030e 	.word	0x030e030e
 801b4f0:	030e030e 	.word	0x030e030e
 801b4f4:	030e030e 	.word	0x030e030e
 801b4f8:	030e030e 	.word	0x030e030e
 801b4fc:	00f8030e 	.word	0x00f8030e
 801b500:	030e0108 	.word	0x030e0108
 801b504:	030e030e 	.word	0x030e030e
 801b508:	010800de 	.word	0x010800de
 801b50c:	030e00f2 	.word	0x030e00f2
 801b510:	030e00eb 	.word	0x030e00eb
 801b514:	014f0130 	.word	0x014f0130
 801b518:	00f20182 	.word	0x00f20182
 801b51c:	0192030e 	.word	0x0192030e
 801b520:	02720097 	.word	0x02720097
 801b524:	030e030e 	.word	0x030e030e
 801b528:	030e0065 	.word	0x030e0065
 801b52c:	0097      	.short	0x0097
 801b52e:	aa0c      	add	r2, sp, #48	; 0x30
 801b530:	4639      	mov	r1, r7
 801b532:	4648      	mov	r0, r9
 801b534:	f7ff feda 	bl	801b2ec <__sprint_r>
 801b538:	2800      	cmp	r0, #0
 801b53a:	f040 8331 	bne.w	801bba0 <_vfiprintf_r+0x850>
 801b53e:	ae0f      	add	r6, sp, #60	; 0x3c
 801b540:	e780      	b.n	801b444 <_vfiprintf_r+0xf4>
 801b542:	4a95      	ldr	r2, [pc, #596]	; (801b798 <_vfiprintf_r+0x448>)
 801b544:	9205      	str	r2, [sp, #20]
 801b546:	f01a 0f20 	tst.w	sl, #32
 801b54a:	f000 8225 	beq.w	801b998 <_vfiprintf_r+0x648>
 801b54e:	3407      	adds	r4, #7
 801b550:	f024 0b07 	bic.w	fp, r4, #7
 801b554:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 801b558:	f01a 0f01 	tst.w	sl, #1
 801b55c:	d009      	beq.n	801b572 <_vfiprintf_r+0x222>
 801b55e:	ea54 0205 	orrs.w	r2, r4, r5
 801b562:	bf1f      	itttt	ne
 801b564:	2230      	movne	r2, #48	; 0x30
 801b566:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 801b56a:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 801b56e:	f04a 0a02 	orrne.w	sl, sl, #2
 801b572:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 801b576:	e10d      	b.n	801b794 <_vfiprintf_r+0x444>
 801b578:	4648      	mov	r0, r9
 801b57a:	f7ff f8c5 	bl	801a708 <_localeconv_r>
 801b57e:	6843      	ldr	r3, [r0, #4]
 801b580:	4618      	mov	r0, r3
 801b582:	ee08 3a10 	vmov	s16, r3
 801b586:	f7e8 fe33 	bl	80041f0 <strlen>
 801b58a:	9007      	str	r0, [sp, #28]
 801b58c:	4648      	mov	r0, r9
 801b58e:	f7ff f8bb 	bl	801a708 <_localeconv_r>
 801b592:	6883      	ldr	r3, [r0, #8]
 801b594:	9306      	str	r3, [sp, #24]
 801b596:	9b07      	ldr	r3, [sp, #28]
 801b598:	b12b      	cbz	r3, 801b5a6 <_vfiprintf_r+0x256>
 801b59a:	9b06      	ldr	r3, [sp, #24]
 801b59c:	b11b      	cbz	r3, 801b5a6 <_vfiprintf_r+0x256>
 801b59e:	781b      	ldrb	r3, [r3, #0]
 801b5a0:	b10b      	cbz	r3, 801b5a6 <_vfiprintf_r+0x256>
 801b5a2:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 801b5a6:	9a01      	ldr	r2, [sp, #4]
 801b5a8:	e75c      	b.n	801b464 <_vfiprintf_r+0x114>
 801b5aa:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 801b5ae:	2b00      	cmp	r3, #0
 801b5b0:	d1f9      	bne.n	801b5a6 <_vfiprintf_r+0x256>
 801b5b2:	2320      	movs	r3, #32
 801b5b4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801b5b8:	e7f5      	b.n	801b5a6 <_vfiprintf_r+0x256>
 801b5ba:	f04a 0a01 	orr.w	sl, sl, #1
 801b5be:	e7f2      	b.n	801b5a6 <_vfiprintf_r+0x256>
 801b5c0:	f854 3b04 	ldr.w	r3, [r4], #4
 801b5c4:	9303      	str	r3, [sp, #12]
 801b5c6:	2b00      	cmp	r3, #0
 801b5c8:	daed      	bge.n	801b5a6 <_vfiprintf_r+0x256>
 801b5ca:	425b      	negs	r3, r3
 801b5cc:	9303      	str	r3, [sp, #12]
 801b5ce:	f04a 0a04 	orr.w	sl, sl, #4
 801b5d2:	e7e8      	b.n	801b5a6 <_vfiprintf_r+0x256>
 801b5d4:	232b      	movs	r3, #43	; 0x2b
 801b5d6:	e7ed      	b.n	801b5b4 <_vfiprintf_r+0x264>
 801b5d8:	9a01      	ldr	r2, [sp, #4]
 801b5da:	f812 3b01 	ldrb.w	r3, [r2], #1
 801b5de:	2b2a      	cmp	r3, #42	; 0x2a
 801b5e0:	d112      	bne.n	801b608 <_vfiprintf_r+0x2b8>
 801b5e2:	f854 0b04 	ldr.w	r0, [r4], #4
 801b5e6:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 801b5ea:	e9cd 3200 	strd	r3, r2, [sp]
 801b5ee:	e7da      	b.n	801b5a6 <_vfiprintf_r+0x256>
 801b5f0:	9b00      	ldr	r3, [sp, #0]
 801b5f2:	200a      	movs	r0, #10
 801b5f4:	fb00 1303 	mla	r3, r0, r3, r1
 801b5f8:	9300      	str	r3, [sp, #0]
 801b5fa:	f812 3b01 	ldrb.w	r3, [r2], #1
 801b5fe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801b602:	2909      	cmp	r1, #9
 801b604:	d9f4      	bls.n	801b5f0 <_vfiprintf_r+0x2a0>
 801b606:	e72f      	b.n	801b468 <_vfiprintf_r+0x118>
 801b608:	2100      	movs	r1, #0
 801b60a:	9100      	str	r1, [sp, #0]
 801b60c:	e7f7      	b.n	801b5fe <_vfiprintf_r+0x2ae>
 801b60e:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 801b612:	e7c8      	b.n	801b5a6 <_vfiprintf_r+0x256>
 801b614:	2100      	movs	r1, #0
 801b616:	9a01      	ldr	r2, [sp, #4]
 801b618:	9103      	str	r1, [sp, #12]
 801b61a:	9903      	ldr	r1, [sp, #12]
 801b61c:	3b30      	subs	r3, #48	; 0x30
 801b61e:	200a      	movs	r0, #10
 801b620:	fb00 3301 	mla	r3, r0, r1, r3
 801b624:	9303      	str	r3, [sp, #12]
 801b626:	f812 3b01 	ldrb.w	r3, [r2], #1
 801b62a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801b62e:	2909      	cmp	r1, #9
 801b630:	d9f3      	bls.n	801b61a <_vfiprintf_r+0x2ca>
 801b632:	e719      	b.n	801b468 <_vfiprintf_r+0x118>
 801b634:	9b01      	ldr	r3, [sp, #4]
 801b636:	781b      	ldrb	r3, [r3, #0]
 801b638:	2b68      	cmp	r3, #104	; 0x68
 801b63a:	bf01      	itttt	eq
 801b63c:	9b01      	ldreq	r3, [sp, #4]
 801b63e:	3301      	addeq	r3, #1
 801b640:	9301      	streq	r3, [sp, #4]
 801b642:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 801b646:	bf18      	it	ne
 801b648:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 801b64c:	e7ab      	b.n	801b5a6 <_vfiprintf_r+0x256>
 801b64e:	9b01      	ldr	r3, [sp, #4]
 801b650:	781b      	ldrb	r3, [r3, #0]
 801b652:	2b6c      	cmp	r3, #108	; 0x6c
 801b654:	d105      	bne.n	801b662 <_vfiprintf_r+0x312>
 801b656:	9b01      	ldr	r3, [sp, #4]
 801b658:	3301      	adds	r3, #1
 801b65a:	9301      	str	r3, [sp, #4]
 801b65c:	f04a 0a20 	orr.w	sl, sl, #32
 801b660:	e7a1      	b.n	801b5a6 <_vfiprintf_r+0x256>
 801b662:	f04a 0a10 	orr.w	sl, sl, #16
 801b666:	e79e      	b.n	801b5a6 <_vfiprintf_r+0x256>
 801b668:	46a3      	mov	fp, r4
 801b66a:	2100      	movs	r1, #0
 801b66c:	f85b 3b04 	ldr.w	r3, [fp], #4
 801b670:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 801b674:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 801b678:	2301      	movs	r3, #1
 801b67a:	9300      	str	r3, [sp, #0]
 801b67c:	460d      	mov	r5, r1
 801b67e:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 801b682:	e0a0      	b.n	801b7c6 <_vfiprintf_r+0x476>
 801b684:	f04a 0a10 	orr.w	sl, sl, #16
 801b688:	f01a 0f20 	tst.w	sl, #32
 801b68c:	d011      	beq.n	801b6b2 <_vfiprintf_r+0x362>
 801b68e:	3407      	adds	r4, #7
 801b690:	f024 0b07 	bic.w	fp, r4, #7
 801b694:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 801b698:	2c00      	cmp	r4, #0
 801b69a:	f175 0300 	sbcs.w	r3, r5, #0
 801b69e:	da06      	bge.n	801b6ae <_vfiprintf_r+0x35e>
 801b6a0:	4264      	negs	r4, r4
 801b6a2:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801b6a6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 801b6aa:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801b6ae:	2301      	movs	r3, #1
 801b6b0:	e03f      	b.n	801b732 <_vfiprintf_r+0x3e2>
 801b6b2:	f01a 0f10 	tst.w	sl, #16
 801b6b6:	f104 0b04 	add.w	fp, r4, #4
 801b6ba:	d002      	beq.n	801b6c2 <_vfiprintf_r+0x372>
 801b6bc:	6824      	ldr	r4, [r4, #0]
 801b6be:	17e5      	asrs	r5, r4, #31
 801b6c0:	e7ea      	b.n	801b698 <_vfiprintf_r+0x348>
 801b6c2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801b6c6:	6824      	ldr	r4, [r4, #0]
 801b6c8:	d001      	beq.n	801b6ce <_vfiprintf_r+0x37e>
 801b6ca:	b224      	sxth	r4, r4
 801b6cc:	e7f7      	b.n	801b6be <_vfiprintf_r+0x36e>
 801b6ce:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801b6d2:	bf18      	it	ne
 801b6d4:	b264      	sxtbne	r4, r4
 801b6d6:	e7f2      	b.n	801b6be <_vfiprintf_r+0x36e>
 801b6d8:	f01a 0f20 	tst.w	sl, #32
 801b6dc:	f854 3b04 	ldr.w	r3, [r4], #4
 801b6e0:	d005      	beq.n	801b6ee <_vfiprintf_r+0x39e>
 801b6e2:	9a02      	ldr	r2, [sp, #8]
 801b6e4:	4610      	mov	r0, r2
 801b6e6:	17d1      	asrs	r1, r2, #31
 801b6e8:	e9c3 0100 	strd	r0, r1, [r3]
 801b6ec:	e694      	b.n	801b418 <_vfiprintf_r+0xc8>
 801b6ee:	f01a 0f10 	tst.w	sl, #16
 801b6f2:	d002      	beq.n	801b6fa <_vfiprintf_r+0x3aa>
 801b6f4:	9a02      	ldr	r2, [sp, #8]
 801b6f6:	601a      	str	r2, [r3, #0]
 801b6f8:	e68e      	b.n	801b418 <_vfiprintf_r+0xc8>
 801b6fa:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801b6fe:	d002      	beq.n	801b706 <_vfiprintf_r+0x3b6>
 801b700:	9a02      	ldr	r2, [sp, #8]
 801b702:	801a      	strh	r2, [r3, #0]
 801b704:	e688      	b.n	801b418 <_vfiprintf_r+0xc8>
 801b706:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801b70a:	d0f3      	beq.n	801b6f4 <_vfiprintf_r+0x3a4>
 801b70c:	9a02      	ldr	r2, [sp, #8]
 801b70e:	701a      	strb	r2, [r3, #0]
 801b710:	e682      	b.n	801b418 <_vfiprintf_r+0xc8>
 801b712:	f04a 0a10 	orr.w	sl, sl, #16
 801b716:	f01a 0f20 	tst.w	sl, #32
 801b71a:	d01d      	beq.n	801b758 <_vfiprintf_r+0x408>
 801b71c:	3407      	adds	r4, #7
 801b71e:	f024 0b07 	bic.w	fp, r4, #7
 801b722:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 801b726:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 801b72a:	2300      	movs	r3, #0
 801b72c:	2200      	movs	r2, #0
 801b72e:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 801b732:	9a00      	ldr	r2, [sp, #0]
 801b734:	3201      	adds	r2, #1
 801b736:	f000 8261 	beq.w	801bbfc <_vfiprintf_r+0x8ac>
 801b73a:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 801b73e:	9204      	str	r2, [sp, #16]
 801b740:	ea54 0205 	orrs.w	r2, r4, r5
 801b744:	f040 8260 	bne.w	801bc08 <_vfiprintf_r+0x8b8>
 801b748:	9a00      	ldr	r2, [sp, #0]
 801b74a:	2a00      	cmp	r2, #0
 801b74c:	f000 8197 	beq.w	801ba7e <_vfiprintf_r+0x72e>
 801b750:	2b01      	cmp	r3, #1
 801b752:	f040 825c 	bne.w	801bc0e <_vfiprintf_r+0x8be>
 801b756:	e135      	b.n	801b9c4 <_vfiprintf_r+0x674>
 801b758:	f01a 0f10 	tst.w	sl, #16
 801b75c:	f104 0b04 	add.w	fp, r4, #4
 801b760:	d001      	beq.n	801b766 <_vfiprintf_r+0x416>
 801b762:	6824      	ldr	r4, [r4, #0]
 801b764:	e003      	b.n	801b76e <_vfiprintf_r+0x41e>
 801b766:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801b76a:	d002      	beq.n	801b772 <_vfiprintf_r+0x422>
 801b76c:	8824      	ldrh	r4, [r4, #0]
 801b76e:	2500      	movs	r5, #0
 801b770:	e7d9      	b.n	801b726 <_vfiprintf_r+0x3d6>
 801b772:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801b776:	d0f4      	beq.n	801b762 <_vfiprintf_r+0x412>
 801b778:	7824      	ldrb	r4, [r4, #0]
 801b77a:	e7f8      	b.n	801b76e <_vfiprintf_r+0x41e>
 801b77c:	46a3      	mov	fp, r4
 801b77e:	f647 0330 	movw	r3, #30768	; 0x7830
 801b782:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801b786:	f85b 4b04 	ldr.w	r4, [fp], #4
 801b78a:	4b03      	ldr	r3, [pc, #12]	; (801b798 <_vfiprintf_r+0x448>)
 801b78c:	9305      	str	r3, [sp, #20]
 801b78e:	2500      	movs	r5, #0
 801b790:	f04a 0a02 	orr.w	sl, sl, #2
 801b794:	2302      	movs	r3, #2
 801b796:	e7c9      	b.n	801b72c <_vfiprintf_r+0x3dc>
 801b798:	0801e6f8 	.word	0x0801e6f8
 801b79c:	9b00      	ldr	r3, [sp, #0]
 801b79e:	46a3      	mov	fp, r4
 801b7a0:	2500      	movs	r5, #0
 801b7a2:	1c5c      	adds	r4, r3, #1
 801b7a4:	f85b 8b04 	ldr.w	r8, [fp], #4
 801b7a8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801b7ac:	f000 80cf 	beq.w	801b94e <_vfiprintf_r+0x5fe>
 801b7b0:	461a      	mov	r2, r3
 801b7b2:	4629      	mov	r1, r5
 801b7b4:	4640      	mov	r0, r8
 801b7b6:	f7e8 fd23 	bl	8004200 <memchr>
 801b7ba:	2800      	cmp	r0, #0
 801b7bc:	f000 8174 	beq.w	801baa8 <_vfiprintf_r+0x758>
 801b7c0:	eba0 0308 	sub.w	r3, r0, r8
 801b7c4:	9300      	str	r3, [sp, #0]
 801b7c6:	9b00      	ldr	r3, [sp, #0]
 801b7c8:	42ab      	cmp	r3, r5
 801b7ca:	bfb8      	it	lt
 801b7cc:	462b      	movlt	r3, r5
 801b7ce:	9304      	str	r3, [sp, #16]
 801b7d0:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 801b7d4:	b113      	cbz	r3, 801b7dc <_vfiprintf_r+0x48c>
 801b7d6:	9b04      	ldr	r3, [sp, #16]
 801b7d8:	3301      	adds	r3, #1
 801b7da:	9304      	str	r3, [sp, #16]
 801b7dc:	f01a 0302 	ands.w	r3, sl, #2
 801b7e0:	9308      	str	r3, [sp, #32]
 801b7e2:	bf1e      	ittt	ne
 801b7e4:	9b04      	ldrne	r3, [sp, #16]
 801b7e6:	3302      	addne	r3, #2
 801b7e8:	9304      	strne	r3, [sp, #16]
 801b7ea:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 801b7ee:	9309      	str	r3, [sp, #36]	; 0x24
 801b7f0:	d11f      	bne.n	801b832 <_vfiprintf_r+0x4e2>
 801b7f2:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 801b7f6:	1a9c      	subs	r4, r3, r2
 801b7f8:	2c00      	cmp	r4, #0
 801b7fa:	dd1a      	ble.n	801b832 <_vfiprintf_r+0x4e2>
 801b7fc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 801b800:	48b9      	ldr	r0, [pc, #740]	; (801bae8 <_vfiprintf_r+0x798>)
 801b802:	6030      	str	r0, [r6, #0]
 801b804:	2c10      	cmp	r4, #16
 801b806:	f103 0301 	add.w	r3, r3, #1
 801b80a:	f106 0108 	add.w	r1, r6, #8
 801b80e:	f300 814d 	bgt.w	801baac <_vfiprintf_r+0x75c>
 801b812:	6074      	str	r4, [r6, #4]
 801b814:	2b07      	cmp	r3, #7
 801b816:	4414      	add	r4, r2
 801b818:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 801b81c:	f340 8158 	ble.w	801bad0 <_vfiprintf_r+0x780>
 801b820:	aa0c      	add	r2, sp, #48	; 0x30
 801b822:	4639      	mov	r1, r7
 801b824:	4648      	mov	r0, r9
 801b826:	f7ff fd61 	bl	801b2ec <__sprint_r>
 801b82a:	2800      	cmp	r0, #0
 801b82c:	f040 81b8 	bne.w	801bba0 <_vfiprintf_r+0x850>
 801b830:	ae0f      	add	r6, sp, #60	; 0x3c
 801b832:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 801b836:	b173      	cbz	r3, 801b856 <_vfiprintf_r+0x506>
 801b838:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 801b83c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b83e:	6032      	str	r2, [r6, #0]
 801b840:	2201      	movs	r2, #1
 801b842:	6072      	str	r2, [r6, #4]
 801b844:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b846:	3301      	adds	r3, #1
 801b848:	3201      	adds	r2, #1
 801b84a:	2b07      	cmp	r3, #7
 801b84c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 801b850:	f300 8140 	bgt.w	801bad4 <_vfiprintf_r+0x784>
 801b854:	3608      	adds	r6, #8
 801b856:	9b08      	ldr	r3, [sp, #32]
 801b858:	b16b      	cbz	r3, 801b876 <_vfiprintf_r+0x526>
 801b85a:	aa0b      	add	r2, sp, #44	; 0x2c
 801b85c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b85e:	6032      	str	r2, [r6, #0]
 801b860:	2202      	movs	r2, #2
 801b862:	6072      	str	r2, [r6, #4]
 801b864:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b866:	3301      	adds	r3, #1
 801b868:	3202      	adds	r2, #2
 801b86a:	2b07      	cmp	r3, #7
 801b86c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 801b870:	f300 8140 	bgt.w	801baf4 <_vfiprintf_r+0x7a4>
 801b874:	3608      	adds	r6, #8
 801b876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b878:	2b80      	cmp	r3, #128	; 0x80
 801b87a:	d11f      	bne.n	801b8bc <_vfiprintf_r+0x56c>
 801b87c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 801b880:	1a9c      	subs	r4, r3, r2
 801b882:	2c00      	cmp	r4, #0
 801b884:	dd1a      	ble.n	801b8bc <_vfiprintf_r+0x56c>
 801b886:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 801b88a:	4898      	ldr	r0, [pc, #608]	; (801baec <_vfiprintf_r+0x79c>)
 801b88c:	6030      	str	r0, [r6, #0]
 801b88e:	2c10      	cmp	r4, #16
 801b890:	f103 0301 	add.w	r3, r3, #1
 801b894:	f106 0108 	add.w	r1, r6, #8
 801b898:	f300 8135 	bgt.w	801bb06 <_vfiprintf_r+0x7b6>
 801b89c:	6074      	str	r4, [r6, #4]
 801b89e:	2b07      	cmp	r3, #7
 801b8a0:	4414      	add	r4, r2
 801b8a2:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 801b8a6:	f340 8140 	ble.w	801bb2a <_vfiprintf_r+0x7da>
 801b8aa:	aa0c      	add	r2, sp, #48	; 0x30
 801b8ac:	4639      	mov	r1, r7
 801b8ae:	4648      	mov	r0, r9
 801b8b0:	f7ff fd1c 	bl	801b2ec <__sprint_r>
 801b8b4:	2800      	cmp	r0, #0
 801b8b6:	f040 8173 	bne.w	801bba0 <_vfiprintf_r+0x850>
 801b8ba:	ae0f      	add	r6, sp, #60	; 0x3c
 801b8bc:	9b00      	ldr	r3, [sp, #0]
 801b8be:	1aec      	subs	r4, r5, r3
 801b8c0:	2c00      	cmp	r4, #0
 801b8c2:	dd1a      	ble.n	801b8fa <_vfiprintf_r+0x5aa>
 801b8c4:	4d89      	ldr	r5, [pc, #548]	; (801baec <_vfiprintf_r+0x79c>)
 801b8c6:	6035      	str	r5, [r6, #0]
 801b8c8:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 801b8cc:	2c10      	cmp	r4, #16
 801b8ce:	f103 0301 	add.w	r3, r3, #1
 801b8d2:	f106 0208 	add.w	r2, r6, #8
 801b8d6:	f300 812a 	bgt.w	801bb2e <_vfiprintf_r+0x7de>
 801b8da:	6074      	str	r4, [r6, #4]
 801b8dc:	2b07      	cmp	r3, #7
 801b8de:	440c      	add	r4, r1
 801b8e0:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 801b8e4:	f340 8134 	ble.w	801bb50 <_vfiprintf_r+0x800>
 801b8e8:	aa0c      	add	r2, sp, #48	; 0x30
 801b8ea:	4639      	mov	r1, r7
 801b8ec:	4648      	mov	r0, r9
 801b8ee:	f7ff fcfd 	bl	801b2ec <__sprint_r>
 801b8f2:	2800      	cmp	r0, #0
 801b8f4:	f040 8154 	bne.w	801bba0 <_vfiprintf_r+0x850>
 801b8f8:	ae0f      	add	r6, sp, #60	; 0x3c
 801b8fa:	9b00      	ldr	r3, [sp, #0]
 801b8fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b8fe:	6073      	str	r3, [r6, #4]
 801b900:	4418      	add	r0, r3
 801b902:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b904:	f8c6 8000 	str.w	r8, [r6]
 801b908:	3301      	adds	r3, #1
 801b90a:	2b07      	cmp	r3, #7
 801b90c:	900e      	str	r0, [sp, #56]	; 0x38
 801b90e:	930d      	str	r3, [sp, #52]	; 0x34
 801b910:	f300 8120 	bgt.w	801bb54 <_vfiprintf_r+0x804>
 801b914:	f106 0308 	add.w	r3, r6, #8
 801b918:	f01a 0f04 	tst.w	sl, #4
 801b91c:	f040 8122 	bne.w	801bb64 <_vfiprintf_r+0x814>
 801b920:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801b924:	9904      	ldr	r1, [sp, #16]
 801b926:	428a      	cmp	r2, r1
 801b928:	bfac      	ite	ge
 801b92a:	189b      	addge	r3, r3, r2
 801b92c:	185b      	addlt	r3, r3, r1
 801b92e:	9302      	str	r3, [sp, #8]
 801b930:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b932:	b13b      	cbz	r3, 801b944 <_vfiprintf_r+0x5f4>
 801b934:	aa0c      	add	r2, sp, #48	; 0x30
 801b936:	4639      	mov	r1, r7
 801b938:	4648      	mov	r0, r9
 801b93a:	f7ff fcd7 	bl	801b2ec <__sprint_r>
 801b93e:	2800      	cmp	r0, #0
 801b940:	f040 812e 	bne.w	801bba0 <_vfiprintf_r+0x850>
 801b944:	2300      	movs	r3, #0
 801b946:	930d      	str	r3, [sp, #52]	; 0x34
 801b948:	465c      	mov	r4, fp
 801b94a:	ae0f      	add	r6, sp, #60	; 0x3c
 801b94c:	e564      	b.n	801b418 <_vfiprintf_r+0xc8>
 801b94e:	4640      	mov	r0, r8
 801b950:	f7e8 fc4e 	bl	80041f0 <strlen>
 801b954:	9000      	str	r0, [sp, #0]
 801b956:	e736      	b.n	801b7c6 <_vfiprintf_r+0x476>
 801b958:	f04a 0a10 	orr.w	sl, sl, #16
 801b95c:	f01a 0f20 	tst.w	sl, #32
 801b960:	d006      	beq.n	801b970 <_vfiprintf_r+0x620>
 801b962:	3407      	adds	r4, #7
 801b964:	f024 0b07 	bic.w	fp, r4, #7
 801b968:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 801b96c:	2301      	movs	r3, #1
 801b96e:	e6dd      	b.n	801b72c <_vfiprintf_r+0x3dc>
 801b970:	f01a 0f10 	tst.w	sl, #16
 801b974:	f104 0b04 	add.w	fp, r4, #4
 801b978:	d001      	beq.n	801b97e <_vfiprintf_r+0x62e>
 801b97a:	6824      	ldr	r4, [r4, #0]
 801b97c:	e003      	b.n	801b986 <_vfiprintf_r+0x636>
 801b97e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801b982:	d002      	beq.n	801b98a <_vfiprintf_r+0x63a>
 801b984:	8824      	ldrh	r4, [r4, #0]
 801b986:	2500      	movs	r5, #0
 801b988:	e7f0      	b.n	801b96c <_vfiprintf_r+0x61c>
 801b98a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801b98e:	d0f4      	beq.n	801b97a <_vfiprintf_r+0x62a>
 801b990:	7824      	ldrb	r4, [r4, #0]
 801b992:	e7f8      	b.n	801b986 <_vfiprintf_r+0x636>
 801b994:	4a56      	ldr	r2, [pc, #344]	; (801baf0 <_vfiprintf_r+0x7a0>)
 801b996:	e5d5      	b.n	801b544 <_vfiprintf_r+0x1f4>
 801b998:	f01a 0f10 	tst.w	sl, #16
 801b99c:	f104 0b04 	add.w	fp, r4, #4
 801b9a0:	d001      	beq.n	801b9a6 <_vfiprintf_r+0x656>
 801b9a2:	6824      	ldr	r4, [r4, #0]
 801b9a4:	e003      	b.n	801b9ae <_vfiprintf_r+0x65e>
 801b9a6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801b9aa:	d002      	beq.n	801b9b2 <_vfiprintf_r+0x662>
 801b9ac:	8824      	ldrh	r4, [r4, #0]
 801b9ae:	2500      	movs	r5, #0
 801b9b0:	e5d2      	b.n	801b558 <_vfiprintf_r+0x208>
 801b9b2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801b9b6:	d0f4      	beq.n	801b9a2 <_vfiprintf_r+0x652>
 801b9b8:	7824      	ldrb	r4, [r4, #0]
 801b9ba:	e7f8      	b.n	801b9ae <_vfiprintf_r+0x65e>
 801b9bc:	2d00      	cmp	r5, #0
 801b9be:	bf08      	it	eq
 801b9c0:	2c0a      	cmpeq	r4, #10
 801b9c2:	d205      	bcs.n	801b9d0 <_vfiprintf_r+0x680>
 801b9c4:	3430      	adds	r4, #48	; 0x30
 801b9c6:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 801b9ca:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 801b9ce:	e13c      	b.n	801bc4a <_vfiprintf_r+0x8fa>
 801b9d0:	ab38      	add	r3, sp, #224	; 0xe0
 801b9d2:	9308      	str	r3, [sp, #32]
 801b9d4:	9b04      	ldr	r3, [sp, #16]
 801b9d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b9da:	f04f 0a00 	mov.w	sl, #0
 801b9de:	9309      	str	r3, [sp, #36]	; 0x24
 801b9e0:	9b08      	ldr	r3, [sp, #32]
 801b9e2:	220a      	movs	r2, #10
 801b9e4:	f103 38ff 	add.w	r8, r3, #4294967295
 801b9e8:	4620      	mov	r0, r4
 801b9ea:	2300      	movs	r3, #0
 801b9ec:	4629      	mov	r1, r5
 801b9ee:	f7e9 f95b 	bl	8004ca8 <__aeabi_uldivmod>
 801b9f2:	9b08      	ldr	r3, [sp, #32]
 801b9f4:	3230      	adds	r2, #48	; 0x30
 801b9f6:	f803 2c01 	strb.w	r2, [r3, #-1]
 801b9fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b9fc:	f10a 0a01 	add.w	sl, sl, #1
 801ba00:	b1db      	cbz	r3, 801ba3a <_vfiprintf_r+0x6ea>
 801ba02:	9b06      	ldr	r3, [sp, #24]
 801ba04:	781b      	ldrb	r3, [r3, #0]
 801ba06:	4553      	cmp	r3, sl
 801ba08:	d117      	bne.n	801ba3a <_vfiprintf_r+0x6ea>
 801ba0a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801ba0e:	d014      	beq.n	801ba3a <_vfiprintf_r+0x6ea>
 801ba10:	2d00      	cmp	r5, #0
 801ba12:	bf08      	it	eq
 801ba14:	2c0a      	cmpeq	r4, #10
 801ba16:	d310      	bcc.n	801ba3a <_vfiprintf_r+0x6ea>
 801ba18:	9b07      	ldr	r3, [sp, #28]
 801ba1a:	eba8 0803 	sub.w	r8, r8, r3
 801ba1e:	461a      	mov	r2, r3
 801ba20:	ee18 1a10 	vmov	r1, s16
 801ba24:	4640      	mov	r0, r8
 801ba26:	f7f9 fdff 	bl	8015628 <strncpy>
 801ba2a:	9b06      	ldr	r3, [sp, #24]
 801ba2c:	785b      	ldrb	r3, [r3, #1]
 801ba2e:	b1a3      	cbz	r3, 801ba5a <_vfiprintf_r+0x70a>
 801ba30:	9b06      	ldr	r3, [sp, #24]
 801ba32:	3301      	adds	r3, #1
 801ba34:	9306      	str	r3, [sp, #24]
 801ba36:	f04f 0a00 	mov.w	sl, #0
 801ba3a:	220a      	movs	r2, #10
 801ba3c:	2300      	movs	r3, #0
 801ba3e:	4620      	mov	r0, r4
 801ba40:	4629      	mov	r1, r5
 801ba42:	f7e9 f931 	bl	8004ca8 <__aeabi_uldivmod>
 801ba46:	2d00      	cmp	r5, #0
 801ba48:	bf08      	it	eq
 801ba4a:	2c0a      	cmpeq	r4, #10
 801ba4c:	f0c0 80fd 	bcc.w	801bc4a <_vfiprintf_r+0x8fa>
 801ba50:	4604      	mov	r4, r0
 801ba52:	460d      	mov	r5, r1
 801ba54:	f8cd 8020 	str.w	r8, [sp, #32]
 801ba58:	e7c2      	b.n	801b9e0 <_vfiprintf_r+0x690>
 801ba5a:	469a      	mov	sl, r3
 801ba5c:	e7ed      	b.n	801ba3a <_vfiprintf_r+0x6ea>
 801ba5e:	9a05      	ldr	r2, [sp, #20]
 801ba60:	f004 030f 	and.w	r3, r4, #15
 801ba64:	5cd3      	ldrb	r3, [r2, r3]
 801ba66:	f808 3d01 	strb.w	r3, [r8, #-1]!
 801ba6a:	0923      	lsrs	r3, r4, #4
 801ba6c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 801ba70:	092a      	lsrs	r2, r5, #4
 801ba72:	461c      	mov	r4, r3
 801ba74:	4615      	mov	r5, r2
 801ba76:	ea54 0305 	orrs.w	r3, r4, r5
 801ba7a:	d1f0      	bne.n	801ba5e <_vfiprintf_r+0x70e>
 801ba7c:	e0e5      	b.n	801bc4a <_vfiprintf_r+0x8fa>
 801ba7e:	b933      	cbnz	r3, 801ba8e <_vfiprintf_r+0x73e>
 801ba80:	f01a 0f01 	tst.w	sl, #1
 801ba84:	d003      	beq.n	801ba8e <_vfiprintf_r+0x73e>
 801ba86:	2330      	movs	r3, #48	; 0x30
 801ba88:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 801ba8c:	e79d      	b.n	801b9ca <_vfiprintf_r+0x67a>
 801ba8e:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 801ba92:	e0da      	b.n	801bc4a <_vfiprintf_r+0x8fa>
 801ba94:	2b00      	cmp	r3, #0
 801ba96:	f000 80a4 	beq.w	801bbe2 <_vfiprintf_r+0x892>
 801ba9a:	2100      	movs	r1, #0
 801ba9c:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 801baa0:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 801baa4:	46a3      	mov	fp, r4
 801baa6:	e5e7      	b.n	801b678 <_vfiprintf_r+0x328>
 801baa8:	4605      	mov	r5, r0
 801baaa:	e68c      	b.n	801b7c6 <_vfiprintf_r+0x476>
 801baac:	2010      	movs	r0, #16
 801baae:	4402      	add	r2, r0
 801bab0:	2b07      	cmp	r3, #7
 801bab2:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 801bab6:	6070      	str	r0, [r6, #4]
 801bab8:	dd07      	ble.n	801baca <_vfiprintf_r+0x77a>
 801baba:	aa0c      	add	r2, sp, #48	; 0x30
 801babc:	4639      	mov	r1, r7
 801babe:	4648      	mov	r0, r9
 801bac0:	f7ff fc14 	bl	801b2ec <__sprint_r>
 801bac4:	2800      	cmp	r0, #0
 801bac6:	d16b      	bne.n	801bba0 <_vfiprintf_r+0x850>
 801bac8:	a90f      	add	r1, sp, #60	; 0x3c
 801baca:	3c10      	subs	r4, #16
 801bacc:	460e      	mov	r6, r1
 801bace:	e695      	b.n	801b7fc <_vfiprintf_r+0x4ac>
 801bad0:	460e      	mov	r6, r1
 801bad2:	e6ae      	b.n	801b832 <_vfiprintf_r+0x4e2>
 801bad4:	aa0c      	add	r2, sp, #48	; 0x30
 801bad6:	4639      	mov	r1, r7
 801bad8:	4648      	mov	r0, r9
 801bada:	f7ff fc07 	bl	801b2ec <__sprint_r>
 801bade:	2800      	cmp	r0, #0
 801bae0:	d15e      	bne.n	801bba0 <_vfiprintf_r+0x850>
 801bae2:	ae0f      	add	r6, sp, #60	; 0x3c
 801bae4:	e6b7      	b.n	801b856 <_vfiprintf_r+0x506>
 801bae6:	bf00      	nop
 801bae8:	0801eadc 	.word	0x0801eadc
 801baec:	0801eaec 	.word	0x0801eaec
 801baf0:	0801e709 	.word	0x0801e709
 801baf4:	aa0c      	add	r2, sp, #48	; 0x30
 801baf6:	4639      	mov	r1, r7
 801baf8:	4648      	mov	r0, r9
 801bafa:	f7ff fbf7 	bl	801b2ec <__sprint_r>
 801bafe:	2800      	cmp	r0, #0
 801bb00:	d14e      	bne.n	801bba0 <_vfiprintf_r+0x850>
 801bb02:	ae0f      	add	r6, sp, #60	; 0x3c
 801bb04:	e6b7      	b.n	801b876 <_vfiprintf_r+0x526>
 801bb06:	2010      	movs	r0, #16
 801bb08:	4402      	add	r2, r0
 801bb0a:	2b07      	cmp	r3, #7
 801bb0c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 801bb10:	6070      	str	r0, [r6, #4]
 801bb12:	dd07      	ble.n	801bb24 <_vfiprintf_r+0x7d4>
 801bb14:	aa0c      	add	r2, sp, #48	; 0x30
 801bb16:	4639      	mov	r1, r7
 801bb18:	4648      	mov	r0, r9
 801bb1a:	f7ff fbe7 	bl	801b2ec <__sprint_r>
 801bb1e:	2800      	cmp	r0, #0
 801bb20:	d13e      	bne.n	801bba0 <_vfiprintf_r+0x850>
 801bb22:	a90f      	add	r1, sp, #60	; 0x3c
 801bb24:	3c10      	subs	r4, #16
 801bb26:	460e      	mov	r6, r1
 801bb28:	e6ad      	b.n	801b886 <_vfiprintf_r+0x536>
 801bb2a:	460e      	mov	r6, r1
 801bb2c:	e6c6      	b.n	801b8bc <_vfiprintf_r+0x56c>
 801bb2e:	2010      	movs	r0, #16
 801bb30:	4401      	add	r1, r0
 801bb32:	2b07      	cmp	r3, #7
 801bb34:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 801bb38:	6070      	str	r0, [r6, #4]
 801bb3a:	dd06      	ble.n	801bb4a <_vfiprintf_r+0x7fa>
 801bb3c:	aa0c      	add	r2, sp, #48	; 0x30
 801bb3e:	4639      	mov	r1, r7
 801bb40:	4648      	mov	r0, r9
 801bb42:	f7ff fbd3 	bl	801b2ec <__sprint_r>
 801bb46:	bb58      	cbnz	r0, 801bba0 <_vfiprintf_r+0x850>
 801bb48:	aa0f      	add	r2, sp, #60	; 0x3c
 801bb4a:	3c10      	subs	r4, #16
 801bb4c:	4616      	mov	r6, r2
 801bb4e:	e6ba      	b.n	801b8c6 <_vfiprintf_r+0x576>
 801bb50:	4616      	mov	r6, r2
 801bb52:	e6d2      	b.n	801b8fa <_vfiprintf_r+0x5aa>
 801bb54:	aa0c      	add	r2, sp, #48	; 0x30
 801bb56:	4639      	mov	r1, r7
 801bb58:	4648      	mov	r0, r9
 801bb5a:	f7ff fbc7 	bl	801b2ec <__sprint_r>
 801bb5e:	b9f8      	cbnz	r0, 801bba0 <_vfiprintf_r+0x850>
 801bb60:	ab0f      	add	r3, sp, #60	; 0x3c
 801bb62:	e6d9      	b.n	801b918 <_vfiprintf_r+0x5c8>
 801bb64:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 801bb68:	1a54      	subs	r4, r2, r1
 801bb6a:	2c00      	cmp	r4, #0
 801bb6c:	f77f aed8 	ble.w	801b920 <_vfiprintf_r+0x5d0>
 801bb70:	4d3a      	ldr	r5, [pc, #232]	; (801bc5c <_vfiprintf_r+0x90c>)
 801bb72:	2610      	movs	r6, #16
 801bb74:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801bb78:	2c10      	cmp	r4, #16
 801bb7a:	f102 0201 	add.w	r2, r2, #1
 801bb7e:	601d      	str	r5, [r3, #0]
 801bb80:	dc1d      	bgt.n	801bbbe <_vfiprintf_r+0x86e>
 801bb82:	605c      	str	r4, [r3, #4]
 801bb84:	2a07      	cmp	r2, #7
 801bb86:	440c      	add	r4, r1
 801bb88:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 801bb8c:	f77f aec8 	ble.w	801b920 <_vfiprintf_r+0x5d0>
 801bb90:	aa0c      	add	r2, sp, #48	; 0x30
 801bb92:	4639      	mov	r1, r7
 801bb94:	4648      	mov	r0, r9
 801bb96:	f7ff fba9 	bl	801b2ec <__sprint_r>
 801bb9a:	2800      	cmp	r0, #0
 801bb9c:	f43f aec0 	beq.w	801b920 <_vfiprintf_r+0x5d0>
 801bba0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bba2:	07d9      	lsls	r1, r3, #31
 801bba4:	d405      	bmi.n	801bbb2 <_vfiprintf_r+0x862>
 801bba6:	89bb      	ldrh	r3, [r7, #12]
 801bba8:	059a      	lsls	r2, r3, #22
 801bbaa:	d402      	bmi.n	801bbb2 <_vfiprintf_r+0x862>
 801bbac:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801bbae:	f7fe fdb2 	bl	801a716 <__retarget_lock_release_recursive>
 801bbb2:	89bb      	ldrh	r3, [r7, #12]
 801bbb4:	065b      	lsls	r3, r3, #25
 801bbb6:	f57f abfe 	bpl.w	801b3b6 <_vfiprintf_r+0x66>
 801bbba:	f7ff bbf9 	b.w	801b3b0 <_vfiprintf_r+0x60>
 801bbbe:	3110      	adds	r1, #16
 801bbc0:	2a07      	cmp	r2, #7
 801bbc2:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 801bbc6:	605e      	str	r6, [r3, #4]
 801bbc8:	dc02      	bgt.n	801bbd0 <_vfiprintf_r+0x880>
 801bbca:	3308      	adds	r3, #8
 801bbcc:	3c10      	subs	r4, #16
 801bbce:	e7d1      	b.n	801bb74 <_vfiprintf_r+0x824>
 801bbd0:	aa0c      	add	r2, sp, #48	; 0x30
 801bbd2:	4639      	mov	r1, r7
 801bbd4:	4648      	mov	r0, r9
 801bbd6:	f7ff fb89 	bl	801b2ec <__sprint_r>
 801bbda:	2800      	cmp	r0, #0
 801bbdc:	d1e0      	bne.n	801bba0 <_vfiprintf_r+0x850>
 801bbde:	ab0f      	add	r3, sp, #60	; 0x3c
 801bbe0:	e7f4      	b.n	801bbcc <_vfiprintf_r+0x87c>
 801bbe2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bbe4:	b913      	cbnz	r3, 801bbec <_vfiprintf_r+0x89c>
 801bbe6:	2300      	movs	r3, #0
 801bbe8:	930d      	str	r3, [sp, #52]	; 0x34
 801bbea:	e7d9      	b.n	801bba0 <_vfiprintf_r+0x850>
 801bbec:	aa0c      	add	r2, sp, #48	; 0x30
 801bbee:	4639      	mov	r1, r7
 801bbf0:	4648      	mov	r0, r9
 801bbf2:	f7ff fb7b 	bl	801b2ec <__sprint_r>
 801bbf6:	2800      	cmp	r0, #0
 801bbf8:	d0f5      	beq.n	801bbe6 <_vfiprintf_r+0x896>
 801bbfa:	e7d1      	b.n	801bba0 <_vfiprintf_r+0x850>
 801bbfc:	ea54 0205 	orrs.w	r2, r4, r5
 801bc00:	f8cd a010 	str.w	sl, [sp, #16]
 801bc04:	f43f ada4 	beq.w	801b750 <_vfiprintf_r+0x400>
 801bc08:	2b01      	cmp	r3, #1
 801bc0a:	f43f aed7 	beq.w	801b9bc <_vfiprintf_r+0x66c>
 801bc0e:	2b02      	cmp	r3, #2
 801bc10:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 801bc14:	f43f af23 	beq.w	801ba5e <_vfiprintf_r+0x70e>
 801bc18:	08e2      	lsrs	r2, r4, #3
 801bc1a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 801bc1e:	08e8      	lsrs	r0, r5, #3
 801bc20:	f004 0307 	and.w	r3, r4, #7
 801bc24:	4605      	mov	r5, r0
 801bc26:	4614      	mov	r4, r2
 801bc28:	3330      	adds	r3, #48	; 0x30
 801bc2a:	ea54 0205 	orrs.w	r2, r4, r5
 801bc2e:	4641      	mov	r1, r8
 801bc30:	f808 3d01 	strb.w	r3, [r8, #-1]!
 801bc34:	d1f0      	bne.n	801bc18 <_vfiprintf_r+0x8c8>
 801bc36:	9a04      	ldr	r2, [sp, #16]
 801bc38:	07d0      	lsls	r0, r2, #31
 801bc3a:	d506      	bpl.n	801bc4a <_vfiprintf_r+0x8fa>
 801bc3c:	2b30      	cmp	r3, #48	; 0x30
 801bc3e:	d004      	beq.n	801bc4a <_vfiprintf_r+0x8fa>
 801bc40:	2330      	movs	r3, #48	; 0x30
 801bc42:	f808 3c01 	strb.w	r3, [r8, #-1]
 801bc46:	f1a1 0802 	sub.w	r8, r1, #2
 801bc4a:	ab38      	add	r3, sp, #224	; 0xe0
 801bc4c:	eba3 0308 	sub.w	r3, r3, r8
 801bc50:	9d00      	ldr	r5, [sp, #0]
 801bc52:	f8dd a010 	ldr.w	sl, [sp, #16]
 801bc56:	9300      	str	r3, [sp, #0]
 801bc58:	e5b5      	b.n	801b7c6 <_vfiprintf_r+0x476>
 801bc5a:	bf00      	nop
 801bc5c:	0801eadc 	.word	0x0801eadc

0801bc60 <__sbprintf>:
 801bc60:	b570      	push	{r4, r5, r6, lr}
 801bc62:	460c      	mov	r4, r1
 801bc64:	8989      	ldrh	r1, [r1, #12]
 801bc66:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 801bc6a:	f021 0102 	bic.w	r1, r1, #2
 801bc6e:	f8ad 1014 	strh.w	r1, [sp, #20]
 801bc72:	6e61      	ldr	r1, [r4, #100]	; 0x64
 801bc74:	911b      	str	r1, [sp, #108]	; 0x6c
 801bc76:	89e1      	ldrh	r1, [r4, #14]
 801bc78:	f8ad 1016 	strh.w	r1, [sp, #22]
 801bc7c:	69e1      	ldr	r1, [r4, #28]
 801bc7e:	9109      	str	r1, [sp, #36]	; 0x24
 801bc80:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801bc82:	910b      	str	r1, [sp, #44]	; 0x2c
 801bc84:	a91c      	add	r1, sp, #112	; 0x70
 801bc86:	9102      	str	r1, [sp, #8]
 801bc88:	9106      	str	r1, [sp, #24]
 801bc8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801bc8e:	4606      	mov	r6, r0
 801bc90:	9104      	str	r1, [sp, #16]
 801bc92:	9107      	str	r1, [sp, #28]
 801bc94:	a818      	add	r0, sp, #96	; 0x60
 801bc96:	2100      	movs	r1, #0
 801bc98:	e9cd 3200 	strd	r3, r2, [sp]
 801bc9c:	9108      	str	r1, [sp, #32]
 801bc9e:	f7fe fd37 	bl	801a710 <__retarget_lock_init_recursive>
 801bca2:	e9dd 3200 	ldrd	r3, r2, [sp]
 801bca6:	a902      	add	r1, sp, #8
 801bca8:	4630      	mov	r0, r6
 801bcaa:	f7ff fb51 	bl	801b350 <_vfiprintf_r>
 801bcae:	1e05      	subs	r5, r0, #0
 801bcb0:	db07      	blt.n	801bcc2 <__sbprintf+0x62>
 801bcb2:	a902      	add	r1, sp, #8
 801bcb4:	4630      	mov	r0, r6
 801bcb6:	f7fd ffd7 	bl	8019c68 <_fflush_r>
 801bcba:	2800      	cmp	r0, #0
 801bcbc:	bf18      	it	ne
 801bcbe:	f04f 35ff 	movne.w	r5, #4294967295
 801bcc2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801bcc6:	9818      	ldr	r0, [sp, #96]	; 0x60
 801bcc8:	065b      	lsls	r3, r3, #25
 801bcca:	bf42      	ittt	mi
 801bccc:	89a3      	ldrhmi	r3, [r4, #12]
 801bcce:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801bcd2:	81a3      	strhmi	r3, [r4, #12]
 801bcd4:	f7fe fd1d 	bl	801a712 <__retarget_lock_close_recursive>
 801bcd8:	4628      	mov	r0, r5
 801bcda:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 801bcde:	bd70      	pop	{r4, r5, r6, pc}

0801bce0 <__ascii_wctomb>:
 801bce0:	b149      	cbz	r1, 801bcf6 <__ascii_wctomb+0x16>
 801bce2:	2aff      	cmp	r2, #255	; 0xff
 801bce4:	bf85      	ittet	hi
 801bce6:	238a      	movhi	r3, #138	; 0x8a
 801bce8:	6003      	strhi	r3, [r0, #0]
 801bcea:	700a      	strbls	r2, [r1, #0]
 801bcec:	f04f 30ff 	movhi.w	r0, #4294967295
 801bcf0:	bf98      	it	ls
 801bcf2:	2001      	movls	r0, #1
 801bcf4:	4770      	bx	lr
 801bcf6:	4608      	mov	r0, r1
 801bcf8:	4770      	bx	lr
	...

0801bcfc <_write_r>:
 801bcfc:	b538      	push	{r3, r4, r5, lr}
 801bcfe:	4d07      	ldr	r5, [pc, #28]	; (801bd1c <_write_r+0x20>)
 801bd00:	4604      	mov	r4, r0
 801bd02:	4608      	mov	r0, r1
 801bd04:	4611      	mov	r1, r2
 801bd06:	2200      	movs	r2, #0
 801bd08:	602a      	str	r2, [r5, #0]
 801bd0a:	461a      	mov	r2, r3
 801bd0c:	f7f8 f9f6 	bl	80140fc <_write>
 801bd10:	1c43      	adds	r3, r0, #1
 801bd12:	d102      	bne.n	801bd1a <_write_r+0x1e>
 801bd14:	682b      	ldr	r3, [r5, #0]
 801bd16:	b103      	cbz	r3, 801bd1a <_write_r+0x1e>
 801bd18:	6023      	str	r3, [r4, #0]
 801bd1a:	bd38      	pop	{r3, r4, r5, pc}
 801bd1c:	200110a8 	.word	0x200110a8

0801bd20 <__register_exitproc>:
 801bd20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bd24:	4d1c      	ldr	r5, [pc, #112]	; (801bd98 <__register_exitproc+0x78>)
 801bd26:	4606      	mov	r6, r0
 801bd28:	6828      	ldr	r0, [r5, #0]
 801bd2a:	4698      	mov	r8, r3
 801bd2c:	460f      	mov	r7, r1
 801bd2e:	4691      	mov	r9, r2
 801bd30:	f7fe fcf0 	bl	801a714 <__retarget_lock_acquire_recursive>
 801bd34:	4b19      	ldr	r3, [pc, #100]	; (801bd9c <__register_exitproc+0x7c>)
 801bd36:	681b      	ldr	r3, [r3, #0]
 801bd38:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 801bd3c:	4628      	mov	r0, r5
 801bd3e:	b91c      	cbnz	r4, 801bd48 <__register_exitproc+0x28>
 801bd40:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 801bd44:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 801bd48:	6865      	ldr	r5, [r4, #4]
 801bd4a:	6800      	ldr	r0, [r0, #0]
 801bd4c:	2d1f      	cmp	r5, #31
 801bd4e:	dd05      	ble.n	801bd5c <__register_exitproc+0x3c>
 801bd50:	f7fe fce1 	bl	801a716 <__retarget_lock_release_recursive>
 801bd54:	f04f 30ff 	mov.w	r0, #4294967295
 801bd58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bd5c:	b19e      	cbz	r6, 801bd86 <__register_exitproc+0x66>
 801bd5e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801bd62:	2201      	movs	r2, #1
 801bd64:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 801bd68:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 801bd6c:	40aa      	lsls	r2, r5
 801bd6e:	4313      	orrs	r3, r2
 801bd70:	2e02      	cmp	r6, #2
 801bd72:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 801bd76:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 801bd7a:	bf02      	ittt	eq
 801bd7c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 801bd80:	431a      	orreq	r2, r3
 801bd82:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 801bd86:	1c6b      	adds	r3, r5, #1
 801bd88:	3502      	adds	r5, #2
 801bd8a:	6063      	str	r3, [r4, #4]
 801bd8c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801bd90:	f7fe fcc1 	bl	801a716 <__retarget_lock_release_recursive>
 801bd94:	2000      	movs	r0, #0
 801bd96:	e7df      	b.n	801bd58 <__register_exitproc+0x38>
 801bd98:	200040c0 	.word	0x200040c0
 801bd9c:	0801e690 	.word	0x0801e690

0801bda0 <__assert_func>:
 801bda0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bda2:	4614      	mov	r4, r2
 801bda4:	461a      	mov	r2, r3
 801bda6:	4b09      	ldr	r3, [pc, #36]	; (801bdcc <__assert_func+0x2c>)
 801bda8:	681b      	ldr	r3, [r3, #0]
 801bdaa:	4605      	mov	r5, r0
 801bdac:	68d8      	ldr	r0, [r3, #12]
 801bdae:	b14c      	cbz	r4, 801bdc4 <__assert_func+0x24>
 801bdb0:	4b07      	ldr	r3, [pc, #28]	; (801bdd0 <__assert_func+0x30>)
 801bdb2:	9100      	str	r1, [sp, #0]
 801bdb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801bdb8:	4906      	ldr	r1, [pc, #24]	; (801bdd4 <__assert_func+0x34>)
 801bdba:	462b      	mov	r3, r5
 801bdbc:	f000 f8a4 	bl	801bf08 <fiprintf>
 801bdc0:	f000 fcd0 	bl	801c764 <abort>
 801bdc4:	4b04      	ldr	r3, [pc, #16]	; (801bdd8 <__assert_func+0x38>)
 801bdc6:	461c      	mov	r4, r3
 801bdc8:	e7f3      	b.n	801bdb2 <__assert_func+0x12>
 801bdca:	bf00      	nop
 801bdcc:	20003880 	.word	0x20003880
 801bdd0:	0801eafc 	.word	0x0801eafc
 801bdd4:	0801eb09 	.word	0x0801eb09
 801bdd8:	0801eb37 	.word	0x0801eb37

0801bddc <_calloc_r>:
 801bddc:	b510      	push	{r4, lr}
 801bdde:	4351      	muls	r1, r2
 801bde0:	f7f9 f938 	bl	8015054 <_malloc_r>
 801bde4:	4604      	mov	r4, r0
 801bde6:	b198      	cbz	r0, 801be10 <_calloc_r+0x34>
 801bde8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801bdec:	f022 0203 	bic.w	r2, r2, #3
 801bdf0:	3a04      	subs	r2, #4
 801bdf2:	2a24      	cmp	r2, #36	; 0x24
 801bdf4:	d81b      	bhi.n	801be2e <_calloc_r+0x52>
 801bdf6:	2a13      	cmp	r2, #19
 801bdf8:	d917      	bls.n	801be2a <_calloc_r+0x4e>
 801bdfa:	2100      	movs	r1, #0
 801bdfc:	2a1b      	cmp	r2, #27
 801bdfe:	e9c0 1100 	strd	r1, r1, [r0]
 801be02:	d807      	bhi.n	801be14 <_calloc_r+0x38>
 801be04:	f100 0308 	add.w	r3, r0, #8
 801be08:	2200      	movs	r2, #0
 801be0a:	e9c3 2200 	strd	r2, r2, [r3]
 801be0e:	609a      	str	r2, [r3, #8]
 801be10:	4620      	mov	r0, r4
 801be12:	bd10      	pop	{r4, pc}
 801be14:	2a24      	cmp	r2, #36	; 0x24
 801be16:	e9c0 1102 	strd	r1, r1, [r0, #8]
 801be1a:	bf11      	iteee	ne
 801be1c:	f100 0310 	addne.w	r3, r0, #16
 801be20:	6101      	streq	r1, [r0, #16]
 801be22:	f100 0318 	addeq.w	r3, r0, #24
 801be26:	6141      	streq	r1, [r0, #20]
 801be28:	e7ee      	b.n	801be08 <_calloc_r+0x2c>
 801be2a:	4603      	mov	r3, r0
 801be2c:	e7ec      	b.n	801be08 <_calloc_r+0x2c>
 801be2e:	2100      	movs	r1, #0
 801be30:	f7f9 fb6e 	bl	8015510 <memset>
 801be34:	e7ec      	b.n	801be10 <_calloc_r+0x34>
	...

0801be38 <_close_r>:
 801be38:	b538      	push	{r3, r4, r5, lr}
 801be3a:	4d06      	ldr	r5, [pc, #24]	; (801be54 <_close_r+0x1c>)
 801be3c:	2300      	movs	r3, #0
 801be3e:	4604      	mov	r4, r0
 801be40:	4608      	mov	r0, r1
 801be42:	602b      	str	r3, [r5, #0]
 801be44:	f7f8 f986 	bl	8014154 <_close>
 801be48:	1c43      	adds	r3, r0, #1
 801be4a:	d102      	bne.n	801be52 <_close_r+0x1a>
 801be4c:	682b      	ldr	r3, [r5, #0]
 801be4e:	b103      	cbz	r3, 801be52 <_close_r+0x1a>
 801be50:	6023      	str	r3, [r4, #0]
 801be52:	bd38      	pop	{r3, r4, r5, pc}
 801be54:	200110a8 	.word	0x200110a8

0801be58 <_fclose_r>:
 801be58:	b570      	push	{r4, r5, r6, lr}
 801be5a:	4606      	mov	r6, r0
 801be5c:	460c      	mov	r4, r1
 801be5e:	b911      	cbnz	r1, 801be66 <_fclose_r+0xe>
 801be60:	2500      	movs	r5, #0
 801be62:	4628      	mov	r0, r5
 801be64:	bd70      	pop	{r4, r5, r6, pc}
 801be66:	b118      	cbz	r0, 801be70 <_fclose_r+0x18>
 801be68:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801be6a:	b90b      	cbnz	r3, 801be70 <_fclose_r+0x18>
 801be6c:	f7fd ff68 	bl	8019d40 <__sinit>
 801be70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801be72:	07d8      	lsls	r0, r3, #31
 801be74:	d405      	bmi.n	801be82 <_fclose_r+0x2a>
 801be76:	89a3      	ldrh	r3, [r4, #12]
 801be78:	0599      	lsls	r1, r3, #22
 801be7a:	d402      	bmi.n	801be82 <_fclose_r+0x2a>
 801be7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801be7e:	f7fe fc49 	bl	801a714 <__retarget_lock_acquire_recursive>
 801be82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801be86:	b93b      	cbnz	r3, 801be98 <_fclose_r+0x40>
 801be88:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801be8a:	f015 0501 	ands.w	r5, r5, #1
 801be8e:	d1e7      	bne.n	801be60 <_fclose_r+0x8>
 801be90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801be92:	f7fe fc40 	bl	801a716 <__retarget_lock_release_recursive>
 801be96:	e7e4      	b.n	801be62 <_fclose_r+0xa>
 801be98:	4621      	mov	r1, r4
 801be9a:	4630      	mov	r0, r6
 801be9c:	f7fd fe56 	bl	8019b4c <__sflush_r>
 801bea0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801bea2:	4605      	mov	r5, r0
 801bea4:	b133      	cbz	r3, 801beb4 <_fclose_r+0x5c>
 801bea6:	69e1      	ldr	r1, [r4, #28]
 801bea8:	4630      	mov	r0, r6
 801beaa:	4798      	blx	r3
 801beac:	2800      	cmp	r0, #0
 801beae:	bfb8      	it	lt
 801beb0:	f04f 35ff 	movlt.w	r5, #4294967295
 801beb4:	89a3      	ldrh	r3, [r4, #12]
 801beb6:	061a      	lsls	r2, r3, #24
 801beb8:	d503      	bpl.n	801bec2 <_fclose_r+0x6a>
 801beba:	6921      	ldr	r1, [r4, #16]
 801bebc:	4630      	mov	r0, r6
 801bebe:	f7fd ffcf 	bl	8019e60 <_free_r>
 801bec2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801bec4:	b141      	cbz	r1, 801bed8 <_fclose_r+0x80>
 801bec6:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801beca:	4299      	cmp	r1, r3
 801becc:	d002      	beq.n	801bed4 <_fclose_r+0x7c>
 801bece:	4630      	mov	r0, r6
 801bed0:	f7fd ffc6 	bl	8019e60 <_free_r>
 801bed4:	2300      	movs	r3, #0
 801bed6:	6323      	str	r3, [r4, #48]	; 0x30
 801bed8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801beda:	b121      	cbz	r1, 801bee6 <_fclose_r+0x8e>
 801bedc:	4630      	mov	r0, r6
 801bede:	f7fd ffbf 	bl	8019e60 <_free_r>
 801bee2:	2300      	movs	r3, #0
 801bee4:	6463      	str	r3, [r4, #68]	; 0x44
 801bee6:	f7fd ff13 	bl	8019d10 <__sfp_lock_acquire>
 801beea:	2300      	movs	r3, #0
 801beec:	81a3      	strh	r3, [r4, #12]
 801beee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bef0:	07db      	lsls	r3, r3, #31
 801bef2:	d402      	bmi.n	801befa <_fclose_r+0xa2>
 801bef4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bef6:	f7fe fc0e 	bl	801a716 <__retarget_lock_release_recursive>
 801befa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801befc:	f7fe fc09 	bl	801a712 <__retarget_lock_close_recursive>
 801bf00:	f7fd ff0c 	bl	8019d1c <__sfp_lock_release>
 801bf04:	e7ad      	b.n	801be62 <_fclose_r+0xa>
	...

0801bf08 <fiprintf>:
 801bf08:	b40e      	push	{r1, r2, r3}
 801bf0a:	b503      	push	{r0, r1, lr}
 801bf0c:	4601      	mov	r1, r0
 801bf0e:	ab03      	add	r3, sp, #12
 801bf10:	4805      	ldr	r0, [pc, #20]	; (801bf28 <fiprintf+0x20>)
 801bf12:	f853 2b04 	ldr.w	r2, [r3], #4
 801bf16:	6800      	ldr	r0, [r0, #0]
 801bf18:	9301      	str	r3, [sp, #4]
 801bf1a:	f7ff fa19 	bl	801b350 <_vfiprintf_r>
 801bf1e:	b002      	add	sp, #8
 801bf20:	f85d eb04 	ldr.w	lr, [sp], #4
 801bf24:	b003      	add	sp, #12
 801bf26:	4770      	bx	lr
 801bf28:	20003880 	.word	0x20003880

0801bf2c <__fputwc>:
 801bf2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801bf30:	4680      	mov	r8, r0
 801bf32:	460e      	mov	r6, r1
 801bf34:	4615      	mov	r5, r2
 801bf36:	f7fe fbe1 	bl	801a6fc <__locale_mb_cur_max>
 801bf3a:	2801      	cmp	r0, #1
 801bf3c:	d11c      	bne.n	801bf78 <__fputwc+0x4c>
 801bf3e:	1e73      	subs	r3, r6, #1
 801bf40:	2bfe      	cmp	r3, #254	; 0xfe
 801bf42:	d819      	bhi.n	801bf78 <__fputwc+0x4c>
 801bf44:	f88d 6004 	strb.w	r6, [sp, #4]
 801bf48:	4604      	mov	r4, r0
 801bf4a:	2700      	movs	r7, #0
 801bf4c:	f10d 0904 	add.w	r9, sp, #4
 801bf50:	42a7      	cmp	r7, r4
 801bf52:	d020      	beq.n	801bf96 <__fputwc+0x6a>
 801bf54:	68ab      	ldr	r3, [r5, #8]
 801bf56:	f817 1009 	ldrb.w	r1, [r7, r9]
 801bf5a:	3b01      	subs	r3, #1
 801bf5c:	2b00      	cmp	r3, #0
 801bf5e:	60ab      	str	r3, [r5, #8]
 801bf60:	da04      	bge.n	801bf6c <__fputwc+0x40>
 801bf62:	69aa      	ldr	r2, [r5, #24]
 801bf64:	4293      	cmp	r3, r2
 801bf66:	db1a      	blt.n	801bf9e <__fputwc+0x72>
 801bf68:	290a      	cmp	r1, #10
 801bf6a:	d018      	beq.n	801bf9e <__fputwc+0x72>
 801bf6c:	682b      	ldr	r3, [r5, #0]
 801bf6e:	1c5a      	adds	r2, r3, #1
 801bf70:	602a      	str	r2, [r5, #0]
 801bf72:	7019      	strb	r1, [r3, #0]
 801bf74:	3701      	adds	r7, #1
 801bf76:	e7eb      	b.n	801bf50 <__fputwc+0x24>
 801bf78:	4632      	mov	r2, r6
 801bf7a:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 801bf7e:	a901      	add	r1, sp, #4
 801bf80:	4640      	mov	r0, r8
 801bf82:	f000 fbd9 	bl	801c738 <_wcrtomb_r>
 801bf86:	1c42      	adds	r2, r0, #1
 801bf88:	4604      	mov	r4, r0
 801bf8a:	d1de      	bne.n	801bf4a <__fputwc+0x1e>
 801bf8c:	89ab      	ldrh	r3, [r5, #12]
 801bf8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bf92:	81ab      	strh	r3, [r5, #12]
 801bf94:	4606      	mov	r6, r0
 801bf96:	4630      	mov	r0, r6
 801bf98:	b003      	add	sp, #12
 801bf9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bf9e:	462a      	mov	r2, r5
 801bfa0:	4640      	mov	r0, r8
 801bfa2:	f000 fb7f 	bl	801c6a4 <__swbuf_r>
 801bfa6:	1c43      	adds	r3, r0, #1
 801bfa8:	d1e4      	bne.n	801bf74 <__fputwc+0x48>
 801bfaa:	4606      	mov	r6, r0
 801bfac:	e7f3      	b.n	801bf96 <__fputwc+0x6a>

0801bfae <_fputwc_r>:
 801bfae:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801bfb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bfb2:	4614      	mov	r4, r2
 801bfb4:	07da      	lsls	r2, r3, #31
 801bfb6:	4605      	mov	r5, r0
 801bfb8:	d407      	bmi.n	801bfca <_fputwc_r+0x1c>
 801bfba:	89a3      	ldrh	r3, [r4, #12]
 801bfbc:	059b      	lsls	r3, r3, #22
 801bfbe:	d404      	bmi.n	801bfca <_fputwc_r+0x1c>
 801bfc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bfc2:	9101      	str	r1, [sp, #4]
 801bfc4:	f7fe fba6 	bl	801a714 <__retarget_lock_acquire_recursive>
 801bfc8:	9901      	ldr	r1, [sp, #4]
 801bfca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bfce:	0498      	lsls	r0, r3, #18
 801bfd0:	d406      	bmi.n	801bfe0 <_fputwc_r+0x32>
 801bfd2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801bfd6:	81a3      	strh	r3, [r4, #12]
 801bfd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bfda:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801bfde:	6663      	str	r3, [r4, #100]	; 0x64
 801bfe0:	4622      	mov	r2, r4
 801bfe2:	4628      	mov	r0, r5
 801bfe4:	f7ff ffa2 	bl	801bf2c <__fputwc>
 801bfe8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bfea:	07da      	lsls	r2, r3, #31
 801bfec:	4605      	mov	r5, r0
 801bfee:	d405      	bmi.n	801bffc <_fputwc_r+0x4e>
 801bff0:	89a3      	ldrh	r3, [r4, #12]
 801bff2:	059b      	lsls	r3, r3, #22
 801bff4:	d402      	bmi.n	801bffc <_fputwc_r+0x4e>
 801bff6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bff8:	f7fe fb8d 	bl	801a716 <__retarget_lock_release_recursive>
 801bffc:	4628      	mov	r0, r5
 801bffe:	b003      	add	sp, #12
 801c000:	bd30      	pop	{r4, r5, pc}
	...

0801c004 <_fstat_r>:
 801c004:	b538      	push	{r3, r4, r5, lr}
 801c006:	4d07      	ldr	r5, [pc, #28]	; (801c024 <_fstat_r+0x20>)
 801c008:	2300      	movs	r3, #0
 801c00a:	4604      	mov	r4, r0
 801c00c:	4608      	mov	r0, r1
 801c00e:	4611      	mov	r1, r2
 801c010:	602b      	str	r3, [r5, #0]
 801c012:	f7f8 f8a2 	bl	801415a <_fstat>
 801c016:	1c43      	adds	r3, r0, #1
 801c018:	d102      	bne.n	801c020 <_fstat_r+0x1c>
 801c01a:	682b      	ldr	r3, [r5, #0]
 801c01c:	b103      	cbz	r3, 801c020 <_fstat_r+0x1c>
 801c01e:	6023      	str	r3, [r4, #0]
 801c020:	bd38      	pop	{r3, r4, r5, pc}
 801c022:	bf00      	nop
 801c024:	200110a8 	.word	0x200110a8

0801c028 <__sfvwrite_r>:
 801c028:	6893      	ldr	r3, [r2, #8]
 801c02a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c02e:	4606      	mov	r6, r0
 801c030:	460c      	mov	r4, r1
 801c032:	4690      	mov	r8, r2
 801c034:	b91b      	cbnz	r3, 801c03e <__sfvwrite_r+0x16>
 801c036:	2000      	movs	r0, #0
 801c038:	b003      	add	sp, #12
 801c03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c03e:	898b      	ldrh	r3, [r1, #12]
 801c040:	0718      	lsls	r0, r3, #28
 801c042:	d550      	bpl.n	801c0e6 <__sfvwrite_r+0xbe>
 801c044:	690b      	ldr	r3, [r1, #16]
 801c046:	2b00      	cmp	r3, #0
 801c048:	d04d      	beq.n	801c0e6 <__sfvwrite_r+0xbe>
 801c04a:	89a3      	ldrh	r3, [r4, #12]
 801c04c:	f8d8 7000 	ldr.w	r7, [r8]
 801c050:	f013 0902 	ands.w	r9, r3, #2
 801c054:	d16c      	bne.n	801c130 <__sfvwrite_r+0x108>
 801c056:	f013 0301 	ands.w	r3, r3, #1
 801c05a:	f000 809c 	beq.w	801c196 <__sfvwrite_r+0x16e>
 801c05e:	4648      	mov	r0, r9
 801c060:	46ca      	mov	sl, r9
 801c062:	46cb      	mov	fp, r9
 801c064:	f1bb 0f00 	cmp.w	fp, #0
 801c068:	f000 8103 	beq.w	801c272 <__sfvwrite_r+0x24a>
 801c06c:	b950      	cbnz	r0, 801c084 <__sfvwrite_r+0x5c>
 801c06e:	465a      	mov	r2, fp
 801c070:	210a      	movs	r1, #10
 801c072:	4650      	mov	r0, sl
 801c074:	f7e8 f8c4 	bl	8004200 <memchr>
 801c078:	2800      	cmp	r0, #0
 801c07a:	f000 80ff 	beq.w	801c27c <__sfvwrite_r+0x254>
 801c07e:	3001      	adds	r0, #1
 801c080:	eba0 090a 	sub.w	r9, r0, sl
 801c084:	6820      	ldr	r0, [r4, #0]
 801c086:	6921      	ldr	r1, [r4, #16]
 801c088:	6963      	ldr	r3, [r4, #20]
 801c08a:	45d9      	cmp	r9, fp
 801c08c:	464a      	mov	r2, r9
 801c08e:	bf28      	it	cs
 801c090:	465a      	movcs	r2, fp
 801c092:	4288      	cmp	r0, r1
 801c094:	f240 80f5 	bls.w	801c282 <__sfvwrite_r+0x25a>
 801c098:	68a5      	ldr	r5, [r4, #8]
 801c09a:	441d      	add	r5, r3
 801c09c:	42aa      	cmp	r2, r5
 801c09e:	f340 80f0 	ble.w	801c282 <__sfvwrite_r+0x25a>
 801c0a2:	4651      	mov	r1, sl
 801c0a4:	462a      	mov	r2, r5
 801c0a6:	f000 f92b 	bl	801c300 <memmove>
 801c0aa:	6823      	ldr	r3, [r4, #0]
 801c0ac:	442b      	add	r3, r5
 801c0ae:	6023      	str	r3, [r4, #0]
 801c0b0:	4621      	mov	r1, r4
 801c0b2:	4630      	mov	r0, r6
 801c0b4:	f7fd fdd8 	bl	8019c68 <_fflush_r>
 801c0b8:	2800      	cmp	r0, #0
 801c0ba:	d167      	bne.n	801c18c <__sfvwrite_r+0x164>
 801c0bc:	ebb9 0905 	subs.w	r9, r9, r5
 801c0c0:	f040 80f7 	bne.w	801c2b2 <__sfvwrite_r+0x28a>
 801c0c4:	4621      	mov	r1, r4
 801c0c6:	4630      	mov	r0, r6
 801c0c8:	f7fd fdce 	bl	8019c68 <_fflush_r>
 801c0cc:	2800      	cmp	r0, #0
 801c0ce:	d15d      	bne.n	801c18c <__sfvwrite_r+0x164>
 801c0d0:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801c0d4:	44aa      	add	sl, r5
 801c0d6:	ebab 0b05 	sub.w	fp, fp, r5
 801c0da:	1b55      	subs	r5, r2, r5
 801c0dc:	f8c8 5008 	str.w	r5, [r8, #8]
 801c0e0:	2d00      	cmp	r5, #0
 801c0e2:	d1bf      	bne.n	801c064 <__sfvwrite_r+0x3c>
 801c0e4:	e7a7      	b.n	801c036 <__sfvwrite_r+0xe>
 801c0e6:	4621      	mov	r1, r4
 801c0e8:	4630      	mov	r0, r6
 801c0ea:	f7fc fe5f 	bl	8018dac <__swsetup_r>
 801c0ee:	2800      	cmp	r0, #0
 801c0f0:	d0ab      	beq.n	801c04a <__sfvwrite_r+0x22>
 801c0f2:	f04f 30ff 	mov.w	r0, #4294967295
 801c0f6:	e79f      	b.n	801c038 <__sfvwrite_r+0x10>
 801c0f8:	e9d7 b900 	ldrd	fp, r9, [r7]
 801c0fc:	3708      	adds	r7, #8
 801c0fe:	f1b9 0f00 	cmp.w	r9, #0
 801c102:	d0f9      	beq.n	801c0f8 <__sfvwrite_r+0xd0>
 801c104:	45d1      	cmp	r9, sl
 801c106:	464b      	mov	r3, r9
 801c108:	69e1      	ldr	r1, [r4, #28]
 801c10a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801c10c:	bf28      	it	cs
 801c10e:	4653      	movcs	r3, sl
 801c110:	465a      	mov	r2, fp
 801c112:	4630      	mov	r0, r6
 801c114:	47a8      	blx	r5
 801c116:	2800      	cmp	r0, #0
 801c118:	dd38      	ble.n	801c18c <__sfvwrite_r+0x164>
 801c11a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c11e:	4483      	add	fp, r0
 801c120:	eba9 0900 	sub.w	r9, r9, r0
 801c124:	1a18      	subs	r0, r3, r0
 801c126:	f8c8 0008 	str.w	r0, [r8, #8]
 801c12a:	2800      	cmp	r0, #0
 801c12c:	d1e7      	bne.n	801c0fe <__sfvwrite_r+0xd6>
 801c12e:	e782      	b.n	801c036 <__sfvwrite_r+0xe>
 801c130:	f04f 0b00 	mov.w	fp, #0
 801c134:	f8df a180 	ldr.w	sl, [pc, #384]	; 801c2b8 <__sfvwrite_r+0x290>
 801c138:	46d9      	mov	r9, fp
 801c13a:	e7e0      	b.n	801c0fe <__sfvwrite_r+0xd6>
 801c13c:	e9d7 9a00 	ldrd	r9, sl, [r7]
 801c140:	3708      	adds	r7, #8
 801c142:	f1ba 0f00 	cmp.w	sl, #0
 801c146:	d0f9      	beq.n	801c13c <__sfvwrite_r+0x114>
 801c148:	89a3      	ldrh	r3, [r4, #12]
 801c14a:	68a2      	ldr	r2, [r4, #8]
 801c14c:	6820      	ldr	r0, [r4, #0]
 801c14e:	0599      	lsls	r1, r3, #22
 801c150:	d563      	bpl.n	801c21a <__sfvwrite_r+0x1f2>
 801c152:	4552      	cmp	r2, sl
 801c154:	d836      	bhi.n	801c1c4 <__sfvwrite_r+0x19c>
 801c156:	f413 6f90 	tst.w	r3, #1152	; 0x480
 801c15a:	d033      	beq.n	801c1c4 <__sfvwrite_r+0x19c>
 801c15c:	6921      	ldr	r1, [r4, #16]
 801c15e:	6965      	ldr	r5, [r4, #20]
 801c160:	eba0 0b01 	sub.w	fp, r0, r1
 801c164:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c168:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c16c:	f10b 0201 	add.w	r2, fp, #1
 801c170:	106d      	asrs	r5, r5, #1
 801c172:	4452      	add	r2, sl
 801c174:	4295      	cmp	r5, r2
 801c176:	bf38      	it	cc
 801c178:	4615      	movcc	r5, r2
 801c17a:	055b      	lsls	r3, r3, #21
 801c17c:	d53d      	bpl.n	801c1fa <__sfvwrite_r+0x1d2>
 801c17e:	4629      	mov	r1, r5
 801c180:	4630      	mov	r0, r6
 801c182:	f7f8 ff67 	bl	8015054 <_malloc_r>
 801c186:	b948      	cbnz	r0, 801c19c <__sfvwrite_r+0x174>
 801c188:	230c      	movs	r3, #12
 801c18a:	6033      	str	r3, [r6, #0]
 801c18c:	89a3      	ldrh	r3, [r4, #12]
 801c18e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c192:	81a3      	strh	r3, [r4, #12]
 801c194:	e7ad      	b.n	801c0f2 <__sfvwrite_r+0xca>
 801c196:	4699      	mov	r9, r3
 801c198:	469a      	mov	sl, r3
 801c19a:	e7d2      	b.n	801c142 <__sfvwrite_r+0x11a>
 801c19c:	465a      	mov	r2, fp
 801c19e:	6921      	ldr	r1, [r4, #16]
 801c1a0:	9001      	str	r0, [sp, #4]
 801c1a2:	f7f9 f9a7 	bl	80154f4 <memcpy>
 801c1a6:	89a2      	ldrh	r2, [r4, #12]
 801c1a8:	9b01      	ldr	r3, [sp, #4]
 801c1aa:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801c1ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801c1b2:	81a2      	strh	r2, [r4, #12]
 801c1b4:	6123      	str	r3, [r4, #16]
 801c1b6:	6165      	str	r5, [r4, #20]
 801c1b8:	445b      	add	r3, fp
 801c1ba:	eba5 050b 	sub.w	r5, r5, fp
 801c1be:	6023      	str	r3, [r4, #0]
 801c1c0:	4652      	mov	r2, sl
 801c1c2:	60a5      	str	r5, [r4, #8]
 801c1c4:	4552      	cmp	r2, sl
 801c1c6:	bf28      	it	cs
 801c1c8:	4652      	movcs	r2, sl
 801c1ca:	6820      	ldr	r0, [r4, #0]
 801c1cc:	9201      	str	r2, [sp, #4]
 801c1ce:	4649      	mov	r1, r9
 801c1d0:	f000 f896 	bl	801c300 <memmove>
 801c1d4:	68a3      	ldr	r3, [r4, #8]
 801c1d6:	9a01      	ldr	r2, [sp, #4]
 801c1d8:	1a9b      	subs	r3, r3, r2
 801c1da:	60a3      	str	r3, [r4, #8]
 801c1dc:	6823      	ldr	r3, [r4, #0]
 801c1de:	441a      	add	r2, r3
 801c1e0:	4655      	mov	r5, sl
 801c1e2:	6022      	str	r2, [r4, #0]
 801c1e4:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801c1e8:	44a9      	add	r9, r5
 801c1ea:	ebaa 0a05 	sub.w	sl, sl, r5
 801c1ee:	1b45      	subs	r5, r0, r5
 801c1f0:	f8c8 5008 	str.w	r5, [r8, #8]
 801c1f4:	2d00      	cmp	r5, #0
 801c1f6:	d1a4      	bne.n	801c142 <__sfvwrite_r+0x11a>
 801c1f8:	e71d      	b.n	801c036 <__sfvwrite_r+0xe>
 801c1fa:	462a      	mov	r2, r5
 801c1fc:	4630      	mov	r0, r6
 801c1fe:	f000 f8ab 	bl	801c358 <_realloc_r>
 801c202:	4603      	mov	r3, r0
 801c204:	2800      	cmp	r0, #0
 801c206:	d1d5      	bne.n	801c1b4 <__sfvwrite_r+0x18c>
 801c208:	6921      	ldr	r1, [r4, #16]
 801c20a:	4630      	mov	r0, r6
 801c20c:	f7fd fe28 	bl	8019e60 <_free_r>
 801c210:	89a3      	ldrh	r3, [r4, #12]
 801c212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801c216:	81a3      	strh	r3, [r4, #12]
 801c218:	e7b6      	b.n	801c188 <__sfvwrite_r+0x160>
 801c21a:	6923      	ldr	r3, [r4, #16]
 801c21c:	4283      	cmp	r3, r0
 801c21e:	d302      	bcc.n	801c226 <__sfvwrite_r+0x1fe>
 801c220:	6961      	ldr	r1, [r4, #20]
 801c222:	4551      	cmp	r1, sl
 801c224:	d915      	bls.n	801c252 <__sfvwrite_r+0x22a>
 801c226:	4552      	cmp	r2, sl
 801c228:	bf28      	it	cs
 801c22a:	4652      	movcs	r2, sl
 801c22c:	4649      	mov	r1, r9
 801c22e:	4615      	mov	r5, r2
 801c230:	f000 f866 	bl	801c300 <memmove>
 801c234:	68a3      	ldr	r3, [r4, #8]
 801c236:	6822      	ldr	r2, [r4, #0]
 801c238:	1b5b      	subs	r3, r3, r5
 801c23a:	442a      	add	r2, r5
 801c23c:	60a3      	str	r3, [r4, #8]
 801c23e:	6022      	str	r2, [r4, #0]
 801c240:	2b00      	cmp	r3, #0
 801c242:	d1cf      	bne.n	801c1e4 <__sfvwrite_r+0x1bc>
 801c244:	4621      	mov	r1, r4
 801c246:	4630      	mov	r0, r6
 801c248:	f7fd fd0e 	bl	8019c68 <_fflush_r>
 801c24c:	2800      	cmp	r0, #0
 801c24e:	d0c9      	beq.n	801c1e4 <__sfvwrite_r+0x1bc>
 801c250:	e79c      	b.n	801c18c <__sfvwrite_r+0x164>
 801c252:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801c256:	459a      	cmp	sl, r3
 801c258:	bf38      	it	cc
 801c25a:	4653      	movcc	r3, sl
 801c25c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801c25e:	fb93 f3f1 	sdiv	r3, r3, r1
 801c262:	464a      	mov	r2, r9
 801c264:	434b      	muls	r3, r1
 801c266:	4630      	mov	r0, r6
 801c268:	69e1      	ldr	r1, [r4, #28]
 801c26a:	47a8      	blx	r5
 801c26c:	1e05      	subs	r5, r0, #0
 801c26e:	dcb9      	bgt.n	801c1e4 <__sfvwrite_r+0x1bc>
 801c270:	e78c      	b.n	801c18c <__sfvwrite_r+0x164>
 801c272:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801c276:	2000      	movs	r0, #0
 801c278:	3708      	adds	r7, #8
 801c27a:	e6f3      	b.n	801c064 <__sfvwrite_r+0x3c>
 801c27c:	f10b 0901 	add.w	r9, fp, #1
 801c280:	e700      	b.n	801c084 <__sfvwrite_r+0x5c>
 801c282:	4293      	cmp	r3, r2
 801c284:	dc08      	bgt.n	801c298 <__sfvwrite_r+0x270>
 801c286:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801c288:	69e1      	ldr	r1, [r4, #28]
 801c28a:	4652      	mov	r2, sl
 801c28c:	4630      	mov	r0, r6
 801c28e:	47a8      	blx	r5
 801c290:	1e05      	subs	r5, r0, #0
 801c292:	f73f af13 	bgt.w	801c0bc <__sfvwrite_r+0x94>
 801c296:	e779      	b.n	801c18c <__sfvwrite_r+0x164>
 801c298:	4651      	mov	r1, sl
 801c29a:	9201      	str	r2, [sp, #4]
 801c29c:	f000 f830 	bl	801c300 <memmove>
 801c2a0:	9a01      	ldr	r2, [sp, #4]
 801c2a2:	68a3      	ldr	r3, [r4, #8]
 801c2a4:	1a9b      	subs	r3, r3, r2
 801c2a6:	60a3      	str	r3, [r4, #8]
 801c2a8:	6823      	ldr	r3, [r4, #0]
 801c2aa:	4413      	add	r3, r2
 801c2ac:	6023      	str	r3, [r4, #0]
 801c2ae:	4615      	mov	r5, r2
 801c2b0:	e704      	b.n	801c0bc <__sfvwrite_r+0x94>
 801c2b2:	2001      	movs	r0, #1
 801c2b4:	e70c      	b.n	801c0d0 <__sfvwrite_r+0xa8>
 801c2b6:	bf00      	nop
 801c2b8:	7ffffc00 	.word	0x7ffffc00

0801c2bc <_isatty_r>:
 801c2bc:	b538      	push	{r3, r4, r5, lr}
 801c2be:	4d06      	ldr	r5, [pc, #24]	; (801c2d8 <_isatty_r+0x1c>)
 801c2c0:	2300      	movs	r3, #0
 801c2c2:	4604      	mov	r4, r0
 801c2c4:	4608      	mov	r0, r1
 801c2c6:	602b      	str	r3, [r5, #0]
 801c2c8:	f7f7 ff4c 	bl	8014164 <_isatty>
 801c2cc:	1c43      	adds	r3, r0, #1
 801c2ce:	d102      	bne.n	801c2d6 <_isatty_r+0x1a>
 801c2d0:	682b      	ldr	r3, [r5, #0]
 801c2d2:	b103      	cbz	r3, 801c2d6 <_isatty_r+0x1a>
 801c2d4:	6023      	str	r3, [r4, #0]
 801c2d6:	bd38      	pop	{r3, r4, r5, pc}
 801c2d8:	200110a8 	.word	0x200110a8

0801c2dc <_lseek_r>:
 801c2dc:	b538      	push	{r3, r4, r5, lr}
 801c2de:	4d07      	ldr	r5, [pc, #28]	; (801c2fc <_lseek_r+0x20>)
 801c2e0:	4604      	mov	r4, r0
 801c2e2:	4608      	mov	r0, r1
 801c2e4:	4611      	mov	r1, r2
 801c2e6:	2200      	movs	r2, #0
 801c2e8:	602a      	str	r2, [r5, #0]
 801c2ea:	461a      	mov	r2, r3
 801c2ec:	f7f7 ff3c 	bl	8014168 <_lseek>
 801c2f0:	1c43      	adds	r3, r0, #1
 801c2f2:	d102      	bne.n	801c2fa <_lseek_r+0x1e>
 801c2f4:	682b      	ldr	r3, [r5, #0]
 801c2f6:	b103      	cbz	r3, 801c2fa <_lseek_r+0x1e>
 801c2f8:	6023      	str	r3, [r4, #0]
 801c2fa:	bd38      	pop	{r3, r4, r5, pc}
 801c2fc:	200110a8 	.word	0x200110a8

0801c300 <memmove>:
 801c300:	4288      	cmp	r0, r1
 801c302:	b510      	push	{r4, lr}
 801c304:	eb01 0402 	add.w	r4, r1, r2
 801c308:	d902      	bls.n	801c310 <memmove+0x10>
 801c30a:	4284      	cmp	r4, r0
 801c30c:	4623      	mov	r3, r4
 801c30e:	d807      	bhi.n	801c320 <memmove+0x20>
 801c310:	1e43      	subs	r3, r0, #1
 801c312:	42a1      	cmp	r1, r4
 801c314:	d008      	beq.n	801c328 <memmove+0x28>
 801c316:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c31a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c31e:	e7f8      	b.n	801c312 <memmove+0x12>
 801c320:	4402      	add	r2, r0
 801c322:	4601      	mov	r1, r0
 801c324:	428a      	cmp	r2, r1
 801c326:	d100      	bne.n	801c32a <memmove+0x2a>
 801c328:	bd10      	pop	{r4, pc}
 801c32a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c32e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c332:	e7f7      	b.n	801c324 <memmove+0x24>

0801c334 <_read_r>:
 801c334:	b538      	push	{r3, r4, r5, lr}
 801c336:	4d07      	ldr	r5, [pc, #28]	; (801c354 <_read_r+0x20>)
 801c338:	4604      	mov	r4, r0
 801c33a:	4608      	mov	r0, r1
 801c33c:	4611      	mov	r1, r2
 801c33e:	2200      	movs	r2, #0
 801c340:	602a      	str	r2, [r5, #0]
 801c342:	461a      	mov	r2, r3
 801c344:	f7f7 feca 	bl	80140dc <_read>
 801c348:	1c43      	adds	r3, r0, #1
 801c34a:	d102      	bne.n	801c352 <_read_r+0x1e>
 801c34c:	682b      	ldr	r3, [r5, #0]
 801c34e:	b103      	cbz	r3, 801c352 <_read_r+0x1e>
 801c350:	6023      	str	r3, [r4, #0]
 801c352:	bd38      	pop	{r3, r4, r5, pc}
 801c354:	200110a8 	.word	0x200110a8

0801c358 <_realloc_r>:
 801c358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c35c:	4681      	mov	r9, r0
 801c35e:	460c      	mov	r4, r1
 801c360:	b929      	cbnz	r1, 801c36e <_realloc_r+0x16>
 801c362:	4611      	mov	r1, r2
 801c364:	b003      	add	sp, #12
 801c366:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c36a:	f7f8 be73 	b.w	8015054 <_malloc_r>
 801c36e:	9201      	str	r2, [sp, #4]
 801c370:	f7f9 f8d6 	bl	8015520 <__malloc_lock>
 801c374:	9a01      	ldr	r2, [sp, #4]
 801c376:	f102 080b 	add.w	r8, r2, #11
 801c37a:	f1b8 0f16 	cmp.w	r8, #22
 801c37e:	d90b      	bls.n	801c398 <_realloc_r+0x40>
 801c380:	f038 0807 	bics.w	r8, r8, #7
 801c384:	d50a      	bpl.n	801c39c <_realloc_r+0x44>
 801c386:	230c      	movs	r3, #12
 801c388:	f8c9 3000 	str.w	r3, [r9]
 801c38c:	f04f 0b00 	mov.w	fp, #0
 801c390:	4658      	mov	r0, fp
 801c392:	b003      	add	sp, #12
 801c394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c398:	f04f 0810 	mov.w	r8, #16
 801c39c:	4590      	cmp	r8, r2
 801c39e:	d3f2      	bcc.n	801c386 <_realloc_r+0x2e>
 801c3a0:	f854 5c04 	ldr.w	r5, [r4, #-4]
 801c3a4:	f025 0603 	bic.w	r6, r5, #3
 801c3a8:	45b0      	cmp	r8, r6
 801c3aa:	f1a4 0a08 	sub.w	sl, r4, #8
 801c3ae:	f340 8170 	ble.w	801c692 <_realloc_r+0x33a>
 801c3b2:	48a9      	ldr	r0, [pc, #676]	; (801c658 <_realloc_r+0x300>)
 801c3b4:	9001      	str	r0, [sp, #4]
 801c3b6:	f8d0 c008 	ldr.w	ip, [r0, #8]
 801c3ba:	eb0a 0306 	add.w	r3, sl, r6
 801c3be:	459c      	cmp	ip, r3
 801c3c0:	6859      	ldr	r1, [r3, #4]
 801c3c2:	d005      	beq.n	801c3d0 <_realloc_r+0x78>
 801c3c4:	f021 0001 	bic.w	r0, r1, #1
 801c3c8:	4418      	add	r0, r3
 801c3ca:	6840      	ldr	r0, [r0, #4]
 801c3cc:	07c7      	lsls	r7, r0, #31
 801c3ce:	d427      	bmi.n	801c420 <_realloc_r+0xc8>
 801c3d0:	f021 0103 	bic.w	r1, r1, #3
 801c3d4:	459c      	cmp	ip, r3
 801c3d6:	eb06 0701 	add.w	r7, r6, r1
 801c3da:	d119      	bne.n	801c410 <_realloc_r+0xb8>
 801c3dc:	f108 0010 	add.w	r0, r8, #16
 801c3e0:	42b8      	cmp	r0, r7
 801c3e2:	dc1f      	bgt.n	801c424 <_realloc_r+0xcc>
 801c3e4:	eb0a 0308 	add.w	r3, sl, r8
 801c3e8:	9a01      	ldr	r2, [sp, #4]
 801c3ea:	eba7 0708 	sub.w	r7, r7, r8
 801c3ee:	f047 0701 	orr.w	r7, r7, #1
 801c3f2:	6093      	str	r3, [r2, #8]
 801c3f4:	605f      	str	r7, [r3, #4]
 801c3f6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801c3fa:	f003 0301 	and.w	r3, r3, #1
 801c3fe:	ea43 0308 	orr.w	r3, r3, r8
 801c402:	f844 3c04 	str.w	r3, [r4, #-4]
 801c406:	4648      	mov	r0, r9
 801c408:	f7f9 f890 	bl	801552c <__malloc_unlock>
 801c40c:	46a3      	mov	fp, r4
 801c40e:	e7bf      	b.n	801c390 <_realloc_r+0x38>
 801c410:	45b8      	cmp	r8, r7
 801c412:	dc07      	bgt.n	801c424 <_realloc_r+0xcc>
 801c414:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 801c418:	60da      	str	r2, [r3, #12]
 801c41a:	6093      	str	r3, [r2, #8]
 801c41c:	4655      	mov	r5, sl
 801c41e:	e07f      	b.n	801c520 <_realloc_r+0x1c8>
 801c420:	2100      	movs	r1, #0
 801c422:	460b      	mov	r3, r1
 801c424:	07e8      	lsls	r0, r5, #31
 801c426:	f100 80e5 	bmi.w	801c5f4 <_realloc_r+0x29c>
 801c42a:	f854 5c08 	ldr.w	r5, [r4, #-8]
 801c42e:	ebaa 0505 	sub.w	r5, sl, r5
 801c432:	6868      	ldr	r0, [r5, #4]
 801c434:	f020 0003 	bic.w	r0, r0, #3
 801c438:	eb00 0b06 	add.w	fp, r0, r6
 801c43c:	2b00      	cmp	r3, #0
 801c43e:	f000 80a5 	beq.w	801c58c <_realloc_r+0x234>
 801c442:	459c      	cmp	ip, r3
 801c444:	eb01 070b 	add.w	r7, r1, fp
 801c448:	d14a      	bne.n	801c4e0 <_realloc_r+0x188>
 801c44a:	f108 0310 	add.w	r3, r8, #16
 801c44e:	42bb      	cmp	r3, r7
 801c450:	f300 809c 	bgt.w	801c58c <_realloc_r+0x234>
 801c454:	46ab      	mov	fp, r5
 801c456:	68eb      	ldr	r3, [r5, #12]
 801c458:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 801c45c:	60d3      	str	r3, [r2, #12]
 801c45e:	609a      	str	r2, [r3, #8]
 801c460:	1f32      	subs	r2, r6, #4
 801c462:	2a24      	cmp	r2, #36	; 0x24
 801c464:	d837      	bhi.n	801c4d6 <_realloc_r+0x17e>
 801c466:	2a13      	cmp	r2, #19
 801c468:	d933      	bls.n	801c4d2 <_realloc_r+0x17a>
 801c46a:	6823      	ldr	r3, [r4, #0]
 801c46c:	60ab      	str	r3, [r5, #8]
 801c46e:	6863      	ldr	r3, [r4, #4]
 801c470:	60eb      	str	r3, [r5, #12]
 801c472:	2a1b      	cmp	r2, #27
 801c474:	d81b      	bhi.n	801c4ae <_realloc_r+0x156>
 801c476:	3408      	adds	r4, #8
 801c478:	f105 0310 	add.w	r3, r5, #16
 801c47c:	6822      	ldr	r2, [r4, #0]
 801c47e:	601a      	str	r2, [r3, #0]
 801c480:	6862      	ldr	r2, [r4, #4]
 801c482:	605a      	str	r2, [r3, #4]
 801c484:	68a2      	ldr	r2, [r4, #8]
 801c486:	609a      	str	r2, [r3, #8]
 801c488:	eb05 0308 	add.w	r3, r5, r8
 801c48c:	9a01      	ldr	r2, [sp, #4]
 801c48e:	eba7 0708 	sub.w	r7, r7, r8
 801c492:	f047 0701 	orr.w	r7, r7, #1
 801c496:	6093      	str	r3, [r2, #8]
 801c498:	605f      	str	r7, [r3, #4]
 801c49a:	686b      	ldr	r3, [r5, #4]
 801c49c:	f003 0301 	and.w	r3, r3, #1
 801c4a0:	ea43 0308 	orr.w	r3, r3, r8
 801c4a4:	606b      	str	r3, [r5, #4]
 801c4a6:	4648      	mov	r0, r9
 801c4a8:	f7f9 f840 	bl	801552c <__malloc_unlock>
 801c4ac:	e770      	b.n	801c390 <_realloc_r+0x38>
 801c4ae:	68a3      	ldr	r3, [r4, #8]
 801c4b0:	612b      	str	r3, [r5, #16]
 801c4b2:	68e3      	ldr	r3, [r4, #12]
 801c4b4:	616b      	str	r3, [r5, #20]
 801c4b6:	2a24      	cmp	r2, #36	; 0x24
 801c4b8:	bf01      	itttt	eq
 801c4ba:	6923      	ldreq	r3, [r4, #16]
 801c4bc:	61ab      	streq	r3, [r5, #24]
 801c4be:	6962      	ldreq	r2, [r4, #20]
 801c4c0:	61ea      	streq	r2, [r5, #28]
 801c4c2:	bf19      	ittee	ne
 801c4c4:	3410      	addne	r4, #16
 801c4c6:	f105 0318 	addne.w	r3, r5, #24
 801c4ca:	f105 0320 	addeq.w	r3, r5, #32
 801c4ce:	3418      	addeq	r4, #24
 801c4d0:	e7d4      	b.n	801c47c <_realloc_r+0x124>
 801c4d2:	465b      	mov	r3, fp
 801c4d4:	e7d2      	b.n	801c47c <_realloc_r+0x124>
 801c4d6:	4621      	mov	r1, r4
 801c4d8:	4658      	mov	r0, fp
 801c4da:	f7ff ff11 	bl	801c300 <memmove>
 801c4de:	e7d3      	b.n	801c488 <_realloc_r+0x130>
 801c4e0:	45b8      	cmp	r8, r7
 801c4e2:	dc53      	bgt.n	801c58c <_realloc_r+0x234>
 801c4e4:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 801c4e8:	4628      	mov	r0, r5
 801c4ea:	60da      	str	r2, [r3, #12]
 801c4ec:	6093      	str	r3, [r2, #8]
 801c4ee:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801c4f2:	68eb      	ldr	r3, [r5, #12]
 801c4f4:	60d3      	str	r3, [r2, #12]
 801c4f6:	609a      	str	r2, [r3, #8]
 801c4f8:	1f32      	subs	r2, r6, #4
 801c4fa:	2a24      	cmp	r2, #36	; 0x24
 801c4fc:	d842      	bhi.n	801c584 <_realloc_r+0x22c>
 801c4fe:	2a13      	cmp	r2, #19
 801c500:	d908      	bls.n	801c514 <_realloc_r+0x1bc>
 801c502:	6823      	ldr	r3, [r4, #0]
 801c504:	60ab      	str	r3, [r5, #8]
 801c506:	6863      	ldr	r3, [r4, #4]
 801c508:	60eb      	str	r3, [r5, #12]
 801c50a:	2a1b      	cmp	r2, #27
 801c50c:	d828      	bhi.n	801c560 <_realloc_r+0x208>
 801c50e:	3408      	adds	r4, #8
 801c510:	f105 0010 	add.w	r0, r5, #16
 801c514:	6823      	ldr	r3, [r4, #0]
 801c516:	6003      	str	r3, [r0, #0]
 801c518:	6863      	ldr	r3, [r4, #4]
 801c51a:	6043      	str	r3, [r0, #4]
 801c51c:	68a3      	ldr	r3, [r4, #8]
 801c51e:	6083      	str	r3, [r0, #8]
 801c520:	686a      	ldr	r2, [r5, #4]
 801c522:	eba7 0008 	sub.w	r0, r7, r8
 801c526:	280f      	cmp	r0, #15
 801c528:	f002 0201 	and.w	r2, r2, #1
 801c52c:	eb05 0307 	add.w	r3, r5, r7
 801c530:	f240 80b1 	bls.w	801c696 <_realloc_r+0x33e>
 801c534:	eb05 0108 	add.w	r1, r5, r8
 801c538:	ea48 0202 	orr.w	r2, r8, r2
 801c53c:	f040 0001 	orr.w	r0, r0, #1
 801c540:	606a      	str	r2, [r5, #4]
 801c542:	6048      	str	r0, [r1, #4]
 801c544:	685a      	ldr	r2, [r3, #4]
 801c546:	f042 0201 	orr.w	r2, r2, #1
 801c54a:	605a      	str	r2, [r3, #4]
 801c54c:	3108      	adds	r1, #8
 801c54e:	4648      	mov	r0, r9
 801c550:	f7fd fc86 	bl	8019e60 <_free_r>
 801c554:	4648      	mov	r0, r9
 801c556:	f7f8 ffe9 	bl	801552c <__malloc_unlock>
 801c55a:	f105 0b08 	add.w	fp, r5, #8
 801c55e:	e717      	b.n	801c390 <_realloc_r+0x38>
 801c560:	68a3      	ldr	r3, [r4, #8]
 801c562:	612b      	str	r3, [r5, #16]
 801c564:	68e3      	ldr	r3, [r4, #12]
 801c566:	616b      	str	r3, [r5, #20]
 801c568:	2a24      	cmp	r2, #36	; 0x24
 801c56a:	bf01      	itttt	eq
 801c56c:	6923      	ldreq	r3, [r4, #16]
 801c56e:	61ab      	streq	r3, [r5, #24]
 801c570:	6963      	ldreq	r3, [r4, #20]
 801c572:	61eb      	streq	r3, [r5, #28]
 801c574:	bf19      	ittee	ne
 801c576:	3410      	addne	r4, #16
 801c578:	f105 0018 	addne.w	r0, r5, #24
 801c57c:	f105 0020 	addeq.w	r0, r5, #32
 801c580:	3418      	addeq	r4, #24
 801c582:	e7c7      	b.n	801c514 <_realloc_r+0x1bc>
 801c584:	4621      	mov	r1, r4
 801c586:	f7ff febb 	bl	801c300 <memmove>
 801c58a:	e7c9      	b.n	801c520 <_realloc_r+0x1c8>
 801c58c:	45d8      	cmp	r8, fp
 801c58e:	dc31      	bgt.n	801c5f4 <_realloc_r+0x29c>
 801c590:	4628      	mov	r0, r5
 801c592:	68eb      	ldr	r3, [r5, #12]
 801c594:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801c598:	60d3      	str	r3, [r2, #12]
 801c59a:	609a      	str	r2, [r3, #8]
 801c59c:	1f32      	subs	r2, r6, #4
 801c59e:	2a24      	cmp	r2, #36	; 0x24
 801c5a0:	d824      	bhi.n	801c5ec <_realloc_r+0x294>
 801c5a2:	2a13      	cmp	r2, #19
 801c5a4:	d908      	bls.n	801c5b8 <_realloc_r+0x260>
 801c5a6:	6823      	ldr	r3, [r4, #0]
 801c5a8:	60ab      	str	r3, [r5, #8]
 801c5aa:	6863      	ldr	r3, [r4, #4]
 801c5ac:	60eb      	str	r3, [r5, #12]
 801c5ae:	2a1b      	cmp	r2, #27
 801c5b0:	d80a      	bhi.n	801c5c8 <_realloc_r+0x270>
 801c5b2:	3408      	adds	r4, #8
 801c5b4:	f105 0010 	add.w	r0, r5, #16
 801c5b8:	6823      	ldr	r3, [r4, #0]
 801c5ba:	6003      	str	r3, [r0, #0]
 801c5bc:	6863      	ldr	r3, [r4, #4]
 801c5be:	6043      	str	r3, [r0, #4]
 801c5c0:	68a3      	ldr	r3, [r4, #8]
 801c5c2:	6083      	str	r3, [r0, #8]
 801c5c4:	465f      	mov	r7, fp
 801c5c6:	e7ab      	b.n	801c520 <_realloc_r+0x1c8>
 801c5c8:	68a3      	ldr	r3, [r4, #8]
 801c5ca:	612b      	str	r3, [r5, #16]
 801c5cc:	68e3      	ldr	r3, [r4, #12]
 801c5ce:	616b      	str	r3, [r5, #20]
 801c5d0:	2a24      	cmp	r2, #36	; 0x24
 801c5d2:	bf01      	itttt	eq
 801c5d4:	6923      	ldreq	r3, [r4, #16]
 801c5d6:	61ab      	streq	r3, [r5, #24]
 801c5d8:	6963      	ldreq	r3, [r4, #20]
 801c5da:	61eb      	streq	r3, [r5, #28]
 801c5dc:	bf19      	ittee	ne
 801c5de:	3410      	addne	r4, #16
 801c5e0:	f105 0018 	addne.w	r0, r5, #24
 801c5e4:	f105 0020 	addeq.w	r0, r5, #32
 801c5e8:	3418      	addeq	r4, #24
 801c5ea:	e7e5      	b.n	801c5b8 <_realloc_r+0x260>
 801c5ec:	4621      	mov	r1, r4
 801c5ee:	f7ff fe87 	bl	801c300 <memmove>
 801c5f2:	e7e7      	b.n	801c5c4 <_realloc_r+0x26c>
 801c5f4:	4611      	mov	r1, r2
 801c5f6:	4648      	mov	r0, r9
 801c5f8:	f7f8 fd2c 	bl	8015054 <_malloc_r>
 801c5fc:	4683      	mov	fp, r0
 801c5fe:	2800      	cmp	r0, #0
 801c600:	f43f af51 	beq.w	801c4a6 <_realloc_r+0x14e>
 801c604:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801c608:	f023 0301 	bic.w	r3, r3, #1
 801c60c:	4453      	add	r3, sl
 801c60e:	f1a0 0208 	sub.w	r2, r0, #8
 801c612:	4293      	cmp	r3, r2
 801c614:	d105      	bne.n	801c622 <_realloc_r+0x2ca>
 801c616:	f850 7c04 	ldr.w	r7, [r0, #-4]
 801c61a:	f027 0703 	bic.w	r7, r7, #3
 801c61e:	4437      	add	r7, r6
 801c620:	e6fc      	b.n	801c41c <_realloc_r+0xc4>
 801c622:	1f32      	subs	r2, r6, #4
 801c624:	2a24      	cmp	r2, #36	; 0x24
 801c626:	d830      	bhi.n	801c68a <_realloc_r+0x332>
 801c628:	2a13      	cmp	r2, #19
 801c62a:	d92b      	bls.n	801c684 <_realloc_r+0x32c>
 801c62c:	6823      	ldr	r3, [r4, #0]
 801c62e:	6003      	str	r3, [r0, #0]
 801c630:	6863      	ldr	r3, [r4, #4]
 801c632:	6043      	str	r3, [r0, #4]
 801c634:	2a1b      	cmp	r2, #27
 801c636:	d811      	bhi.n	801c65c <_realloc_r+0x304>
 801c638:	f104 0208 	add.w	r2, r4, #8
 801c63c:	f100 0308 	add.w	r3, r0, #8
 801c640:	6811      	ldr	r1, [r2, #0]
 801c642:	6019      	str	r1, [r3, #0]
 801c644:	6851      	ldr	r1, [r2, #4]
 801c646:	6059      	str	r1, [r3, #4]
 801c648:	6892      	ldr	r2, [r2, #8]
 801c64a:	609a      	str	r2, [r3, #8]
 801c64c:	4621      	mov	r1, r4
 801c64e:	4648      	mov	r0, r9
 801c650:	f7fd fc06 	bl	8019e60 <_free_r>
 801c654:	e727      	b.n	801c4a6 <_realloc_r+0x14e>
 801c656:	bf00      	nop
 801c658:	20003cb0 	.word	0x20003cb0
 801c65c:	68a3      	ldr	r3, [r4, #8]
 801c65e:	6083      	str	r3, [r0, #8]
 801c660:	68e3      	ldr	r3, [r4, #12]
 801c662:	60c3      	str	r3, [r0, #12]
 801c664:	2a24      	cmp	r2, #36	; 0x24
 801c666:	bf01      	itttt	eq
 801c668:	6923      	ldreq	r3, [r4, #16]
 801c66a:	6103      	streq	r3, [r0, #16]
 801c66c:	6961      	ldreq	r1, [r4, #20]
 801c66e:	6141      	streq	r1, [r0, #20]
 801c670:	bf19      	ittee	ne
 801c672:	f104 0210 	addne.w	r2, r4, #16
 801c676:	f100 0310 	addne.w	r3, r0, #16
 801c67a:	f104 0218 	addeq.w	r2, r4, #24
 801c67e:	f100 0318 	addeq.w	r3, r0, #24
 801c682:	e7dd      	b.n	801c640 <_realloc_r+0x2e8>
 801c684:	4603      	mov	r3, r0
 801c686:	4622      	mov	r2, r4
 801c688:	e7da      	b.n	801c640 <_realloc_r+0x2e8>
 801c68a:	4621      	mov	r1, r4
 801c68c:	f7ff fe38 	bl	801c300 <memmove>
 801c690:	e7dc      	b.n	801c64c <_realloc_r+0x2f4>
 801c692:	4637      	mov	r7, r6
 801c694:	e6c2      	b.n	801c41c <_realloc_r+0xc4>
 801c696:	4317      	orrs	r7, r2
 801c698:	606f      	str	r7, [r5, #4]
 801c69a:	685a      	ldr	r2, [r3, #4]
 801c69c:	f042 0201 	orr.w	r2, r2, #1
 801c6a0:	605a      	str	r2, [r3, #4]
 801c6a2:	e757      	b.n	801c554 <_realloc_r+0x1fc>

0801c6a4 <__swbuf_r>:
 801c6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c6a6:	460e      	mov	r6, r1
 801c6a8:	4614      	mov	r4, r2
 801c6aa:	4605      	mov	r5, r0
 801c6ac:	b118      	cbz	r0, 801c6b6 <__swbuf_r+0x12>
 801c6ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801c6b0:	b90b      	cbnz	r3, 801c6b6 <__swbuf_r+0x12>
 801c6b2:	f7fd fb45 	bl	8019d40 <__sinit>
 801c6b6:	69a3      	ldr	r3, [r4, #24]
 801c6b8:	60a3      	str	r3, [r4, #8]
 801c6ba:	89a3      	ldrh	r3, [r4, #12]
 801c6bc:	0719      	lsls	r1, r3, #28
 801c6be:	d529      	bpl.n	801c714 <__swbuf_r+0x70>
 801c6c0:	6923      	ldr	r3, [r4, #16]
 801c6c2:	b33b      	cbz	r3, 801c714 <__swbuf_r+0x70>
 801c6c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c6c8:	b2f6      	uxtb	r6, r6
 801c6ca:	049a      	lsls	r2, r3, #18
 801c6cc:	4637      	mov	r7, r6
 801c6ce:	d52a      	bpl.n	801c726 <__swbuf_r+0x82>
 801c6d0:	6823      	ldr	r3, [r4, #0]
 801c6d2:	6920      	ldr	r0, [r4, #16]
 801c6d4:	1a18      	subs	r0, r3, r0
 801c6d6:	6963      	ldr	r3, [r4, #20]
 801c6d8:	4283      	cmp	r3, r0
 801c6da:	dc04      	bgt.n	801c6e6 <__swbuf_r+0x42>
 801c6dc:	4621      	mov	r1, r4
 801c6de:	4628      	mov	r0, r5
 801c6e0:	f7fd fac2 	bl	8019c68 <_fflush_r>
 801c6e4:	b9e0      	cbnz	r0, 801c720 <__swbuf_r+0x7c>
 801c6e6:	68a3      	ldr	r3, [r4, #8]
 801c6e8:	3b01      	subs	r3, #1
 801c6ea:	60a3      	str	r3, [r4, #8]
 801c6ec:	6823      	ldr	r3, [r4, #0]
 801c6ee:	1c5a      	adds	r2, r3, #1
 801c6f0:	6022      	str	r2, [r4, #0]
 801c6f2:	701e      	strb	r6, [r3, #0]
 801c6f4:	6962      	ldr	r2, [r4, #20]
 801c6f6:	1c43      	adds	r3, r0, #1
 801c6f8:	429a      	cmp	r2, r3
 801c6fa:	d004      	beq.n	801c706 <__swbuf_r+0x62>
 801c6fc:	89a3      	ldrh	r3, [r4, #12]
 801c6fe:	07db      	lsls	r3, r3, #31
 801c700:	d506      	bpl.n	801c710 <__swbuf_r+0x6c>
 801c702:	2e0a      	cmp	r6, #10
 801c704:	d104      	bne.n	801c710 <__swbuf_r+0x6c>
 801c706:	4621      	mov	r1, r4
 801c708:	4628      	mov	r0, r5
 801c70a:	f7fd faad 	bl	8019c68 <_fflush_r>
 801c70e:	b938      	cbnz	r0, 801c720 <__swbuf_r+0x7c>
 801c710:	4638      	mov	r0, r7
 801c712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c714:	4621      	mov	r1, r4
 801c716:	4628      	mov	r0, r5
 801c718:	f7fc fb48 	bl	8018dac <__swsetup_r>
 801c71c:	2800      	cmp	r0, #0
 801c71e:	d0d1      	beq.n	801c6c4 <__swbuf_r+0x20>
 801c720:	f04f 37ff 	mov.w	r7, #4294967295
 801c724:	e7f4      	b.n	801c710 <__swbuf_r+0x6c>
 801c726:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801c72a:	81a3      	strh	r3, [r4, #12]
 801c72c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c72e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801c732:	6663      	str	r3, [r4, #100]	; 0x64
 801c734:	e7cc      	b.n	801c6d0 <__swbuf_r+0x2c>
	...

0801c738 <_wcrtomb_r>:
 801c738:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c73a:	4c09      	ldr	r4, [pc, #36]	; (801c760 <_wcrtomb_r+0x28>)
 801c73c:	b085      	sub	sp, #20
 801c73e:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 801c742:	4605      	mov	r5, r0
 801c744:	461e      	mov	r6, r3
 801c746:	b909      	cbnz	r1, 801c74c <_wcrtomb_r+0x14>
 801c748:	460a      	mov	r2, r1
 801c74a:	a901      	add	r1, sp, #4
 801c74c:	47b8      	blx	r7
 801c74e:	1c43      	adds	r3, r0, #1
 801c750:	bf01      	itttt	eq
 801c752:	2300      	moveq	r3, #0
 801c754:	6033      	streq	r3, [r6, #0]
 801c756:	238a      	moveq	r3, #138	; 0x8a
 801c758:	602b      	streq	r3, [r5, #0]
 801c75a:	b005      	add	sp, #20
 801c75c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c75e:	bf00      	nop
 801c760:	200040c8 	.word	0x200040c8

0801c764 <abort>:
 801c764:	b508      	push	{r3, lr}
 801c766:	2006      	movs	r0, #6
 801c768:	f000 f82c 	bl	801c7c4 <raise>
 801c76c:	2001      	movs	r0, #1
 801c76e:	f7f7 fcaf 	bl	80140d0 <_exit>

0801c772 <_raise_r>:
 801c772:	291f      	cmp	r1, #31
 801c774:	b538      	push	{r3, r4, r5, lr}
 801c776:	4604      	mov	r4, r0
 801c778:	460d      	mov	r5, r1
 801c77a:	d904      	bls.n	801c786 <_raise_r+0x14>
 801c77c:	2316      	movs	r3, #22
 801c77e:	6003      	str	r3, [r0, #0]
 801c780:	f04f 30ff 	mov.w	r0, #4294967295
 801c784:	bd38      	pop	{r3, r4, r5, pc}
 801c786:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 801c78a:	b112      	cbz	r2, 801c792 <_raise_r+0x20>
 801c78c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c790:	b94b      	cbnz	r3, 801c7a6 <_raise_r+0x34>
 801c792:	4620      	mov	r0, r4
 801c794:	f000 f830 	bl	801c7f8 <_getpid_r>
 801c798:	462a      	mov	r2, r5
 801c79a:	4601      	mov	r1, r0
 801c79c:	4620      	mov	r0, r4
 801c79e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c7a2:	f000 b817 	b.w	801c7d4 <_kill_r>
 801c7a6:	2b01      	cmp	r3, #1
 801c7a8:	d00a      	beq.n	801c7c0 <_raise_r+0x4e>
 801c7aa:	1c59      	adds	r1, r3, #1
 801c7ac:	d103      	bne.n	801c7b6 <_raise_r+0x44>
 801c7ae:	2316      	movs	r3, #22
 801c7b0:	6003      	str	r3, [r0, #0]
 801c7b2:	2001      	movs	r0, #1
 801c7b4:	e7e6      	b.n	801c784 <_raise_r+0x12>
 801c7b6:	2400      	movs	r4, #0
 801c7b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c7bc:	4628      	mov	r0, r5
 801c7be:	4798      	blx	r3
 801c7c0:	2000      	movs	r0, #0
 801c7c2:	e7df      	b.n	801c784 <_raise_r+0x12>

0801c7c4 <raise>:
 801c7c4:	4b02      	ldr	r3, [pc, #8]	; (801c7d0 <raise+0xc>)
 801c7c6:	4601      	mov	r1, r0
 801c7c8:	6818      	ldr	r0, [r3, #0]
 801c7ca:	f7ff bfd2 	b.w	801c772 <_raise_r>
 801c7ce:	bf00      	nop
 801c7d0:	20003880 	.word	0x20003880

0801c7d4 <_kill_r>:
 801c7d4:	b538      	push	{r3, r4, r5, lr}
 801c7d6:	4d07      	ldr	r5, [pc, #28]	; (801c7f4 <_kill_r+0x20>)
 801c7d8:	2300      	movs	r3, #0
 801c7da:	4604      	mov	r4, r0
 801c7dc:	4608      	mov	r0, r1
 801c7de:	4611      	mov	r1, r2
 801c7e0:	602b      	str	r3, [r5, #0]
 801c7e2:	f7f7 fc6d 	bl	80140c0 <_kill>
 801c7e6:	1c43      	adds	r3, r0, #1
 801c7e8:	d102      	bne.n	801c7f0 <_kill_r+0x1c>
 801c7ea:	682b      	ldr	r3, [r5, #0]
 801c7ec:	b103      	cbz	r3, 801c7f0 <_kill_r+0x1c>
 801c7ee:	6023      	str	r3, [r4, #0]
 801c7f0:	bd38      	pop	{r3, r4, r5, pc}
 801c7f2:	bf00      	nop
 801c7f4:	200110a8 	.word	0x200110a8

0801c7f8 <_getpid_r>:
 801c7f8:	f7f7 bc60 	b.w	80140bc <_getpid>

0801c7fc <_init>:
 801c7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7fe:	bf00      	nop
 801c800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c802:	bc08      	pop	{r3}
 801c804:	469e      	mov	lr, r3
 801c806:	4770      	bx	lr

0801c808 <_fini>:
 801c808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c80a:	bf00      	nop
 801c80c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c80e:	bc08      	pop	{r3}
 801c810:	469e      	mov	lr, r3
 801c812:	4770      	bx	lr
